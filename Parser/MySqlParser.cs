//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySqlParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestAntlr.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MySqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IN=76, INDEX=77, INFILE=78, INNER=79, 
		INOUT=80, INSERT=81, INTERVAL=82, INTO=83, IS=84, ITERATE=85, JOIN=86, 
		KEY=87, KEYS=88, KILL=89, LEADING=90, LEAVE=91, LEFT=92, LIKE=93, LIMIT=94, 
		LINEAR=95, LINES=96, LOAD=97, LOCK=98, LOOP=99, LOW_PRIORITY=100, MASTER_BIND=101, 
		MASTER_SSL_VERIFY_SERVER_CERT=102, MATCH=103, MAXVALUE=104, MODIFIES=105, 
		NATURAL=106, NOT=107, NO_WRITE_TO_BINLOG=108, NULL_LITERAL=109, NUMBER=110, 
		ON=111, OPTIMIZE=112, OPTION=113, OPTIONALLY=114, OR=115, ORDER=116, OUT=117, 
		OVER=118, OUTER=119, OUTFILE=120, PARTITION=121, PRIMARY=122, PROCEDURE=123, 
		PURGE=124, RANGE=125, READ=126, READS=127, REFERENCES=128, REGEXP=129, 
		RELEASE=130, RENAME=131, REPEAT=132, REPLACE=133, REQUIRE=134, RESIGNAL=135, 
		RESTRICT=136, RETAIN=137, RETURN=138, REVOKE=139, RIGHT=140, RLIKE=141, 
		SCHEMA=142, SCHEMAS=143, SELECT=144, SET=145, SEPARATOR=146, SHOW=147, 
		SIGNAL=148, SPATIAL=149, SQL=150, SQLEXCEPTION=151, SQLSTATE=152, SQLWARNING=153, 
		SQL_BIG_RESULT=154, SQL_CALC_FOUND_ROWS=155, SQL_SMALL_RESULT=156, SSL=157, 
		STACKED=158, STARTING=159, STRAIGHT_JOIN=160, TABLE=161, TERMINATED=162, 
		THEN=163, TO=164, TRAILING=165, TRIGGER=166, TRUE=167, UNDO=168, UNION=169, 
		UNIQUE=170, UNLOCK=171, UNSIGNED=172, UPDATE=173, USAGE=174, USE=175, 
		USING=176, VALUES=177, WHEN=178, WHERE=179, WHILE=180, WITH=181, WRITE=182, 
		XOR=183, ZEROFILL=184, TINYINT=185, SMALLINT=186, MEDIUMINT=187, MIDDLEINT=188, 
		INT=189, INT1=190, INT2=191, INT3=192, INT4=193, INT8=194, INTEGER=195, 
		BIGINT=196, REAL=197, DOUBLE=198, PRECISION=199, FLOAT=200, FLOAT4=201, 
		FLOAT8=202, DECIMAL=203, DEC=204, NUMERIC=205, DATE=206, TIME=207, TIMESTAMP=208, 
		DATETIME=209, YEAR=210, CHAR=211, VARCHAR=212, NVARCHAR=213, NATIONAL=214, 
		BINARY=215, VARBINARY=216, TINYBLOB=217, BLOB=218, MEDIUMBLOB=219, LONG=220, 
		LONGBLOB=221, TINYTEXT=222, TEXT=223, MEDIUMTEXT=224, LONGTEXT=225, ENUM=226, 
		VARYING=227, SERIAL=228, YEAR_MONTH=229, DAY_HOUR=230, DAY_MINUTE=231, 
		DAY_SECOND=232, HOUR_MINUTE=233, HOUR_SECOND=234, MINUTE_SECOND=235, SECOND_MICROSECOND=236, 
		MINUTE_MICROSECOND=237, HOUR_MICROSECOND=238, DAY_MICROSECOND=239, JSON_ARRAY=240, 
		JSON_OBJECT=241, JSON_QUOTE=242, JSON_CONTAINS=243, JSON_CONTAINS_PATH=244, 
		JSON_EXTRACT=245, JSON_KEYS=246, JSON_OVERLAPS=247, JSON_SEARCH=248, JSON_VALUE=249, 
		JSON_ARRAY_APPEND=250, JSON_ARRAY_INSERT=251, JSON_INSERT=252, JSON_MERGE=253, 
		JSON_MERGE_PATCH=254, JSON_MERGE_PRESERVE=255, JSON_REMOVE=256, JSON_REPLACE=257, 
		JSON_SET=258, JSON_UNQUOTE=259, JSON_DEPTH=260, JSON_LENGTH=261, JSON_TYPE=262, 
		JSON_VALID=263, JSON_TABLE=264, JSON_SCHEMA_VALID=265, JSON_SCHEMA_VALIDATION_REPORT=266, 
		JSON_PRETTY=267, JSON_STORAGE_FREE=268, JSON_STORAGE_SIZE=269, JSON_ARRAYAGG=270, 
		JSON_OBJECTAGG=271, AVG=272, BIT_AND=273, BIT_OR=274, BIT_XOR=275, COUNT=276, 
		CUME_DIST=277, DENSE_RANK=278, FIRST_VALUE=279, GROUP_CONCAT=280, LAG=281, 
		LAST_VALUE=282, LEAD=283, MAX=284, MIN=285, NTILE=286, NTH_VALUE=287, 
		PERCENT_RANK=288, RANK=289, ROW_NUMBER=290, STD=291, STDDEV=292, STDDEV_POP=293, 
		STDDEV_SAMP=294, SUM=295, VAR_POP=296, VAR_SAMP=297, VARIANCE=298, CURRENT_DATE=299, 
		CURRENT_TIME=300, CURRENT_TIMESTAMP=301, LOCALTIME=302, CURDATE=303, CURTIME=304, 
		DATE_ADD=305, DATE_SUB=306, EXTRACT=307, LOCALTIMESTAMP=308, NOW=309, 
		POSITION=310, SUBSTR=311, SUBSTRING=312, SYSDATE=313, TRIM=314, UTC_DATE=315, 
		UTC_TIME=316, UTC_TIMESTAMP=317, ACCOUNT=318, ACTION=319, AFTER=320, AGGREGATE=321, 
		ALGORITHM=322, ANY=323, AT=324, AUTHORS=325, AUTOCOMMIT=326, AUTOEXTEND_SIZE=327, 
		AUTO_INCREMENT=328, AVG_ROW_LENGTH=329, BEGIN=330, BINLOG=331, BIT=332, 
		BLOCK=333, BOOL=334, BOOLEAN=335, BTREE=336, CACHE=337, CASCADED=338, 
		CHAIN=339, CHANGED=340, CHANNEL=341, CHECKSUM=342, PAGE_CHECKSUM=343, 
		CIPHER=344, CLASS_ORIGIN=345, CLIENT=346, CLOSE=347, COALESCE=348, CODE=349, 
		COLUMNS=350, COLUMN_FORMAT=351, COLUMN_NAME=352, COMMENT=353, COMMIT=354, 
		COMPACT=355, COMPLETION=356, COMPRESSED=357, COMPRESSION=358, CONCURRENT=359, 
		CONNECT=360, CONNECTION=361, CONSISTENT=362, CONSTRAINT_CATALOG=363, CONSTRAINT_SCHEMA=364, 
		CONSTRAINT_NAME=365, CONTAINS=366, CONTEXT=367, CONTRIBUTORS=368, COPY=369, 
		CPU=370, CURSOR_NAME=371, DATA=372, DATAFILE=373, DEALLOCATE=374, DEFAULT_AUTH=375, 
		DEFINER=376, DELAY_KEY_WRITE=377, DES_KEY_FILE=378, DIRECTORY=379, DISABLE=380, 
		DISCARD=381, DISK=382, DO=383, DUMPFILE=384, DUPLICATE=385, DYNAMIC=386, 
		ENABLE=387, ENCRYPTION=388, END=389, ENDS=390, ENGINE=391, ENGINES=392, 
		ERROR=393, ERRORS=394, ESCAPE=395, EVEN=396, EVENT=397, EVENTS=398, EVERY=399, 
		EXCHANGE=400, EXCLUSIVE=401, EXPIRE=402, EXPORT=403, EXTENDED=404, EXTENT_SIZE=405, 
		FAST=406, FAULTS=407, FIELDS=408, FILE_BLOCK_SIZE=409, FILTER=410, FIRST=411, 
		FIXED=412, FLUSH=413, FOLLOWING=414, FOLLOWS=415, FOUND=416, FULL=417, 
		FUNCTION=418, GENERAL=419, GLOBAL=420, GRANTS=421, GROUP_REPLICATION=422, 
		HANDLER=423, HASH=424, HELP=425, HOST=426, HOSTS=427, IDENTIFIED=428, 
		IGNORE_SERVER_IDS=429, IMPORT=430, INDEXES=431, INITIAL_SIZE=432, INPLACE=433, 
		INSERT_METHOD=434, INSTALL=435, INSTANCE=436, INVISIBLE=437, INVOKER=438, 
		IO=439, IO_THREAD=440, IPC=441, ISOLATION=442, ISSUER=443, JSON=444, KEY_BLOCK_SIZE=445, 
		LANGUAGE=446, LAST=447, LEAVES=448, LESS=449, LEVEL=450, LIST=451, LOCAL=452, 
		LOGFILE=453, LOGS=454, MASTER=455, MASTER_AUTO_POSITION=456, MASTER_CONNECT_RETRY=457, 
		MASTER_DELAY=458, MASTER_HEARTBEAT_PERIOD=459, MASTER_HOST=460, MASTER_LOG_FILE=461, 
		MASTER_LOG_POS=462, MASTER_PASSWORD=463, MASTER_PORT=464, MASTER_RETRY_COUNT=465, 
		MASTER_SSL=466, MASTER_SSL_CA=467, MASTER_SSL_CAPATH=468, MASTER_SSL_CERT=469, 
		MASTER_SSL_CIPHER=470, MASTER_SSL_CRL=471, MASTER_SSL_CRLPATH=472, MASTER_SSL_KEY=473, 
		MASTER_TLS_VERSION=474, MASTER_USER=475, MAX_CONNECTIONS_PER_HOUR=476, 
		MAX_QUERIES_PER_HOUR=477, MAX_ROWS=478, MAX_SIZE=479, MAX_UPDATES_PER_HOUR=480, 
		MAX_USER_CONNECTIONS=481, MEDIUM=482, MEMBER=483, MERGE=484, MESSAGE_TEXT=485, 
		MID=486, MIGRATE=487, MIN_ROWS=488, MODE=489, MODIFY=490, MUTEX=491, MYSQL=492, 
		MYSQL_ERRNO=493, NAME=494, NAMES=495, NCHAR=496, NEVER=497, NEXT=498, 
		NO=499, NODEGROUP=500, NONE=501, ODBC=502, OFFLINE=503, OFFSET=504, OF=505, 
		OJ=506, OLD_PASSWORD=507, ONE=508, ONLINE=509, ONLY=510, OPEN=511, OPTIMIZER_COSTS=512, 
		OPTIONS=513, OWNER=514, PACK_KEYS=515, PAGE=516, PARSER=517, PARTIAL=518, 
		PARTITIONING=519, PARTITIONS=520, PASSWORD=521, PHASE=522, PLUGIN=523, 
		PLUGIN_DIR=524, PLUGINS=525, PORT=526, PRECEDES=527, PRECEDING=528, PREPARE=529, 
		PRESERVE=530, PREV=531, PROCESSLIST=532, PROFILE=533, PROFILES=534, PROXY=535, 
		QUERY=536, QUICK=537, REBUILD=538, RECOVER=539, REDO_BUFFER_SIZE=540, 
		REDUNDANT=541, RELAY=542, RELAY_LOG_FILE=543, RELAY_LOG_POS=544, RELAYLOG=545, 
		REMOVE=546, REORGANIZE=547, REPAIR=548, REPLICATE_DO_DB=549, REPLICATE_DO_TABLE=550, 
		REPLICATE_IGNORE_DB=551, REPLICATE_IGNORE_TABLE=552, REPLICATE_REWRITE_DB=553, 
		REPLICATE_WILD_DO_TABLE=554, REPLICATE_WILD_IGNORE_TABLE=555, REPLICATION=556, 
		RESET=557, RESUME=558, RETURNED_SQLSTATE=559, RETURNING=560, RETURNS=561, 
		ROLE=562, ROLLBACK=563, ROLLUP=564, ROTATE=565, ROW=566, ROWS=567, ROW_FORMAT=568, 
		SAVEPOINT=569, SCHEDULE=570, SECURITY=571, SERVER=572, SESSION=573, SHARE=574, 
		SHARED=575, SIGNED=576, SIMPLE=577, SLAVE=578, SLOW=579, SNAPSHOT=580, 
		SOCKET=581, SOME=582, SONAME=583, SOUNDS=584, SOURCE=585, SQL_AFTER_GTIDS=586, 
		SQL_AFTER_MTS_GAPS=587, SQL_BEFORE_GTIDS=588, SQL_BUFFER_RESULT=589, SQL_CACHE=590, 
		SQL_NO_CACHE=591, SQL_THREAD=592, START=593, STARTS=594, STATS_AUTO_RECALC=595, 
		STATS_PERSISTENT=596, STATS_SAMPLE_PAGES=597, STATUS=598, STOP=599, STORAGE=600, 
		STORED=601, STRING=602, SUBCLASS_ORIGIN=603, SUBJECT=604, SUBPARTITION=605, 
		SUBPARTITIONS=606, SUSPEND=607, SWAPS=608, SWITCHES=609, TABLE_NAME=610, 
		TABLESPACE=611, TABLE_TYPE=612, TEMPORARY=613, TEMPTABLE=614, THAN=615, 
		TRADITIONAL=616, TRANSACTION=617, TRANSACTIONAL=618, TRIGGERS=619, TRUNCATE=620, 
		UNBOUNDED=621, UNDEFINED=622, UNDOFILE=623, UNDO_BUFFER_SIZE=624, UNINSTALL=625, 
		UNKNOWN=626, UNTIL=627, UPGRADE=628, USER=629, USE_FRM=630, USER_RESOURCES=631, 
		VALIDATION=632, VALUE=633, VARIABLES=634, VIEW=635, VIRTUAL=636, VISIBLE=637, 
		WAIT=638, WARNINGS=639, WINDOW=640, WITHOUT=641, WORK=642, WRAPPER=643, 
		X509=644, XA=645, XML=646, EUR=647, USA=648, JIS=649, ISO=650, INTERNAL=651, 
		QUARTER=652, MONTH=653, DAY=654, HOUR=655, MINUTE=656, WEEK=657, SECOND=658, 
		MICROSECOND=659, TABLES=660, ROUTINE=661, EXECUTE=662, FILE=663, PROCESS=664, 
		RELOAD=665, SHUTDOWN=666, SUPER=667, PRIVILEGES=668, APPLICATION_PASSWORD_ADMIN=669, 
		AUDIT_ADMIN=670, BACKUP_ADMIN=671, BINLOG_ADMIN=672, BINLOG_ENCRYPTION_ADMIN=673, 
		CLONE_ADMIN=674, CONNECTION_ADMIN=675, ENCRYPTION_KEY_ADMIN=676, FIREWALL_ADMIN=677, 
		FIREWALL_USER=678, FLUSH_OPTIMIZER_COSTS=679, FLUSH_STATUS=680, FLUSH_TABLES=681, 
		FLUSH_USER_RESOURCES=682, GROUP_REPLICATION_ADMIN=683, INNODB_REDO_LOG_ARCHIVE=684, 
		INNODB_REDO_LOG_ENABLE=685, NDB_STORED_USER=686, PERSIST_RO_VARIABLES_ADMIN=687, 
		REPLICATION_APPLIER=688, REPLICATION_SLAVE_ADMIN=689, RESOURCE_GROUP_ADMIN=690, 
		RESOURCE_GROUP_USER=691, ROLE_ADMIN=692, SERVICE_CONNECTION_ADMIN=693, 
		SESSION_VARIABLES_ADMIN=694, SET_USER_ID=695, SHOW_ROUTINE=696, SYSTEM_VARIABLES_ADMIN=697, 
		TABLE_ENCRYPTION_ADMIN=698, VERSION_TOKEN_ADMIN=699, XA_RECOVER_ADMIN=700, 
		ARMSCII8=701, ASCII=702, BIG5=703, CP1250=704, CP1251=705, CP1256=706, 
		CP1257=707, CP850=708, CP852=709, CP866=710, CP932=711, DEC8=712, EUCJPMS=713, 
		EUCKR=714, GB2312=715, GBK=716, GEOSTD8=717, GREEK=718, HEBREW=719, HP8=720, 
		KEYBCS2=721, KOI8R=722, KOI8U=723, LATIN1=724, LATIN2=725, LATIN5=726, 
		LATIN7=727, MACCE=728, MACROMAN=729, SJIS=730, SWE7=731, TIS620=732, UCS2=733, 
		UJIS=734, UTF16=735, UTF16LE=736, UTF32=737, UTF8=738, UTF8MB3=739, UTF8MB4=740, 
		ARCHIVE=741, BLACKHOLE=742, CSV=743, FEDERATED=744, INNODB=745, MEMORY=746, 
		MRG_MYISAM=747, MYISAM=748, NDB=749, NDBCLUSTER=750, PERFORMANCE_SCHEMA=751, 
		TOKUDB=752, REPEATABLE=753, COMMITTED=754, UNCOMMITTED=755, SERIALIZABLE=756, 
		GEOMETRYCOLLECTION=757, GEOMCOLLECTION=758, GEOMETRY=759, LINESTRING=760, 
		MULTILINESTRING=761, MULTIPOINT=762, MULTIPOLYGON=763, POINT=764, POLYGON=765, 
		ABS=766, ACOS=767, ADDDATE=768, ADDTIME=769, AES_DECRYPT=770, AES_ENCRYPT=771, 
		AREA=772, ASBINARY=773, ASIN=774, ASTEXT=775, ASWKB=776, ASWKT=777, ASYMMETRIC_DECRYPT=778, 
		ASYMMETRIC_DERIVE=779, ASYMMETRIC_ENCRYPT=780, ASYMMETRIC_SIGN=781, ASYMMETRIC_VERIFY=782, 
		ATAN=783, ATAN2=784, BENCHMARK=785, BIN=786, BIT_COUNT=787, BIT_LENGTH=788, 
		BUFFER=789, CATALOG_NAME=790, CEIL=791, CEILING=792, CENTROID=793, CHARACTER_LENGTH=794, 
		CHARSET=795, CHAR_LENGTH=796, COERCIBILITY=797, COLLATION=798, COMPRESS=799, 
		CONCAT=800, CONCAT_WS=801, CONNECTION_ID=802, CONV=803, CONVERT_TZ=804, 
		COS=805, COT=806, CRC32=807, CREATE_ASYMMETRIC_PRIV_KEY=808, CREATE_ASYMMETRIC_PUB_KEY=809, 
		CREATE_DH_PARAMETERS=810, CREATE_DIGEST=811, CROSSES=812, DATEDIFF=813, 
		DATE_FORMAT=814, DAYNAME=815, DAYOFMONTH=816, DAYOFWEEK=817, DAYOFYEAR=818, 
		DECODE=819, DEGREES=820, DES_DECRYPT=821, DES_ENCRYPT=822, DIMENSION=823, 
		DISJOINT=824, ELT=825, ENCODE=826, ENCRYPT=827, ENDPOINT=828, ENVELOPE=829, 
		EQUALS=830, EXP=831, EXPORT_SET=832, EXTERIORRING=833, EXTRACTVALUE=834, 
		FIELD=835, FIND_IN_SET=836, FLOOR=837, FORMAT=838, FOUND_ROWS=839, FROM_BASE64=840, 
		FROM_DAYS=841, FROM_UNIXTIME=842, GEOMCOLLFROMTEXT=843, GEOMCOLLFROMWKB=844, 
		GEOMETRYCOLLECTIONFROMTEXT=845, GEOMETRYCOLLECTIONFROMWKB=846, GEOMETRYFROMTEXT=847, 
		GEOMETRYFROMWKB=848, GEOMETRYN=849, GEOMETRYTYPE=850, GEOMFROMTEXT=851, 
		GEOMFROMWKB=852, GET_FORMAT=853, GET_LOCK=854, GLENGTH=855, GREATEST=856, 
		GTID_SUBSET=857, GTID_SUBTRACT=858, HEX=859, IFNULL=860, INET6_ATON=861, 
		INET6_NTOA=862, INET_ATON=863, INET_NTOA=864, INSTR=865, INTERIORRINGN=866, 
		INTERSECTS=867, ISCLOSED=868, ISEMPTY=869, ISNULL=870, ISSIMPLE=871, IS_FREE_LOCK=872, 
		IS_IPV4=873, IS_IPV4_COMPAT=874, IS_IPV4_MAPPED=875, IS_IPV6=876, IS_USED_LOCK=877, 
		LAST_INSERT_ID=878, LCASE=879, LEAST=880, LENGTH=881, LINEFROMTEXT=882, 
		LINEFROMWKB=883, LINESTRINGFROMTEXT=884, LINESTRINGFROMWKB=885, LN=886, 
		LOAD_FILE=887, LOCATE=888, LOG=889, LOG10=890, LOG2=891, LOWER=892, LPAD=893, 
		LTRIM=894, MAKEDATE=895, MAKETIME=896, MAKE_SET=897, MASTER_POS_WAIT=898, 
		MBRCONTAINS=899, MBRDISJOINT=900, MBREQUAL=901, MBRINTERSECTS=902, MBROVERLAPS=903, 
		MBRTOUCHES=904, MBRWITHIN=905, MD5=906, MLINEFROMTEXT=907, MLINEFROMWKB=908, 
		MONTHNAME=909, MPOINTFROMTEXT=910, MPOINTFROMWKB=911, MPOLYFROMTEXT=912, 
		MPOLYFROMWKB=913, MULTILINESTRINGFROMTEXT=914, MULTILINESTRINGFROMWKB=915, 
		MULTIPOINTFROMTEXT=916, MULTIPOINTFROMWKB=917, MULTIPOLYGONFROMTEXT=918, 
		MULTIPOLYGONFROMWKB=919, NAME_CONST=920, NULLIF=921, NUMGEOMETRIES=922, 
		NUMINTERIORRINGS=923, NUMPOINTS=924, OCT=925, OCTET_LENGTH=926, ORD=927, 
		OVERLAPS=928, PERIOD_ADD=929, PERIOD_DIFF=930, PI=931, POINTFROMTEXT=932, 
		POINTFROMWKB=933, POINTN=934, POLYFROMTEXT=935, POLYFROMWKB=936, POLYGONFROMTEXT=937, 
		POLYGONFROMWKB=938, POW=939, POWER=940, QUOTE=941, RADIANS=942, RAND=943, 
		RANDOM_BYTES=944, RELEASE_LOCK=945, REVERSE=946, ROUND=947, ROW_COUNT=948, 
		RPAD=949, RTRIM=950, SEC_TO_TIME=951, SESSION_USER=952, SHA=953, SHA1=954, 
		SHA2=955, SCHEMA_NAME=956, SIGN=957, SIN=958, SLEEP=959, SOUNDEX=960, 
		SQL_THREAD_WAIT_AFTER_GTIDS=961, SQRT=962, SRID=963, STARTPOINT=964, STRCMP=965, 
		STR_TO_DATE=966, ST_AREA=967, ST_ASBINARY=968, ST_ASTEXT=969, ST_ASWKB=970, 
		ST_ASWKT=971, ST_BUFFER=972, ST_CENTROID=973, ST_CONTAINS=974, ST_CROSSES=975, 
		ST_DIFFERENCE=976, ST_DIMENSION=977, ST_DISJOINT=978, ST_DISTANCE=979, 
		ST_ENDPOINT=980, ST_ENVELOPE=981, ST_EQUALS=982, ST_EXTERIORRING=983, 
		ST_GEOMCOLLFROMTEXT=984, ST_GEOMCOLLFROMTXT=985, ST_GEOMCOLLFROMWKB=986, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=987, ST_GEOMETRYCOLLECTIONFROMWKB=988, ST_GEOMETRYFROMTEXT=989, 
		ST_GEOMETRYFROMWKB=990, ST_GEOMETRYN=991, ST_GEOMETRYTYPE=992, ST_GEOMFROMTEXT=993, 
		ST_GEOMFROMWKB=994, ST_INTERIORRINGN=995, ST_INTERSECTION=996, ST_INTERSECTS=997, 
		ST_ISCLOSED=998, ST_ISEMPTY=999, ST_ISSIMPLE=1000, ST_LINEFROMTEXT=1001, 
		ST_LINEFROMWKB=1002, ST_LINESTRINGFROMTEXT=1003, ST_LINESTRINGFROMWKB=1004, 
		ST_NUMGEOMETRIES=1005, ST_NUMINTERIORRING=1006, ST_NUMINTERIORRINGS=1007, 
		ST_NUMPOINTS=1008, ST_OVERLAPS=1009, ST_POINTFROMTEXT=1010, ST_POINTFROMWKB=1011, 
		ST_POINTN=1012, ST_POLYFROMTEXT=1013, ST_POLYFROMWKB=1014, ST_POLYGONFROMTEXT=1015, 
		ST_POLYGONFROMWKB=1016, ST_SRID=1017, ST_STARTPOINT=1018, ST_SYMDIFFERENCE=1019, 
		ST_TOUCHES=1020, ST_UNION=1021, ST_WITHIN=1022, ST_X=1023, ST_Y=1024, 
		SUBDATE=1025, SUBSTRING_INDEX=1026, SUBTIME=1027, SYSTEM_USER=1028, TAN=1029, 
		TIMEDIFF=1030, TIMESTAMPADD=1031, TIMESTAMPDIFF=1032, TIME_FORMAT=1033, 
		TIME_TO_SEC=1034, TOUCHES=1035, TO_BASE64=1036, TO_DAYS=1037, TO_SECONDS=1038, 
		UCASE=1039, UNCOMPRESS=1040, UNCOMPRESSED_LENGTH=1041, UNHEX=1042, UNIX_TIMESTAMP=1043, 
		UPDATEXML=1044, UPPER=1045, UUID=1046, UUID_SHORT=1047, VALIDATE_PASSWORD_STRENGTH=1048, 
		VERSION=1049, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1050, WEEKDAY=1051, WEEKOFYEAR=1052, 
		WEIGHT_STRING=1053, WITHIN=1054, YEARWEEK=1055, Y_FUNCTION=1056, X_FUNCTION=1057, 
		VAR_ASSIGN=1058, PLUS_ASSIGN=1059, MINUS_ASSIGN=1060, MULT_ASSIGN=1061, 
		DIV_ASSIGN=1062, MOD_ASSIGN=1063, AND_ASSIGN=1064, XOR_ASSIGN=1065, OR_ASSIGN=1066, 
		STAR=1067, DIVIDE=1068, MODULE=1069, PLUS=1070, MINUS=1071, DIV=1072, 
		MOD=1073, EQUAL_SYMBOL=1074, GREATER_SYMBOL=1075, LESS_SYMBOL=1076, EXCLAMATION_SYMBOL=1077, 
		BIT_NOT_OP=1078, BIT_OR_OP=1079, BIT_AND_OP=1080, BIT_XOR_OP=1081, DOT=1082, 
		LR_BRACKET=1083, RR_BRACKET=1084, COMMA=1085, SEMI=1086, AT_SIGN=1087, 
		ZERO_DECIMAL=1088, ONE_DECIMAL=1089, TWO_DECIMAL=1090, SINGLE_QUOTE_SYMB=1091, 
		DOUBLE_QUOTE_SYMB=1092, REVERSE_QUOTE_SYMB=1093, COLON_SYMB=1094, CHARSET_REVERSE_QOUTE_STRING=1095, 
		FILESIZE_LITERAL=1096, START_NATIONAL_STRING_LITERAL=1097, STRING_LITERAL=1098, 
		DECIMAL_LITERAL=1099, HEXADECIMAL_LITERAL=1100, REAL_LITERAL=1101, NULL_SPEC_LITERAL=1102, 
		BIT_STRING=1103, STRING_CHARSET_NAME=1104, DOT_ID=1105, ID=1106, REVERSE_QUOTE_ID=1107, 
		STRING_USER_NAME=1108, IP_ADDRESS=1109, LOCAL_ID=1110, GLOBAL_ID=1111, 
		ERROR_RECONGNIGION=1112, ADMIN=1113, OPTIONAL=1114;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tableType = 47, RULE_tablespaceStorage = 48, 
		RULE_partitionDefinitions = 49, RULE_partitionFunctionDefinition = 50, 
		RULE_subpartitionFunctionDefinition = 51, RULE_partitionDefinition = 52, 
		RULE_partitionDefinerAtom = 53, RULE_partitionDefinerVector = 54, RULE_subpartitionDefinition = 55, 
		RULE_partitionOption = 56, RULE_alterDatabase = 57, RULE_alterEvent = 58, 
		RULE_alterFunction = 59, RULE_alterInstance = 60, RULE_alterLogfileGroup = 61, 
		RULE_alterProcedure = 62, RULE_alterServer = 63, RULE_alterTable = 64, 
		RULE_alterTablespace = 65, RULE_alterView = 66, RULE_alterSpecification = 67, 
		RULE_dropDatabase = 68, RULE_dropEvent = 69, RULE_dropIndex = 70, RULE_dropLogfileGroup = 71, 
		RULE_dropProcedure = 72, RULE_dropFunction = 73, RULE_dropServer = 74, 
		RULE_dropTable = 75, RULE_dropTablespace = 76, RULE_dropTrigger = 77, 
		RULE_dropView = 78, RULE_renameTable = 79, RULE_renameTableClause = 80, 
		RULE_truncateTable = 81, RULE_callStatement = 82, RULE_deleteStatement = 83, 
		RULE_doStatement = 84, RULE_handlerStatement = 85, RULE_insertStatement = 86, 
		RULE_loadDataStatement = 87, RULE_loadXmlStatement = 88, RULE_replaceStatement = 89, 
		RULE_selectStatement = 90, RULE_updateStatement = 91, RULE_insertStatementValue = 92, 
		RULE_updatedElement = 93, RULE_assignmentField = 94, RULE_lockClause = 95, 
		RULE_singleDeleteStatement = 96, RULE_multipleDeleteStatement = 97, RULE_handlerOpenStatement = 98, 
		RULE_handlerReadIndexStatement = 99, RULE_handlerReadStatement = 100, 
		RULE_handlerCloseStatement = 101, RULE_singleUpdateStatement = 102, RULE_multipleUpdateStatement = 103, 
		RULE_orderByClause = 104, RULE_orderByExpression = 105, RULE_tableSources = 106, 
		RULE_tableSource = 107, RULE_tableSourceItem = 108, RULE_indexHint = 109, 
		RULE_indexHintType = 110, RULE_joinPart = 111, RULE_queryExpression = 112, 
		RULE_queryExpressionNointo = 113, RULE_querySpecification = 114, RULE_querySpecificationNointo = 115, 
		RULE_unionParenthesis = 116, RULE_unionStatement = 117, RULE_selectSpec = 118, 
		RULE_selectElements = 119, RULE_selectElement = 120, RULE_selectIntoExpression = 121, 
		RULE_selectFieldsInto = 122, RULE_selectLinesInto = 123, RULE_fromClause = 124, 
		RULE_groupByClause = 125, RULE_havingClause = 126, RULE_windowClause = 127, 
		RULE_groupByItem = 128, RULE_limitClause = 129, RULE_limitClauseAtom = 130, 
		RULE_startTransaction = 131, RULE_beginWork = 132, RULE_commitWork = 133, 
		RULE_rollbackWork = 134, RULE_savepointStatement = 135, RULE_rollbackStatement = 136, 
		RULE_releaseStatement = 137, RULE_lockTables = 138, RULE_unlockTables = 139, 
		RULE_setAutocommitStatement = 140, RULE_setTransactionStatement = 141, 
		RULE_transactionMode = 142, RULE_lockTableElement = 143, RULE_lockAction = 144, 
		RULE_transactionOption = 145, RULE_transactionLevel = 146, RULE_changeMaster = 147, 
		RULE_changeReplicationFilter = 148, RULE_purgeBinaryLogs = 149, RULE_resetMaster = 150, 
		RULE_resetSlave = 151, RULE_startSlave = 152, RULE_stopSlave = 153, RULE_startGroupReplication = 154, 
		RULE_stopGroupReplication = 155, RULE_masterOption = 156, RULE_stringMasterOption = 157, 
		RULE_decimalMasterOption = 158, RULE_boolMasterOption = 159, RULE_channelOption = 160, 
		RULE_replicationFilter = 161, RULE_tablePair = 162, RULE_threadType = 163, 
		RULE_untilOption = 164, RULE_connectionOption = 165, RULE_gtuidSet = 166, 
		RULE_xaStartTransaction = 167, RULE_xaEndTransaction = 168, RULE_xaPrepareStatement = 169, 
		RULE_xaCommitWork = 170, RULE_xaRollbackWork = 171, RULE_xaRecoverWork = 172, 
		RULE_prepareStatement = 173, RULE_executeStatement = 174, RULE_deallocatePrepare = 175, 
		RULE_routineBody = 176, RULE_blockStatement = 177, RULE_caseStatement = 178, 
		RULE_ifStatement = 179, RULE_iterateStatement = 180, RULE_leaveStatement = 181, 
		RULE_loopStatement = 182, RULE_repeatStatement = 183, RULE_returnStatement = 184, 
		RULE_whileStatement = 185, RULE_cursorStatement = 186, RULE_declareVariable = 187, 
		RULE_declareCondition = 188, RULE_declareCursor = 189, RULE_declareHandler = 190, 
		RULE_handlerConditionValue = 191, RULE_procedureSqlStatement = 192, RULE_caseAlternative = 193, 
		RULE_elifAlternative = 194, RULE_alterUser = 195, RULE_createUser = 196, 
		RULE_dropUser = 197, RULE_grantStatement = 198, RULE_roleOption = 199, 
		RULE_grantProxy = 200, RULE_renameUser = 201, RULE_revokeStatement = 202, 
		RULE_revokeProxy = 203, RULE_setPasswordStatement = 204, RULE_userSpecification = 205, 
		RULE_userAuthOption = 206, RULE_tlsOption = 207, RULE_userResourceOption = 208, 
		RULE_userPasswordOption = 209, RULE_userLockOption = 210, RULE_privelegeClause = 211, 
		RULE_privilege = 212, RULE_privilegeLevel = 213, RULE_renameUserClause = 214, 
		RULE_analyzeTable = 215, RULE_checkTable = 216, RULE_checksumTable = 217, 
		RULE_optimizeTable = 218, RULE_repairTable = 219, RULE_checkTableOption = 220, 
		RULE_createUdfunction = 221, RULE_installPlugin = 222, RULE_uninstallPlugin = 223, 
		RULE_setStatement = 224, RULE_showStatement = 225, RULE_variableClause = 226, 
		RULE_showCommonEntity = 227, RULE_showFilter = 228, RULE_showGlobalInfoClause = 229, 
		RULE_showSchemaEntity = 230, RULE_showProfileType = 231, RULE_binlogStatement = 232, 
		RULE_cacheIndexStatement = 233, RULE_flushStatement = 234, RULE_killStatement = 235, 
		RULE_loadIndexIntoCache = 236, RULE_resetStatement = 237, RULE_shutdownStatement = 238, 
		RULE_tableIndexes = 239, RULE_flushOption = 240, RULE_flushTableOption = 241, 
		RULE_loadedTableIndexes = 242, RULE_simpleDescribeStatement = 243, RULE_fullDescribeStatement = 244, 
		RULE_helpStatement = 245, RULE_useStatement = 246, RULE_signalStatement = 247, 
		RULE_resignalStatement = 248, RULE_signalConditionInformation = 249, RULE_diagnosticsStatement = 250, 
		RULE_diagnosticsConditionInformationName = 251, RULE_describeObjectClause = 252, 
		RULE_fullId = 253, RULE_tableName = 254, RULE_fullColumnName = 255, RULE_indexColumnName = 256, 
		RULE_userName = 257, RULE_mysqlVariable = 258, RULE_charsetName = 259, 
		RULE_collationName = 260, RULE_engineName = 261, RULE_uuidSet = 262, RULE_xid = 263, 
		RULE_xuidStringId = 264, RULE_authPlugin = 265, RULE_uid = 266, RULE_simpleId = 267, 
		RULE_dottedId = 268, RULE_decimalLiteral = 269, RULE_fileSizeLiteral = 270, 
		RULE_stringLiteral = 271, RULE_booleanLiteral = 272, RULE_hexadecimalLiteral = 273, 
		RULE_nullNotnull = 274, RULE_constant = 275, RULE_dataType = 276, RULE_collectionOptions = 277, 
		RULE_convertedDataType = 278, RULE_lengthOneDimension = 279, RULE_lengthTwoDimension = 280, 
		RULE_lengthTwoOptionalDimension = 281, RULE_uidList = 282, RULE_tables = 283, 
		RULE_indexColumnNames = 284, RULE_expressions = 285, RULE_expressionsWithDefaults = 286, 
		RULE_constants = 287, RULE_simpleStrings = 288, RULE_userVariables = 289, 
		RULE_defaultValue = 290, RULE_currentTimestamp = 291, RULE_expressionOrDefault = 292, 
		RULE_ifExists = 293, RULE_ifNotExists = 294, RULE_functionCall = 295, 
		RULE_specificFunction = 296, RULE_caseFuncAlternative = 297, RULE_levelsInWeightString = 298, 
		RULE_levelInWeightListElement = 299, RULE_aggregateWindowedFunction = 300, 
		RULE_nonAggregateWindowedFunction = 301, RULE_overClause = 302, RULE_windowSpec = 303, 
		RULE_windowName = 304, RULE_frameClause = 305, RULE_frameUnits = 306, 
		RULE_frameExtent = 307, RULE_frameBetween = 308, RULE_frameRange = 309, 
		RULE_partitionClause = 310, RULE_scalarFunctionName = 311, RULE_passwordFunctionClause = 312, 
		RULE_functionArgs = 313, RULE_functionArg = 314, RULE_expression = 315, 
		RULE_predicate = 316, RULE_expressionAtom = 317, RULE_unaryOperator = 318, 
		RULE_comparisonOperator = 319, RULE_logicalOperator = 320, RULE_bitOperator = 321, 
		RULE_mathOperator = 322, RULE_jsonOperator = 323, RULE_charsetNameBase = 324, 
		RULE_transactionLevelBase = 325, RULE_privilegesBase = 326, RULE_intervalTypeBase = 327, 
		RULE_dataTypeBase = 328, RULE_keywordsCanBeId = 329, RULE_functionNameBase = 330;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
		"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
		"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
		"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
		"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
		"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
		"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
		"dropTablespace", "dropTrigger", "dropView", "renameTable", "renameTableClause", 
		"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
		"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
		"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
		"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
		"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
		"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
		"setStatement", "showStatement", "variableClause", "showCommonEntity", 
		"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
		"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
		"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
		"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
		"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
		"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
		"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
		"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable", 
		"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
		"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
		"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
		"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension", 
		"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables", 
		"indexColumnNames", "expressions", "expressionsWithDefaults", "constants", 
		"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
		"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
		"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
		"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
		"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
		"keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
		"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
		"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
		"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
		"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
		"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
		"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IN'", 
		"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
		"'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", 
		"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
		"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
		"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
		"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
		"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
		"'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
		"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
		"'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
		"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
		"'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
		"'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
		"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
		"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
		"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
		"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
		"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
		"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
		"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
		"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", 
		"'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
		"'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", 
		"'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", 
		"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", 
		"'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", 
		"'JSON_VALID'", "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
		"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
		"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
		"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
		"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
		"'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
		"'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
		"'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
		"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
		"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
		"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
		"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
		"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", 
		"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
		"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
		"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
		"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
		"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
		"'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", 
		"'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
		"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", 
		"'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
		"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
		"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
		"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
		"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
		"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
		"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
		"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
		"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
		"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
		"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
		"'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
		"'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
		"'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
		"'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
		"'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
		"'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
		"'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
		"'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
		"'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
		"'X509'", "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
		"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
		"'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
		"'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
		"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
		"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
		"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
		"'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
		"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
		"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
		"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
		null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
		"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
		"'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
		"'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
		"'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		"'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		"'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		"'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
		"'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
		"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", 
		"'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
		"'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
		"'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", 
		"'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
		"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
		"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", 
		"'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", 
		"'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
		"'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
		"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
		"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
		"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
		"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
		"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
		"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
		"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"HISTOGRAM", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
		"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
		"KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
		"LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
		"ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", 
		"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
		"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
		"SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
		"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
		"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
		"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
		"JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
		"JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", "JSON_MERGE", 
		"JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", "JSON_REPLACE", 
		"JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", 
		"JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
		"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
		"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
		"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
		"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
		"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
		"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
		"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
		"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
		"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
		"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
		"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", 
		"CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
		"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
		"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
		"CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
		"DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", 
		"DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", 
		"END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", 
		"EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", 
		"EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
		"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
		"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
		"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
		"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
		"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
		"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
		"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
		"MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
		"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
		"ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", 
		"ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", 
		"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", 
		"PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", 
		"PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
		"QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", 
		"RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", 
		"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", 
		"ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", "SESSION", 
		"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
		"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
		"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
		"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
		"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
		"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
		"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
		"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
		"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
		"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
		"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
		"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
		"EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", 
		"MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", 
		"FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
		"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
		"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
		"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
		"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
		"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
		"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
		"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
		"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
		"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
		"DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
		"HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", 
		"MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
		"UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
		"CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", 
		"NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
		"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
		"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
		"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
		"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
		"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
		"SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
		"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
		"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
		"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ADMIN", 
		"OPTIONAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GET - 68)) | (1L << (GRANT - 68)) | (1L << (INSERT - 68)) | (1L << (KILL - 68)) | (1L << (LOAD - 68)) | (1L << (LOCK - 68)) | (1L << (OPTIMIZE - 68)) | (1L << (PURGE - 68)) | (1L << (RELEASE - 68)) | (1L << (RENAME - 68)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (REPLACE - 133)) | (1L << (RESIGNAL - 133)) | (1L << (REVOKE - 133)) | (1L << (SELECT - 133)) | (1L << (SET - 133)) | (1L << (SHOW - 133)) | (1L << (SIGNAL - 133)) | (1L << (UNLOCK - 133)) | (1L << (UPDATE - 133)) | (1L << (USE - 133)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (BEGIN - 330)) | (1L << (BINLOG - 330)) | (1L << (CACHE - 330)) | (1L << (CHECKSUM - 330)) | (1L << (COMMIT - 330)) | (1L << (DEALLOCATE - 330)) | (1L << (DO - 330)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (FLUSH - 413)) | (1L << (HANDLER - 413)) | (1L << (HELP - 413)) | (1L << (INSTALL - 413)))) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & ((1L << (PREPARE - 529)) | (1L << (REPAIR - 529)) | (1L << (RESET - 529)) | (1L << (ROLLBACK - 529)) | (1L << (SAVEPOINT - 529)))) != 0) || ((((_la - 593)) & ~0x3f) == 0 && ((1L << (_la - 593)) & ((1L << (START - 593)) | (1L << (STOP - 593)) | (1L << (TRUNCATE - 593)) | (1L << (UNINSTALL - 593)) | (1L << (XA - 593)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 662;
				sqlStatements();
				}
			}

			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 665;
				Match(MINUS);
				State = 666;
				Match(MINUS);
				}
			}

			State = 669;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 680;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 671;
						sqlStatement();
						State = 674;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUS) {
							{
							State = 672;
							Match(MINUS);
							State = 673;
							Match(MINUS);
							}
						}

						State = 677;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 676;
							Match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						State = 679;
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 684;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 694;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 685;
				sqlStatement();
				State = 691;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 688;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 686;
						Match(MINUS);
						State = 687;
						Match(MINUS);
						}
					}

					State = 690;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 693;
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696;
				ddlStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697;
				dmlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 698;
				transactionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 699;
				replicationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 700;
				preparedStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 701;
				administrationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 702;
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddlStatement);
		try {
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 709;
				createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 710;
				createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 711;
				createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 712;
				createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 713;
				createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 714;
				createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 715;
				createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 716;
				createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 717;
				createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 718;
				createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 719;
				alterDatabase();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 720;
				alterEvent();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 721;
				alterFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 722;
				alterInstance();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 723;
				alterLogfileGroup();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 724;
				alterProcedure();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 725;
				alterServer();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 726;
				alterTable();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 727;
				alterTablespace();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 728;
				alterView();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 729;
				dropDatabase();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 730;
				dropEvent();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 731;
				dropIndex();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 732;
				dropLogfileGroup();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 733;
				dropProcedure();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 734;
				dropFunction();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 735;
				dropServer();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 736;
				dropTable();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 737;
				dropTablespace();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 738;
				dropTrigger();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 739;
				dropView();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 740;
				renameTable();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 741;
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dmlStatement);
		try {
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 745;
				insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 746;
				updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 747;
				deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 748;
				replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 749;
				callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 750;
				loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 751;
				loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 752;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 753;
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_transactionStatement);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756;
				startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757;
				beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 758;
				commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 759;
				rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 760;
				savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 761;
				rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 762;
				releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 763;
				lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 764;
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_replicationStatement);
		try {
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767;
				changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 769;
				purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 770;
				resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 771;
				resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 772;
				startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 773;
				stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 774;
				startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 775;
				stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 776;
				xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 777;
				xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 778;
				xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 779;
				xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 780;
				xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 781;
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_preparedStatement);
		try {
			State = 787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 786;
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 791;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 792;
				leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 793;
				loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 794;
				repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 795;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 796;
				iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 797;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 798;
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_administrationStatement);
		try {
			State = 826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 801;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 802;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 803;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 804;
				grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 805;
				grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 806;
				renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 807;
				revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 808;
				revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 809;
				analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 810;
				checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 811;
				checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 812;
				optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 813;
				repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 814;
				createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 815;
				installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 816;
				uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 817;
				setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 818;
				showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 819;
				binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 820;
				cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 821;
				flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 822;
				killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 823;
				loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 824;
				resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 825;
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsStatementContext diagnosticsStatement() {
			return GetRuleContext<DiagnosticsStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_utilityStatement);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 828;
				simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829;
				fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830;
				helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 831;
				useStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 832;
				signalStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 833;
				resignalStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 834;
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(CREATE);
			State = 838;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 839;
				ifNotExists();
				}
			}

			State = 842;
			uid();
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				State = 843;
				createDatabaseOption();
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(CREATE);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 850;
				ownerStatement();
				}
			}

			State = 853;
			Match(EVENT);
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 854;
				ifNotExists();
				}
			}

			State = 857;
			fullId();
			State = 858;
			Match(ON);
			State = 859;
			Match(SCHEDULE);
			State = 860;
			scheduleExpression();
			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 861;
				Match(ON);
				State = 862;
				Match(COMPLETION);
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 863;
					Match(NOT);
					}
				}

				State = 866;
				Match(PRESERVE);
				}
			}

			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 869;
				enableType();
				}
			}

			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 872;
				Match(COMMENT);
				State = 873;
				Match(STRING_LITERAL);
				}
			}

			State = 876;
			Match(DO);
			State = 877;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			Match(CREATE);
			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 880;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 883;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 886;
			Match(INDEX);
			State = 887;
			uid();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 888;
				indexType();
				}
			}

			State = 891;
			Match(ON);
			State = 892;
			tableName();
			State = 893;
			indexColumnNames();
			State = 897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				State = 894;
				indexOption();
				}
				}
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 912;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 910;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 900;
						Match(ALGORITHM);
						State = 902;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 901;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 904;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 905;
						Match(LOCK);
						State = 907;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 906;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 909;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 914;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(CREATE);
			State = 916;
			Match(LOGFILE);
			State = 917;
			Match(GROUP);
			State = 918;
			uid();
			State = 919;
			Match(ADD);
			State = 920;
			Match(UNDOFILE);
			State = 921;
			_localctx.undoFile = Match(STRING_LITERAL);
			State = 927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 922;
				Match(INITIAL_SIZE);
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 923;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 926;
				_localctx.initSize = fileSizeLiteral();
				}
			}

			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 929;
				Match(UNDO_BUFFER_SIZE);
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 930;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 933;
				_localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 936;
				Match(REDO_BUFFER_SIZE);
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 937;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 940;
				_localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 943;
				Match(NODEGROUP);
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 944;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 947;
				uid();
				}
			}

			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 950;
				Match(WAIT);
				}
			}

			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 953;
				Match(COMMENT);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 954;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 957;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 960;
			Match(ENGINE);
			State = 962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 961;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 964;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(CREATE);
			State = 968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 967;
				ownerStatement();
				}
			}

			State = 970;
			Match(PROCEDURE);
			State = 971;
			fullId();
			State = 972;
			Match(LR_BRACKET);
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IN - 34)) | (1L << (INOUT - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (OUT - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 973;
				procedureParameter();
				}
			}

			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 976;
				Match(COMMA);
				State = 977;
				procedureParameter();
				}
				}
				State = 982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 983;
			Match(RR_BRACKET);
			State = 987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 984;
					routineOption();
					}
					} 
				}
				State = 989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 990;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			Match(CREATE);
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 993;
				ownerStatement();
				}
			}

			State = 996;
			Match(FUNCTION);
			State = 997;
			fullId();
			State = 998;
			Match(LR_BRACKET);
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 999;
				functionParameter();
				}
			}

			State = 1006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1002;
				Match(COMMA);
				State = 1003;
				functionParameter();
				}
				}
				State = 1008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1009;
			Match(RR_BRACKET);
			State = 1010;
			Match(RETURNS);
			State = 1011;
			dataType();
			State = 1015;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1012;
					routineOption();
					}
					} 
				}
				State = 1017;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 1020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				State = 1018;
				routineBody();
				}
				break;
			case RETURN:
				{
				State = 1019;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(CREATE);
			State = 1023;
			Match(SERVER);
			State = 1024;
			uid();
			State = 1025;
			Match(FOREIGN);
			State = 1026;
			Match(DATA);
			State = 1027;
			Match(WRAPPER);
			State = 1028;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1029;
			Match(OPTIONS);
			State = 1030;
			Match(LR_BRACKET);
			State = 1031;
			serverOption();
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1032;
				Match(COMMA);
				State = 1033;
				serverOption();
				}
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1039;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			State = 1119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1041;
				Match(CREATE);
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1042;
					Match(TEMPORARY);
					}
				}

				State = 1045;
				Match(TABLE);
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1046;
					ifNotExists();
					}
				}

				State = 1049;
				tableName();
				State = 1057;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 1050;
					Match(LIKE);
					State = 1051;
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 1052;
					Match(LR_BRACKET);
					State = 1053;
					Match(LIKE);
					State = 1054;
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 1055;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059;
				Match(CREATE);
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1060;
					Match(TEMPORARY);
					}
				}

				State = 1063;
				Match(TABLE);
				State = 1065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1064;
					ifNotExists();
					}
				}

				State = 1067;
				tableName();
				State = 1069;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 1068;
					createDefinitions();
					}
					break;
				}
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (AUTO_INCREMENT - 328)) | (1L << (AVG_ROW_LENGTH - 328)) | (1L << (CHECKSUM - 328)) | (1L << (PAGE_CHECKSUM - 328)) | (1L << (COMMENT - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONNECTION - 328)) | (1L << (DATA - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (ENGINE - 328)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (INSERT_METHOD - 434)) | (1L << (KEY_BLOCK_SIZE - 434)) | (1L << (MAX_ROWS - 434)) | (1L << (MIN_ROWS - 434)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (PACK_KEYS - 515)) | (1L << (PASSWORD - 515)) | (1L << (ROW_FORMAT - 515)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STORAGE - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)))) != 0) || _la==CHARSET) {
					{
					State = 1071;
					tableOption();
					State = 1078;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (AUTO_INCREMENT - 328)) | (1L << (AVG_ROW_LENGTH - 328)) | (1L << (CHECKSUM - 328)) | (1L << (PAGE_CHECKSUM - 328)) | (1L << (COMMENT - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONNECTION - 328)) | (1L << (DATA - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (ENGINE - 328)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (INSERT_METHOD - 434)) | (1L << (KEY_BLOCK_SIZE - 434)) | (1L << (MAX_ROWS - 434)) | (1L << (MIN_ROWS - 434)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (PACK_KEYS - 515)) | (1L << (PASSWORD - 515)) | (1L << (ROW_FORMAT - 515)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STORAGE - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						State = 1073;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1072;
							Match(COMMA);
							}
						}

						State = 1075;
						tableOption();
						}
						}
						State = 1080;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1083;
					partitionDefinitions();
					}
				}

				State = 1087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1086;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1089;
					Match(AS);
					}
				}

				State = 1092;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1094;
				Match(CREATE);
				State = 1096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1095;
					Match(TEMPORARY);
					}
				}

				State = 1098;
				Match(TABLE);
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1099;
					ifNotExists();
					}
				}

				State = 1102;
				tableName();
				State = 1103;
				createDefinitions();
				State = 1114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 1104;
					tableOption();
					State = 1111;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1106;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1105;
								Match(COMMA);
								}
							}

							State = 1108;
							tableOption();
							}
							} 
						}
						State = 1113;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
					}
					}
					break;
				}
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1116;
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceInnodb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(CREATE);
			State = 1122;
			Match(TABLESPACE);
			State = 1123;
			uid();
			State = 1124;
			Match(ADD);
			State = 1125;
			Match(DATAFILE);
			State = 1126;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1127;
				Match(FILE_BLOCK_SIZE);
				State = 1128;
				Match(EQUAL_SYMBOL);
				State = 1129;
				_localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1132;
				Match(ENGINE);
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1133;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1136;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceNdb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			Match(CREATE);
			State = 1140;
			Match(TABLESPACE);
			State = 1141;
			uid();
			State = 1142;
			Match(ADD);
			State = 1143;
			Match(DATAFILE);
			State = 1144;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1145;
			Match(USE);
			State = 1146;
			Match(LOGFILE);
			State = 1147;
			Match(GROUP);
			State = 1148;
			uid();
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1149;
				Match(EXTENT_SIZE);
				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1150;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1153;
				_localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1156;
				Match(INITIAL_SIZE);
				State = 1158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1157;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1160;
				_localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1163;
				Match(AUTOEXTEND_SIZE);
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1164;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1167;
				_localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1170;
				Match(MAX_SIZE);
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1171;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1174;
				_localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1177;
				Match(NODEGROUP);
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1178;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1181;
				uid();
				}
			}

			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1184;
				Match(WAIT);
				}
			}

			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1187;
				Match(COMMENT);
				State = 1189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1188;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1191;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1194;
			Match(ENGINE);
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1195;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1198;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(CREATE);
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1201;
				ownerStatement();
				}
			}

			State = 1204;
			Match(TRIGGER);
			State = 1205;
			_localctx.thisTrigger = fullId();
			State = 1206;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1207;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1208;
			Match(ON);
			State = 1209;
			tableName();
			State = 1210;
			Match(FOR);
			State = 1211;
			Match(EACH);
			State = 1212;
			Match(ROW);
			State = 1215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1213;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1214;
				_localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1217;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(CREATE);
			State = 1222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1220;
				Match(OR);
				State = 1221;
				Match(REPLACE);
				}
			}

			State = 1227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1224;
				Match(ALGORITHM);
				State = 1225;
				Match(EQUAL_SYMBOL);
				State = 1226;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1229;
				ownerStatement();
				}
			}

			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1232;
				Match(SQL);
				State = 1233;
				Match(SECURITY);
				State = 1234;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1237;
			Match(VIEW);
			State = 1238;
			fullId();
			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1239;
				Match(LR_BRACKET);
				State = 1240;
				uidList();
				State = 1241;
				Match(RR_BRACKET);
				}
			}

			State = 1245;
			Match(AS);
			State = 1246;
			selectStatement();
			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1247;
				Match(WITH);
				State = 1249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 1248;
					_localctx.checkOption = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOption = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1251;
				Match(CHECK);
				State = 1252;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1255;
					Match(DEFAULT);
					}
				}

				State = 1261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 1258;
					Match(CHARACTER);
					State = 1259;
					Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 1260;
					Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1263;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1268;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1266;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1267;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1270;
					Match(DEFAULT);
					}
				}

				State = 1273;
				Match(COLLATE);
				State = 1275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1274;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1277;
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280;
			Match(DEFINER);
			State = 1281;
			Match(EQUAL_SYMBOL);
			State = 1288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				State = 1282;
				userName();
				}
				break;
			case CURRENT_USER:
				{
				State = 1283;
				Match(CURRENT_USER);
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1284;
					Match(LR_BRACKET);
					State = 1285;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreciseSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			State = 1324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290;
				Match(AT);
				State = 1291;
				timestampValue();
				State = 1295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1292;
					intervalExpr();
					}
					}
					State = 1297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1298;
				Match(EVERY);
				State = 1301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 1299;
					decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1300;
					expression(0);
					}
					break;
				}
				State = 1303;
				intervalType();
				State = 1312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1304;
					Match(STARTS);
					State = 1305;
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					State = 1309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1306;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1311;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1314;
					Match(ENDS);
					State = 1315;
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					State = 1319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1316;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1321;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_timestampValue);
		try {
			State = 1330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1326;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1327;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1328;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1329;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			Match(PLUS);
			State = 1333;
			Match(INTERVAL);
			State = 1336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1334;
				decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1335;
				expression(0);
				}
				break;
			}
			State = 1338;
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_intervalType);
		try {
			State = 1353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1340;
				intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1341;
				Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1342;
				Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1343;
				Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1344;
				Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1345;
				Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1346;
				Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1347;
				Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1348;
				Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1349;
				Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1350;
				Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1351;
				Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1352;
				Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_enableType);
		try {
			State = 1360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1355;
				Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1356;
				Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1357;
				Match(DISABLE);
				State = 1358;
				Match(ON);
				State = 1359;
				Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362;
			Match(USING);
			State = 1363;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			State = 1378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1365;
				Match(KEY_BLOCK_SIZE);
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1366;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1369;
				fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1370;
				indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1371;
				Match(WITH);
				State = 1372;
				Match(PARSER);
				State = 1373;
				uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1374;
				Match(COMMENT);
				State = 1375;
				Match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1376;
				Match(INVISIBLE);
				}
				break;
			case VISIBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1377;
				Match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (IN - 76)) | (1L << (INOUT - 76)) | (1L << (OUT - 76)))) != 0)) {
				{
				State = 1380;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (IN - 76)) | (1L << (INOUT - 76)) | (1L << (OUT - 76)))) != 0)) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1383;
			uid();
			State = 1384;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			uid();
			State = 1387;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineSecurity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			State = 1412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1389;
				Match(COMMENT);
				State = 1390;
				Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391;
				Match(LANGUAGE);
				State = 1392;
				Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1393;
					Match(NOT);
					}
				}

				State = 1396;
				Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1407;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1397;
					Match(CONTAINS);
					State = 1398;
					Match(SQL);
					}
					break;
				case NO:
					{
					State = 1399;
					Match(NO);
					State = 1400;
					Match(SQL);
					}
					break;
				case READS:
					{
					State = 1401;
					Match(READS);
					State = 1402;
					Match(SQL);
					State = 1403;
					Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1404;
					Match(MODIFIES);
					State = 1405;
					Match(SQL);
					State = 1406;
					Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1409;
				Match(SQL);
				State = 1410;
				Match(SECURITY);
				State = 1411;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 72, RULE_serverOption);
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1414;
				Match(HOST);
				State = 1415;
				Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1416;
				Match(DATABASE);
				State = 1417;
				Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1418;
				Match(USER);
				State = 1419;
				Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1420;
				Match(PASSWORD);
				State = 1421;
				Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1422;
				Match(SOCKET);
				State = 1423;
				Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1424;
				Match(OWNER);
				State = 1425;
				Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1426;
				Match(PORT);
				State = 1427;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			Match(LR_BRACKET);
			State = 1431;
			createDefinition();
			State = 1436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1432;
				Match(COMMA);
				State = 1433;
				createDefinition();
				}
				}
				State = 1438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1439;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_createDefinition);
		try {
			State = 1446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441;
				uid();
				State = 1442;
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1444;
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1445;
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_columnDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448;
			dataType();
			State = 1452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1449;
					columnConstraint();
					}
					} 
				}
				State = 1454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp() {
			return GetRuleContext<CurrentTimestampContext>(0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoIncrementColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerialDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratedColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(MySqlParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(MySqlParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratedColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckColumnConstraintContext : ColumnConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			State = 1508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455;
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456;
				Match(DEFAULT);
				State = 1457;
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1458;
				Match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1459;
				Match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1464;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO_INCREMENT:
					{
					State = 1460;
					Match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					State = 1461;
					Match(ON);
					State = 1462;
					Match(UPDATE);
					State = 1463;
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1466;
					Match(PRIMARY);
					}
				}

				State = 1469;
				Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1470;
				Match(UNIQUE);
				State = 1472;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
				case 1:
					{
					State = 1471;
					Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1474;
				Match(COMMENT);
				State = 1475;
				Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1476;
				Match(COLUMN_FORMAT);
				State = 1477;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1478;
				Match(STORAGE);
				State = 1479;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1480;
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1481;
				Match(COLLATE);
				State = 1482;
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 1483;
					Match(GENERATED);
					State = 1484;
					Match(ALWAYS);
					}
				}

				State = 1487;
				Match(AS);
				State = 1488;
				Match(LR_BRACKET);
				State = 1489;
				expression(0);
				State = 1490;
				Match(RR_BRACKET);
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					State = 1491;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1494;
				Match(SERIAL);
				State = 1495;
				Match(DEFAULT);
				State = 1496;
				Match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1497;
					Match(CONSTRAINT);
					State = 1499;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 1498;
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1503;
				Match(CHECK);
				State = 1504;
				Match(LR_BRACKET);
				State = 1505;
				expression(0);
				State = 1506;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			State = 1579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1510;
					Match(CONSTRAINT);
					State = 1512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 1511;
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1516;
				Match(PRIMARY);
				State = 1517;
				Match(KEY);
				State = 1519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 1518;
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1521;
					indexType();
					}
				}

				State = 1524;
				indexColumnNames();
				State = 1528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 1525;
					indexOption();
					}
					}
					State = 1530;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1531;
					Match(CONSTRAINT);
					State = 1533;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 1532;
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1537;
				Match(UNIQUE);
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1538;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 1541;
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1544;
					indexType();
					}
				}

				State = 1547;
				indexColumnNames();
				State = 1551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 1548;
					indexOption();
					}
					}
					State = 1553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1554;
					Match(CONSTRAINT);
					State = 1556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 1555;
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1560;
				Match(FOREIGN);
				State = 1561;
				Match(KEY);
				State = 1563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 1562;
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1565;
				indexColumnNames();
				State = 1566;
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1568;
					Match(CONSTRAINT);
					State = 1570;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 1569;
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1574;
				Match(CHECK);
				State = 1575;
				Match(LR_BRACKET);
				State = 1576;
				expression(0);
				State = 1577;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			Match(REFERENCES);
			State = 1582;
			tableName();
			State = 1584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1583;
				indexColumnNames();
				}
				break;
			}
			State = 1588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1586;
				Match(MATCH);
				State = 1587;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1590;
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 86, RULE_referenceAction);
		try {
			State = 1609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593;
				Match(ON);
				State = 1594;
				Match(DELETE);
				State = 1595;
				_localctx.onDelete = referenceControlType();
				State = 1599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1596;
					Match(ON);
					State = 1597;
					Match(UPDATE);
					State = 1598;
					_localctx.onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601;
				Match(ON);
				State = 1602;
				Match(UPDATE);
				State = 1603;
				_localctx.onUpdate = referenceControlType();
				State = 1607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
				case 1:
					{
					State = 1604;
					Match(ON);
					State = 1605;
					Match(DELETE);
					State = 1606;
					_localctx.onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_referenceControlType);
		try {
			State = 1617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1611;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1612;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1613;
				Match(SET);
				State = 1614;
				Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1615;
				Match(NO);
				State = 1616;
				Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1619;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 1620;
					uid();
					}
				}

				State = 1624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1623;
					indexType();
					}
				}

				State = 1626;
				indexColumnNames();
				State = 1630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 1627;
					indexOption();
					}
					}
					State = 1632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1633;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1634;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 1637;
					uid();
					}
				}

				State = 1640;
				indexColumnNames();
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 1641;
					indexOption();
					}
					}
					State = 1646;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPackKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSamplePage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTableTypeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MySqlParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public TableOptionTableTypeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionKeyBlockSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRecalculation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionChecksum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDelay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionConnection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCompression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionInsertMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			State = 1798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1649;
				Match(ENGINE);
				State = 1651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1650;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONNECT || ((((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & ((1L << (ARCHIVE - 741)) | (1L << (BLACKHOLE - 741)) | (1L << (CSV - 741)) | (1L << (FEDERATED - 741)) | (1L << (INNODB - 741)) | (1L << (MEMORY - 741)) | (1L << (MRG_MYISAM - 741)) | (1L << (MYISAM - 741)) | (1L << (NDB - 741)) | (1L << (NDBCLUSTER - 741)) | (1L << (PERFORMANCE_SCHEMA - 741)) | (1L << (TOKUDB - 741)))) != 0) || ((((_la - 1098)) & ~0x3f) == 0 && ((1L << (_la - 1098)) & ((1L << (STRING_LITERAL - 1098)) | (1L << (ID - 1098)) | (1L << (REVERSE_QUOTE_ID - 1098)))) != 0)) {
					{
					State = 1653;
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1656;
				Match(AUTO_INCREMENT);
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1657;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1660;
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1661;
				Match(AVG_ROW_LENGTH);
				State = 1663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1662;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1665;
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1666;
					Match(DEFAULT);
					}
				}

				State = 1672;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 1669;
					Match(CHARACTER);
					State = 1670;
					Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 1671;
					Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1674;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1679;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1677;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1678;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1681;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1682;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1685;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1686;
					Match(DEFAULT);
					}
				}

				State = 1689;
				Match(COLLATE);
				State = 1691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1690;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1693;
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1694;
				Match(COMMENT);
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1695;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1698;
				Match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1699;
				Match(COMPRESSION);
				State = 1701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1700;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1703;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1704;
				Match(CONNECTION);
				State = 1706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1705;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1708;
				Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1709;
				Match(DATA);
				State = 1710;
				Match(DIRECTORY);
				State = 1712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1711;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1714;
				Match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1715;
				Match(DELAY_KEY_WRITE);
				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1716;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1719;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1720;
				Match(ENCRYPTION);
				State = 1722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1721;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1724;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1725;
				Match(INDEX);
				State = 1726;
				Match(DIRECTORY);
				State = 1728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1727;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1730;
				Match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1731;
				Match(INSERT_METHOD);
				State = 1733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1732;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1735;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1736;
				Match(KEY_BLOCK_SIZE);
				State = 1738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1737;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1740;
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1741;
				Match(MAX_ROWS);
				State = 1743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1742;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1745;
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1746;
				Match(MIN_ROWS);
				State = 1748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1747;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1750;
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1751;
				Match(PACK_KEYS);
				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1752;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1755;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1756;
				Match(PASSWORD);
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1757;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1760;
				Match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1761;
				Match(ROW_FORMAT);
				State = 1763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1762;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1765;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (COMPACT - 355)) | (1L << (COMPRESSED - 355)) | (1L << (DYNAMIC - 355)) | (1L << (FIXED - 355)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1766;
				Match(STATS_AUTO_RECALC);
				State = 1768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1767;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1770;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1771;
				Match(STATS_PERSISTENT);
				State = 1773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1772;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1775;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1776;
				Match(STATS_SAMPLE_PAGES);
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1777;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1780;
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1781;
				Match(TABLESPACE);
				State = 1782;
				uid();
				State = 1784;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1783;
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1786;
				Match(TABLE_TYPE);
				State = 1787;
				Match(EQUAL_SYMBOL);
				State = 1788;
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1789;
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1790;
				Match(UNION);
				State = 1792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1791;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1794;
				Match(LR_BRACKET);
				State = 1795;
				tables();
				State = 1796;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800;
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceStorage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 96, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802;
			Match(STORAGE);
			State = 1803;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(MySqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 98, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805;
			Match(PARTITION);
			State = 1806;
			Match(BY);
			State = 1807;
			partitionFunctionDefinition();
			State = 1810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 1808;
				Match(PARTITIONS);
				State = 1809;
				_localctx.count = decimalLiteral();
				}
			}

			State = 1819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 1812;
				Match(SUBPARTITION);
				State = 1813;
				Match(BY);
				State = 1814;
				subpartitionFunctionDefinition();
				State = 1817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 1815;
					Match(SUBPARTITIONS);
					State = 1816;
					_localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 1832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 1821;
				Match(LR_BRACKET);
				State = 1822;
				partitionDefinition();
				State = 1827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1823;
					Match(COMMA);
					State = 1824;
					partitionDefinition();
					}
					}
					State = 1829;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1830;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 1879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1834;
					Match(LINEAR);
					}
				}

				State = 1837;
				Match(HASH);
				State = 1838;
				Match(LR_BRACKET);
				State = 1839;
				expression(0);
				State = 1840;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1842;
					Match(LINEAR);
					}
				}

				State = 1845;
				Match(KEY);
				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1846;
					Match(ALGORITHM);
					State = 1847;
					Match(EQUAL_SYMBOL);
					State = 1848;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1851;
				Match(LR_BRACKET);
				State = 1852;
				uidList();
				State = 1853;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1855;
				Match(RANGE);
				State = 1865;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1856;
					Match(LR_BRACKET);
					State = 1857;
					expression(0);
					State = 1858;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1860;
					Match(COLUMNS);
					State = 1861;
					Match(LR_BRACKET);
					State = 1862;
					uidList();
					State = 1863;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1867;
				Match(LIST);
				State = 1877;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1868;
					Match(LR_BRACKET);
					State = 1869;
					expression(0);
					State = 1870;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1872;
					Match(COLUMNS);
					State = 1873;
					Match(LR_BRACKET);
					State = 1874;
					uidList();
					State = 1875;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 1902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1881;
					Match(LINEAR);
					}
				}

				State = 1884;
				Match(HASH);
				State = 1885;
				Match(LR_BRACKET);
				State = 1886;
				expression(0);
				State = 1887;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1889;
					Match(LINEAR);
					}
				}

				State = 1892;
				Match(KEY);
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1893;
					Match(ALGORITHM);
					State = 1894;
					Match(EQUAL_SYMBOL);
					State = 1895;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1898;
				Match(LR_BRACKET);
				State = 1899;
				uidList();
				State = 1900;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisonContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListVector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_partitionDefinition);
		int _la;
		try {
			State = 2050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904;
				Match(PARTITION);
				State = 1905;
				uid();
				State = 1906;
				Match(VALUES);
				State = 1907;
				Match(LESS);
				State = 1908;
				Match(THAN);
				State = 1909;
				Match(LR_BRACKET);
				State = 1910;
				partitionDefinerAtom();
				State = 1915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1911;
					Match(COMMA);
					State = 1912;
					partitionDefinerAtom();
					}
					}
					State = 1917;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1918;
				Match(RR_BRACKET);
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1919;
					partitionOption();
					}
					}
					State = 1924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1925;
					Match(LR_BRACKET);
					State = 1926;
					subpartitionDefinition();
					State = 1931;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1927;
						Match(COMMA);
						State = 1928;
						subpartitionDefinition();
						}
						}
						State = 1933;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1934;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938;
				Match(PARTITION);
				State = 1939;
				uid();
				State = 1940;
				Match(VALUES);
				State = 1941;
				Match(LESS);
				State = 1942;
				Match(THAN);
				State = 1943;
				partitionDefinerAtom();
				State = 1947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1944;
					partitionOption();
					}
					}
					State = 1949;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1950;
					Match(LR_BRACKET);
					State = 1951;
					subpartitionDefinition();
					State = 1956;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1952;
						Match(COMMA);
						State = 1953;
						subpartitionDefinition();
						}
						}
						State = 1958;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1959;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1963;
				Match(PARTITION);
				State = 1964;
				uid();
				State = 1965;
				Match(VALUES);
				State = 1966;
				Match(IN);
				State = 1967;
				Match(LR_BRACKET);
				State = 1968;
				partitionDefinerAtom();
				State = 1973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1969;
					Match(COMMA);
					State = 1970;
					partitionDefinerAtom();
					}
					}
					State = 1975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1976;
				Match(RR_BRACKET);
				State = 1980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1977;
					partitionOption();
					}
					}
					State = 1982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1983;
					Match(LR_BRACKET);
					State = 1984;
					subpartitionDefinition();
					State = 1989;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1985;
						Match(COMMA);
						State = 1986;
						subpartitionDefinition();
						}
						}
						State = 1991;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1992;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1996;
				Match(PARTITION);
				State = 1997;
				uid();
				State = 1998;
				Match(VALUES);
				State = 1999;
				Match(IN);
				State = 2000;
				Match(LR_BRACKET);
				State = 2001;
				partitionDefinerVector();
				State = 2006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2002;
					Match(COMMA);
					State = 2003;
					partitionDefinerVector();
					}
					}
					State = 2008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2009;
				Match(RR_BRACKET);
				State = 2013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2010;
					partitionOption();
					}
					}
					State = 2015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2016;
					Match(LR_BRACKET);
					State = 2017;
					subpartitionDefinition();
					State = 2022;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2018;
						Match(COMMA);
						State = 2019;
						subpartitionDefinition();
						}
						}
						State = 2024;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2025;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2029;
				Match(PARTITION);
				State = 2030;
				uid();
				State = 2034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2031;
					partitionOption();
					}
					}
					State = 2036;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2037;
					Match(LR_BRACKET);
					State = 2038;
					subpartitionDefinition();
					State = 2043;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2039;
						Match(COMMA);
						State = 2040;
						subpartitionDefinition();
						}
						}
						State = 2045;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2046;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_partitionDefinerAtom);
		try {
			State = 2055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2052;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2053;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2054;
				Match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 108, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			Match(LR_BRACKET);
			State = 2058;
			partitionDefinerAtom();
			State = 2061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2059;
				Match(COMMA);
				State = 2060;
				partitionDefinerAtom();
				}
				}
				State = 2063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 2065;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			Match(SUBPARTITION);
			State = 2068;
			uid();
			State = 2072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (COMMENT - 353)) | (1L << (DATA - 353)) | (1L << (ENGINE - 353)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_ROWS - 478)) | (1L << (MIN_ROWS - 478)) | (1L << (NODEGROUP - 478)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 2069;
				partitionOption();
				}
				}
				State = 2074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionNodeGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 112, RULE_partitionOption);
		int _la;
		try {
			State = 2123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2075;
					Match(DEFAULT);
					}
				}

				State = 2079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2078;
					Match(STORAGE);
					}
				}

				State = 2081;
				Match(ENGINE);
				State = 2083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2082;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2085;
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2086;
				Match(COMMENT);
				State = 2088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2087;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2090;
				((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2091;
				Match(DATA);
				State = 2092;
				Match(DIRECTORY);
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2093;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2096;
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2097;
				Match(INDEX);
				State = 2098;
				Match(DIRECTORY);
				State = 2100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2099;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2102;
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2103;
				Match(MAX_ROWS);
				State = 2105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2104;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2107;
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2108;
				Match(MIN_ROWS);
				State = 2110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2109;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2112;
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2113;
				Match(TABLESPACE);
				State = 2115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2114;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2117;
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2118;
				Match(NODEGROUP);
				State = 2120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2119;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2122;
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUpgradeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSimpleDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 114, RULE_alterDatabase);
		int _la;
		try {
			State = 2143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2125;
				Match(ALTER);
				State = 2126;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 2127;
					uid();
					}
					break;
				}
				State = 2131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2130;
					createDatabaseOption();
					}
					}
					State = 2133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2135;
				Match(ALTER);
				State = 2136;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2137;
				uid();
				State = 2138;
				Match(UPGRADE);
				State = 2139;
				Match(DATA);
				State = 2140;
				Match(DIRECTORY);
				State = 2141;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 116, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			Match(ALTER);
			State = 2147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2146;
				ownerStatement();
				}
			}

			State = 2149;
			Match(EVENT);
			State = 2150;
			fullId();
			State = 2154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 2151;
				Match(ON);
				State = 2152;
				Match(SCHEDULE);
				State = 2153;
				scheduleExpression();
				}
				break;
			}
			State = 2162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2156;
				Match(ON);
				State = 2157;
				Match(COMPLETION);
				State = 2159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2158;
					Match(NOT);
					}
				}

				State = 2161;
				Match(PRESERVE);
				}
			}

			State = 2167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				{
				State = 2164;
				Match(RENAME);
				State = 2165;
				Match(TO);
				State = 2166;
				fullId();
				}
				break;
			}
			State = 2170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2169;
				enableType();
				}
			}

			State = 2174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2172;
				Match(COMMENT);
				State = 2173;
				Match(STRING_LITERAL);
				}
			}

			State = 2178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				{
				State = 2176;
				Match(DO);
				State = 2177;
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 118, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			Match(ALTER);
			State = 2181;
			Match(FUNCTION);
			State = 2182;
			fullId();
			State = 2186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (MODIFIES - 105)) | (1L << (NOT - 105)) | (1L << (READS - 105)) | (1L << (SQL - 105)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2183;
				routineOption();
				}
				}
				State = 2188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 120, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2189;
			Match(ALTER);
			State = 2190;
			Match(INSTANCE);
			State = 2191;
			Match(ROTATE);
			State = 2192;
			Match(INNODB);
			State = 2193;
			Match(MASTER);
			State = 2194;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 122, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2196;
			Match(ALTER);
			State = 2197;
			Match(LOGFILE);
			State = 2198;
			Match(GROUP);
			State = 2199;
			uid();
			State = 2200;
			Match(ADD);
			State = 2201;
			Match(UNDOFILE);
			State = 2202;
			Match(STRING_LITERAL);
			State = 2208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2203;
				Match(INITIAL_SIZE);
				State = 2205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2204;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2207;
				fileSizeLiteral();
				}
			}

			State = 2211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2210;
				Match(WAIT);
				}
			}

			State = 2213;
			Match(ENGINE);
			State = 2215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2214;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2217;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 124, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219;
			Match(ALTER);
			State = 2220;
			Match(PROCEDURE);
			State = 2221;
			fullId();
			State = 2225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (MODIFIES - 105)) | (1L << (NOT - 105)) | (1L << (READS - 105)) | (1L << (SQL - 105)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2222;
				routineOption();
				}
				}
				State = 2227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 126, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			Match(ALTER);
			State = 2229;
			Match(SERVER);
			State = 2230;
			uid();
			State = 2231;
			Match(OPTIONS);
			State = 2232;
			Match(LR_BRACKET);
			State = 2233;
			serverOption();
			State = 2238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2234;
				Match(COMMA);
				State = 2235;
				serverOption();
				}
				}
				State = 2240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2241;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 128, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2243;
			Match(ALTER);
			State = 2245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2244;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2247;
				Match(IGNORE);
				}
			}

			State = 2250;
			Match(TABLE);
			State = 2251;
			tableName();
			State = 2260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2252;
				alterSpecification();
				State = 2257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2253;
					Match(COMMA);
					State = 2254;
					alterSpecification();
					}
					}
					State = 2259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2262;
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2265;
			Match(ALTER);
			State = 2266;
			Match(TABLESPACE);
			State = 2267;
			uid();
			State = 2268;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2269;
			Match(DATAFILE);
			State = 2270;
			Match(STRING_LITERAL);
			State = 2274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2271;
				Match(INITIAL_SIZE);
				State = 2272;
				Match(EQUAL_SYMBOL);
				State = 2273;
				fileSizeLiteral();
				}
			}

			State = 2277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2276;
				Match(WAIT);
				}
			}

			State = 2279;
			Match(ENGINE);
			State = 2281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2280;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2283;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285;
			Match(ALTER);
			State = 2289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2286;
				Match(ALGORITHM);
				State = 2287;
				Match(EQUAL_SYMBOL);
				State = 2288;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2291;
				ownerStatement();
				}
			}

			State = 2297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2294;
				Match(SQL);
				State = 2295;
				Match(SECURITY);
				State = 2296;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2299;
			Match(VIEW);
			State = 2300;
			fullId();
			State = 2305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2301;
				Match(LR_BRACKET);
				State = 2302;
				uidList();
				State = 2303;
				Match(RR_BRACKET);
				}
			}

			State = 2307;
			Match(AS);
			State = 2308;
			selectStatement();
			State = 2315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2309;
				Match(WITH);
				State = 2311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2310;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2313;
				Match(CHECK);
				State = 2314;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDisableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByConvertCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOptimizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCoalescePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropConstraintCheckContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropConstraintCheck(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAlterIndexVisibilityContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAlterIndexVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRebuildPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByUpgradePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRepairPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByForce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddSpecialIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByModifyColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByLock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByValidate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCheckPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByEnableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByReorganizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterBySetAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAnalyzePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAnalyzePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddUniqueKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTruncatePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 134, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			State = 2683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2317;
				tableOption();
				State = 2324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,282,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2319;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2318;
							Match(COMMA);
							}
						}

						State = 2321;
						tableOption();
						}
						} 
					}
					State = 2326;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,282,Context);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2327;
				Match(ADD);
				State = 2329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2328;
					Match(COLUMN);
					}
				}

				State = 2331;
				uid();
				State = 2332;
				columnDefinition();
				State = 2336;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2333;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2334;
					Match(AFTER);
					State = 2335;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2338;
				Match(ADD);
				State = 2340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2339;
					Match(COLUMN);
					}
				}

				State = 2342;
				Match(LR_BRACKET);
				State = 2343;
				uid();
				State = 2344;
				columnDefinition();
				State = 2351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2345;
					Match(COMMA);
					State = 2346;
					uid();
					State = 2347;
					columnDefinition();
					}
					}
					State = 2353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2354;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2356;
				Match(ADD);
				State = 2357;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2358;
					uid();
					}
				}

				State = 2362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2361;
					indexType();
					}
				}

				State = 2364;
				indexColumnNames();
				State = 2368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 2365;
					indexOption();
					}
					}
					State = 2370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2371;
				Match(ADD);
				State = 2376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2372;
					Match(CONSTRAINT);
					State = 2374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 2373;
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2378;
				Match(PRIMARY);
				State = 2379;
				Match(KEY);
				State = 2381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2380;
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				State = 2384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2383;
					indexType();
					}
				}

				State = 2386;
				indexColumnNames();
				State = 2390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 2387;
					indexOption();
					}
					}
					State = 2392;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2393;
				Match(ADD);
				State = 2398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2394;
					Match(CONSTRAINT);
					State = 2396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 2395;
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2400;
				Match(UNIQUE);
				State = 2402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2401;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2404;
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2407;
					indexType();
					}
				}

				State = 2410;
				indexColumnNames();
				State = 2414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 2411;
					indexOption();
					}
					}
					State = 2416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2417;
				Match(ADD);
				State = 2418;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2419;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2422;
					uid();
					}
				}

				State = 2425;
				indexColumnNames();
				State = 2429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					State = 2426;
					indexOption();
					}
					}
					State = 2431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2432;
				Match(ADD);
				State = 2437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2433;
					Match(CONSTRAINT);
					State = 2435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 2434;
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2439;
				Match(FOREIGN);
				State = 2440;
				Match(KEY);
				State = 2442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2441;
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2444;
				indexColumnNames();
				State = 2445;
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2447;
				Match(ADD);
				State = 2452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2448;
					Match(CONSTRAINT);
					State = 2450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
						{
						State = 2449;
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2454;
				Match(CHECK);
				State = 2455;
				Match(LR_BRACKET);
				State = 2456;
				expression(0);
				State = 2457;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2459;
				Match(ALGORITHM);
				State = 2461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2460;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2463;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2464;
				Match(ALTER);
				State = 2466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2465;
					Match(COLUMN);
					}
				}

				State = 2468;
				uid();
				State = 2474;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2469;
					Match(SET);
					State = 2470;
					Match(DEFAULT);
					State = 2471;
					defaultValue();
					}
					break;
				case DROP:
					{
					State = 2472;
					Match(DROP);
					State = 2473;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2476;
				Match(CHANGE);
				State = 2478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2477;
					Match(COLUMN);
					}
				}

				State = 2480;
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2481;
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2482;
				columnDefinition();
				State = 2486;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2483;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2484;
					Match(AFTER);
					State = 2485;
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2488;
				Match(RENAME);
				State = 2489;
				Match(COLUMN);
				State = 2490;
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				State = 2491;
				Match(TO);
				State = 2492;
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2494;
				Match(LOCK);
				State = 2496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2495;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2498;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2499;
				Match(MODIFY);
				State = 2501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2500;
					Match(COLUMN);
					}
				}

				State = 2503;
				uid();
				State = 2504;
				columnDefinition();
				State = 2508;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2505;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2506;
					Match(AFTER);
					State = 2507;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2510;
				Match(DROP);
				State = 2512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2511;
					Match(COLUMN);
					}
				}

				State = 2514;
				uid();
				State = 2516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESTRICT) {
					{
					State = 2515;
					Match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2518;
				Match(DROP);
				State = 2519;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2520;
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2521;
				Match(DROP);
				State = 2522;
				Match(PRIMARY);
				State = 2523;
				Match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2524;
				Match(RENAME);
				State = 2525;
				((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2526;
				uid();
				State = 2527;
				Match(TO);
				State = 2528;
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2530;
				Match(ALTER);
				State = 2531;
				Match(INDEX);
				State = 2532;
				uid();
				State = 2533;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2535;
				Match(DROP);
				State = 2536;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2537;
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2538;
				Match(DROP);
				State = 2539;
				Match(FOREIGN);
				State = 2540;
				Match(KEY);
				State = 2541;
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2542;
				Match(DISABLE);
				State = 2543;
				Match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2544;
				Match(ENABLE);
				State = 2545;
				Match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2546;
				Match(RENAME);
				State = 2548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2547;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
				case 1:
					{
					State = 2550;
					uid();
					}
					break;
				case 2:
					{
					State = 2551;
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2554;
				Match(ORDER);
				State = 2555;
				Match(BY);
				State = 2556;
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2557;
				Match(CONVERT);
				State = 2558;
				Match(TO);
				State = 2559;
				Match(CHARACTER);
				State = 2560;
				Match(SET);
				State = 2561;
				charsetName();
				State = 2564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2562;
					Match(COLLATE);
					State = 2563;
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2566;
					Match(DEFAULT);
					}
				}

				State = 2569;
				Match(CHARACTER);
				State = 2570;
				Match(SET);
				State = 2571;
				Match(EQUAL_SYMBOL);
				State = 2572;
				charsetName();
				State = 2576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2573;
					Match(COLLATE);
					State = 2574;
					Match(EQUAL_SYMBOL);
					State = 2575;
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2578;
				Match(DISCARD);
				State = 2579;
				Match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2580;
				Match(IMPORT);
				State = 2581;
				Match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2582;
				Match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2583;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2584;
				Match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2585;
				Match(ADD);
				State = 2586;
				Match(PARTITION);
				State = 2587;
				Match(LR_BRACKET);
				State = 2588;
				partitionDefinition();
				State = 2593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2589;
					Match(COMMA);
					State = 2590;
					partitionDefinition();
					}
					}
					State = 2595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2596;
				Match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2598;
				Match(DROP);
				State = 2599;
				Match(PARTITION);
				State = 2600;
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2601;
				Match(DISCARD);
				State = 2602;
				Match(PARTITION);
				State = 2605;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2603;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2604;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2607;
				Match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2608;
				Match(IMPORT);
				State = 2609;
				Match(PARTITION);
				State = 2612;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2610;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2611;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2614;
				Match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2615;
				Match(TRUNCATE);
				State = 2616;
				Match(PARTITION);
				State = 2619;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2617;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2618;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2621;
				Match(COALESCE);
				State = 2622;
				Match(PARTITION);
				State = 2623;
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 2624;
				Match(REORGANIZE);
				State = 2625;
				Match(PARTITION);
				State = 2626;
				uidList();
				State = 2627;
				Match(INTO);
				State = 2628;
				Match(LR_BRACKET);
				State = 2629;
				partitionDefinition();
				State = 2634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2630;
					Match(COMMA);
					State = 2631;
					partitionDefinition();
					}
					}
					State = 2636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2637;
				Match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 2639;
				Match(EXCHANGE);
				State = 2640;
				Match(PARTITION);
				State = 2641;
				uid();
				State = 2642;
				Match(WITH);
				State = 2643;
				Match(TABLE);
				State = 2644;
				tableName();
				State = 2647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2645;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2646;
					Match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 2649;
				Match(ANALYZE);
				State = 2650;
				Match(PARTITION);
				State = 2653;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2651;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2652;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 2655;
				Match(CHECK);
				State = 2656;
				Match(PARTITION);
				State = 2659;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2657;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2658;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 2661;
				Match(OPTIMIZE);
				State = 2662;
				Match(PARTITION);
				State = 2665;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2663;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2664;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 2667;
				Match(REBUILD);
				State = 2668;
				Match(PARTITION);
				State = 2671;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2669;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2670;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 2673;
				Match(REPAIR);
				State = 2674;
				Match(PARTITION);
				State = 2677;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 2675;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2676;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 2679;
				Match(REMOVE);
				State = 2680;
				Match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 2681;
				Match(UPGRADE);
				State = 2682;
				Match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 136, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2685;
			Match(DROP);
			State = 2686;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2687;
				ifExists();
				}
			}

			State = 2690;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 138, RULE_dropEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2692;
			Match(DROP);
			State = 2693;
			Match(EVENT);
			State = 2695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2694;
				ifExists();
				}
			}

			State = 2697;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 140, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2699;
			Match(DROP);
			State = 2700;
			Match(INDEX);
			State = 2702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
			case 1:
				{
				State = 2701;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2704;
			uid();
			State = 2705;
			Match(ON);
			State = 2706;
			tableName();
			State = 2719;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2717;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 2707;
						Match(ALGORITHM);
						State = 2709;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2708;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2711;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 2712;
						Match(LOCK);
						State = 2714;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2713;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2716;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 142, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722;
			Match(DROP);
			State = 2723;
			Match(LOGFILE);
			State = 2724;
			Match(GROUP);
			State = 2725;
			uid();
			State = 2726;
			Match(ENGINE);
			State = 2727;
			Match(EQUAL_SYMBOL);
			State = 2728;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 144, RULE_dropProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2730;
			Match(DROP);
			State = 2731;
			Match(PROCEDURE);
			State = 2733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2732;
				ifExists();
				}
			}

			State = 2735;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 146, RULE_dropFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2737;
			Match(DROP);
			State = 2738;
			Match(FUNCTION);
			State = 2740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2739;
				ifExists();
				}
			}

			State = 2742;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 148, RULE_dropServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2744;
			Match(DROP);
			State = 2745;
			Match(SERVER);
			State = 2747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2746;
				ifExists();
				}
			}

			State = 2749;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 150, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2751;
			Match(DROP);
			State = 2753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 2752;
				Match(TEMPORARY);
				}
			}

			State = 2755;
			Match(TABLE);
			State = 2757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2756;
				ifExists();
				}
			}

			State = 2759;
			tables();
			State = 2761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2760;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 152, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2763;
			Match(DROP);
			State = 2764;
			Match(TABLESPACE);
			State = 2765;
			uid();
			State = 2771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 2766;
				Match(ENGINE);
				State = 2768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2767;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2770;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 154, RULE_dropTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2773;
			Match(DROP);
			State = 2774;
			Match(TRIGGER);
			State = 2776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2775;
				ifExists();
				}
			}

			State = 2778;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 156, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2780;
			Match(DROP);
			State = 2781;
			Match(VIEW);
			State = 2783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2782;
				ifExists();
				}
			}

			State = 2785;
			fullId();
			State = 2790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2786;
				Match(COMMA);
				State = 2787;
				fullId();
				}
				}
				State = 2792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2793;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 158, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2796;
			Match(RENAME);
			State = 2797;
			Match(TABLE);
			State = 2798;
			renameTableClause();
			State = 2803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2799;
				Match(COMMA);
				State = 2800;
				renameTableClause();
				}
				}
				State = 2805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 160, RULE_renameTableClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2806;
			tableName();
			State = 2807;
			Match(TO);
			State = 2808;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 162, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			Match(TRUNCATE);
			State = 2812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 2811;
				Match(TABLE);
				}
			}

			State = 2814;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816;
			Match(CALL);
			State = 2817;
			fullId();
			State = 2824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
			case 1:
				{
				State = 2818;
				Match(LR_BRACKET);
				State = 2821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
				case 1:
					{
					State = 2819;
					constants();
					}
					break;
				case 2:
					{
					State = 2820;
					expressions();
					}
					break;
				}
				State = 2823;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_deleteStatement);
		try {
			State = 2828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2826;
				singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2827;
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2830;
			Match(DO);
			State = 2831;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_handlerStatement);
		try {
			State = 2837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2833;
				handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2834;
				handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2835;
				handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2836;
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2839;
			Match(INSERT);
			State = 2841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				State = 2840;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2843;
				Match(IGNORE);
				}
			}

			State = 2847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2846;
				Match(INTO);
				}
			}

			State = 2849;
			tableName();
			State = 2856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2850;
				Match(PARTITION);
				State = 2851;
				Match(LR_BRACKET);
				State = 2853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 2852;
					_localctx.partitions = uidList();
					}
				}

				State = 2855;
				Match(RR_BRACKET);
				}
			}

			State = 2874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 2862;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 2858;
					Match(LR_BRACKET);
					State = 2859;
					_localctx.columns = uidList();
					State = 2860;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 2864;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 2865;
				Match(SET);
				State = 2866;
				_localctx.setFirst = updatedElement();
				State = 2871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2867;
					Match(COMMA);
					State = 2868;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 2873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2876;
				Match(ON);
				State = 2877;
				Match(DUPLICATE);
				State = 2878;
				Match(KEY);
				State = 2879;
				Match(UPDATE);
				State = 2880;
				_localctx.duplicatedFirst = updatedElement();
				State = 2885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2881;
					Match(COMMA);
					State = 2882;
					_localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 2887;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES(int i) {
			return GetToken(MySqlParser.LINES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2890;
			Match(LOAD);
			State = 2891;
			Match(DATA);
			State = 2893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 2892;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 2895;
				Match(LOCAL);
				}
			}

			State = 2898;
			Match(INFILE);
			State = 2899;
			_localctx.filename = Match(STRING_LITERAL);
			State = 2901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 2900;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2903;
			Match(INTO);
			State = 2904;
			Match(TABLE);
			State = 2905;
			tableName();
			State = 2911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2906;
				Match(PARTITION);
				State = 2907;
				Match(LR_BRACKET);
				State = 2908;
				uidList();
				State = 2909;
				Match(RR_BRACKET);
				}
			}

			State = 2916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 2913;
				Match(CHARACTER);
				State = 2914;
				Match(SET);
				State = 2915;
				_localctx.charset = charsetName();
				}
			}

			State = 2924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 2918;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2919;
					selectFieldsInto();
					}
					}
					State = 2922;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 2932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 2926;
				Match(LINES);
				State = 2928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2927;
					selectLinesInto();
					}
					}
					State = 2930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 2938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2934;
				Match(IGNORE);
				State = 2935;
				decimalLiteral();
				State = 2936;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				{
				State = 2940;
				Match(LR_BRACKET);
				State = 2941;
				assignmentField();
				State = 2946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2942;
					Match(COMMA);
					State = 2943;
					assignmentField();
					}
					}
					State = 2948;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2949;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 2962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				{
				State = 2953;
				Match(SET);
				State = 2954;
				updatedElement();
				State = 2959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2955;
					Match(COMMA);
					State = 2956;
					updatedElement();
					}
					}
					State = 2961;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(MySqlParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadXmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2964;
			Match(LOAD);
			State = 2965;
			Match(XML);
			State = 2967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 2966;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 2969;
				Match(LOCAL);
				}
			}

			State = 2972;
			Match(INFILE);
			State = 2973;
			_localctx.filename = Match(STRING_LITERAL);
			State = 2975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 2974;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2977;
			Match(INTO);
			State = 2978;
			Match(TABLE);
			State = 2979;
			tableName();
			State = 2983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 2980;
				Match(CHARACTER);
				State = 2981;
				Match(SET);
				State = 2982;
				_localctx.charset = charsetName();
				}
			}

			State = 2991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 2985;
				Match(ROWS);
				State = 2986;
				Match(IDENTIFIED);
				State = 2987;
				Match(BY);
				State = 2988;
				Match(LESS_SYMBOL);
				State = 2989;
				_localctx.tag = Match(STRING_LITERAL);
				State = 2990;
				Match(GREATER_SYMBOL);
				}
			}

			State = 2997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2993;
				Match(IGNORE);
				State = 2994;
				decimalLiteral();
				State = 2995;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				{
				State = 2999;
				Match(LR_BRACKET);
				State = 3000;
				assignmentField();
				State = 3005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3001;
					Match(COMMA);
					State = 3002;
					assignmentField();
					}
					}
					State = 3007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3008;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				{
				State = 3012;
				Match(SET);
				State = 3013;
				updatedElement();
				State = 3018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3014;
					Match(COMMA);
					State = 3015;
					updatedElement();
					}
					}
					State = 3020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3023;
			Match(REPLACE);
			State = 3025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 3024;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3027;
				Match(INTO);
				}
			}

			State = 3030;
			tableName();
			State = 3036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3031;
				Match(PARTITION);
				State = 3032;
				Match(LR_BRACKET);
				State = 3033;
				_localctx.partitions = uidList();
				State = 3034;
				Match(RR_BRACKET);
				}
			}

			State = 3054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3042;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
				case 1:
					{
					State = 3038;
					Match(LR_BRACKET);
					State = 3039;
					_localctx.columns = uidList();
					State = 3040;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3044;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3045;
				Match(SET);
				State = 3046;
				_localctx.setFirst = updatedElement();
				State = 3051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3047;
					Match(COMMA);
					State = 3048;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 3111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3056;
				querySpecification();
				State = 3058;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
				case 1:
					{
					State = 3057;
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3060;
				queryExpression();
				State = 3062;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,402,Context) ) {
				case 1:
					{
					State = 3061;
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3064;
				querySpecificationNointo();
				State = 3066;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3065;
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3068;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,403,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3070;
					Match(UNION);
					State = 3072;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3071;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3076;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 3074;
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 3075;
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 3081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
				case 1:
					{
					State = 3080;
					orderByClause();
					}
					break;
				}
				State = 3084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3083;
					limitClause();
					}
				}

				State = 3087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,409,Context) ) {
				case 1:
					{
					State = 3086;
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3089;
				queryExpressionNointo();
				State = 3091;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3090;
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3093;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,410,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3095;
					Match(UNION);
					State = 3097;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3096;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3099;
					queryExpression();
					}
				}

				State = 3103;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
				case 1:
					{
					State = 3102;
					orderByClause();
					}
					break;
				}
				State = 3106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3105;
					limitClause();
					}
				}

				State = 3109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
				case 1:
					{
					State = 3108;
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_updateStatement);
		try {
			State = 3115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3113;
				singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3114;
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 184, RULE_insertStatementValue);
		int _la;
		try {
			State = 3135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3117;
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3118;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3119;
				Match(LR_BRACKET);
				State = 3121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 3120;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3123;
				Match(RR_BRACKET);
				State = 3132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3124;
					Match(COMMA);
					State = 3125;
					Match(LR_BRACKET);
					State = 3127;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
					case 1:
						{
						State = 3126;
						expressionsWithDefaults();
						}
						break;
					}
					State = 3129;
					Match(RR_BRACKET);
					}
					}
					State = 3134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 186, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3137;
			fullColumnName();
			State = 3138;
			Match(EQUAL_SYMBOL);
			State = 3141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3139;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3140;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 188, RULE_assignmentField);
		try {
			State = 3145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3143;
				uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3144;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_lockClause);
		try {
			State = 3153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3147;
				Match(FOR);
				State = 3148;
				Match(UPDATE);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3149;
				Match(LOCK);
				State = 3150;
				Match(IN);
				State = 3151;
				Match(SHARE);
				State = 3152;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3155;
			Match(DELETE);
			State = 3157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3156;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 3159;
				Match(QUICK);
				}
			}

			State = 3163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3162;
				Match(IGNORE);
				}
			}

			State = 3165;
			Match(FROM);
			State = 3166;
			tableName();
			State = 3172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3167;
				Match(PARTITION);
				State = 3168;
				Match(LR_BRACKET);
				State = 3169;
				uidList();
				State = 3170;
				Match(RR_BRACKET);
				}
			}

			State = 3176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3174;
				Match(WHERE);
				State = 3175;
				expression(0);
				}
			}

			State = 3179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3178;
				orderByClause();
				}
			}

			State = 3183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3181;
				Match(LIMIT);
				State = 3182;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MySqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MySqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3185;
			Match(DELETE);
			State = 3187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3186;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				{
				State = 3189;
				Match(QUICK);
				}
				break;
			}
			State = 3193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3192;
				Match(IGNORE);
				}
			}

			State = 3234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				State = 3195;
				tableName();
				State = 3198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3196;
					Match(DOT);
					State = 3197;
					Match(STAR);
					}
				}

				State = 3208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3200;
					Match(COMMA);
					State = 3201;
					tableName();
					State = 3204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3202;
						Match(DOT);
						State = 3203;
						Match(STAR);
						}
					}

					}
					}
					State = 3210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3211;
				Match(FROM);
				State = 3212;
				tableSources();
				}
				break;
			case FROM:
				{
				State = 3214;
				Match(FROM);
				State = 3215;
				tableName();
				State = 3218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3216;
					Match(DOT);
					State = 3217;
					Match(STAR);
					}
				}

				State = 3228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3220;
					Match(COMMA);
					State = 3221;
					tableName();
					State = 3224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3222;
						Match(DOT);
						State = 3223;
						Match(STAR);
						}
					}

					}
					}
					State = 3230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3231;
				Match(USING);
				State = 3232;
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3236;
				Match(WHERE);
				State = 3237;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerOpenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3240;
			Match(HANDLER);
			State = 3241;
			tableName();
			State = 3242;
			Match(OPEN);
			State = 3247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				{
				State = 3244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3243;
					Match(AS);
					}
				}

				State = 3246;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3249;
			Match(HANDLER);
			State = 3250;
			tableName();
			State = 3251;
			Match(READ);
			State = 3252;
			_localctx.index = uid();
			State = 3259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3253;
				comparisonOperator();
				State = 3254;
				Match(LR_BRACKET);
				State = 3255;
				constants();
				State = 3256;
				Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3258;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3261;
				Match(WHERE);
				State = 3262;
				expression(0);
				}
			}

			State = 3267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3265;
				Match(LIMIT);
				State = 3266;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3269;
			Match(HANDLER);
			State = 3270;
			tableName();
			State = 3271;
			Match(READ);
			State = 3272;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3273;
				Match(WHERE);
				State = 3274;
				expression(0);
				}
			}

			State = 3279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3277;
				Match(LIMIT);
				State = 3278;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCloseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3281;
			Match(HANDLER);
			State = 3282;
			tableName();
			State = 3283;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 204, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285;
			Match(UPDATE);
			State = 3287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3286;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3289;
				Match(IGNORE);
				}
			}

			State = 3292;
			tableName();
			State = 3297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (AS - 12)) | (1L << (CURRENT - 12)) | (1L << (DATABASE - 12)) | (1L << (DIAGNOSTICS - 12)) | (1L << (EXCEPT - 12)) | (1L << (GROUP - 12)))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (NUMBER - 92)) | (1L << (ORDER - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (STACKED - 158)) | (1L << (DATE - 158)) | (1L << (TIME - 158)) | (1L << (TIMESTAMP - 158)) | (1L << (DATETIME - 158)) | (1L << (YEAR - 158)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXT - 223)) | (1L << (ENUM - 223)) | (1L << (SERIAL - 223)) | (1L << (JSON_ARRAY - 223)) | (1L << (JSON_OBJECT - 223)) | (1L << (JSON_QUOTE - 223)) | (1L << (JSON_CONTAINS - 223)) | (1L << (JSON_CONTAINS_PATH - 223)) | (1L << (JSON_EXTRACT - 223)) | (1L << (JSON_KEYS - 223)) | (1L << (JSON_OVERLAPS - 223)) | (1L << (JSON_SEARCH - 223)) | (1L << (JSON_VALUE - 223)) | (1L << (JSON_ARRAY_APPEND - 223)) | (1L << (JSON_ARRAY_INSERT - 223)) | (1L << (JSON_INSERT - 223)) | (1L << (JSON_MERGE - 223)) | (1L << (JSON_MERGE_PATCH - 223)) | (1L << (JSON_MERGE_PRESERVE - 223)) | (1L << (JSON_REMOVE - 223)) | (1L << (JSON_REPLACE - 223)) | (1L << (JSON_SET - 223)) | (1L << (JSON_UNQUOTE - 223)) | (1L << (JSON_DEPTH - 223)) | (1L << (JSON_LENGTH - 223)) | (1L << (JSON_TYPE - 223)) | (1L << (JSON_VALID - 223)) | (1L << (JSON_TABLE - 223)) | (1L << (JSON_SCHEMA_VALID - 223)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 223)) | (1L << (JSON_PRETTY - 223)) | (1L << (JSON_STORAGE_FREE - 223)) | (1L << (JSON_STORAGE_SIZE - 223)) | (1L << (JSON_ARRAYAGG - 223)) | (1L << (JSON_OBJECTAGG - 223)) | (1L << (AVG - 223)) | (1L << (BIT_AND - 223)) | (1L << (BIT_OR - 223)) | (1L << (BIT_XOR - 223)) | (1L << (COUNT - 223)) | (1L << (GROUP_CONCAT - 223)) | (1L << (MAX - 223)) | (1L << (MIN - 223)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (STD - 291)) | (1L << (STDDEV - 291)) | (1L << (STDDEV_POP - 291)) | (1L << (STDDEV_SAMP - 291)) | (1L << (SUM - 291)) | (1L << (VAR_POP - 291)) | (1L << (VAR_SAMP - 291)) | (1L << (VARIANCE - 291)) | (1L << (POSITION - 291)) | (1L << (ACCOUNT - 291)) | (1L << (ACTION - 291)) | (1L << (AFTER - 291)) | (1L << (AGGREGATE - 291)) | (1L << (ALGORITHM - 291)) | (1L << (ANY - 291)) | (1L << (AT - 291)) | (1L << (AUTHORS - 291)) | (1L << (AUTOCOMMIT - 291)) | (1L << (AUTOEXTEND_SIZE - 291)) | (1L << (AUTO_INCREMENT - 291)) | (1L << (AVG_ROW_LENGTH - 291)) | (1L << (BEGIN - 291)) | (1L << (BINLOG - 291)) | (1L << (BIT - 291)) | (1L << (BLOCK - 291)) | (1L << (BOOL - 291)) | (1L << (BOOLEAN - 291)) | (1L << (BTREE - 291)) | (1L << (CACHE - 291)) | (1L << (CASCADED - 291)) | (1L << (CHAIN - 291)) | (1L << (CHANGED - 291)) | (1L << (CHANNEL - 291)) | (1L << (CHECKSUM - 291)) | (1L << (PAGE_CHECKSUM - 291)) | (1L << (CIPHER - 291)) | (1L << (CLASS_ORIGIN - 291)) | (1L << (CLIENT - 291)) | (1L << (CLOSE - 291)) | (1L << (COALESCE - 291)) | (1L << (CODE - 291)) | (1L << (COLUMNS - 291)) | (1L << (COLUMN_FORMAT - 291)) | (1L << (COLUMN_NAME - 291)) | (1L << (COMMENT - 291)) | (1L << (COMMIT - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (COMPACT - 355)) | (1L << (COMPLETION - 355)) | (1L << (COMPRESSED - 355)) | (1L << (COMPRESSION - 355)) | (1L << (CONCURRENT - 355)) | (1L << (CONNECT - 355)) | (1L << (CONNECTION - 355)) | (1L << (CONSISTENT - 355)) | (1L << (CONSTRAINT_CATALOG - 355)) | (1L << (CONSTRAINT_SCHEMA - 355)) | (1L << (CONSTRAINT_NAME - 355)) | (1L << (CONTAINS - 355)) | (1L << (CONTEXT - 355)) | (1L << (CONTRIBUTORS - 355)) | (1L << (COPY - 355)) | (1L << (CPU - 355)) | (1L << (CURSOR_NAME - 355)) | (1L << (DATA - 355)) | (1L << (DATAFILE - 355)) | (1L << (DEALLOCATE - 355)) | (1L << (DEFAULT_AUTH - 355)) | (1L << (DEFINER - 355)) | (1L << (DELAY_KEY_WRITE - 355)) | (1L << (DES_KEY_FILE - 355)) | (1L << (DIRECTORY - 355)) | (1L << (DISABLE - 355)) | (1L << (DISCARD - 355)) | (1L << (DISK - 355)) | (1L << (DO - 355)) | (1L << (DUMPFILE - 355)) | (1L << (DUPLICATE - 355)) | (1L << (DYNAMIC - 355)) | (1L << (ENABLE - 355)) | (1L << (ENCRYPTION - 355)) | (1L << (END - 355)) | (1L << (ENDS - 355)) | (1L << (ENGINE - 355)) | (1L << (ENGINES - 355)) | (1L << (ERROR - 355)) | (1L << (ERRORS - 355)) | (1L << (ESCAPE - 355)) | (1L << (EVEN - 355)) | (1L << (EVENT - 355)) | (1L << (EVENTS - 355)) | (1L << (EVERY - 355)) | (1L << (EXCHANGE - 355)) | (1L << (EXCLUSIVE - 355)) | (1L << (EXPIRE - 355)) | (1L << (EXPORT - 355)) | (1L << (EXTENDED - 355)) | (1L << (EXTENT_SIZE - 355)) | (1L << (FAST - 355)) | (1L << (FAULTS - 355)) | (1L << (FIELDS - 355)) | (1L << (FILE_BLOCK_SIZE - 355)) | (1L << (FILTER - 355)) | (1L << (FIRST - 355)) | (1L << (FIXED - 355)) | (1L << (FLUSH - 355)) | (1L << (FOLLOWS - 355)) | (1L << (FOUND - 355)) | (1L << (FULL - 355)) | (1L << (FUNCTION - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (GENERAL - 419)) | (1L << (GLOBAL - 419)) | (1L << (GRANTS - 419)) | (1L << (GROUP_REPLICATION - 419)) | (1L << (HANDLER - 419)) | (1L << (HASH - 419)) | (1L << (HELP - 419)) | (1L << (HOST - 419)) | (1L << (HOSTS - 419)) | (1L << (IDENTIFIED - 419)) | (1L << (IGNORE_SERVER_IDS - 419)) | (1L << (IMPORT - 419)) | (1L << (INDEXES - 419)) | (1L << (INITIAL_SIZE - 419)) | (1L << (INPLACE - 419)) | (1L << (INSERT_METHOD - 419)) | (1L << (INSTALL - 419)) | (1L << (INSTANCE - 419)) | (1L << (INVISIBLE - 419)) | (1L << (INVOKER - 419)) | (1L << (IO - 419)) | (1L << (IO_THREAD - 419)) | (1L << (IPC - 419)) | (1L << (ISOLATION - 419)) | (1L << (ISSUER - 419)) | (1L << (JSON - 419)) | (1L << (KEY_BLOCK_SIZE - 419)) | (1L << (LANGUAGE - 419)) | (1L << (LAST - 419)) | (1L << (LEAVES - 419)) | (1L << (LESS - 419)) | (1L << (LEVEL - 419)) | (1L << (LIST - 419)) | (1L << (LOCAL - 419)) | (1L << (LOGFILE - 419)) | (1L << (LOGS - 419)) | (1L << (MASTER - 419)) | (1L << (MASTER_AUTO_POSITION - 419)) | (1L << (MASTER_CONNECT_RETRY - 419)) | (1L << (MASTER_DELAY - 419)) | (1L << (MASTER_HEARTBEAT_PERIOD - 419)) | (1L << (MASTER_HOST - 419)) | (1L << (MASTER_LOG_FILE - 419)) | (1L << (MASTER_LOG_POS - 419)) | (1L << (MASTER_PASSWORD - 419)) | (1L << (MASTER_PORT - 419)) | (1L << (MASTER_RETRY_COUNT - 419)) | (1L << (MASTER_SSL - 419)) | (1L << (MASTER_SSL_CA - 419)) | (1L << (MASTER_SSL_CAPATH - 419)) | (1L << (MASTER_SSL_CERT - 419)) | (1L << (MASTER_SSL_CIPHER - 419)) | (1L << (MASTER_SSL_CRL - 419)) | (1L << (MASTER_SSL_CRLPATH - 419)) | (1L << (MASTER_SSL_KEY - 419)) | (1L << (MASTER_TLS_VERSION - 419)) | (1L << (MASTER_USER - 419)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 419)) | (1L << (MAX_QUERIES_PER_HOUR - 419)) | (1L << (MAX_ROWS - 419)) | (1L << (MAX_SIZE - 419)) | (1L << (MAX_UPDATES_PER_HOUR - 419)) | (1L << (MAX_USER_CONNECTIONS - 419)) | (1L << (MEDIUM - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (MEMBER - 483)) | (1L << (MERGE - 483)) | (1L << (MESSAGE_TEXT - 483)) | (1L << (MID - 483)) | (1L << (MIGRATE - 483)) | (1L << (MIN_ROWS - 483)) | (1L << (MODE - 483)) | (1L << (MODIFY - 483)) | (1L << (MUTEX - 483)) | (1L << (MYSQL - 483)) | (1L << (MYSQL_ERRNO - 483)) | (1L << (NAME - 483)) | (1L << (NAMES - 483)) | (1L << (NCHAR - 483)) | (1L << (NEVER - 483)) | (1L << (NEXT - 483)) | (1L << (NO - 483)) | (1L << (NODEGROUP - 483)) | (1L << (NONE - 483)) | (1L << (ODBC - 483)) | (1L << (OFFLINE - 483)) | (1L << (OFFSET - 483)) | (1L << (OF - 483)) | (1L << (OJ - 483)) | (1L << (OLD_PASSWORD - 483)) | (1L << (ONE - 483)) | (1L << (ONLINE - 483)) | (1L << (ONLY - 483)) | (1L << (OPEN - 483)) | (1L << (OPTIMIZER_COSTS - 483)) | (1L << (OPTIONS - 483)) | (1L << (OWNER - 483)) | (1L << (PACK_KEYS - 483)) | (1L << (PAGE - 483)) | (1L << (PARSER - 483)) | (1L << (PARTIAL - 483)) | (1L << (PARTITIONING - 483)) | (1L << (PARTITIONS - 483)) | (1L << (PASSWORD - 483)) | (1L << (PHASE - 483)) | (1L << (PLUGIN - 483)) | (1L << (PLUGIN_DIR - 483)) | (1L << (PLUGINS - 483)) | (1L << (PORT - 483)) | (1L << (PRECEDES - 483)) | (1L << (PREPARE - 483)) | (1L << (PRESERVE - 483)) | (1L << (PREV - 483)) | (1L << (PROCESSLIST - 483)) | (1L << (PROFILE - 483)) | (1L << (PROFILES - 483)) | (1L << (PROXY - 483)) | (1L << (QUERY - 483)) | (1L << (QUICK - 483)) | (1L << (REBUILD - 483)) | (1L << (RECOVER - 483)) | (1L << (REDO_BUFFER_SIZE - 483)) | (1L << (REDUNDANT - 483)) | (1L << (RELAY - 483)) | (1L << (RELAY_LOG_FILE - 483)) | (1L << (RELAY_LOG_POS - 483)) | (1L << (RELAYLOG - 483)) | (1L << (REMOVE - 483)))) != 0) || ((((_la - 547)) & ~0x3f) == 0 && ((1L << (_la - 547)) & ((1L << (REORGANIZE - 547)) | (1L << (REPAIR - 547)) | (1L << (REPLICATE_DO_DB - 547)) | (1L << (REPLICATE_DO_TABLE - 547)) | (1L << (REPLICATE_IGNORE_DB - 547)) | (1L << (REPLICATE_IGNORE_TABLE - 547)) | (1L << (REPLICATE_REWRITE_DB - 547)) | (1L << (REPLICATE_WILD_DO_TABLE - 547)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 547)) | (1L << (REPLICATION - 547)) | (1L << (RESET - 547)) | (1L << (RESUME - 547)) | (1L << (RETURNED_SQLSTATE - 547)) | (1L << (RETURNS - 547)) | (1L << (ROLE - 547)) | (1L << (ROLLBACK - 547)) | (1L << (ROLLUP - 547)) | (1L << (ROTATE - 547)) | (1L << (ROW - 547)) | (1L << (ROWS - 547)) | (1L << (ROW_FORMAT - 547)) | (1L << (SAVEPOINT - 547)) | (1L << (SCHEDULE - 547)) | (1L << (SECURITY - 547)) | (1L << (SERVER - 547)) | (1L << (SESSION - 547)) | (1L << (SHARE - 547)) | (1L << (SHARED - 547)) | (1L << (SIGNED - 547)) | (1L << (SIMPLE - 547)) | (1L << (SLAVE - 547)) | (1L << (SLOW - 547)) | (1L << (SNAPSHOT - 547)) | (1L << (SOCKET - 547)) | (1L << (SOME - 547)) | (1L << (SONAME - 547)) | (1L << (SOUNDS - 547)) | (1L << (SOURCE - 547)) | (1L << (SQL_AFTER_GTIDS - 547)) | (1L << (SQL_AFTER_MTS_GAPS - 547)) | (1L << (SQL_BEFORE_GTIDS - 547)) | (1L << (SQL_BUFFER_RESULT - 547)) | (1L << (SQL_CACHE - 547)) | (1L << (SQL_NO_CACHE - 547)) | (1L << (SQL_THREAD - 547)) | (1L << (START - 547)) | (1L << (STARTS - 547)) | (1L << (STATS_AUTO_RECALC - 547)) | (1L << (STATS_PERSISTENT - 547)) | (1L << (STATS_SAMPLE_PAGES - 547)) | (1L << (STATUS - 547)) | (1L << (STOP - 547)) | (1L << (STORAGE - 547)) | (1L << (STRING - 547)) | (1L << (SUBCLASS_ORIGIN - 547)) | (1L << (SUBJECT - 547)) | (1L << (SUBPARTITION - 547)) | (1L << (SUBPARTITIONS - 547)) | (1L << (SUSPEND - 547)) | (1L << (SWAPS - 547)) | (1L << (SWITCHES - 547)) | (1L << (TABLE_NAME - 547)))) != 0) || ((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (TABLESPACE - 611)) | (1L << (TEMPORARY - 611)) | (1L << (TEMPTABLE - 611)) | (1L << (THAN - 611)) | (1L << (TRADITIONAL - 611)) | (1L << (TRANSACTION - 611)) | (1L << (TRANSACTIONAL - 611)) | (1L << (TRIGGERS - 611)) | (1L << (TRUNCATE - 611)) | (1L << (UNDEFINED - 611)) | (1L << (UNDOFILE - 611)) | (1L << (UNDO_BUFFER_SIZE - 611)) | (1L << (UNINSTALL - 611)) | (1L << (UNKNOWN - 611)) | (1L << (UNTIL - 611)) | (1L << (UPGRADE - 611)) | (1L << (USER - 611)) | (1L << (USE_FRM - 611)) | (1L << (USER_RESOURCES - 611)) | (1L << (VALIDATION - 611)) | (1L << (VALUE - 611)) | (1L << (VARIABLES - 611)) | (1L << (VIEW - 611)) | (1L << (VISIBLE - 611)) | (1L << (WAIT - 611)) | (1L << (WARNINGS - 611)) | (1L << (WITHOUT - 611)) | (1L << (WORK - 611)) | (1L << (WRAPPER - 611)) | (1L << (X509 - 611)) | (1L << (XA - 611)) | (1L << (XML - 611)) | (1L << (EUR - 611)) | (1L << (USA - 611)) | (1L << (JIS - 611)) | (1L << (ISO - 611)) | (1L << (INTERNAL - 611)) | (1L << (QUARTER - 611)) | (1L << (MONTH - 611)) | (1L << (DAY - 611)) | (1L << (HOUR - 611)) | (1L << (MINUTE - 611)) | (1L << (WEEK - 611)) | (1L << (SECOND - 611)) | (1L << (MICROSECOND - 611)) | (1L << (TABLES - 611)) | (1L << (ROUTINE - 611)) | (1L << (EXECUTE - 611)) | (1L << (FILE - 611)) | (1L << (PROCESS - 611)) | (1L << (RELOAD - 611)) | (1L << (SHUTDOWN - 611)) | (1L << (SUPER - 611)) | (1L << (PRIVILEGES - 611)) | (1L << (AUDIT_ADMIN - 611)) | (1L << (BACKUP_ADMIN - 611)) | (1L << (BINLOG_ADMIN - 611)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 611)) | (1L << (CLONE_ADMIN - 611)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (CONNECTION_ADMIN - 675)) | (1L << (ENCRYPTION_KEY_ADMIN - 675)) | (1L << (FIREWALL_ADMIN - 675)) | (1L << (FIREWALL_USER - 675)) | (1L << (GROUP_REPLICATION_ADMIN - 675)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 675)) | (1L << (NDB_STORED_USER - 675)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 675)) | (1L << (REPLICATION_APPLIER - 675)) | (1L << (REPLICATION_SLAVE_ADMIN - 675)) | (1L << (RESOURCE_GROUP_ADMIN - 675)) | (1L << (RESOURCE_GROUP_USER - 675)) | (1L << (ROLE_ADMIN - 675)) | (1L << (SESSION_VARIABLES_ADMIN - 675)) | (1L << (SET_USER_ID - 675)) | (1L << (SHOW_ROUTINE - 675)) | (1L << (SYSTEM_VARIABLES_ADMIN - 675)) | (1L << (TABLE_ENCRYPTION_ADMIN - 675)) | (1L << (VERSION_TOKEN_ADMIN - 675)) | (1L << (XA_RECOVER_ADMIN - 675)) | (1L << (ARMSCII8 - 675)) | (1L << (ASCII - 675)) | (1L << (BIG5 - 675)) | (1L << (CP1250 - 675)) | (1L << (CP1251 - 675)) | (1L << (CP1256 - 675)) | (1L << (CP1257 - 675)) | (1L << (CP850 - 675)) | (1L << (CP852 - 675)) | (1L << (CP866 - 675)) | (1L << (CP932 - 675)) | (1L << (DEC8 - 675)) | (1L << (EUCJPMS - 675)) | (1L << (EUCKR - 675)) | (1L << (GB2312 - 675)) | (1L << (GBK - 675)) | (1L << (GEOSTD8 - 675)) | (1L << (GREEK - 675)) | (1L << (HEBREW - 675)) | (1L << (HP8 - 675)) | (1L << (KEYBCS2 - 675)) | (1L << (KOI8R - 675)) | (1L << (KOI8U - 675)) | (1L << (LATIN1 - 675)) | (1L << (LATIN2 - 675)) | (1L << (LATIN5 - 675)) | (1L << (LATIN7 - 675)) | (1L << (MACCE - 675)) | (1L << (MACROMAN - 675)) | (1L << (SJIS - 675)) | (1L << (SWE7 - 675)) | (1L << (TIS620 - 675)) | (1L << (UCS2 - 675)) | (1L << (UJIS - 675)) | (1L << (UTF16 - 675)) | (1L << (UTF16LE - 675)) | (1L << (UTF32 - 675)) | (1L << (UTF8 - 675)))) != 0) || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & ((1L << (UTF8MB3 - 739)) | (1L << (UTF8MB4 - 739)) | (1L << (ARCHIVE - 739)) | (1L << (BLACKHOLE - 739)) | (1L << (CSV - 739)) | (1L << (FEDERATED - 739)) | (1L << (INNODB - 739)) | (1L << (MEMORY - 739)) | (1L << (MRG_MYISAM - 739)) | (1L << (MYISAM - 739)) | (1L << (NDB - 739)) | (1L << (NDBCLUSTER - 739)) | (1L << (PERFORMANCE_SCHEMA - 739)) | (1L << (TOKUDB - 739)) | (1L << (REPEATABLE - 739)) | (1L << (COMMITTED - 739)) | (1L << (UNCOMMITTED - 739)) | (1L << (SERIALIZABLE - 739)) | (1L << (GEOMETRYCOLLECTION - 739)) | (1L << (LINESTRING - 739)) | (1L << (MULTILINESTRING - 739)) | (1L << (MULTIPOINT - 739)) | (1L << (MULTIPOLYGON - 739)) | (1L << (POINT - 739)) | (1L << (POLYGON - 739)) | (1L << (ABS - 739)) | (1L << (ACOS - 739)) | (1L << (ADDDATE - 739)) | (1L << (ADDTIME - 739)) | (1L << (AES_DECRYPT - 739)) | (1L << (AES_ENCRYPT - 739)) | (1L << (AREA - 739)) | (1L << (ASBINARY - 739)) | (1L << (ASIN - 739)) | (1L << (ASTEXT - 739)) | (1L << (ASWKB - 739)) | (1L << (ASWKT - 739)) | (1L << (ASYMMETRIC_DECRYPT - 739)) | (1L << (ASYMMETRIC_DERIVE - 739)) | (1L << (ASYMMETRIC_ENCRYPT - 739)) | (1L << (ASYMMETRIC_SIGN - 739)) | (1L << (ASYMMETRIC_VERIFY - 739)) | (1L << (ATAN - 739)) | (1L << (ATAN2 - 739)) | (1L << (BENCHMARK - 739)) | (1L << (BIN - 739)) | (1L << (BIT_COUNT - 739)) | (1L << (BIT_LENGTH - 739)) | (1L << (BUFFER - 739)) | (1L << (CATALOG_NAME - 739)) | (1L << (CEIL - 739)) | (1L << (CEILING - 739)) | (1L << (CENTROID - 739)) | (1L << (CHARACTER_LENGTH - 739)) | (1L << (CHARSET - 739)) | (1L << (CHAR_LENGTH - 739)) | (1L << (COERCIBILITY - 739)) | (1L << (COLLATION - 739)) | (1L << (COMPRESS - 739)) | (1L << (CONCAT - 739)) | (1L << (CONCAT_WS - 739)) | (1L << (CONNECTION_ID - 739)))) != 0) || ((((_la - 803)) & ~0x3f) == 0 && ((1L << (_la - 803)) & ((1L << (CONV - 803)) | (1L << (CONVERT_TZ - 803)) | (1L << (COS - 803)) | (1L << (COT - 803)) | (1L << (CRC32 - 803)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 803)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 803)) | (1L << (CREATE_DH_PARAMETERS - 803)) | (1L << (CREATE_DIGEST - 803)) | (1L << (CROSSES - 803)) | (1L << (DATEDIFF - 803)) | (1L << (DATE_FORMAT - 803)) | (1L << (DAYNAME - 803)) | (1L << (DAYOFMONTH - 803)) | (1L << (DAYOFWEEK - 803)) | (1L << (DAYOFYEAR - 803)) | (1L << (DECODE - 803)) | (1L << (DEGREES - 803)) | (1L << (DES_DECRYPT - 803)) | (1L << (DES_ENCRYPT - 803)) | (1L << (DIMENSION - 803)) | (1L << (DISJOINT - 803)) | (1L << (ELT - 803)) | (1L << (ENCODE - 803)) | (1L << (ENCRYPT - 803)) | (1L << (ENDPOINT - 803)) | (1L << (ENVELOPE - 803)) | (1L << (EQUALS - 803)) | (1L << (EXP - 803)) | (1L << (EXPORT_SET - 803)) | (1L << (EXTERIORRING - 803)) | (1L << (EXTRACTVALUE - 803)) | (1L << (FIELD - 803)) | (1L << (FIND_IN_SET - 803)) | (1L << (FLOOR - 803)) | (1L << (FORMAT - 803)) | (1L << (FOUND_ROWS - 803)) | (1L << (FROM_BASE64 - 803)) | (1L << (FROM_DAYS - 803)) | (1L << (FROM_UNIXTIME - 803)) | (1L << (GEOMCOLLFROMTEXT - 803)) | (1L << (GEOMCOLLFROMWKB - 803)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 803)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 803)) | (1L << (GEOMETRYFROMTEXT - 803)) | (1L << (GEOMETRYFROMWKB - 803)) | (1L << (GEOMETRYN - 803)) | (1L << (GEOMETRYTYPE - 803)) | (1L << (GEOMFROMTEXT - 803)) | (1L << (GEOMFROMWKB - 803)) | (1L << (GET_FORMAT - 803)) | (1L << (GET_LOCK - 803)) | (1L << (GLENGTH - 803)) | (1L << (GREATEST - 803)) | (1L << (GTID_SUBSET - 803)) | (1L << (GTID_SUBTRACT - 803)) | (1L << (HEX - 803)) | (1L << (IFNULL - 803)) | (1L << (INET6_ATON - 803)) | (1L << (INET6_NTOA - 803)) | (1L << (INET_ATON - 803)) | (1L << (INET_NTOA - 803)) | (1L << (INSTR - 803)) | (1L << (INTERIORRINGN - 803)))) != 0) || ((((_la - 867)) & ~0x3f) == 0 && ((1L << (_la - 867)) & ((1L << (INTERSECTS - 867)) | (1L << (ISCLOSED - 867)) | (1L << (ISEMPTY - 867)) | (1L << (ISNULL - 867)) | (1L << (ISSIMPLE - 867)) | (1L << (IS_FREE_LOCK - 867)) | (1L << (IS_IPV4 - 867)) | (1L << (IS_IPV4_COMPAT - 867)) | (1L << (IS_IPV4_MAPPED - 867)) | (1L << (IS_IPV6 - 867)) | (1L << (IS_USED_LOCK - 867)) | (1L << (LAST_INSERT_ID - 867)) | (1L << (LCASE - 867)) | (1L << (LEAST - 867)) | (1L << (LENGTH - 867)) | (1L << (LINEFROMTEXT - 867)) | (1L << (LINEFROMWKB - 867)) | (1L << (LINESTRINGFROMTEXT - 867)) | (1L << (LINESTRINGFROMWKB - 867)) | (1L << (LN - 867)) | (1L << (LOAD_FILE - 867)) | (1L << (LOCATE - 867)) | (1L << (LOG - 867)) | (1L << (LOG10 - 867)) | (1L << (LOG2 - 867)) | (1L << (LOWER - 867)) | (1L << (LPAD - 867)) | (1L << (LTRIM - 867)) | (1L << (MAKEDATE - 867)) | (1L << (MAKETIME - 867)) | (1L << (MAKE_SET - 867)) | (1L << (MASTER_POS_WAIT - 867)) | (1L << (MBRCONTAINS - 867)) | (1L << (MBRDISJOINT - 867)) | (1L << (MBREQUAL - 867)) | (1L << (MBRINTERSECTS - 867)) | (1L << (MBROVERLAPS - 867)) | (1L << (MBRTOUCHES - 867)) | (1L << (MBRWITHIN - 867)) | (1L << (MD5 - 867)) | (1L << (MLINEFROMTEXT - 867)) | (1L << (MLINEFROMWKB - 867)) | (1L << (MONTHNAME - 867)) | (1L << (MPOINTFROMTEXT - 867)) | (1L << (MPOINTFROMWKB - 867)) | (1L << (MPOLYFROMTEXT - 867)) | (1L << (MPOLYFROMWKB - 867)) | (1L << (MULTILINESTRINGFROMTEXT - 867)) | (1L << (MULTILINESTRINGFROMWKB - 867)) | (1L << (MULTIPOINTFROMTEXT - 867)) | (1L << (MULTIPOINTFROMWKB - 867)) | (1L << (MULTIPOLYGONFROMTEXT - 867)) | (1L << (MULTIPOLYGONFROMWKB - 867)) | (1L << (NAME_CONST - 867)) | (1L << (NULLIF - 867)) | (1L << (NUMGEOMETRIES - 867)) | (1L << (NUMINTERIORRINGS - 867)) | (1L << (NUMPOINTS - 867)) | (1L << (OCT - 867)) | (1L << (OCTET_LENGTH - 867)) | (1L << (ORD - 867)) | (1L << (OVERLAPS - 867)) | (1L << (PERIOD_ADD - 867)) | (1L << (PERIOD_DIFF - 867)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PI - 931)) | (1L << (POINTFROMTEXT - 931)) | (1L << (POINTFROMWKB - 931)) | (1L << (POINTN - 931)) | (1L << (POLYFROMTEXT - 931)) | (1L << (POLYFROMWKB - 931)) | (1L << (POLYGONFROMTEXT - 931)) | (1L << (POLYGONFROMWKB - 931)) | (1L << (POW - 931)) | (1L << (POWER - 931)) | (1L << (QUOTE - 931)) | (1L << (RADIANS - 931)) | (1L << (RAND - 931)) | (1L << (RANDOM_BYTES - 931)) | (1L << (RELEASE_LOCK - 931)) | (1L << (REVERSE - 931)) | (1L << (ROUND - 931)) | (1L << (ROW_COUNT - 931)) | (1L << (RPAD - 931)) | (1L << (RTRIM - 931)) | (1L << (SEC_TO_TIME - 931)) | (1L << (SESSION_USER - 931)) | (1L << (SHA - 931)) | (1L << (SHA1 - 931)) | (1L << (SHA2 - 931)) | (1L << (SCHEMA_NAME - 931)) | (1L << (SIGN - 931)) | (1L << (SIN - 931)) | (1L << (SLEEP - 931)) | (1L << (SOUNDEX - 931)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 931)) | (1L << (SQRT - 931)) | (1L << (SRID - 931)) | (1L << (STARTPOINT - 931)) | (1L << (STRCMP - 931)) | (1L << (STR_TO_DATE - 931)) | (1L << (ST_AREA - 931)) | (1L << (ST_ASBINARY - 931)) | (1L << (ST_ASTEXT - 931)) | (1L << (ST_ASWKB - 931)) | (1L << (ST_ASWKT - 931)) | (1L << (ST_BUFFER - 931)) | (1L << (ST_CENTROID - 931)) | (1L << (ST_CONTAINS - 931)) | (1L << (ST_CROSSES - 931)) | (1L << (ST_DIFFERENCE - 931)) | (1L << (ST_DIMENSION - 931)) | (1L << (ST_DISJOINT - 931)) | (1L << (ST_DISTANCE - 931)) | (1L << (ST_ENDPOINT - 931)) | (1L << (ST_ENVELOPE - 931)) | (1L << (ST_EQUALS - 931)) | (1L << (ST_EXTERIORRING - 931)) | (1L << (ST_GEOMCOLLFROMTEXT - 931)) | (1L << (ST_GEOMCOLLFROMTXT - 931)) | (1L << (ST_GEOMCOLLFROMWKB - 931)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 931)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 931)) | (1L << (ST_GEOMETRYFROMTEXT - 931)) | (1L << (ST_GEOMETRYFROMWKB - 931)) | (1L << (ST_GEOMETRYN - 931)) | (1L << (ST_GEOMETRYTYPE - 931)) | (1L << (ST_GEOMFROMTEXT - 931)) | (1L << (ST_GEOMFROMWKB - 931)))) != 0) || ((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ST_INTERIORRINGN - 995)) | (1L << (ST_INTERSECTION - 995)) | (1L << (ST_INTERSECTS - 995)) | (1L << (ST_ISCLOSED - 995)) | (1L << (ST_ISEMPTY - 995)) | (1L << (ST_ISSIMPLE - 995)) | (1L << (ST_LINEFROMTEXT - 995)) | (1L << (ST_LINEFROMWKB - 995)) | (1L << (ST_LINESTRINGFROMTEXT - 995)) | (1L << (ST_LINESTRINGFROMWKB - 995)) | (1L << (ST_NUMGEOMETRIES - 995)) | (1L << (ST_NUMINTERIORRING - 995)) | (1L << (ST_NUMINTERIORRINGS - 995)) | (1L << (ST_NUMPOINTS - 995)) | (1L << (ST_OVERLAPS - 995)) | (1L << (ST_POINTFROMTEXT - 995)) | (1L << (ST_POINTFROMWKB - 995)) | (1L << (ST_POINTN - 995)) | (1L << (ST_POLYFROMTEXT - 995)) | (1L << (ST_POLYFROMWKB - 995)) | (1L << (ST_POLYGONFROMTEXT - 995)) | (1L << (ST_POLYGONFROMWKB - 995)) | (1L << (ST_SRID - 995)) | (1L << (ST_STARTPOINT - 995)) | (1L << (ST_SYMDIFFERENCE - 995)) | (1L << (ST_TOUCHES - 995)) | (1L << (ST_UNION - 995)) | (1L << (ST_WITHIN - 995)) | (1L << (ST_X - 995)) | (1L << (ST_Y - 995)) | (1L << (SUBDATE - 995)) | (1L << (SUBSTRING_INDEX - 995)) | (1L << (SUBTIME - 995)) | (1L << (SYSTEM_USER - 995)) | (1L << (TAN - 995)) | (1L << (TIMEDIFF - 995)) | (1L << (TIMESTAMPADD - 995)) | (1L << (TIMESTAMPDIFF - 995)) | (1L << (TIME_FORMAT - 995)) | (1L << (TIME_TO_SEC - 995)) | (1L << (TOUCHES - 995)) | (1L << (TO_BASE64 - 995)) | (1L << (TO_DAYS - 995)) | (1L << (TO_SECONDS - 995)) | (1L << (UCASE - 995)) | (1L << (UNCOMPRESS - 995)) | (1L << (UNCOMPRESSED_LENGTH - 995)) | (1L << (UNHEX - 995)) | (1L << (UNIX_TIMESTAMP - 995)) | (1L << (UPDATEXML - 995)) | (1L << (UPPER - 995)) | (1L << (UUID - 995)) | (1L << (UUID_SHORT - 995)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 995)) | (1L << (VERSION - 995)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 995)) | (1L << (WEEKDAY - 995)) | (1L << (WEEKOFYEAR - 995)) | (1L << (WEIGHT_STRING - 995)) | (1L << (WITHIN - 995)) | (1L << (YEARWEEK - 995)) | (1L << (Y_FUNCTION - 995)) | (1L << (X_FUNCTION - 995)))) != 0) || ((((_la - 1073)) & ~0x3f) == 0 && ((1L << (_la - 1073)) & ((1L << (MOD - 1073)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1073)) | (1L << (STRING_LITERAL - 1073)) | (1L << (ID - 1073)) | (1L << (REVERSE_QUOTE_ID - 1073)) | (1L << (OPTIONAL - 1073)))) != 0)) {
				{
				State = 3294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3293;
					Match(AS);
					}
				}

				State = 3296;
				uid();
				}
			}

			State = 3299;
			Match(SET);
			State = 3300;
			updatedElement();
			State = 3305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3301;
				Match(COMMA);
				State = 3302;
				updatedElement();
				}
				}
				State = 3307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3308;
				Match(WHERE);
				State = 3309;
				expression(0);
				}
			}

			State = 3313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3312;
				orderByClause();
				}
			}

			State = 3316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3315;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 206, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3318;
			Match(UPDATE);
			State = 3320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3319;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3322;
				Match(IGNORE);
				}
			}

			State = 3325;
			tableSources();
			State = 3326;
			Match(SET);
			State = 3327;
			updatedElement();
			State = 3332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3328;
				Match(COMMA);
				State = 3329;
				updatedElement();
				}
				}
				State = 3334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3335;
				Match(WHERE);
				State = 3336;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 208, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3339;
			Match(ORDER);
			State = 3340;
			Match(BY);
			State = 3341;
			orderByExpression();
			State = 3346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3342;
				Match(COMMA);
				State = 3343;
				orderByExpression();
				}
				}
				State = 3348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 210, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3349;
			expression(0);
			State = 3351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				{
				State = 3350;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 212, RULE_tableSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3353;
			tableSource();
			State = 3358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3354;
				Match(COMMA);
				State = 3355;
				tableSource();
				}
				}
				State = 3360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 214, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3361;
				tableSourceItem();
				State = 3365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,465,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3362;
						joinPart();
						}
						} 
					}
					State = 3367;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,465,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3368;
				Match(LR_BRACKET);
				State = 3369;
				tableSourceItem();
				State = 3373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NATURAL - 106)) | (1L << (RIGHT - 106)) | (1L << (STRAIGHT_JOIN - 106)))) != 0)) {
					{
					{
					State = 3370;
					joinPart();
					}
					}
					State = 3375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3376;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourcesItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 216, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3380;
				tableName();
				State = 3386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3381;
					Match(PARTITION);
					State = 3382;
					Match(LR_BRACKET);
					State = 3383;
					uidList();
					State = 3384;
					Match(RR_BRACKET);
					}
				}

				State = 3392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
				case 1:
					{
					State = 3389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3388;
						Match(AS);
						}
					}

					State = 3391;
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
				case 1:
					{
					State = 3394;
					indexHint();
					State = 3399;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,471,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3395;
							Match(COMMA);
							State = 3396;
							indexHint();
							}
							} 
						}
						State = 3401;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,471,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
				case 1:
					{
					State = 3404;
					selectStatement();
					}
					break;
				case 2:
					{
					State = 3405;
					Match(LR_BRACKET);
					State = 3406;
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3407;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3411;
					Match(AS);
					}
				}

				State = 3414;
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3416;
				Match(LR_BRACKET);
				State = 3417;
				tableSources();
				State = 3418;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 218, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3422;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3423;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3424;
				Match(FOR);
				State = 3425;
				indexHintType();
				}
			}

			State = 3428;
			Match(LR_BRACKET);
			State = 3429;
			uidList();
			State = 3430;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 220, RULE_indexHintType);
		try {
			State = 3437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3432;
				Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3433;
				Match(ORDER);
				State = 3434;
				Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3435;
				Match(GROUP);
				State = 3436;
				Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStraightJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 222, RULE_joinPart);
		int _la;
		try {
			State = 3483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3439;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3442;
				Match(JOIN);
				State = 3443;
				tableSourceItem();
				State = 3451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
				case 1:
					{
					State = 3444;
					Match(ON);
					State = 3445;
					expression(0);
					}
					break;
				case 2:
					{
					State = 3446;
					Match(USING);
					State = 3447;
					Match(LR_BRACKET);
					State = 3448;
					uidList();
					State = 3449;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3453;
				Match(STRAIGHT_JOIN);
				State = 3454;
				tableSourceItem();
				State = 3457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
				case 1:
					{
					State = 3455;
					Match(ON);
					State = 3456;
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3459;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3460;
					Match(OUTER);
					}
				}

				State = 3463;
				Match(JOIN);
				State = 3464;
				tableSourceItem();
				State = 3472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 3465;
					Match(ON);
					State = 3466;
					expression(0);
					}
					break;
				case USING:
					{
					State = 3467;
					Match(USING);
					State = 3468;
					Match(LR_BRACKET);
					State = 3469;
					uidList();
					State = 3470;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3474;
				Match(NATURAL);
				State = 3479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 3475;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 3476;
						Match(OUTER);
						}
					}

					}
				}

				State = 3481;
				Match(JOIN);
				State = 3482;
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_queryExpression);
		try {
			State = 3493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3485;
				Match(LR_BRACKET);
				State = 3486;
				querySpecification();
				State = 3487;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3489;
				Match(LR_BRACKET);
				State = 3490;
				queryExpression();
				State = 3491;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 226, RULE_queryExpressionNointo);
		try {
			State = 3503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3495;
				Match(LR_BRACKET);
				State = 3496;
				querySpecificationNointo();
				State = 3497;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3499;
				Match(LR_BRACKET);
				State = 3500;
				queryExpressionNointo();
				State = 3501;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 3563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,504,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3505;
				Match(SELECT);
				State = 3509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,488,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3506;
						selectSpec();
						}
						} 
					}
					State = 3511;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,488,Context);
				}
				State = 3512;
				selectElements();
				State = 3514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3513;
					selectIntoExpression();
					}
				}

				State = 3517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 3516;
					fromClause();
					}
				}

				State = 3520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
				case 1:
					{
					State = 3519;
					groupByClause();
					}
					break;
				}
				State = 3523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3522;
					havingClause();
					}
				}

				State = 3526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3525;
					windowClause();
					}
				}

				State = 3529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
				case 1:
					{
					State = 3528;
					orderByClause();
					}
					break;
				}
				State = 3532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
				case 1:
					{
					State = 3531;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3534;
				Match(SELECT);
				State = 3538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,496,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3535;
						selectSpec();
						}
						} 
					}
					State = 3540;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,496,Context);
				}
				State = 3541;
				selectElements();
				State = 3543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 3542;
					fromClause();
					}
				}

				State = 3546;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
				case 1:
					{
					State = 3545;
					groupByClause();
					}
					break;
				}
				State = 3549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3548;
					havingClause();
					}
				}

				State = 3552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3551;
					windowClause();
					}
				}

				State = 3555;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
				case 1:
					{
					State = 3554;
					orderByClause();
					}
					break;
				}
				State = 3558;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,502,Context) ) {
				case 1:
					{
					State = 3557;
					limitClause();
					}
					break;
				}
				State = 3561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3560;
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecificationNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 230, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3565;
			Match(SELECT);
			State = 3569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,505,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3566;
					selectSpec();
					}
					} 
				}
				State = 3571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,505,Context);
			}
			State = 3572;
			selectElements();
			State = 3574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3573;
				fromClause();
				}
			}

			State = 3577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				{
				State = 3576;
				groupByClause();
				}
				break;
			}
			State = 3580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 3579;
				havingClause();
				}
			}

			State = 3583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 3582;
				windowClause();
				}
			}

			State = 3586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
			case 1:
				{
				State = 3585;
				orderByClause();
				}
				break;
			}
			State = 3589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				{
				State = 3588;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 232, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3591;
			Match(UNION);
			State = 3593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3592;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3595;
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3597;
			Match(UNION);
			State = 3599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3598;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 3601;
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 3602;
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 236, RULE_selectSpec);
		int _la;
		try {
			State = 3613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3605;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3606;
				Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3607;
				Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3608;
				Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3609;
				Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3610;
				Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3611;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3612;
				Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 238, RULE_selectElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
			case 1:
				{
				State = 3615;
				_localctx.star = Match(STAR);
				}
				break;
			case 2:
				{
				State = 3616;
				selectElement();
				}
				break;
			}
			State = 3623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3619;
				Match(COMMA);
				State = 3620;
				selectElement();
				}
				}
				State = 3625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFunctionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStarElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 240, RULE_selectElement);
		int _la;
		try {
			State = 3655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3626;
				fullId();
				State = 3627;
				Match(DOT);
				State = 3628;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3630;
				fullColumnName();
				State = 3635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
				case 1:
					{
					State = 3632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3631;
						Match(AS);
						}
					}

					State = 3634;
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3637;
				functionCall();
				State = 3642;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
				case 1:
					{
					State = 3639;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3638;
						Match(AS);
						}
					}

					State = 3641;
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
				case 1:
					{
					State = 3644;
					Match(LOCAL_ID);
					State = 3645;
					Match(VAR_ASSIGN);
					}
					break;
				}
				State = 3648;
				expression(0);
				State = 3653;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
				case 1:
					{
					State = 3650;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3649;
						Match(AS);
						}
					}

					State = 3652;
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoTextFile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoDumpFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_selectIntoExpression);
		int _la;
		try {
			State = 3693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3657;
				Match(INTO);
				State = 3658;
				assignmentField();
				State = 3663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3659;
					Match(COMMA);
					State = 3660;
					assignmentField();
					}
					}
					State = 3665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3666;
				Match(INTO);
				State = 3667;
				Match(DUMPFILE);
				State = 3668;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 3669;
				Match(INTO);
				State = 3670;
				Match(OUTFILE);
				State = 3671;
				((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 3675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 3672;
					Match(CHARACTER);
					State = 3673;
					Match(SET);
					State = 3674;
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 3683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
				case 1:
					{
					State = 3677;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3679;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3678;
						selectFieldsInto();
						}
						}
						State = 3681;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 3691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 3685;
					Match(LINES);
					State = 3687;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3686;
						selectLinesInto();
						}
						}
						State = 3689;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldsInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 244, RULE_selectFieldsInto);
		int _la;
		try {
			State = 3707;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3695;
				Match(TERMINATED);
				State = 3696;
				Match(BY);
				State = 3697;
				_localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 3698;
					Match(OPTIONALLY);
					}
				}

				State = 3701;
				Match(ENCLOSED);
				State = 3702;
				Match(BY);
				State = 3703;
				_localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3704;
				Match(ESCAPED);
				State = 3705;
				Match(BY);
				State = 3706;
				_localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLinesInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 246, RULE_selectLinesInto);
		try {
			State = 3715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3709;
				Match(STARTING);
				State = 3710;
				Match(BY);
				State = 3711;
				_localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3712;
				Match(TERMINATED);
				State = 3713;
				Match(BY);
				State = 3714;
				_localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3717;
			Match(FROM);
			State = 3718;
			tableSources();
			State = 3721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3719;
				Match(WHERE);
				State = 3720;
				_localctx.whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3723;
			Match(GROUP);
			State = 3724;
			Match(BY);
			State = 3725;
			groupByItem();
			State = 3730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3726;
				Match(COMMA);
				State = 3727;
				groupByItem();
				}
				}
				State = 3732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
			case 1:
				{
				State = 3733;
				Match(WITH);
				State = 3734;
				Match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ExpressionContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 252, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3737;
			Match(HAVING);
			State = 3738;
			_localctx.havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(MySqlParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext[] windowName() {
			return GetRuleContexts<WindowNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName(int i) {
			return GetRuleContext<WindowNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(MySqlParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(MySqlParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext[] windowSpec() {
			return GetRuleContexts<WindowSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec(int i) {
			return GetRuleContext<WindowSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 254, RULE_windowClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3740;
			Match(WINDOW);
			State = 3741;
			windowName();
			State = 3742;
			Match(AS);
			State = 3743;
			Match(LR_BRACKET);
			State = 3744;
			windowSpec();
			State = 3745;
			Match(RR_BRACKET);
			State = 3755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3746;
				Match(COMMA);
				State = 3747;
				windowName();
				State = 3748;
				Match(AS);
				State = 3749;
				Match(LR_BRACKET);
				State = 3750;
				windowSpec();
				State = 3751;
				Match(RR_BRACKET);
				}
				}
				State = 3757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 256, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3758;
			expression(0);
			State = 3760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				{
				State = 3759;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext[] limitClauseAtom() {
			return GetRuleContexts<LimitClauseAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom(int i) {
			return GetRuleContext<LimitClauseAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3762;
			Match(LIMIT);
			State = 3773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 3766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
				case 1:
					{
					State = 3763;
					_localctx.offset = limitClauseAtom();
					State = 3764;
					Match(COMMA);
					}
					break;
				}
				State = 3768;
				_localctx.limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				State = 3769;
				_localctx.limit = limitClauseAtom();
				State = 3770;
				Match(OFFSET);
				State = 3771;
				_localctx.offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClauseAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseAtomContext limitClauseAtom() {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
		EnterRule(_localctx, 260, RULE_limitClauseAtom);
		try {
			State = 3778;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3775;
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3776;
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3777;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 262, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3780;
			Match(START);
			State = 3781;
			Match(TRANSACTION);
			State = 3790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 3782;
				transactionMode();
				State = 3787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3783;
					Match(COMMA);
					State = 3784;
					transactionMode();
					}
					}
					State = 3789;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 264, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3792;
			Match(BEGIN);
			State = 3794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3793;
				Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 266, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3796;
			Match(COMMIT);
			State = 3798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3797;
				Match(WORK);
				}
			}

			State = 3805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3800;
				Match(AND);
				State = 3802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3801;
					_localctx.nochain = Match(NO);
					}
				}

				State = 3804;
				Match(CHAIN);
				}
			}

			State = 3811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,551,Context) ) {
			case 1:
				{
				State = 3808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3807;
					_localctx.norelease = Match(NO);
					}
				}

				State = 3810;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 268, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3813;
			Match(ROLLBACK);
			State = 3815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3814;
				Match(WORK);
				}
			}

			State = 3822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3817;
				Match(AND);
				State = 3819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3818;
					_localctx.nochain = Match(NO);
					}
				}

				State = 3821;
				Match(CHAIN);
				}
			}

			State = 3828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
			case 1:
				{
				State = 3825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3824;
					_localctx.norelease = Match(NO);
					}
				}

				State = 3827;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3830;
			Match(SAVEPOINT);
			State = 3831;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3833;
			Match(ROLLBACK);
			State = 3835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3834;
				Match(WORK);
				}
			}

			State = 3837;
			Match(TO);
			State = 3839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				{
				State = 3838;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 3841;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReleaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 274, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3843;
			Match(RELEASE);
			State = 3844;
			Match(SAVEPOINT);
			State = 3845;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 276, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3847;
			Match(LOCK);
			State = 3848;
			Match(TABLES);
			State = 3849;
			lockTableElement();
			State = 3854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3850;
				Match(COMMA);
				State = 3851;
				lockTableElement();
				}
				}
				State = 3856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 278, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3857;
			Match(UNLOCK);
			State = 3858;
			Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 280, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3860;
			Match(SET);
			State = 3861;
			Match(AUTOCOMMIT);
			State = 3862;
			Match(EQUAL_SYMBOL);
			State = 3863;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 282, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3865;
			Match(SET);
			State = 3867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 3866;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3869;
			Match(TRANSACTION);
			State = 3870;
			transactionOption();
			State = 3875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3871;
				Match(COMMA);
				State = 3872;
				transactionOption();
				}
				}
				State = 3877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 284, RULE_transactionMode);
		try {
			State = 3885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3878;
				Match(WITH);
				State = 3879;
				Match(CONSISTENT);
				State = 3880;
				Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3881;
				Match(READ);
				State = 3882;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3883;
				Match(READ);
				State = 3884;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 286, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887;
			tableName();
			State = 3892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (AS - 12)) | (1L << (CURRENT - 12)) | (1L << (DATABASE - 12)) | (1L << (DIAGNOSTICS - 12)) | (1L << (EXCEPT - 12)) | (1L << (GROUP - 12)))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (NUMBER - 92)) | (1L << (ORDER - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (STACKED - 158)) | (1L << (DATE - 158)) | (1L << (TIME - 158)) | (1L << (TIMESTAMP - 158)) | (1L << (DATETIME - 158)) | (1L << (YEAR - 158)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXT - 223)) | (1L << (ENUM - 223)) | (1L << (SERIAL - 223)) | (1L << (JSON_ARRAY - 223)) | (1L << (JSON_OBJECT - 223)) | (1L << (JSON_QUOTE - 223)) | (1L << (JSON_CONTAINS - 223)) | (1L << (JSON_CONTAINS_PATH - 223)) | (1L << (JSON_EXTRACT - 223)) | (1L << (JSON_KEYS - 223)) | (1L << (JSON_OVERLAPS - 223)) | (1L << (JSON_SEARCH - 223)) | (1L << (JSON_VALUE - 223)) | (1L << (JSON_ARRAY_APPEND - 223)) | (1L << (JSON_ARRAY_INSERT - 223)) | (1L << (JSON_INSERT - 223)) | (1L << (JSON_MERGE - 223)) | (1L << (JSON_MERGE_PATCH - 223)) | (1L << (JSON_MERGE_PRESERVE - 223)) | (1L << (JSON_REMOVE - 223)) | (1L << (JSON_REPLACE - 223)) | (1L << (JSON_SET - 223)) | (1L << (JSON_UNQUOTE - 223)) | (1L << (JSON_DEPTH - 223)) | (1L << (JSON_LENGTH - 223)) | (1L << (JSON_TYPE - 223)) | (1L << (JSON_VALID - 223)) | (1L << (JSON_TABLE - 223)) | (1L << (JSON_SCHEMA_VALID - 223)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 223)) | (1L << (JSON_PRETTY - 223)) | (1L << (JSON_STORAGE_FREE - 223)) | (1L << (JSON_STORAGE_SIZE - 223)) | (1L << (JSON_ARRAYAGG - 223)) | (1L << (JSON_OBJECTAGG - 223)) | (1L << (AVG - 223)) | (1L << (BIT_AND - 223)) | (1L << (BIT_OR - 223)) | (1L << (BIT_XOR - 223)) | (1L << (COUNT - 223)) | (1L << (GROUP_CONCAT - 223)) | (1L << (MAX - 223)) | (1L << (MIN - 223)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (STD - 291)) | (1L << (STDDEV - 291)) | (1L << (STDDEV_POP - 291)) | (1L << (STDDEV_SAMP - 291)) | (1L << (SUM - 291)) | (1L << (VAR_POP - 291)) | (1L << (VAR_SAMP - 291)) | (1L << (VARIANCE - 291)) | (1L << (POSITION - 291)) | (1L << (ACCOUNT - 291)) | (1L << (ACTION - 291)) | (1L << (AFTER - 291)) | (1L << (AGGREGATE - 291)) | (1L << (ALGORITHM - 291)) | (1L << (ANY - 291)) | (1L << (AT - 291)) | (1L << (AUTHORS - 291)) | (1L << (AUTOCOMMIT - 291)) | (1L << (AUTOEXTEND_SIZE - 291)) | (1L << (AUTO_INCREMENT - 291)) | (1L << (AVG_ROW_LENGTH - 291)) | (1L << (BEGIN - 291)) | (1L << (BINLOG - 291)) | (1L << (BIT - 291)) | (1L << (BLOCK - 291)) | (1L << (BOOL - 291)) | (1L << (BOOLEAN - 291)) | (1L << (BTREE - 291)) | (1L << (CACHE - 291)) | (1L << (CASCADED - 291)) | (1L << (CHAIN - 291)) | (1L << (CHANGED - 291)) | (1L << (CHANNEL - 291)) | (1L << (CHECKSUM - 291)) | (1L << (PAGE_CHECKSUM - 291)) | (1L << (CIPHER - 291)) | (1L << (CLASS_ORIGIN - 291)) | (1L << (CLIENT - 291)) | (1L << (CLOSE - 291)) | (1L << (COALESCE - 291)) | (1L << (CODE - 291)) | (1L << (COLUMNS - 291)) | (1L << (COLUMN_FORMAT - 291)) | (1L << (COLUMN_NAME - 291)) | (1L << (COMMENT - 291)) | (1L << (COMMIT - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (COMPACT - 355)) | (1L << (COMPLETION - 355)) | (1L << (COMPRESSED - 355)) | (1L << (COMPRESSION - 355)) | (1L << (CONCURRENT - 355)) | (1L << (CONNECT - 355)) | (1L << (CONNECTION - 355)) | (1L << (CONSISTENT - 355)) | (1L << (CONSTRAINT_CATALOG - 355)) | (1L << (CONSTRAINT_SCHEMA - 355)) | (1L << (CONSTRAINT_NAME - 355)) | (1L << (CONTAINS - 355)) | (1L << (CONTEXT - 355)) | (1L << (CONTRIBUTORS - 355)) | (1L << (COPY - 355)) | (1L << (CPU - 355)) | (1L << (CURSOR_NAME - 355)) | (1L << (DATA - 355)) | (1L << (DATAFILE - 355)) | (1L << (DEALLOCATE - 355)) | (1L << (DEFAULT_AUTH - 355)) | (1L << (DEFINER - 355)) | (1L << (DELAY_KEY_WRITE - 355)) | (1L << (DES_KEY_FILE - 355)) | (1L << (DIRECTORY - 355)) | (1L << (DISABLE - 355)) | (1L << (DISCARD - 355)) | (1L << (DISK - 355)) | (1L << (DO - 355)) | (1L << (DUMPFILE - 355)) | (1L << (DUPLICATE - 355)) | (1L << (DYNAMIC - 355)) | (1L << (ENABLE - 355)) | (1L << (ENCRYPTION - 355)) | (1L << (END - 355)) | (1L << (ENDS - 355)) | (1L << (ENGINE - 355)) | (1L << (ENGINES - 355)) | (1L << (ERROR - 355)) | (1L << (ERRORS - 355)) | (1L << (ESCAPE - 355)) | (1L << (EVEN - 355)) | (1L << (EVENT - 355)) | (1L << (EVENTS - 355)) | (1L << (EVERY - 355)) | (1L << (EXCHANGE - 355)) | (1L << (EXCLUSIVE - 355)) | (1L << (EXPIRE - 355)) | (1L << (EXPORT - 355)) | (1L << (EXTENDED - 355)) | (1L << (EXTENT_SIZE - 355)) | (1L << (FAST - 355)) | (1L << (FAULTS - 355)) | (1L << (FIELDS - 355)) | (1L << (FILE_BLOCK_SIZE - 355)) | (1L << (FILTER - 355)) | (1L << (FIRST - 355)) | (1L << (FIXED - 355)) | (1L << (FLUSH - 355)) | (1L << (FOLLOWS - 355)) | (1L << (FOUND - 355)) | (1L << (FULL - 355)) | (1L << (FUNCTION - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (GENERAL - 419)) | (1L << (GLOBAL - 419)) | (1L << (GRANTS - 419)) | (1L << (GROUP_REPLICATION - 419)) | (1L << (HANDLER - 419)) | (1L << (HASH - 419)) | (1L << (HELP - 419)) | (1L << (HOST - 419)) | (1L << (HOSTS - 419)) | (1L << (IDENTIFIED - 419)) | (1L << (IGNORE_SERVER_IDS - 419)) | (1L << (IMPORT - 419)) | (1L << (INDEXES - 419)) | (1L << (INITIAL_SIZE - 419)) | (1L << (INPLACE - 419)) | (1L << (INSERT_METHOD - 419)) | (1L << (INSTALL - 419)) | (1L << (INSTANCE - 419)) | (1L << (INVISIBLE - 419)) | (1L << (INVOKER - 419)) | (1L << (IO - 419)) | (1L << (IO_THREAD - 419)) | (1L << (IPC - 419)) | (1L << (ISOLATION - 419)) | (1L << (ISSUER - 419)) | (1L << (JSON - 419)) | (1L << (KEY_BLOCK_SIZE - 419)) | (1L << (LANGUAGE - 419)) | (1L << (LAST - 419)) | (1L << (LEAVES - 419)) | (1L << (LESS - 419)) | (1L << (LEVEL - 419)) | (1L << (LIST - 419)) | (1L << (LOCAL - 419)) | (1L << (LOGFILE - 419)) | (1L << (LOGS - 419)) | (1L << (MASTER - 419)) | (1L << (MASTER_AUTO_POSITION - 419)) | (1L << (MASTER_CONNECT_RETRY - 419)) | (1L << (MASTER_DELAY - 419)) | (1L << (MASTER_HEARTBEAT_PERIOD - 419)) | (1L << (MASTER_HOST - 419)) | (1L << (MASTER_LOG_FILE - 419)) | (1L << (MASTER_LOG_POS - 419)) | (1L << (MASTER_PASSWORD - 419)) | (1L << (MASTER_PORT - 419)) | (1L << (MASTER_RETRY_COUNT - 419)) | (1L << (MASTER_SSL - 419)) | (1L << (MASTER_SSL_CA - 419)) | (1L << (MASTER_SSL_CAPATH - 419)) | (1L << (MASTER_SSL_CERT - 419)) | (1L << (MASTER_SSL_CIPHER - 419)) | (1L << (MASTER_SSL_CRL - 419)) | (1L << (MASTER_SSL_CRLPATH - 419)) | (1L << (MASTER_SSL_KEY - 419)) | (1L << (MASTER_TLS_VERSION - 419)) | (1L << (MASTER_USER - 419)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 419)) | (1L << (MAX_QUERIES_PER_HOUR - 419)) | (1L << (MAX_ROWS - 419)) | (1L << (MAX_SIZE - 419)) | (1L << (MAX_UPDATES_PER_HOUR - 419)) | (1L << (MAX_USER_CONNECTIONS - 419)) | (1L << (MEDIUM - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (MEMBER - 483)) | (1L << (MERGE - 483)) | (1L << (MESSAGE_TEXT - 483)) | (1L << (MID - 483)) | (1L << (MIGRATE - 483)) | (1L << (MIN_ROWS - 483)) | (1L << (MODE - 483)) | (1L << (MODIFY - 483)) | (1L << (MUTEX - 483)) | (1L << (MYSQL - 483)) | (1L << (MYSQL_ERRNO - 483)) | (1L << (NAME - 483)) | (1L << (NAMES - 483)) | (1L << (NCHAR - 483)) | (1L << (NEVER - 483)) | (1L << (NEXT - 483)) | (1L << (NO - 483)) | (1L << (NODEGROUP - 483)) | (1L << (NONE - 483)) | (1L << (ODBC - 483)) | (1L << (OFFLINE - 483)) | (1L << (OFFSET - 483)) | (1L << (OF - 483)) | (1L << (OJ - 483)) | (1L << (OLD_PASSWORD - 483)) | (1L << (ONE - 483)) | (1L << (ONLINE - 483)) | (1L << (ONLY - 483)) | (1L << (OPEN - 483)) | (1L << (OPTIMIZER_COSTS - 483)) | (1L << (OPTIONS - 483)) | (1L << (OWNER - 483)) | (1L << (PACK_KEYS - 483)) | (1L << (PAGE - 483)) | (1L << (PARSER - 483)) | (1L << (PARTIAL - 483)) | (1L << (PARTITIONING - 483)) | (1L << (PARTITIONS - 483)) | (1L << (PASSWORD - 483)) | (1L << (PHASE - 483)) | (1L << (PLUGIN - 483)) | (1L << (PLUGIN_DIR - 483)) | (1L << (PLUGINS - 483)) | (1L << (PORT - 483)) | (1L << (PRECEDES - 483)) | (1L << (PREPARE - 483)) | (1L << (PRESERVE - 483)) | (1L << (PREV - 483)) | (1L << (PROCESSLIST - 483)) | (1L << (PROFILE - 483)) | (1L << (PROFILES - 483)) | (1L << (PROXY - 483)) | (1L << (QUERY - 483)) | (1L << (QUICK - 483)) | (1L << (REBUILD - 483)) | (1L << (RECOVER - 483)) | (1L << (REDO_BUFFER_SIZE - 483)) | (1L << (REDUNDANT - 483)) | (1L << (RELAY - 483)) | (1L << (RELAY_LOG_FILE - 483)) | (1L << (RELAY_LOG_POS - 483)) | (1L << (RELAYLOG - 483)) | (1L << (REMOVE - 483)))) != 0) || ((((_la - 547)) & ~0x3f) == 0 && ((1L << (_la - 547)) & ((1L << (REORGANIZE - 547)) | (1L << (REPAIR - 547)) | (1L << (REPLICATE_DO_DB - 547)) | (1L << (REPLICATE_DO_TABLE - 547)) | (1L << (REPLICATE_IGNORE_DB - 547)) | (1L << (REPLICATE_IGNORE_TABLE - 547)) | (1L << (REPLICATE_REWRITE_DB - 547)) | (1L << (REPLICATE_WILD_DO_TABLE - 547)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 547)) | (1L << (REPLICATION - 547)) | (1L << (RESET - 547)) | (1L << (RESUME - 547)) | (1L << (RETURNED_SQLSTATE - 547)) | (1L << (RETURNS - 547)) | (1L << (ROLE - 547)) | (1L << (ROLLBACK - 547)) | (1L << (ROLLUP - 547)) | (1L << (ROTATE - 547)) | (1L << (ROW - 547)) | (1L << (ROWS - 547)) | (1L << (ROW_FORMAT - 547)) | (1L << (SAVEPOINT - 547)) | (1L << (SCHEDULE - 547)) | (1L << (SECURITY - 547)) | (1L << (SERVER - 547)) | (1L << (SESSION - 547)) | (1L << (SHARE - 547)) | (1L << (SHARED - 547)) | (1L << (SIGNED - 547)) | (1L << (SIMPLE - 547)) | (1L << (SLAVE - 547)) | (1L << (SLOW - 547)) | (1L << (SNAPSHOT - 547)) | (1L << (SOCKET - 547)) | (1L << (SOME - 547)) | (1L << (SONAME - 547)) | (1L << (SOUNDS - 547)) | (1L << (SOURCE - 547)) | (1L << (SQL_AFTER_GTIDS - 547)) | (1L << (SQL_AFTER_MTS_GAPS - 547)) | (1L << (SQL_BEFORE_GTIDS - 547)) | (1L << (SQL_BUFFER_RESULT - 547)) | (1L << (SQL_CACHE - 547)) | (1L << (SQL_NO_CACHE - 547)) | (1L << (SQL_THREAD - 547)) | (1L << (START - 547)) | (1L << (STARTS - 547)) | (1L << (STATS_AUTO_RECALC - 547)) | (1L << (STATS_PERSISTENT - 547)) | (1L << (STATS_SAMPLE_PAGES - 547)) | (1L << (STATUS - 547)) | (1L << (STOP - 547)) | (1L << (STORAGE - 547)) | (1L << (STRING - 547)) | (1L << (SUBCLASS_ORIGIN - 547)) | (1L << (SUBJECT - 547)) | (1L << (SUBPARTITION - 547)) | (1L << (SUBPARTITIONS - 547)) | (1L << (SUSPEND - 547)) | (1L << (SWAPS - 547)) | (1L << (SWITCHES - 547)) | (1L << (TABLE_NAME - 547)))) != 0) || ((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (TABLESPACE - 611)) | (1L << (TEMPORARY - 611)) | (1L << (TEMPTABLE - 611)) | (1L << (THAN - 611)) | (1L << (TRADITIONAL - 611)) | (1L << (TRANSACTION - 611)) | (1L << (TRANSACTIONAL - 611)) | (1L << (TRIGGERS - 611)) | (1L << (TRUNCATE - 611)) | (1L << (UNDEFINED - 611)) | (1L << (UNDOFILE - 611)) | (1L << (UNDO_BUFFER_SIZE - 611)) | (1L << (UNINSTALL - 611)) | (1L << (UNKNOWN - 611)) | (1L << (UNTIL - 611)) | (1L << (UPGRADE - 611)) | (1L << (USER - 611)) | (1L << (USE_FRM - 611)) | (1L << (USER_RESOURCES - 611)) | (1L << (VALIDATION - 611)) | (1L << (VALUE - 611)) | (1L << (VARIABLES - 611)) | (1L << (VIEW - 611)) | (1L << (VISIBLE - 611)) | (1L << (WAIT - 611)) | (1L << (WARNINGS - 611)) | (1L << (WITHOUT - 611)) | (1L << (WORK - 611)) | (1L << (WRAPPER - 611)) | (1L << (X509 - 611)) | (1L << (XA - 611)) | (1L << (XML - 611)) | (1L << (EUR - 611)) | (1L << (USA - 611)) | (1L << (JIS - 611)) | (1L << (ISO - 611)) | (1L << (INTERNAL - 611)) | (1L << (QUARTER - 611)) | (1L << (MONTH - 611)) | (1L << (DAY - 611)) | (1L << (HOUR - 611)) | (1L << (MINUTE - 611)) | (1L << (WEEK - 611)) | (1L << (SECOND - 611)) | (1L << (MICROSECOND - 611)) | (1L << (TABLES - 611)) | (1L << (ROUTINE - 611)) | (1L << (EXECUTE - 611)) | (1L << (FILE - 611)) | (1L << (PROCESS - 611)) | (1L << (RELOAD - 611)) | (1L << (SHUTDOWN - 611)) | (1L << (SUPER - 611)) | (1L << (PRIVILEGES - 611)) | (1L << (AUDIT_ADMIN - 611)) | (1L << (BACKUP_ADMIN - 611)) | (1L << (BINLOG_ADMIN - 611)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 611)) | (1L << (CLONE_ADMIN - 611)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (CONNECTION_ADMIN - 675)) | (1L << (ENCRYPTION_KEY_ADMIN - 675)) | (1L << (FIREWALL_ADMIN - 675)) | (1L << (FIREWALL_USER - 675)) | (1L << (GROUP_REPLICATION_ADMIN - 675)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 675)) | (1L << (NDB_STORED_USER - 675)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 675)) | (1L << (REPLICATION_APPLIER - 675)) | (1L << (REPLICATION_SLAVE_ADMIN - 675)) | (1L << (RESOURCE_GROUP_ADMIN - 675)) | (1L << (RESOURCE_GROUP_USER - 675)) | (1L << (ROLE_ADMIN - 675)) | (1L << (SESSION_VARIABLES_ADMIN - 675)) | (1L << (SET_USER_ID - 675)) | (1L << (SHOW_ROUTINE - 675)) | (1L << (SYSTEM_VARIABLES_ADMIN - 675)) | (1L << (TABLE_ENCRYPTION_ADMIN - 675)) | (1L << (VERSION_TOKEN_ADMIN - 675)) | (1L << (XA_RECOVER_ADMIN - 675)) | (1L << (ARMSCII8 - 675)) | (1L << (ASCII - 675)) | (1L << (BIG5 - 675)) | (1L << (CP1250 - 675)) | (1L << (CP1251 - 675)) | (1L << (CP1256 - 675)) | (1L << (CP1257 - 675)) | (1L << (CP850 - 675)) | (1L << (CP852 - 675)) | (1L << (CP866 - 675)) | (1L << (CP932 - 675)) | (1L << (DEC8 - 675)) | (1L << (EUCJPMS - 675)) | (1L << (EUCKR - 675)) | (1L << (GB2312 - 675)) | (1L << (GBK - 675)) | (1L << (GEOSTD8 - 675)) | (1L << (GREEK - 675)) | (1L << (HEBREW - 675)) | (1L << (HP8 - 675)) | (1L << (KEYBCS2 - 675)) | (1L << (KOI8R - 675)) | (1L << (KOI8U - 675)) | (1L << (LATIN1 - 675)) | (1L << (LATIN2 - 675)) | (1L << (LATIN5 - 675)) | (1L << (LATIN7 - 675)) | (1L << (MACCE - 675)) | (1L << (MACROMAN - 675)) | (1L << (SJIS - 675)) | (1L << (SWE7 - 675)) | (1L << (TIS620 - 675)) | (1L << (UCS2 - 675)) | (1L << (UJIS - 675)) | (1L << (UTF16 - 675)) | (1L << (UTF16LE - 675)) | (1L << (UTF32 - 675)) | (1L << (UTF8 - 675)))) != 0) || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & ((1L << (UTF8MB3 - 739)) | (1L << (UTF8MB4 - 739)) | (1L << (ARCHIVE - 739)) | (1L << (BLACKHOLE - 739)) | (1L << (CSV - 739)) | (1L << (FEDERATED - 739)) | (1L << (INNODB - 739)) | (1L << (MEMORY - 739)) | (1L << (MRG_MYISAM - 739)) | (1L << (MYISAM - 739)) | (1L << (NDB - 739)) | (1L << (NDBCLUSTER - 739)) | (1L << (PERFORMANCE_SCHEMA - 739)) | (1L << (TOKUDB - 739)) | (1L << (REPEATABLE - 739)) | (1L << (COMMITTED - 739)) | (1L << (UNCOMMITTED - 739)) | (1L << (SERIALIZABLE - 739)) | (1L << (GEOMETRYCOLLECTION - 739)) | (1L << (LINESTRING - 739)) | (1L << (MULTILINESTRING - 739)) | (1L << (MULTIPOINT - 739)) | (1L << (MULTIPOLYGON - 739)) | (1L << (POINT - 739)) | (1L << (POLYGON - 739)) | (1L << (ABS - 739)) | (1L << (ACOS - 739)) | (1L << (ADDDATE - 739)) | (1L << (ADDTIME - 739)) | (1L << (AES_DECRYPT - 739)) | (1L << (AES_ENCRYPT - 739)) | (1L << (AREA - 739)) | (1L << (ASBINARY - 739)) | (1L << (ASIN - 739)) | (1L << (ASTEXT - 739)) | (1L << (ASWKB - 739)) | (1L << (ASWKT - 739)) | (1L << (ASYMMETRIC_DECRYPT - 739)) | (1L << (ASYMMETRIC_DERIVE - 739)) | (1L << (ASYMMETRIC_ENCRYPT - 739)) | (1L << (ASYMMETRIC_SIGN - 739)) | (1L << (ASYMMETRIC_VERIFY - 739)) | (1L << (ATAN - 739)) | (1L << (ATAN2 - 739)) | (1L << (BENCHMARK - 739)) | (1L << (BIN - 739)) | (1L << (BIT_COUNT - 739)) | (1L << (BIT_LENGTH - 739)) | (1L << (BUFFER - 739)) | (1L << (CATALOG_NAME - 739)) | (1L << (CEIL - 739)) | (1L << (CEILING - 739)) | (1L << (CENTROID - 739)) | (1L << (CHARACTER_LENGTH - 739)) | (1L << (CHARSET - 739)) | (1L << (CHAR_LENGTH - 739)) | (1L << (COERCIBILITY - 739)) | (1L << (COLLATION - 739)) | (1L << (COMPRESS - 739)) | (1L << (CONCAT - 739)) | (1L << (CONCAT_WS - 739)) | (1L << (CONNECTION_ID - 739)))) != 0) || ((((_la - 803)) & ~0x3f) == 0 && ((1L << (_la - 803)) & ((1L << (CONV - 803)) | (1L << (CONVERT_TZ - 803)) | (1L << (COS - 803)) | (1L << (COT - 803)) | (1L << (CRC32 - 803)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 803)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 803)) | (1L << (CREATE_DH_PARAMETERS - 803)) | (1L << (CREATE_DIGEST - 803)) | (1L << (CROSSES - 803)) | (1L << (DATEDIFF - 803)) | (1L << (DATE_FORMAT - 803)) | (1L << (DAYNAME - 803)) | (1L << (DAYOFMONTH - 803)) | (1L << (DAYOFWEEK - 803)) | (1L << (DAYOFYEAR - 803)) | (1L << (DECODE - 803)) | (1L << (DEGREES - 803)) | (1L << (DES_DECRYPT - 803)) | (1L << (DES_ENCRYPT - 803)) | (1L << (DIMENSION - 803)) | (1L << (DISJOINT - 803)) | (1L << (ELT - 803)) | (1L << (ENCODE - 803)) | (1L << (ENCRYPT - 803)) | (1L << (ENDPOINT - 803)) | (1L << (ENVELOPE - 803)) | (1L << (EQUALS - 803)) | (1L << (EXP - 803)) | (1L << (EXPORT_SET - 803)) | (1L << (EXTERIORRING - 803)) | (1L << (EXTRACTVALUE - 803)) | (1L << (FIELD - 803)) | (1L << (FIND_IN_SET - 803)) | (1L << (FLOOR - 803)) | (1L << (FORMAT - 803)) | (1L << (FOUND_ROWS - 803)) | (1L << (FROM_BASE64 - 803)) | (1L << (FROM_DAYS - 803)) | (1L << (FROM_UNIXTIME - 803)) | (1L << (GEOMCOLLFROMTEXT - 803)) | (1L << (GEOMCOLLFROMWKB - 803)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 803)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 803)) | (1L << (GEOMETRYFROMTEXT - 803)) | (1L << (GEOMETRYFROMWKB - 803)) | (1L << (GEOMETRYN - 803)) | (1L << (GEOMETRYTYPE - 803)) | (1L << (GEOMFROMTEXT - 803)) | (1L << (GEOMFROMWKB - 803)) | (1L << (GET_FORMAT - 803)) | (1L << (GET_LOCK - 803)) | (1L << (GLENGTH - 803)) | (1L << (GREATEST - 803)) | (1L << (GTID_SUBSET - 803)) | (1L << (GTID_SUBTRACT - 803)) | (1L << (HEX - 803)) | (1L << (IFNULL - 803)) | (1L << (INET6_ATON - 803)) | (1L << (INET6_NTOA - 803)) | (1L << (INET_ATON - 803)) | (1L << (INET_NTOA - 803)) | (1L << (INSTR - 803)) | (1L << (INTERIORRINGN - 803)))) != 0) || ((((_la - 867)) & ~0x3f) == 0 && ((1L << (_la - 867)) & ((1L << (INTERSECTS - 867)) | (1L << (ISCLOSED - 867)) | (1L << (ISEMPTY - 867)) | (1L << (ISNULL - 867)) | (1L << (ISSIMPLE - 867)) | (1L << (IS_FREE_LOCK - 867)) | (1L << (IS_IPV4 - 867)) | (1L << (IS_IPV4_COMPAT - 867)) | (1L << (IS_IPV4_MAPPED - 867)) | (1L << (IS_IPV6 - 867)) | (1L << (IS_USED_LOCK - 867)) | (1L << (LAST_INSERT_ID - 867)) | (1L << (LCASE - 867)) | (1L << (LEAST - 867)) | (1L << (LENGTH - 867)) | (1L << (LINEFROMTEXT - 867)) | (1L << (LINEFROMWKB - 867)) | (1L << (LINESTRINGFROMTEXT - 867)) | (1L << (LINESTRINGFROMWKB - 867)) | (1L << (LN - 867)) | (1L << (LOAD_FILE - 867)) | (1L << (LOCATE - 867)) | (1L << (LOG - 867)) | (1L << (LOG10 - 867)) | (1L << (LOG2 - 867)) | (1L << (LOWER - 867)) | (1L << (LPAD - 867)) | (1L << (LTRIM - 867)) | (1L << (MAKEDATE - 867)) | (1L << (MAKETIME - 867)) | (1L << (MAKE_SET - 867)) | (1L << (MASTER_POS_WAIT - 867)) | (1L << (MBRCONTAINS - 867)) | (1L << (MBRDISJOINT - 867)) | (1L << (MBREQUAL - 867)) | (1L << (MBRINTERSECTS - 867)) | (1L << (MBROVERLAPS - 867)) | (1L << (MBRTOUCHES - 867)) | (1L << (MBRWITHIN - 867)) | (1L << (MD5 - 867)) | (1L << (MLINEFROMTEXT - 867)) | (1L << (MLINEFROMWKB - 867)) | (1L << (MONTHNAME - 867)) | (1L << (MPOINTFROMTEXT - 867)) | (1L << (MPOINTFROMWKB - 867)) | (1L << (MPOLYFROMTEXT - 867)) | (1L << (MPOLYFROMWKB - 867)) | (1L << (MULTILINESTRINGFROMTEXT - 867)) | (1L << (MULTILINESTRINGFROMWKB - 867)) | (1L << (MULTIPOINTFROMTEXT - 867)) | (1L << (MULTIPOINTFROMWKB - 867)) | (1L << (MULTIPOLYGONFROMTEXT - 867)) | (1L << (MULTIPOLYGONFROMWKB - 867)) | (1L << (NAME_CONST - 867)) | (1L << (NULLIF - 867)) | (1L << (NUMGEOMETRIES - 867)) | (1L << (NUMINTERIORRINGS - 867)) | (1L << (NUMPOINTS - 867)) | (1L << (OCT - 867)) | (1L << (OCTET_LENGTH - 867)) | (1L << (ORD - 867)) | (1L << (OVERLAPS - 867)) | (1L << (PERIOD_ADD - 867)) | (1L << (PERIOD_DIFF - 867)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PI - 931)) | (1L << (POINTFROMTEXT - 931)) | (1L << (POINTFROMWKB - 931)) | (1L << (POINTN - 931)) | (1L << (POLYFROMTEXT - 931)) | (1L << (POLYFROMWKB - 931)) | (1L << (POLYGONFROMTEXT - 931)) | (1L << (POLYGONFROMWKB - 931)) | (1L << (POW - 931)) | (1L << (POWER - 931)) | (1L << (QUOTE - 931)) | (1L << (RADIANS - 931)) | (1L << (RAND - 931)) | (1L << (RANDOM_BYTES - 931)) | (1L << (RELEASE_LOCK - 931)) | (1L << (REVERSE - 931)) | (1L << (ROUND - 931)) | (1L << (ROW_COUNT - 931)) | (1L << (RPAD - 931)) | (1L << (RTRIM - 931)) | (1L << (SEC_TO_TIME - 931)) | (1L << (SESSION_USER - 931)) | (1L << (SHA - 931)) | (1L << (SHA1 - 931)) | (1L << (SHA2 - 931)) | (1L << (SCHEMA_NAME - 931)) | (1L << (SIGN - 931)) | (1L << (SIN - 931)) | (1L << (SLEEP - 931)) | (1L << (SOUNDEX - 931)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 931)) | (1L << (SQRT - 931)) | (1L << (SRID - 931)) | (1L << (STARTPOINT - 931)) | (1L << (STRCMP - 931)) | (1L << (STR_TO_DATE - 931)) | (1L << (ST_AREA - 931)) | (1L << (ST_ASBINARY - 931)) | (1L << (ST_ASTEXT - 931)) | (1L << (ST_ASWKB - 931)) | (1L << (ST_ASWKT - 931)) | (1L << (ST_BUFFER - 931)) | (1L << (ST_CENTROID - 931)) | (1L << (ST_CONTAINS - 931)) | (1L << (ST_CROSSES - 931)) | (1L << (ST_DIFFERENCE - 931)) | (1L << (ST_DIMENSION - 931)) | (1L << (ST_DISJOINT - 931)) | (1L << (ST_DISTANCE - 931)) | (1L << (ST_ENDPOINT - 931)) | (1L << (ST_ENVELOPE - 931)) | (1L << (ST_EQUALS - 931)) | (1L << (ST_EXTERIORRING - 931)) | (1L << (ST_GEOMCOLLFROMTEXT - 931)) | (1L << (ST_GEOMCOLLFROMTXT - 931)) | (1L << (ST_GEOMCOLLFROMWKB - 931)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 931)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 931)) | (1L << (ST_GEOMETRYFROMTEXT - 931)) | (1L << (ST_GEOMETRYFROMWKB - 931)) | (1L << (ST_GEOMETRYN - 931)) | (1L << (ST_GEOMETRYTYPE - 931)) | (1L << (ST_GEOMFROMTEXT - 931)) | (1L << (ST_GEOMFROMWKB - 931)))) != 0) || ((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ST_INTERIORRINGN - 995)) | (1L << (ST_INTERSECTION - 995)) | (1L << (ST_INTERSECTS - 995)) | (1L << (ST_ISCLOSED - 995)) | (1L << (ST_ISEMPTY - 995)) | (1L << (ST_ISSIMPLE - 995)) | (1L << (ST_LINEFROMTEXT - 995)) | (1L << (ST_LINEFROMWKB - 995)) | (1L << (ST_LINESTRINGFROMTEXT - 995)) | (1L << (ST_LINESTRINGFROMWKB - 995)) | (1L << (ST_NUMGEOMETRIES - 995)) | (1L << (ST_NUMINTERIORRING - 995)) | (1L << (ST_NUMINTERIORRINGS - 995)) | (1L << (ST_NUMPOINTS - 995)) | (1L << (ST_OVERLAPS - 995)) | (1L << (ST_POINTFROMTEXT - 995)) | (1L << (ST_POINTFROMWKB - 995)) | (1L << (ST_POINTN - 995)) | (1L << (ST_POLYFROMTEXT - 995)) | (1L << (ST_POLYFROMWKB - 995)) | (1L << (ST_POLYGONFROMTEXT - 995)) | (1L << (ST_POLYGONFROMWKB - 995)) | (1L << (ST_SRID - 995)) | (1L << (ST_STARTPOINT - 995)) | (1L << (ST_SYMDIFFERENCE - 995)) | (1L << (ST_TOUCHES - 995)) | (1L << (ST_UNION - 995)) | (1L << (ST_WITHIN - 995)) | (1L << (ST_X - 995)) | (1L << (ST_Y - 995)) | (1L << (SUBDATE - 995)) | (1L << (SUBSTRING_INDEX - 995)) | (1L << (SUBTIME - 995)) | (1L << (SYSTEM_USER - 995)) | (1L << (TAN - 995)) | (1L << (TIMEDIFF - 995)) | (1L << (TIMESTAMPADD - 995)) | (1L << (TIMESTAMPDIFF - 995)) | (1L << (TIME_FORMAT - 995)) | (1L << (TIME_TO_SEC - 995)) | (1L << (TOUCHES - 995)) | (1L << (TO_BASE64 - 995)) | (1L << (TO_DAYS - 995)) | (1L << (TO_SECONDS - 995)) | (1L << (UCASE - 995)) | (1L << (UNCOMPRESS - 995)) | (1L << (UNCOMPRESSED_LENGTH - 995)) | (1L << (UNHEX - 995)) | (1L << (UNIX_TIMESTAMP - 995)) | (1L << (UPDATEXML - 995)) | (1L << (UPPER - 995)) | (1L << (UUID - 995)) | (1L << (UUID_SHORT - 995)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 995)) | (1L << (VERSION - 995)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 995)) | (1L << (WEEKDAY - 995)) | (1L << (WEEKOFYEAR - 995)) | (1L << (WEIGHT_STRING - 995)) | (1L << (WITHIN - 995)) | (1L << (YEARWEEK - 995)) | (1L << (Y_FUNCTION - 995)) | (1L << (X_FUNCTION - 995)))) != 0) || ((((_la - 1073)) & ~0x3f) == 0 && ((1L << (_la - 1073)) & ((1L << (MOD - 1073)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1073)) | (1L << (STRING_LITERAL - 1073)) | (1L << (ID - 1073)) | (1L << (REVERSE_QUOTE_ID - 1073)) | (1L << (OPTIONAL - 1073)))) != 0)) {
				{
				State = 3889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3888;
					Match(AS);
					}
				}

				State = 3891;
				uid();
				}
			}

			State = 3894;
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 288, RULE_lockAction);
		int _la;
		try {
			State = 3904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3896;
				Match(READ);
				State = 3898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 3897;
					Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 3900;
					Match(LOW_PRIORITY);
					}
				}

				State = 3903;
				Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 290, RULE_transactionOption);
		try {
			State = 3913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3906;
				Match(ISOLATION);
				State = 3907;
				Match(LEVEL);
				State = 3908;
				transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3909;
				Match(READ);
				State = 3910;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3911;
				Match(READ);
				State = 3912;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 292, RULE_transactionLevel);
		try {
			State = 3922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3915;
				Match(REPEATABLE);
				State = 3916;
				Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3917;
				Match(READ);
				State = 3918;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3919;
				Match(READ);
				State = 3920;
				Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3921;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 294, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3924;
			Match(CHANGE);
			State = 3925;
			Match(MASTER);
			State = 3926;
			Match(TO);
			State = 3927;
			masterOption();
			State = 3932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3928;
				Match(COMMA);
				State = 3929;
				masterOption();
				}
				}
				State = 3934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3935;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplicationFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 296, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3938;
			Match(CHANGE);
			State = 3939;
			Match(REPLICATION);
			State = 3940;
			Match(FILTER);
			State = 3941;
			replicationFilter();
			State = 3946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3942;
				Match(COMMA);
				State = 3943;
				replicationFilter();
				}
				}
				State = 3948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurgeBinaryLogs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 298, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3949;
			Match(PURGE);
			State = 3950;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3951;
			Match(LOGS);
			State = 3956;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 3952;
				Match(TO);
				State = 3953;
				_localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 3954;
				Match(BEFORE);
				State = 3955;
				_localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 300, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3958;
			Match(RESET);
			State = 3959;
			Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 302, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3961;
			Match(RESET);
			State = 3962;
			Match(SLAVE);
			State = 3964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 3963;
				Match(ALL);
				}
			}

			State = 3967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3966;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 304, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3969;
			Match(START);
			State = 3970;
			Match(SLAVE);
			State = 3979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 3971;
				threadType();
				State = 3976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3972;
					Match(COMMA);
					State = 3973;
					threadType();
					}
					}
					State = 3978;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 3981;
				Match(UNTIL);
				State = 3982;
				untilOption();
				}
			}

			State = 3988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 3985;
				connectionOption();
				}
				}
				State = 3990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3991;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 306, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3994;
			Match(STOP);
			State = 3995;
			Match(SLAVE);
			State = 4004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 3996;
				threadType();
				State = 4001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3997;
					Match(COMMA);
					State = 3998;
					threadType();
					}
					}
					State = 4003;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 308, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4006;
			Match(START);
			State = 4007;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 310, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4009;
			Match(STOP);
			State = 4010;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterStringOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterRealOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		[System.Diagnostics.DebuggerNonUserCode] public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterBoolOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterUidListOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterDecimalOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 312, RULE_masterOption);
		int _la;
		try {
			State = 4041;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4012;
				stringMasterOption();
				State = 4013;
				Match(EQUAL_SYMBOL);
				State = 4014;
				Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4016;
				decimalMasterOption();
				State = 4017;
				Match(EQUAL_SYMBOL);
				State = 4018;
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4020;
				boolMasterOption();
				State = 4021;
				Match(EQUAL_SYMBOL);
				State = 4022;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4024;
				Match(MASTER_HEARTBEAT_PERIOD);
				State = 4025;
				Match(EQUAL_SYMBOL);
				State = 4026;
				Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4027;
				Match(IGNORE_SERVER_IDS);
				State = 4028;
				Match(EQUAL_SYMBOL);
				State = 4029;
				Match(LR_BRACKET);
				State = 4038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
					{
					State = 4030;
					uid();
					State = 4035;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4031;
						Match(COMMA);
						State = 4032;
						uid();
						}
						}
						State = 4037;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4040;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 314, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4043;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (MASTER_HOST - 460)) | (1L << (MASTER_LOG_FILE - 460)) | (1L << (MASTER_PASSWORD - 460)) | (1L << (MASTER_SSL_CA - 460)) | (1L << (MASTER_SSL_CAPATH - 460)) | (1L << (MASTER_SSL_CERT - 460)) | (1L << (MASTER_SSL_CIPHER - 460)) | (1L << (MASTER_SSL_CRL - 460)) | (1L << (MASTER_SSL_CRLPATH - 460)) | (1L << (MASTER_SSL_KEY - 460)) | (1L << (MASTER_TLS_VERSION - 460)) | (1L << (MASTER_USER - 460)))) != 0) || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 316, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4045;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (MASTER_CONNECT_RETRY - 457)) | (1L << (MASTER_DELAY - 457)) | (1L << (MASTER_LOG_POS - 457)) | (1L << (MASTER_PORT - 457)) | (1L << (MASTER_RETRY_COUNT - 457)))) != 0) || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 318, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4047;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 320, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4049;
			Match(FOR);
			State = 4050;
			Match(CHANNEL);
			State = 4051;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 322, RULE_replicationFilter);
		int _la;
		try {
			State = 4102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4053;
				Match(REPLICATE_DO_DB);
				State = 4054;
				Match(EQUAL_SYMBOL);
				State = 4055;
				Match(LR_BRACKET);
				State = 4056;
				uidList();
				State = 4057;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4059;
				Match(REPLICATE_IGNORE_DB);
				State = 4060;
				Match(EQUAL_SYMBOL);
				State = 4061;
				Match(LR_BRACKET);
				State = 4062;
				uidList();
				State = 4063;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4065;
				Match(REPLICATE_DO_TABLE);
				State = 4066;
				Match(EQUAL_SYMBOL);
				State = 4067;
				Match(LR_BRACKET);
				State = 4068;
				tables();
				State = 4069;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4071;
				Match(REPLICATE_IGNORE_TABLE);
				State = 4072;
				Match(EQUAL_SYMBOL);
				State = 4073;
				Match(LR_BRACKET);
				State = 4074;
				tables();
				State = 4075;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4077;
				Match(REPLICATE_WILD_DO_TABLE);
				State = 4078;
				Match(EQUAL_SYMBOL);
				State = 4079;
				Match(LR_BRACKET);
				State = 4080;
				simpleStrings();
				State = 4081;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4083;
				Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 4084;
				Match(EQUAL_SYMBOL);
				State = 4085;
				Match(LR_BRACKET);
				State = 4086;
				simpleStrings();
				State = 4087;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4089;
				Match(REPLICATE_REWRITE_DB);
				State = 4090;
				Match(EQUAL_SYMBOL);
				State = 4091;
				Match(LR_BRACKET);
				State = 4092;
				tablePair();
				State = 4097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4093;
					Match(COMMA);
					State = 4094;
					tablePair();
					}
					}
					State = 4099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4100;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 324, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4104;
			Match(LR_BRACKET);
			State = 4105;
			_localctx.firstTable = tableName();
			State = 4106;
			Match(COMMA);
			State = 4107;
			_localctx.secondTable = tableName();
			State = 4108;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 326, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4110;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtidsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlGapsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelayLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 328, RULE_untilOption);
		int _la;
		try {
			State = 4130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4112;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4113;
				Match(EQUAL_SYMBOL);
				State = 4114;
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4115;
				Match(MASTER_LOG_FILE);
				State = 4116;
				Match(EQUAL_SYMBOL);
				State = 4117;
				Match(STRING_LITERAL);
				State = 4118;
				Match(COMMA);
				State = 4119;
				Match(MASTER_LOG_POS);
				State = 4120;
				Match(EQUAL_SYMBOL);
				State = 4121;
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4122;
				Match(RELAY_LOG_FILE);
				State = 4123;
				Match(EQUAL_SYMBOL);
				State = 4124;
				Match(STRING_LITERAL);
				State = 4125;
				Match(COMMA);
				State = 4126;
				Match(RELAY_LOG_POS);
				State = 4127;
				Match(EQUAL_SYMBOL);
				State = 4128;
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4129;
				Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginDirConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultAuthConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 330, RULE_connectionOption);
		try {
			State = 4144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4132;
				Match(USER);
				State = 4133;
				Match(EQUAL_SYMBOL);
				State = 4134;
				((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4135;
				Match(PASSWORD);
				State = 4136;
				Match(EQUAL_SYMBOL);
				State = 4137;
				((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4138;
				Match(DEFAULT_AUTH);
				State = 4139;
				Match(EQUAL_SYMBOL);
				State = 4140;
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4141;
				Match(PLUGIN_DIR);
				State = 4142;
				Match(EQUAL_SYMBOL);
				State = 4143;
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 332, RULE_gtuidSet);
		int _la;
		try {
			State = 4155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4146;
				uuidSet();
				State = 4151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4147;
					Match(COMMA);
					State = 4148;
					uuidSet();
					}
					}
					State = 4153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4154;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 334, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4157;
			Match(XA);
			State = 4158;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4159;
			xid();
			State = 4161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 4160;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaEndTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 336, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4163;
			Match(XA);
			State = 4164;
			Match(END);
			State = 4165;
			xid();
			State = 4171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 4166;
				Match(SUSPEND);
				State = 4169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4167;
					Match(FOR);
					State = 4168;
					Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 338, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4173;
			Match(XA);
			State = 4174;
			Match(PREPARE);
			State = 4175;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 340, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4177;
			Match(XA);
			State = 4178;
			Match(COMMIT);
			State = 4179;
			xid();
			State = 4182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 4180;
				Match(ONE);
				State = 4181;
				Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 342, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4184;
			Match(XA);
			State = 4185;
			Match(ROLLBACK);
			State = 4186;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRecoverWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 344, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4188;
			Match(XA);
			State = 4189;
			Match(RECOVER);
			State = 4192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 4190;
				Match(CONVERT);
				State = 4191;
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 346, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4194;
			Match(PREPARE);
			State = 4195;
			uid();
			State = 4196;
			Match(FROM);
			State = 4199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 4197;
				_localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 4198;
				_localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 348, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4201;
			Match(EXECUTE);
			State = 4202;
			uid();
			State = 4205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4203;
				Match(USING);
				State = 4204;
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocatePrepare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 350, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4207;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4208;
			Match(PREPARE);
			State = 4209;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 352, RULE_routineBody);
		try {
			State = 4213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4211;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4212;
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 354, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,600,Context) ) {
			case 1:
				{
				State = 4215;
				uid();
				State = 4216;
				Match(COLON_SYMB);
				}
				break;
			}
			State = 4220;
			Match(BEGIN);
			State = 4259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,606,Context) ) {
			case 1:
				{
				State = 4226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4221;
						declareVariable();
						State = 4222;
						Match(SEMI);
						}
						} 
					}
					State = 4228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
				}
				State = 4234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4229;
						declareCondition();
						State = 4230;
						Match(SEMI);
						}
						} 
					}
					State = 4236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
				}
				State = 4242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,603,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4237;
						declareCursor();
						State = 4238;
						Match(SEMI);
						}
						} 
					}
					State = 4244;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,603,Context);
				}
				State = 4250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 4245;
					declareHandler();
					State = 4246;
					Match(SEMI);
					}
					}
					State = 4252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,605,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4253;
						procedureSqlStatement();
						}
						} 
					}
					State = 4258;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,605,Context);
				}
				}
				break;
			}
			State = 4261;
			Match(END);
			State = 4263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
			case 1:
				{
				State = 4262;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(MySqlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 356, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4265;
			Match(CASE);
			State = 4268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				{
				State = 4266;
				uid();
				}
				break;
			case 2:
				{
				State = 4267;
				expression(0);
				}
				break;
			}
			State = 4271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4270;
				caseAlternative();
				}
				}
				State = 4273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4275;
				Match(ELSE);
				State = 4277;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4276;
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4279;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,610,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4283;
			Match(END);
			State = 4284;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MySqlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 358, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4286;
			Match(IF);
			State = 4287;
			expression(0);
			State = 4288;
			Match(THEN);
			State = 4290;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4289;
					_localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,612,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4294;
				elifAlternative();
				}
				}
				State = 4299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4300;
				Match(ELSE);
				State = 4302;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4301;
						_localctx._procedureSqlStatement = procedureSqlStatement();
						_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,614,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4308;
			Match(END);
			State = 4309;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 360, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4311;
			Match(ITERATE);
			State = 4312;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 362, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4314;
			Match(LEAVE);
			State = 4315;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(MySqlParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 364, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4317;
				uid();
				State = 4318;
				Match(COLON_SYMB);
				}
			}

			State = 4322;
			Match(LOOP);
			State = 4324;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4323;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,617,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4328;
			Match(END);
			State = 4329;
			Match(LOOP);
			State = 4331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4330;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(MySqlParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 366, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4333;
				uid();
				State = 4334;
				Match(COLON_SYMB);
				}
			}

			State = 4338;
			Match(REPEAT);
			State = 4340;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4339;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,620,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4344;
			Match(UNTIL);
			State = 4345;
			expression(0);
			State = 4346;
			Match(END);
			State = 4347;
			Match(REPEAT);
			State = 4349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4348;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 368, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4351;
			Match(RETURN);
			State = 4352;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(MySqlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 370, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4354;
				uid();
				State = 4355;
				Match(COLON_SYMB);
				}
			}

			State = 4359;
			Match(WHILE);
			State = 4360;
			expression(0);
			State = 4361;
			Match(DO);
			State = 4363;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4362;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,623,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4367;
			Match(END);
			State = 4368;
			Match(WHILE);
			State = 4370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)) | (1L << (SERIAL - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (AVG - 270)) | (1L << (BIT_AND - 270)) | (1L << (BIT_OR - 270)) | (1L << (BIT_XOR - 270)) | (1L << (COUNT - 270)) | (1L << (GROUP_CONCAT - 270)) | (1L << (MAX - 270)) | (1L << (MIN - 270)) | (1L << (STD - 270)) | (1L << (STDDEV - 270)) | (1L << (STDDEV_POP - 270)) | (1L << (STDDEV_SAMP - 270)) | (1L << (SUM - 270)) | (1L << (VAR_POP - 270)) | (1L << (VAR_SAMP - 270)) | (1L << (VARIANCE - 270)) | (1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (BOOL - 334)) | (1L << (BOOLEAN - 334)) | (1L << (BTREE - 334)) | (1L << (CACHE - 334)) | (1L << (CASCADED - 334)) | (1L << (CHAIN - 334)) | (1L << (CHANGED - 334)) | (1L << (CHANNEL - 334)) | (1L << (CHECKSUM - 334)) | (1L << (PAGE_CHECKSUM - 334)) | (1L << (CIPHER - 334)) | (1L << (CLASS_ORIGIN - 334)) | (1L << (CLIENT - 334)) | (1L << (CLOSE - 334)) | (1L << (COALESCE - 334)) | (1L << (CODE - 334)) | (1L << (COLUMNS - 334)) | (1L << (COLUMN_FORMAT - 334)) | (1L << (COLUMN_NAME - 334)) | (1L << (COMMENT - 334)) | (1L << (COMMIT - 334)) | (1L << (COMPACT - 334)) | (1L << (COMPLETION - 334)) | (1L << (COMPRESSED - 334)) | (1L << (COMPRESSION - 334)) | (1L << (CONCURRENT - 334)) | (1L << (CONNECT - 334)) | (1L << (CONNECTION - 334)) | (1L << (CONSISTENT - 334)) | (1L << (CONSTRAINT_CATALOG - 334)) | (1L << (CONSTRAINT_SCHEMA - 334)) | (1L << (CONSTRAINT_NAME - 334)) | (1L << (CONTAINS - 334)) | (1L << (CONTEXT - 334)) | (1L << (CONTRIBUTORS - 334)) | (1L << (COPY - 334)) | (1L << (CPU - 334)) | (1L << (CURSOR_NAME - 334)) | (1L << (DATA - 334)) | (1L << (DATAFILE - 334)) | (1L << (DEALLOCATE - 334)) | (1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (EVENTS - 398)) | (1L << (EVERY - 398)) | (1L << (EXCHANGE - 398)) | (1L << (EXCLUSIVE - 398)) | (1L << (EXPIRE - 398)) | (1L << (EXPORT - 398)) | (1L << (EXTENDED - 398)) | (1L << (EXTENT_SIZE - 398)) | (1L << (FAST - 398)) | (1L << (FAULTS - 398)) | (1L << (FIELDS - 398)) | (1L << (FILE_BLOCK_SIZE - 398)) | (1L << (FILTER - 398)) | (1L << (FIRST - 398)) | (1L << (FIXED - 398)) | (1L << (FLUSH - 398)) | (1L << (FOLLOWS - 398)) | (1L << (FOUND - 398)) | (1L << (FULL - 398)) | (1L << (FUNCTION - 398)) | (1L << (GENERAL - 398)) | (1L << (GLOBAL - 398)) | (1L << (GRANTS - 398)) | (1L << (GROUP_REPLICATION - 398)) | (1L << (HANDLER - 398)) | (1L << (HASH - 398)) | (1L << (HELP - 398)) | (1L << (HOST - 398)) | (1L << (HOSTS - 398)) | (1L << (IDENTIFIED - 398)) | (1L << (IGNORE_SERVER_IDS - 398)) | (1L << (IMPORT - 398)) | (1L << (INDEXES - 398)) | (1L << (INITIAL_SIZE - 398)) | (1L << (INPLACE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (INSTALL - 398)) | (1L << (INSTANCE - 398)) | (1L << (INVISIBLE - 398)) | (1L << (INVOKER - 398)) | (1L << (IO - 398)) | (1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_LOG_POS - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_PORT - 462)) | (1L << (MASTER_RETRY_COUNT - 462)) | (1L << (MASTER_SSL - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 462)) | (1L << (MAX_QUERIES_PER_HOUR - 462)) | (1L << (MAX_ROWS - 462)) | (1L << (MAX_SIZE - 462)) | (1L << (MAX_UPDATES_PER_HOUR - 462)) | (1L << (MAX_USER_CONNECTIONS - 462)) | (1L << (MEDIUM - 462)) | (1L << (MEMBER - 462)) | (1L << (MERGE - 462)) | (1L << (MESSAGE_TEXT - 462)) | (1L << (MID - 462)) | (1L << (MIGRATE - 462)) | (1L << (MIN_ROWS - 462)) | (1L << (MODE - 462)) | (1L << (MODIFY - 462)) | (1L << (MUTEX - 462)) | (1L << (MYSQL - 462)) | (1L << (MYSQL_ERRNO - 462)) | (1L << (NAME - 462)) | (1L << (NAMES - 462)) | (1L << (NCHAR - 462)) | (1L << (NEVER - 462)) | (1L << (NEXT - 462)) | (1L << (NO - 462)) | (1L << (NODEGROUP - 462)) | (1L << (NONE - 462)) | (1L << (ODBC - 462)) | (1L << (OFFLINE - 462)) | (1L << (OFFSET - 462)) | (1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (PORT - 526)) | (1L << (PRECEDES - 526)) | (1L << (PREPARE - 526)) | (1L << (PRESERVE - 526)) | (1L << (PREV - 526)) | (1L << (PROCESSLIST - 526)) | (1L << (PROFILE - 526)) | (1L << (PROFILES - 526)) | (1L << (PROXY - 526)) | (1L << (QUERY - 526)) | (1L << (QUICK - 526)) | (1L << (REBUILD - 526)) | (1L << (RECOVER - 526)) | (1L << (REDO_BUFFER_SIZE - 526)) | (1L << (REDUNDANT - 526)) | (1L << (RELAY - 526)) | (1L << (RELAY_LOG_FILE - 526)) | (1L << (RELAY_LOG_POS - 526)) | (1L << (RELAYLOG - 526)) | (1L << (REMOVE - 526)) | (1L << (REORGANIZE - 526)) | (1L << (REPAIR - 526)) | (1L << (REPLICATE_DO_DB - 526)) | (1L << (REPLICATE_DO_TABLE - 526)) | (1L << (REPLICATE_IGNORE_DB - 526)) | (1L << (REPLICATE_IGNORE_TABLE - 526)) | (1L << (REPLICATE_REWRITE_DB - 526)) | (1L << (REPLICATE_WILD_DO_TABLE - 526)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 526)) | (1L << (REPLICATION - 526)) | (1L << (RESET - 526)) | (1L << (RESUME - 526)) | (1L << (RETURNED_SQLSTATE - 526)) | (1L << (RETURNS - 526)) | (1L << (ROLE - 526)) | (1L << (ROLLBACK - 526)) | (1L << (ROLLUP - 526)) | (1L << (ROTATE - 526)) | (1L << (ROW - 526)) | (1L << (ROWS - 526)) | (1L << (ROW_FORMAT - 526)) | (1L << (SAVEPOINT - 526)) | (1L << (SCHEDULE - 526)) | (1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (SQL_CACHE - 590)) | (1L << (SQL_NO_CACHE - 590)) | (1L << (SQL_THREAD - 590)) | (1L << (START - 590)) | (1L << (STARTS - 590)) | (1L << (STATS_AUTO_RECALC - 590)) | (1L << (STATS_PERSISTENT - 590)) | (1L << (STATS_SAMPLE_PAGES - 590)) | (1L << (STATUS - 590)) | (1L << (STOP - 590)) | (1L << (STORAGE - 590)) | (1L << (STRING - 590)) | (1L << (SUBCLASS_ORIGIN - 590)) | (1L << (SUBJECT - 590)) | (1L << (SUBPARTITION - 590)) | (1L << (SUBPARTITIONS - 590)) | (1L << (SUSPEND - 590)) | (1L << (SWAPS - 590)) | (1L << (SWITCHES - 590)) | (1L << (TABLE_NAME - 590)) | (1L << (TABLESPACE - 590)) | (1L << (TEMPORARY - 590)) | (1L << (TEMPTABLE - 590)) | (1L << (THAN - 590)) | (1L << (TRADITIONAL - 590)) | (1L << (TRANSACTION - 590)) | (1L << (TRANSACTIONAL - 590)) | (1L << (TRIGGERS - 590)) | (1L << (TRUNCATE - 590)) | (1L << (UNDEFINED - 590)) | (1L << (UNDOFILE - 590)) | (1L << (UNDO_BUFFER_SIZE - 590)) | (1L << (UNINSTALL - 590)) | (1L << (UNKNOWN - 590)) | (1L << (UNTIL - 590)) | (1L << (UPGRADE - 590)) | (1L << (USER - 590)) | (1L << (USE_FRM - 590)) | (1L << (USER_RESOURCES - 590)) | (1L << (VALIDATION - 590)) | (1L << (VALUE - 590)) | (1L << (VARIABLES - 590)) | (1L << (VIEW - 590)) | (1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (EUR - 590)) | (1L << (USA - 590)) | (1L << (JIS - 590)) | (1L << (ISO - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)) | (1L << (TABLES - 654)) | (1L << (ROUTINE - 654)) | (1L << (EXECUTE - 654)) | (1L << (FILE - 654)) | (1L << (PROCESS - 654)) | (1L << (RELOAD - 654)) | (1L << (SHUTDOWN - 654)) | (1L << (SUPER - 654)) | (1L << (PRIVILEGES - 654)) | (1L << (AUDIT_ADMIN - 654)) | (1L << (BACKUP_ADMIN - 654)) | (1L << (BINLOG_ADMIN - 654)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 654)) | (1L << (CLONE_ADMIN - 654)) | (1L << (CONNECTION_ADMIN - 654)) | (1L << (ENCRYPTION_KEY_ADMIN - 654)) | (1L << (FIREWALL_ADMIN - 654)) | (1L << (FIREWALL_USER - 654)) | (1L << (GROUP_REPLICATION_ADMIN - 654)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 654)) | (1L << (NDB_STORED_USER - 654)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 654)) | (1L << (REPLICATION_APPLIER - 654)) | (1L << (REPLICATION_SLAVE_ADMIN - 654)) | (1L << (RESOURCE_GROUP_ADMIN - 654)) | (1L << (RESOURCE_GROUP_USER - 654)) | (1L << (ROLE_ADMIN - 654)) | (1L << (SESSION_VARIABLES_ADMIN - 654)) | (1L << (SET_USER_ID - 654)) | (1L << (SHOW_ROUTINE - 654)) | (1L << (SYSTEM_VARIABLES_ADMIN - 654)) | (1L << (TABLE_ENCRYPTION_ADMIN - 654)) | (1L << (VERSION_TOKEN_ADMIN - 654)) | (1L << (XA_RECOVER_ADMIN - 654)) | (1L << (ARMSCII8 - 654)) | (1L << (ASCII - 654)) | (1L << (BIG5 - 654)) | (1L << (CP1250 - 654)) | (1L << (CP1251 - 654)) | (1L << (CP1256 - 654)) | (1L << (CP1257 - 654)) | (1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (GREEK - 718)) | (1L << (HEBREW - 718)) | (1L << (HP8 - 718)) | (1L << (KEYBCS2 - 718)) | (1L << (KOI8R - 718)) | (1L << (KOI8U - 718)) | (1L << (LATIN1 - 718)) | (1L << (LATIN2 - 718)) | (1L << (LATIN5 - 718)) | (1L << (LATIN7 - 718)) | (1L << (MACCE - 718)) | (1L << (MACROMAN - 718)) | (1L << (SJIS - 718)) | (1L << (SWE7 - 718)) | (1L << (TIS620 - 718)) | (1L << (UCS2 - 718)) | (1L << (UJIS - 718)) | (1L << (UTF16 - 718)) | (1L << (UTF16LE - 718)) | (1L << (UTF32 - 718)) | (1L << (UTF8 - 718)) | (1L << (UTF8MB3 - 718)) | (1L << (UTF8MB4 - 718)) | (1L << (ARCHIVE - 718)) | (1L << (BLACKHOLE - 718)) | (1L << (CSV - 718)) | (1L << (FEDERATED - 718)) | (1L << (INNODB - 718)) | (1L << (MEMORY - 718)) | (1L << (MRG_MYISAM - 718)) | (1L << (MYISAM - 718)) | (1L << (NDB - 718)) | (1L << (NDBCLUSTER - 718)) | (1L << (PERFORMANCE_SCHEMA - 718)) | (1L << (TOKUDB - 718)) | (1L << (REPEATABLE - 718)) | (1L << (COMMITTED - 718)) | (1L << (UNCOMMITTED - 718)) | (1L << (SERIALIZABLE - 718)) | (1L << (GEOMETRYCOLLECTION - 718)) | (1L << (LINESTRING - 718)) | (1L << (MULTILINESTRING - 718)) | (1L << (MULTIPOINT - 718)) | (1L << (MULTIPOLYGON - 718)) | (1L << (POINT - 718)) | (1L << (POLYGON - 718)) | (1L << (ABS - 718)) | (1L << (ACOS - 718)) | (1L << (ADDDATE - 718)) | (1L << (ADDTIME - 718)) | (1L << (AES_DECRYPT - 718)) | (1L << (AES_ENCRYPT - 718)) | (1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (ASYMMETRIC_VERIFY - 782)) | (1L << (ATAN - 782)) | (1L << (ATAN2 - 782)) | (1L << (BENCHMARK - 782)) | (1L << (BIN - 782)) | (1L << (BIT_COUNT - 782)) | (1L << (BIT_LENGTH - 782)) | (1L << (BUFFER - 782)) | (1L << (CATALOG_NAME - 782)) | (1L << (CEIL - 782)) | (1L << (CEILING - 782)) | (1L << (CENTROID - 782)) | (1L << (CHARACTER_LENGTH - 782)) | (1L << (CHARSET - 782)) | (1L << (CHAR_LENGTH - 782)) | (1L << (COERCIBILITY - 782)) | (1L << (COLLATION - 782)) | (1L << (COMPRESS - 782)) | (1L << (CONCAT - 782)) | (1L << (CONCAT_WS - 782)) | (1L << (CONNECTION_ID - 782)) | (1L << (CONV - 782)) | (1L << (CONVERT_TZ - 782)) | (1L << (COS - 782)) | (1L << (COT - 782)) | (1L << (CRC32 - 782)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1L << (CREATE_DH_PARAMETERS - 782)) | (1L << (CREATE_DIGEST - 782)) | (1L << (CROSSES - 782)) | (1L << (DATEDIFF - 782)) | (1L << (DATE_FORMAT - 782)) | (1L << (DAYNAME - 782)) | (1L << (DAYOFMONTH - 782)) | (1L << (DAYOFWEEK - 782)) | (1L << (DAYOFYEAR - 782)) | (1L << (DECODE - 782)) | (1L << (DEGREES - 782)) | (1L << (DES_DECRYPT - 782)) | (1L << (DES_ENCRYPT - 782)) | (1L << (DIMENSION - 782)) | (1L << (DISJOINT - 782)) | (1L << (ELT - 782)) | (1L << (ENCODE - 782)) | (1L << (ENCRYPT - 782)) | (1L << (ENDPOINT - 782)) | (1L << (ENVELOPE - 782)) | (1L << (EQUALS - 782)) | (1L << (EXP - 782)) | (1L << (EXPORT_SET - 782)) | (1L << (EXTERIORRING - 782)) | (1L << (EXTRACTVALUE - 782)) | (1L << (FIELD - 782)) | (1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (GEOMETRYCOLLECTIONFROMWKB - 846)) | (1L << (GEOMETRYFROMTEXT - 846)) | (1L << (GEOMETRYFROMWKB - 846)) | (1L << (GEOMETRYN - 846)) | (1L << (GEOMETRYTYPE - 846)) | (1L << (GEOMFROMTEXT - 846)) | (1L << (GEOMFROMWKB - 846)) | (1L << (GET_FORMAT - 846)) | (1L << (GET_LOCK - 846)) | (1L << (GLENGTH - 846)) | (1L << (GREATEST - 846)) | (1L << (GTID_SUBSET - 846)) | (1L << (GTID_SUBTRACT - 846)) | (1L << (HEX - 846)) | (1L << (IFNULL - 846)) | (1L << (INET6_ATON - 846)) | (1L << (INET6_NTOA - 846)) | (1L << (INET_ATON - 846)) | (1L << (INET_NTOA - 846)) | (1L << (INSTR - 846)) | (1L << (INTERIORRINGN - 846)) | (1L << (INTERSECTS - 846)) | (1L << (ISCLOSED - 846)) | (1L << (ISEMPTY - 846)) | (1L << (ISNULL - 846)) | (1L << (ISSIMPLE - 846)) | (1L << (IS_FREE_LOCK - 846)) | (1L << (IS_IPV4 - 846)) | (1L << (IS_IPV4_COMPAT - 846)) | (1L << (IS_IPV4_MAPPED - 846)) | (1L << (IS_IPV6 - 846)) | (1L << (IS_USED_LOCK - 846)) | (1L << (LAST_INSERT_ID - 846)) | (1L << (LCASE - 846)) | (1L << (LEAST - 846)) | (1L << (LENGTH - 846)) | (1L << (LINEFROMTEXT - 846)) | (1L << (LINEFROMWKB - 846)) | (1L << (LINESTRINGFROMTEXT - 846)) | (1L << (LINESTRINGFROMWKB - 846)) | (1L << (LN - 846)) | (1L << (LOAD_FILE - 846)) | (1L << (LOCATE - 846)) | (1L << (LOG - 846)) | (1L << (LOG10 - 846)) | (1L << (LOG2 - 846)) | (1L << (LOWER - 846)) | (1L << (LPAD - 846)) | (1L << (LTRIM - 846)) | (1L << (MAKEDATE - 846)) | (1L << (MAKETIME - 846)) | (1L << (MAKE_SET - 846)) | (1L << (MASTER_POS_WAIT - 846)) | (1L << (MBRCONTAINS - 846)) | (1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (MPOINTFROMTEXT - 910)) | (1L << (MPOINTFROMWKB - 910)) | (1L << (MPOLYFROMTEXT - 910)) | (1L << (MPOLYFROMWKB - 910)) | (1L << (MULTILINESTRINGFROMTEXT - 910)) | (1L << (MULTILINESTRINGFROMWKB - 910)) | (1L << (MULTIPOINTFROMTEXT - 910)) | (1L << (MULTIPOINTFROMWKB - 910)) | (1L << (MULTIPOLYGONFROMTEXT - 910)) | (1L << (MULTIPOLYGONFROMWKB - 910)) | (1L << (NAME_CONST - 910)) | (1L << (NULLIF - 910)) | (1L << (NUMGEOMETRIES - 910)) | (1L << (NUMINTERIORRINGS - 910)) | (1L << (NUMPOINTS - 910)) | (1L << (OCT - 910)) | (1L << (OCTET_LENGTH - 910)) | (1L << (ORD - 910)) | (1L << (OVERLAPS - 910)) | (1L << (PERIOD_ADD - 910)) | (1L << (PERIOD_DIFF - 910)) | (1L << (PI - 910)) | (1L << (POINTFROMTEXT - 910)) | (1L << (POINTFROMWKB - 910)) | (1L << (POINTN - 910)) | (1L << (POLYFROMTEXT - 910)) | (1L << (POLYFROMWKB - 910)) | (1L << (POLYGONFROMTEXT - 910)) | (1L << (POLYGONFROMWKB - 910)) | (1L << (POW - 910)) | (1L << (POWER - 910)) | (1L << (QUOTE - 910)) | (1L << (RADIANS - 910)) | (1L << (RAND - 910)) | (1L << (RANDOM_BYTES - 910)) | (1L << (RELEASE_LOCK - 910)) | (1L << (REVERSE - 910)) | (1L << (ROUND - 910)) | (1L << (ROW_COUNT - 910)) | (1L << (RPAD - 910)) | (1L << (RTRIM - 910)) | (1L << (SEC_TO_TIME - 910)) | (1L << (SESSION_USER - 910)) | (1L << (SHA - 910)) | (1L << (SHA1 - 910)) | (1L << (SHA2 - 910)) | (1L << (SCHEMA_NAME - 910)) | (1L << (SIGN - 910)) | (1L << (SIN - 910)) | (1L << (SLEEP - 910)) | (1L << (SOUNDEX - 910)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1L << (SQRT - 910)) | (1L << (SRID - 910)) | (1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (ST_CONTAINS - 974)) | (1L << (ST_CROSSES - 974)) | (1L << (ST_DIFFERENCE - 974)) | (1L << (ST_DIMENSION - 974)) | (1L << (ST_DISJOINT - 974)) | (1L << (ST_DISTANCE - 974)) | (1L << (ST_ENDPOINT - 974)) | (1L << (ST_ENVELOPE - 974)) | (1L << (ST_EQUALS - 974)) | (1L << (ST_EXTERIORRING - 974)) | (1L << (ST_GEOMCOLLFROMTEXT - 974)) | (1L << (ST_GEOMCOLLFROMTXT - 974)) | (1L << (ST_GEOMCOLLFROMWKB - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1L << (ST_GEOMETRYFROMTEXT - 974)) | (1L << (ST_GEOMETRYFROMWKB - 974)) | (1L << (ST_GEOMETRYN - 974)) | (1L << (ST_GEOMETRYTYPE - 974)) | (1L << (ST_GEOMFROMTEXT - 974)) | (1L << (ST_GEOMFROMWKB - 974)) | (1L << (ST_INTERIORRINGN - 974)) | (1L << (ST_INTERSECTION - 974)) | (1L << (ST_INTERSECTS - 974)) | (1L << (ST_ISCLOSED - 974)) | (1L << (ST_ISEMPTY - 974)) | (1L << (ST_ISSIMPLE - 974)) | (1L << (ST_LINEFROMTEXT - 974)) | (1L << (ST_LINEFROMWKB - 974)) | (1L << (ST_LINESTRINGFROMTEXT - 974)) | (1L << (ST_LINESTRINGFROMWKB - 974)) | (1L << (ST_NUMGEOMETRIES - 974)) | (1L << (ST_NUMINTERIORRING - 974)) | (1L << (ST_NUMINTERIORRINGS - 974)) | (1L << (ST_NUMPOINTS - 974)) | (1L << (ST_OVERLAPS - 974)) | (1L << (ST_POINTFROMTEXT - 974)) | (1L << (ST_POINTFROMWKB - 974)) | (1L << (ST_POINTN - 974)) | (1L << (ST_POLYFROMTEXT - 974)) | (1L << (ST_POLYFROMWKB - 974)) | (1L << (ST_POLYGONFROMTEXT - 974)) | (1L << (ST_POLYGONFROMWKB - 974)) | (1L << (ST_SRID - 974)) | (1L << (ST_STARTPOINT - 974)) | (1L << (ST_SYMDIFFERENCE - 974)) | (1L << (ST_TOUCHES - 974)) | (1L << (ST_UNION - 974)) | (1L << (ST_WITHIN - 974)) | (1L << (ST_X - 974)) | (1L << (ST_Y - 974)) | (1L << (SUBDATE - 974)) | (1L << (SUBSTRING_INDEX - 974)) | (1L << (SUBTIME - 974)) | (1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)))) != 0) || ((((_la - 1038)) & ~0x3f) == 0 && ((1L << (_la - 1038)) & ((1L << (TO_SECONDS - 1038)) | (1L << (UCASE - 1038)) | (1L << (UNCOMPRESS - 1038)) | (1L << (UNCOMPRESSED_LENGTH - 1038)) | (1L << (UNHEX - 1038)) | (1L << (UNIX_TIMESTAMP - 1038)) | (1L << (UPDATEXML - 1038)) | (1L << (UPPER - 1038)) | (1L << (UUID - 1038)) | (1L << (UUID_SHORT - 1038)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1038)) | (1L << (VERSION - 1038)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1L << (WEEKDAY - 1038)) | (1L << (WEEKOFYEAR - 1038)) | (1L << (WEIGHT_STRING - 1038)) | (1L << (WITHIN - 1038)) | (1L << (YEARWEEK - 1038)) | (1L << (Y_FUNCTION - 1038)) | (1L << (X_FUNCTION - 1038)) | (1L << (MOD - 1038)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1L << (STRING_LITERAL - 1038)))) != 0) || ((((_la - 1106)) & ~0x3f) == 0 && ((1L << (_la - 1106)) & ((1L << (ID - 1106)) | (1L << (REVERSE_QUOTE_ID - 1106)) | (1L << (OPTIONAL - 1106)))) != 0)) {
				{
				State = 4369;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetchCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 372, RULE_cursorStatement);
		int _la;
		try {
			State = 4387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4372;
				Match(CLOSE);
				State = 4373;
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4374;
				Match(FETCH);
				State = 4379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,626,Context) ) {
				case 1:
					{
					State = 4376;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 4375;
						Match(NEXT);
						}
					}

					State = 4378;
					Match(FROM);
					}
					break;
				}
				State = 4381;
				uid();
				State = 4382;
				Match(INTO);
				State = 4383;
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4385;
				Match(OPEN);
				State = 4386;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 374, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4389;
			Match(DECLARE);
			State = 4390;
			uidList();
			State = 4391;
			dataType();
			State = 4394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4392;
				Match(DEFAULT);
				State = 4393;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 376, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4396;
			Match(DECLARE);
			State = 4397;
			uid();
			State = 4398;
			Match(CONDITION);
			State = 4399;
			Match(FOR);
			State = 4406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 4400;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 4401;
				Match(SQLSTATE);
				State = 4403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4402;
					Match(VALUE);
					}
				}

				State = 4405;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 378, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4408;
			Match(DECLARE);
			State = 4409;
			uid();
			State = 4410;
			Match(CURSOR);
			State = 4411;
			Match(FOR);
			State = 4412;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 380, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4414;
			Match(DECLARE);
			State = 4415;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4416;
			Match(HANDLER);
			State = 4417;
			Match(FOR);
			State = 4418;
			handlerConditionValue();
			State = 4423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4419;
				Match(COMMA);
				State = 4420;
				handlerConditionValue();
				}
				}
				State = 4425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4426;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionNotfound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionException(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 382, RULE_handlerConditionValue);
		int _la;
		try {
			State = 4439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4428;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4429;
				Match(SQLSTATE);
				State = 4431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4430;
					Match(VALUE);
					}
				}

				State = 4433;
				Match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4434;
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4435;
				Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4436;
				Match(NOT);
				State = 4437;
				Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4438;
				Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 384, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
			case 1:
				{
				State = 4441;
				compoundStatement();
				}
				break;
			case 2:
				{
				State = 4442;
				sqlStatement();
				}
				break;
			}
			State = 4445;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 386, RULE_caseAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4447;
			Match(WHEN);
			State = 4450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,635,Context) ) {
			case 1:
				{
				State = 4448;
				constant();
				}
				break;
			case 2:
				{
				State = 4449;
				expression(0);
				}
				break;
			}
			State = 4452;
			Match(THEN);
			State = 4454;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4453;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,636,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 388, RULE_elifAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4458;
			Match(ELSEIF);
			State = 4459;
			expression(0);
			State = 4460;
			Match(THEN);
			State = 4462;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4461;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,637,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterUserMysqlV57Context : AlterUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 390, RULE_alterUser);
		int _la;
		try {
			State = 4520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4466;
				Match(ALTER);
				State = 4467;
				Match(USER);
				State = 4468;
				userSpecification();
				State = 4473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4469;
					Match(COMMA);
					State = 4470;
					userSpecification();
					}
					}
					State = 4475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4476;
				Match(ALTER);
				State = 4477;
				Match(USER);
				State = 4479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4478;
					ifExists();
					}
				}

				State = 4481;
				userAuthOption();
				State = 4486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4482;
					Match(COMMA);
					State = 4483;
					userAuthOption();
					}
					}
					State = 4488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4489;
					Match(REQUIRE);
					State = 4501;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4490;
						((AlterUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4491;
						tlsOption();
						State = 4498;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4493;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4492;
								Match(AND);
								}
							}

							State = 4495;
							tlsOption();
							}
							}
							State = 4500;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4505;
					Match(WITH);
					State = 4507;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4506;
						userResourceOption();
						}
						}
						State = 4509;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)))) != 0) );
					}
				}

				State = 4517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4515;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4513;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4514;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV57Context : CreateUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 392, RULE_createUser);
		int _la;
		try {
			State = 4576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4522;
				Match(CREATE);
				State = 4523;
				Match(USER);
				State = 4524;
				userAuthOption();
				State = 4529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4525;
					Match(COMMA);
					State = 4526;
					userAuthOption();
					}
					}
					State = 4531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4532;
				Match(CREATE);
				State = 4533;
				Match(USER);
				State = 4535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4534;
					ifNotExists();
					}
				}

				State = 4537;
				userAuthOption();
				State = 4542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4538;
					Match(COMMA);
					State = 4539;
					userAuthOption();
					}
					}
					State = 4544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4545;
					Match(REQUIRE);
					State = 4557;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4546;
						((CreateUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4547;
						tlsOption();
						State = 4554;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4549;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4548;
								Match(AND);
								}
							}

							State = 4551;
							tlsOption();
							}
							}
							State = 4556;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4561;
					Match(WITH);
					State = 4563;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4562;
						userResourceOption();
						}
						}
						State = 4565;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)))) != 0) );
					}
				}

				State = 4573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4571;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4569;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4570;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 394, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4578;
			Match(DROP);
			State = 4579;
			Match(USER);
			State = 4581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 4580;
				ifExists();
				}
			}

			State = 4583;
			userName();
			State = 4588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4584;
				Match(COMMA);
				State = 4585;
				userName();
				}
				}
				State = 4590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION(int i) {
			return GetToken(MySqlParser.OPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 396, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			State = 4678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,680,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4591;
				Match(GRANT);
				State = 4592;
				privelegeClause();
				State = 4597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4593;
					Match(COMMA);
					State = 4594;
					privelegeClause();
					}
					}
					State = 4599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4600;
				Match(ON);
				State = 4602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,665,Context) ) {
				case 1:
					{
					State = 4601;
					_localctx.privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4604;
				privilegeLevel();
				State = 4605;
				Match(TO);
				State = 4606;
				userAuthOption();
				State = 4611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4607;
					Match(COMMA);
					State = 4608;
					userAuthOption();
					}
					}
					State = 4613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4614;
					Match(REQUIRE);
					State = 4626;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4615;
						_localctx.tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4616;
						tlsOption();
						State = 4623;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4618;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4617;
								Match(AND);
								}
							}

							State = 4620;
							tlsOption();
							}
							}
							State = 4625;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4630;
					Match(WITH);
					State = 4636;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,672,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 4634;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GRANT:
								{
								State = 4631;
								Match(GRANT);
								State = 4632;
								Match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								State = 4633;
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						State = 4638;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,672,Context);
					}
					}
				}

				State = 4647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4641;
					Match(AS);
					State = 4642;
					userName();
					State = 4643;
					Match(WITH);
					State = 4644;
					Match(ROLE);
					State = 4645;
					roleOption();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4649;
				Match(GRANT);
				State = 4650;
				uid();
				State = 4655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4651;
					Match(COMMA);
					State = 4652;
					uid();
					}
					}
					State = 4657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4658;
				Match(TO);
				State = 4661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,676,Context) ) {
				case 1:
					{
					State = 4659;
					userName();
					}
					break;
				case 2:
					{
					State = 4660;
					uid();
					}
					break;
				}
				State = 4670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4663;
					Match(COMMA);
					State = 4666;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,677,Context) ) {
					case 1:
						{
						State = 4664;
						userName();
						}
						break;
					case 2:
						{
						State = 4665;
						uid();
						}
						break;
					}
					}
					}
					State = 4672;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4673;
					Match(WITH);
					State = 4674;
					Match(ADMIN);
					State = 4675;
					Match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOptionContext roleOption() {
		RoleOptionContext _localctx = new RoleOptionContext(Context, State);
		EnterRule(_localctx, 398, RULE_roleOption);
		int _la;
		try {
			State = 4702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4680;
				Match(DEFAULT);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4681;
				Match(NONE);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4682;
				Match(ALL);
				State = 4692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT) {
					{
					State = 4683;
					Match(EXCEPT);
					State = 4684;
					userName();
					State = 4689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4685;
						Match(COMMA);
						State = 4686;
						userName();
						}
						}
						State = 4691;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4694;
				userName();
				State = 4699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4695;
					Match(COMMA);
					State = 4696;
					userName();
					}
					}
					State = 4701;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 400, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4704;
			Match(GRANT);
			State = 4705;
			Match(PROXY);
			State = 4706;
			Match(ON);
			State = 4707;
			_localctx.fromFirst = userName();
			State = 4708;
			Match(TO);
			State = 4709;
			_localctx.toFirst = userName();
			State = 4714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4710;
				Match(COMMA);
				State = 4711;
				_localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 4716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4717;
				Match(WITH);
				State = 4718;
				Match(GRANT);
				State = 4719;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 402, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4722;
			Match(RENAME);
			State = 4723;
			Match(USER);
			State = 4724;
			renameUserClause();
			State = 4729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4725;
				Match(COMMA);
				State = 4726;
				renameUserClause();
				}
				}
				State = 4731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoleRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 404, RULE_revokeStatement);
		int _la;
		try {
			State = 4796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4732;
				Match(REVOKE);
				State = 4733;
				privelegeClause();
				State = 4738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4734;
					Match(COMMA);
					State = 4735;
					privelegeClause();
					}
					}
					State = 4740;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4741;
				Match(ON);
				State = 4743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
				case 1:
					{
					State = 4742;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4745;
				privilegeLevel();
				State = 4746;
				Match(FROM);
				State = 4747;
				userName();
				State = 4752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4748;
					Match(COMMA);
					State = 4749;
					userName();
					}
					}
					State = 4754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4755;
				Match(REVOKE);
				State = 4756;
				Match(ALL);
				State = 4758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 4757;
					Match(PRIVILEGES);
					}
				}

				State = 4760;
				Match(COMMA);
				State = 4761;
				Match(GRANT);
				State = 4762;
				Match(OPTION);
				State = 4763;
				Match(FROM);
				State = 4764;
				userName();
				State = 4769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4765;
					Match(COMMA);
					State = 4766;
					userName();
					}
					}
					State = 4771;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4772;
				Match(REVOKE);
				State = 4773;
				uid();
				State = 4778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4774;
					Match(COMMA);
					State = 4775;
					uid();
					}
					}
					State = 4780;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4781;
				Match(FROM);
				State = 4784;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,694,Context) ) {
				case 1:
					{
					State = 4782;
					userName();
					}
					break;
				case 2:
					{
					State = 4783;
					uid();
					}
					break;
				}
				State = 4793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4786;
					Match(COMMA);
					State = 4789;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,695,Context) ) {
					case 1:
						{
						State = 4787;
						userName();
						}
						break;
					case 2:
						{
						State = 4788;
						uid();
						}
						break;
					}
					}
					}
					State = 4795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 406, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4798;
			Match(REVOKE);
			State = 4799;
			Match(PROXY);
			State = 4800;
			Match(ON);
			State = 4801;
			_localctx.onUser = userName();
			State = 4802;
			Match(FROM);
			State = 4803;
			_localctx.fromFirst = userName();
			State = 4808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4804;
				Match(COMMA);
				State = 4805;
				_localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 4810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 408, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4811;
			Match(SET);
			State = 4812;
			Match(PASSWORD);
			State = 4815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4813;
				Match(FOR);
				State = 4814;
				userName();
				}
			}

			State = 4817;
			Match(EQUAL_SYMBOL);
			State = 4820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 4818;
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 4819;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 410, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4822;
			userName();
			State = 4823;
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(MySqlParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 412, RULE_userAuthOption);
		int _la;
		try {
			State = 4853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4825;
				userName();
				State = 4826;
				Match(IDENTIFIED);
				State = 4827;
				Match(BY);
				State = 4828;
				Match(PASSWORD);
				State = 4829;
				((PasswordAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4831;
				userName();
				State = 4832;
				Match(IDENTIFIED);
				State = 4835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4833;
					Match(WITH);
					State = 4834;
					authPlugin();
					}
				}

				State = 4837;
				Match(BY);
				State = 4838;
				Match(STRING_LITERAL);
				State = 4842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN) {
					{
					State = 4839;
					Match(RETAIN);
					State = 4840;
					Match(CURRENT);
					State = 4841;
					Match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4844;
				userName();
				State = 4845;
				Match(IDENTIFIED);
				State = 4846;
				Match(WITH);
				State = 4847;
				authPlugin();
				State = 4850;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,703,Context) ) {
				case 1:
					{
					State = 4848;
					Match(AS);
					State = 4849;
					Match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4852;
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTlsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 414, RULE_tlsOption);
		try {
			State = 4863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4855;
				Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4856;
				Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4857;
				Match(CIPHER);
				State = 4858;
				Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4859;
				Match(ISSUER);
				State = 4860;
				Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4861;
				Match(SUBJECT);
				State = 4862;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserResourceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 416, RULE_userResourceOption);
		try {
			State = 4873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4865;
				Match(MAX_QUERIES_PER_HOUR);
				State = 4866;
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4867;
				Match(MAX_UPDATES_PER_HOUR);
				State = 4868;
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4869;
				Match(MAX_CONNECTIONS_PER_HOUR);
				State = 4870;
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4871;
				Match(MAX_USER_CONNECTIONS);
				State = 4872;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPasswordOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 418, RULE_userPasswordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4875;
			Match(PASSWORD);
			State = 4876;
			Match(EXPIRE);
			State = 4883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 4877;
				_localctx.expireType = Match(DEFAULT);
				}
				break;
			case NEVER:
				{
				State = 4878;
				_localctx.expireType = Match(NEVER);
				}
				break;
			case INTERVAL:
				{
				State = 4879;
				_localctx.expireType = Match(INTERVAL);
				State = 4880;
				decimalLiteral();
				State = 4881;
				Match(DAY);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 420, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4885;
			Match(ACCOUNT);
			State = 4886;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivelegeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 422, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4888;
			privilege();
			State = 4893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 4889;
				Match(LR_BRACKET);
				State = 4890;
				uidList();
				State = 4891;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_PASSWORD_ADMIN() { return GetToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_OPTIMIZER_COSTS() { return GetToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_STATUS() { return GetToken(MySqlParser.FLUSH_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_TABLES() { return GetToken(MySqlParser.FLUSH_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_USER_RESOURCES() { return GetToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ENABLE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_CONNECTION_ADMIN() { return GetToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 424, RULE_privilege);
		int _la;
		try {
			State = 4974;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4895;
				Match(ALL);
				State = 4897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 4896;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4899;
				Match(ALTER);
				State = 4901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 4900;
					Match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4903;
				Match(CREATE);
				State = 4911;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 4904;
					Match(TEMPORARY);
					State = 4905;
					Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 4906;
					Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 4907;
					Match(VIEW);
					}
					break;
				case USER:
					{
					State = 4908;
					Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 4909;
					Match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					State = 4910;
					Match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4913;
				Match(DELETE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4914;
				Match(DROP);
				State = 4916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROLE) {
					{
					State = 4915;
					Match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4918;
				Match(EVENT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4919;
				Match(EXECUTE);
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4920;
				Match(FILE);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4921;
				Match(GRANT);
				State = 4922;
				Match(OPTION);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4923;
				Match(INDEX);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4924;
				Match(INSERT);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4925;
				Match(LOCK);
				State = 4926;
				Match(TABLES);
				}
				break;
			case PROCESS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4927;
				Match(PROCESS);
				}
				break;
			case PROXY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4928;
				Match(PROXY);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4929;
				Match(REFERENCES);
				}
				break;
			case RELOAD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4930;
				Match(RELOAD);
				}
				break;
			case REPLICATION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4931;
				Match(REPLICATION);
				State = 4932;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4933;
				Match(SELECT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4934;
				Match(SHOW);
				State = 4935;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4936;
				Match(SHUTDOWN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4937;
				Match(SUPER);
				}
				break;
			case TRIGGER:
				EnterOuterAlt(_localctx, 22);
				{
				State = 4938;
				Match(TRIGGER);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 4939;
				Match(UPDATE);
				}
				break;
			case USAGE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 4940;
				Match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 4941;
				Match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 4942;
				Match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 4943;
				Match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 4944;
				Match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 29);
				{
				State = 4945;
				Match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 4946;
				Match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 31);
				{
				State = 4947;
				Match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				EnterOuterAlt(_localctx, 32);
				{
				State = 4948;
				Match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				EnterOuterAlt(_localctx, 33);
				{
				State = 4949;
				Match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				EnterOuterAlt(_localctx, 34);
				{
				State = 4950;
				Match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				EnterOuterAlt(_localctx, 35);
				{
				State = 4951;
				Match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				EnterOuterAlt(_localctx, 36);
				{
				State = 4952;
				Match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				EnterOuterAlt(_localctx, 37);
				{
				State = 4953;
				Match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				EnterOuterAlt(_localctx, 38);
				{
				State = 4954;
				Match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				EnterOuterAlt(_localctx, 39);
				{
				State = 4955;
				Match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				EnterOuterAlt(_localctx, 40);
				{
				State = 4956;
				Match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 4957;
				Match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				EnterOuterAlt(_localctx, 42);
				{
				State = 4958;
				Match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 43);
				{
				State = 4959;
				Match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				EnterOuterAlt(_localctx, 44);
				{
				State = 4960;
				Match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				EnterOuterAlt(_localctx, 45);
				{
				State = 4961;
				Match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				EnterOuterAlt(_localctx, 46);
				{
				State = 4962;
				Match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				EnterOuterAlt(_localctx, 47);
				{
				State = 4963;
				Match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				EnterOuterAlt(_localctx, 48);
				{
				State = 4964;
				Match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 49);
				{
				State = 4965;
				Match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 50);
				{
				State = 4966;
				Match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				EnterOuterAlt(_localctx, 51);
				{
				State = 4967;
				Match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				EnterOuterAlt(_localctx, 52);
				{
				State = 4968;
				Match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				EnterOuterAlt(_localctx, 53);
				{
				State = 4969;
				Match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 54);
				{
				State = 4970;
				Match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 55);
				{
				State = 4971;
				Match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				EnterOuterAlt(_localctx, 56);
				{
				State = 4972;
				Match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				EnterOuterAlt(_localctx, 57);
				{
				State = 4973;
				Match(XA_RECOVER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteSchemaPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchemaPriviLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 426, RULE_privilegeLevel);
		try {
			State = 4992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,714,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4976;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4977;
				Match(STAR);
				State = 4978;
				Match(DOT);
				State = 4979;
				Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4980;
				uid();
				State = 4981;
				Match(DOT);
				State = 4982;
				Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4984;
				uid();
				State = 4985;
				Match(DOT);
				State = 4986;
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4988;
				uid();
				State = 4989;
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4991;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUserClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 428, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4994;
			_localctx.fromFirst = userName();
			State = 4995;
			Match(TO);
			State = 4996;
			_localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HISTOGRAM() { return GetTokens(MySqlParser.HISTOGRAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM(int i) {
			return GetToken(MySqlParser.HISTOGRAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 430, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4998;
			Match(ANALYZE);
			State = 5000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 4999;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5002;
			Match(TABLE);
			State = 5003;
			tables();
			State = 5021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,718,Context) ) {
			case 1:
				{
				State = 5004;
				Match(UPDATE);
				State = 5005;
				Match(HISTOGRAM);
				State = 5006;
				Match(ON);
				State = 5007;
				fullColumnName();
				State = 5012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5008;
					Match(COMMA);
					State = 5009;
					fullColumnName();
					}
					}
					State = 5014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5015;
					Match(WITH);
					State = 5016;
					decimalLiteral();
					State = 5017;
					Match(BUCKETS);
					}
				}

				}
				break;
			}
			State = 5034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
			case 1:
				{
				State = 5023;
				Match(DROP);
				State = 5024;
				Match(HISTOGRAM);
				State = 5025;
				Match(ON);
				State = 5026;
				fullColumnName();
				State = 5031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5027;
					Match(COMMA);
					State = 5028;
					fullColumnName();
					}
					}
					State = 5033;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 432, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5036;
			Match(CHECK);
			State = 5037;
			Match(TABLE);
			State = 5038;
			tables();
			State = 5042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 5039;
				checkTableOption();
				}
				}
				State = 5044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecksumTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 434, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5045;
			Match(CHECKSUM);
			State = 5046;
			Match(TABLE);
			State = 5047;
			tables();
			State = 5049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 5048;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimizeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 436, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5051;
			Match(OPTIMIZE);
			State = 5053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5052;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5055;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5056;
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 438, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5058;
			Match(REPAIR);
			State = 5060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5059;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5062;
			Match(TABLE);
			State = 5063;
			tables();
			State = 5065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 5064;
				Match(QUICK);
				}
			}

			State = 5068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 5067;
				Match(EXTENDED);
				}
			}

			State = 5071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 5070;
				Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 440, RULE_checkTableOption);
		try {
			State = 5080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5073;
				Match(FOR);
				State = 5074;
				Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5075;
				Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5076;
				Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5077;
				Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5078;
				Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5079;
				Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 442, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5082;
			Match(CREATE);
			State = 5084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 5083;
				Match(AGGREGATE);
				}
			}

			State = 5086;
			Match(FUNCTION);
			State = 5087;
			uid();
			State = 5088;
			Match(RETURNS);
			State = 5089;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (INTEGER - 195)) | (1L << (REAL - 195)) | (1L << (DECIMAL - 195)))) != 0) || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5090;
			Match(SONAME);
			State = 5091;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 444, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5093;
			Match(INSTALL);
			State = 5094;
			Match(PLUGIN);
			State = 5095;
			uid();
			State = 5096;
			Match(SONAME);
			State = 5097;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 446, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5099;
			Match(UNINSTALL);
			State = 5100;
			Match(PLUGIN);
			State = 5101;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNames(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNewValueInsideTriggerContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNewValueInsideTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 448, RULE_setStatement);
		int _la;
		try {
			State = 5154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,736,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5103;
				Match(SET);
				State = 5104;
				variableClause();
				State = 5105;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5106;
				expression(0);
				State = 5114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5107;
					Match(COMMA);
					State = 5108;
					variableClause();
					State = 5109;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5110;
					expression(0);
					}
					}
					State = 5116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5117;
				Match(SET);
				State = 5121;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 5118;
					Match(CHARACTER);
					State = 5119;
					Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 5120;
					Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5123;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 5124;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5127;
				Match(SET);
				State = 5128;
				Match(NAMES);
				State = 5135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5129;
					charsetName();
					State = 5132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 5130;
						Match(COLLATE);
						State = 5131;
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 5134;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5137;
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5138;
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5139;
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5140;
				Match(SET);
				State = 5141;
				fullId();
				State = 5142;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5143;
				expression(0);
				State = 5151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5144;
					Match(COMMA);
					State = 5145;
					fullId();
					State = 5146;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5147;
					expression(0);
					}
					}
					State = 5153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowOpenTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFullIdObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCountErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowObjectFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateDb(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowLogEventsContext : ShowStatementContext {
		public IToken logFormat;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowMasterLogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSlaveStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 450, RULE_showStatement);
		int _la;
		try {
			State = 5307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5156;
				Match(SHOW);
				State = 5157;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5158;
				Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5159;
				Match(SHOW);
				State = 5160;
				((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5161;
				Match(EVENTS);
				State = 5164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5162;
					Match(IN);
					State = 5163;
					((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5166;
					Match(FROM);
					State = 5167;
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5170;
					Match(LIMIT);
					State = 5174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
					case 1:
						{
						State = 5171;
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						State = 5172;
						Match(COMMA);
						}
						break;
					}
					State = 5176;
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5179;
				Match(SHOW);
				State = 5180;
				showCommonEntity();
				State = 5182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5181;
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5184;
				Match(SHOW);
				State = 5186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5185;
					Match(FULL);
					}
				}

				State = 5188;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5189;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5190;
				tableName();
				State = 5193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5191;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5192;
					uid();
					}
				}

				State = 5196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5195;
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5198;
				Match(SHOW);
				State = 5199;
				Match(CREATE);
				State = 5200;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 5201;
					ifNotExists();
					}
				}

				State = 5204;
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5205;
				Match(SHOW);
				State = 5206;
				Match(CREATE);
				State = 5207;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (PROCEDURE - 123)) | (1L << (TABLE - 123)) | (1L << (TRIGGER - 123)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5208;
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5209;
				Match(SHOW);
				State = 5210;
				Match(CREATE);
				State = 5211;
				Match(USER);
				State = 5212;
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5213;
				Match(SHOW);
				State = 5214;
				Match(ENGINE);
				State = 5215;
				engineName();
				State = 5216;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5218;
				Match(SHOW);
				State = 5219;
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5220;
				Match(SHOW);
				State = 5221;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				{
				State = 5222;
				Match(LIMIT);
				State = 5226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,746,Context) ) {
				case 1:
					{
					State = 5223;
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					State = 5224;
					Match(COMMA);
					}
					break;
				}
				State = 5228;
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5229;
				Match(SHOW);
				State = 5230;
				Match(COUNT);
				State = 5231;
				Match(LR_BRACKET);
				State = 5232;
				Match(STAR);
				State = 5233;
				Match(RR_BRACKET);
				State = 5234;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5235;
				Match(SHOW);
				State = 5236;
				showSchemaEntity();
				State = 5239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5237;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5238;
					uid();
					}
				}

				State = 5242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5241;
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5244;
				Match(SHOW);
				State = 5245;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5246;
				Match(CODE);
				State = 5247;
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5248;
				Match(SHOW);
				State = 5249;
				Match(GRANTS);
				State = 5252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5250;
					Match(FOR);
					State = 5251;
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 5254;
				Match(SHOW);
				State = 5255;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5256;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5257;
				tableName();
				State = 5260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5258;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5259;
					uid();
					}
				}

				State = 5264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5262;
					Match(WHERE);
					State = 5263;
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 5266;
				Match(SHOW);
				State = 5267;
				Match(OPEN);
				State = 5268;
				Match(TABLES);
				State = 5271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5269;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5270;
					uid();
					}
				}

				State = 5274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5273;
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 5276;
				Match(SHOW);
				State = 5277;
				Match(PROFILE);
				State = 5278;
				showProfileType();
				State = 5283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5279;
					Match(COMMA);
					State = 5280;
					showProfileType();
					}
					}
					State = 5285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5286;
					Match(FOR);
					State = 5287;
					Match(QUERY);
					State = 5288;
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				State = 5291;
				Match(LIMIT);
				State = 5295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 5292;
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					State = 5293;
					Match(COMMA);
					}
					break;
				}
				State = 5297;
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 5299;
				Match(SHOW);
				State = 5300;
				Match(SLAVE);
				State = 5301;
				Match(STATUS);
				State = 5305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5302;
					Match(FOR);
					State = 5303;
					Match(CHANNEL);
					State = 5304;
					Match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN() { return GetTokens(MySqlParser.AT_SIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN(int i) {
			return GetToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 452, RULE_variableClause);
		int _la;
		try {
			State = 5319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5309;
				Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5310;
				Match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5316;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
				case 1:
					{
					State = 5313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 5311;
						Match(AT_SIGN);
						State = 5312;
						Match(AT_SIGN);
						}
					}

					State = 5315;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5318;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommonEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 454, RULE_showCommonEntity);
		int _la;
		try {
			State = 5334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5321;
				Match(CHARACTER);
				State = 5322;
				Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5323;
				Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5324;
				Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5325;
				Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5326;
				Match(FUNCTION);
				State = 5327;
				Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5328;
				Match(PROCEDURE);
				State = 5329;
				Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 5330;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5333;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 456, RULE_showFilter);
		try {
			State = 5340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5336;
				Match(LIKE);
				State = 5337;
				Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5338;
				Match(WHERE);
				State = 5339;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 458, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 5359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 5342;
					Match(STORAGE);
					}
				}

				State = 5345;
				Match(ENGINES);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5346;
				Match(MASTER);
				State = 5347;
				Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5348;
				Match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5349;
				Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5350;
					Match(FULL);
					}
				}

				State = 5353;
				Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5354;
				Match(PROFILES);
				}
				break;
			case SLAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5355;
				Match(SLAVE);
				State = 5356;
				Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5357;
				Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5358;
				Match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 460, RULE_showSchemaEntity);
		int _la;
		try {
			State = 5369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5361;
				Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5362;
				Match(TABLE);
				State = 5363;
				Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5364;
					Match(FULL);
					}
				}

				State = 5367;
				Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5368;
				Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 462, RULE_showProfileType);
		try {
			State = 5383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5371;
				Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5372;
				Match(BLOCK);
				State = 5373;
				Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5374;
				Match(CONTEXT);
				State = 5375;
				Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5376;
				Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5377;
				Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5378;
				Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5379;
				Match(PAGE);
				State = 5380;
				Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5381;
				Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5382;
				Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinlogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 464, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5385;
			Match(BINLOG);
			State = 5386;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 466, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5388;
			Match(CACHE);
			State = 5389;
			Match(INDEX);
			State = 5390;
			tableIndexes();
			State = 5395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5391;
				Match(COMMA);
				State = 5392;
				tableIndexes();
				}
				}
				State = 5397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5398;
				Match(PARTITION);
				State = 5399;
				Match(LR_BRACKET);
				State = 5402;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 5400;
					uidList();
					}
					break;
				case ALL:
					{
					State = 5401;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5404;
				Match(RR_BRACKET);
				}
			}

			State = 5407;
			Match(IN);
			State = 5408;
			_localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 468, RULE_flushStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5410;
			Match(FLUSH);
			State = 5412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5411;
				_localctx.flushFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.flushFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5414;
			flushOption();
			State = 5419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5415;
				Match(COMMA);
				State = 5416;
				flushOption();
				}
				}
				State = 5421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 470, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5422;
			Match(KILL);
			State = 5424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				State = 5423;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5426;
				decimalLiteral();
				}
				}
				State = 5429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (ZERO_DECIMAL - 1088)) | (1L << (ONE_DECIMAL - 1088)) | (1L << (TWO_DECIMAL - 1088)) | (1L << (DECIMAL_LITERAL - 1088)) | (1L << (REAL_LITERAL - 1088)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadIndexIntoCache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 472, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5431;
			Match(LOAD);
			State = 5432;
			Match(INDEX);
			State = 5433;
			Match(INTO);
			State = 5434;
			Match(CACHE);
			State = 5435;
			loadedTableIndexes();
			State = 5440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5436;
				Match(COMMA);
				State = 5437;
				loadedTableIndexes();
				}
				}
				State = 5442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 474, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5443;
			Match(RESET);
			State = 5444;
			Match(QUERY);
			State = 5445;
			Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdownStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 476, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5447;
			Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 478, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5449;
			tableName();
			State = 5457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5450;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5453;
				Match(LR_BRACKET);
				State = 5454;
				uidList();
				State = 5455;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 480, RULE_flushOption);
		int _la;
		try {
			State = 5489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,786,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5477;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 5459;
					Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 5460;
					Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 5462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (ENGINE - 391)) | (1L << (ERROR - 391)) | (1L << (GENERAL - 391)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						State = 5461;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (ENGINE - 391)) | (1L << (ERROR - 391)) | (1L << (GENERAL - 391)))) != 0) || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5464;
					Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 5465;
					Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 5466;
					Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 5467;
					Match(QUERY);
					State = 5468;
					Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 5469;
					Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 5470;
					Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 5471;
					Match(TABLES);
					State = 5475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 5472;
						Match(WITH);
						State = 5473;
						Match(READ);
						State = 5474;
						Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5479;
				Match(RELAY);
				State = 5480;
				Match(LOGS);
				State = 5482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5481;
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5484;
				Match(TABLES);
				State = 5485;
				tables();
				State = 5487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 5486;
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 482, RULE_flushTableOption);
		try {
			State = 5496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5491;
				Match(WITH);
				State = 5492;
				Match(READ);
				State = 5493;
				Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5494;
				Match(FOR);
				State = 5495;
				Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadedTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 484, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5498;
			tableName();
			State = 5506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5499;
				Match(PARTITION);
				State = 5500;
				Match(LR_BRACKET);
				State = 5503;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					State = 5501;
					_localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 5502;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5505;
				Match(RR_BRACKET);
				}
			}

			State = 5515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
			case 1:
				{
				State = 5509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5508;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5511;
				Match(LR_BRACKET);
				State = 5512;
				_localctx.indexList = uidList();
				State = 5513;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 5517;
				Match(IGNORE);
				State = 5518;
				Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 486, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5521;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5522;
			tableName();
			State = 5525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,793,Context) ) {
			case 1:
				{
				State = 5523;
				_localctx.column = uid();
				}
				break;
			case 2:
				{
				State = 5524;
				_localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 488, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5527;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 5528;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5529;
				Match(EQUAL_SYMBOL);
				State = 5530;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5533;
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5535;
			Match(HELP);
			State = 5536;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 492, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5538;
			Match(USE);
			State = 5539;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(MySqlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 494, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5541;
			Match(SIGNAL);
			State = 5549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5542;
				Match(SQLSTATE);
				State = 5544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5543;
					Match(VALUE);
					}
				}

				State = 5546;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5547;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5548;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
			case 1:
				{
				State = 5551;
				Match(SET);
				State = 5552;
				signalConditionInformation();
				State = 5557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5553;
					Match(COMMA);
					State = 5554;
					signalConditionInformation();
					}
					}
					State = 5559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL() { return GetToken(MySqlParser.RESIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 496, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5562;
			Match(RESIGNAL);
			State = 5570;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5563;
				Match(SQLSTATE);
				State = 5565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5564;
					Match(VALUE);
					}
				}

				State = 5567;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5568;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5569;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 5581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
			case 1:
				{
				State = 5572;
				Match(SET);
				State = 5573;
				signalConditionInformation();
				State = 5578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5574;
					Match(COMMA);
					State = 5575;
					signalConditionInformation();
					}
					}
					State = 5580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalConditionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalConditionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalConditionInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalConditionInformationContext signalConditionInformation() {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
		EnterRule(_localctx, 498, RULE_signalConditionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5583;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (CLASS_ORIGIN - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CURSOR_NAME - 345)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5584;
			Match(EQUAL_SYMBOL);
			State = 5589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
			case 1:
				{
				State = 5585;
				stringLiteral();
				}
				break;
			case 2:
				{
				State = 5586;
				Match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				State = 5587;
				mysqlVariable();
				}
				break;
			case 4:
				{
				State = 5588;
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MySqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName() {
			return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(MySqlParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(MySqlParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW_COUNT() { return GetTokens(MySqlParser.ROW_COUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT(int i) {
			return GetToken(MySqlParser.ROW_COUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsStatementContext diagnosticsStatement() {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 500, RULE_diagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5591;
			Match(GET);
			State = 5593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				State = 5592;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5595;
			Match(DIAGNOSTICS);
			State = 5627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
			case OPTIONAL:
				{
				{
				State = 5596;
				variableClause();
				State = 5597;
				Match(EQUAL_SYMBOL);
				State = 5598;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5599;
					Match(COMMA);
					State = 5600;
					variableClause();
					State = 5601;
					Match(EQUAL_SYMBOL);
					State = 5602;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 5608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				State = 5609;
				Match(CONDITION);
				State = 5612;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5610;
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
				case OPTIONAL:
					{
					State = 5611;
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5614;
				variableClause();
				State = 5615;
				Match(EQUAL_SYMBOL);
				State = 5616;
				diagnosticsConditionInformationName();
				State = 5624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5617;
					Match(COMMA);
					State = 5618;
					variableClause();
					State = 5619;
					Match(EQUAL_SYMBOL);
					State = 5620;
					diagnosticsConditionInformationName();
					}
					}
					State = 5626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsConditionInformationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
		EnterRule(_localctx, 502, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5629;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (CLASS_ORIGIN - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CURSOR_NAME - 345)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (RETURNED_SQLSTATE - 559)) | (1L << (SUBCLASS_ORIGIN - 559)) | (1L << (TABLE_NAME - 559)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 504, RULE_describeObjectClause);
		try {
			State = 5641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5636;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 5631;
					selectStatement();
					}
					break;
				case DELETE:
					{
					State = 5632;
					deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 5633;
					insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 5634;
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 5635;
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5638;
				Match(FOR);
				State = 5639;
				Match(CONNECTION);
				State = 5640;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 506, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5643;
			uid();
			State = 5647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
			case 1:
				{
				State = 5644;
				Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 5645;
				Match(DOT);
				State = 5646;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 508, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5649;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 510, RULE_fullColumnName);
		try {
			State = 5663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5651;
				uid();
				State = 5656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
				case 1:
					{
					State = 5652;
					dottedId();
					State = 5654;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,812,Context) ) {
					case 1:
						{
						State = 5653;
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5658;
				MatchWildcard();
				State = 5659;
				dottedId();
				State = 5661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 5660;
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 512, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
			case 1:
				{
				State = 5667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 5665;
					uid();
					}
					break;
				case 2:
					{
					State = 5666;
					Match(STRING_LITERAL);
					}
					break;
				}
				State = 5673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5669;
					Match(LR_BRACKET);
					State = 5670;
					decimalLiteral();
					State = 5671;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				State = 5675;
				expression(0);
				}
				break;
			}
			State = 5679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 5678;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 514, RULE_userName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5681;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1098)) & ~0x3f) == 0 && ((1L << (_la - 1098)) & ((1L << (STRING_LITERAL - 1098)) | (1L << (ID - 1098)) | (1L << (STRING_USER_NAME - 1098)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 516, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5683;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 518, RULE_charsetName);
		try {
			State = 5689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5685;
				Match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5686;
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5687;
				Match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5688;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 520, RULE_collationName);
		try {
			State = 5693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,821,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5691;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5692;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKUDB() { return GetToken(MySqlParser.TOKUDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 522, RULE_engineName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5695;
			_la = TokenStream.LA(1);
			if ( !(_la==CONNECT || ((((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & ((1L << (ARCHIVE - 741)) | (1L << (BLACKHOLE - 741)) | (1L << (CSV - 741)) | (1L << (FEDERATED - 741)) | (1L << (INNODB - 741)) | (1L << (MEMORY - 741)) | (1L << (MRG_MYISAM - 741)) | (1L << (MYISAM - 741)) | (1L << (NDB - 741)) | (1L << (NDBCLUSTER - 741)) | (1L << (PERFORMANCE_SCHEMA - 741)) | (1L << (TOKUDB - 741)))) != 0) || ((((_la - 1098)) & ~0x3f) == 0 && ((1L << (_la - 1098)) & ((1L << (STRING_LITERAL - 1098)) | (1L << (ID - 1098)) | (1L << (REVERSE_QUOTE_ID - 1098)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_SYMB() { return GetTokens(MySqlParser.COLON_SYMB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB(int i) {
			return GetToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 524, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5697;
			decimalLiteral();
			State = 5698;
			Match(MINUS);
			State = 5699;
			decimalLiteral();
			State = 5700;
			Match(MINUS);
			State = 5701;
			decimalLiteral();
			State = 5702;
			Match(MINUS);
			State = 5703;
			decimalLiteral();
			State = 5704;
			Match(MINUS);
			State = 5705;
			decimalLiteral();
			State = 5711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5706;
				Match(COLON_SYMB);
				State = 5707;
				decimalLiteral();
				State = 5708;
				Match(MINUS);
				State = 5709;
				decimalLiteral();
				}
				}
				State = 5713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 526, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5715;
			_localctx.globalTableUid = xuidStringId();
			State = 5722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5716;
				Match(COMMA);
				State = 5717;
				_localctx.qualifier = xuidStringId();
				State = 5720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5718;
					Match(COMMA);
					State = 5719;
					_localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXuidStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 528, RULE_xuidStringId);
		int _la;
		try {
			State = 5731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5724;
				Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5725;
				Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5726;
					Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 5729;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 530, RULE_authPlugin);
		try {
			State = 5735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5733;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5734;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 532, RULE_uid);
		try {
			State = 5740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,828,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5737;
				simpleId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5738;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5739;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 534, RULE_simpleId);
		try {
			State = 5751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5742;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5743;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5744;
				transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5745;
				engineName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5746;
				privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5747;
				intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5748;
				dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5749;
				keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5750;
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDottedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 536, RULE_dottedId);
		try {
			State = 5756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5753;
				Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5754;
				Match(DOT);
				State = 5755;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 538, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5758;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (ZERO_DECIMAL - 1088)) | (1L << (ONE_DECIMAL - 1088)) | (1L << (TWO_DECIMAL - 1088)) | (1L << (DECIMAL_LITERAL - 1088)) | (1L << (REAL_LITERAL - 1088)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 540, RULE_fileSizeLiteral);
		try {
			State = 5762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5760;
				Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5761;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 542, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 5787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5769;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5765;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5764;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 5767;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5768;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5772;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5771;
						Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5774;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,834,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5781;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5776;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 5779;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5780;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5785;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,837,Context) ) {
				case 1:
					{
					State = 5783;
					Match(COLLATE);
					State = 5784;
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 544, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5789;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 546, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 5791;
				Match(STRING_CHARSET_NAME);
				}
			}

			State = 5794;
			Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullNotnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 548, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5796;
				Match(NOT);
				}
			}

			State = 5799;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 550, RULE_constant);
		int _la;
		try {
			State = 5813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5801;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5802;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5803;
				Match(MINUS);
				State = 5804;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5805;
				hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5806;
				booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5807;
				Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5808;
				Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 5809;
					Match(NOT);
					}
				}

				State = 5812;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLECTION() { return GetToken(MySqlParser.GEOMCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY() { return GetToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarbinaryDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarbinaryDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionsContext collectionOptions() {
			return GetRuleContext<CollectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalVaryingStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalVaryingStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDLEINT() { return GetToken(MySqlParser.MIDDLEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT1() { return GetToken(MySqlParser.INT1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2() { return GetToken(MySqlParser.INT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT3() { return GetToken(MySqlParser.INT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(MySqlParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(MySqlParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL() { return GetToken(MySqlParser.ZEROFILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(MySqlParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MySqlParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT4() { return GetToken(MySqlParser.FLOAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT8() { return GetToken(MySqlParser.FLOAT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHARACTER() { return GetTokens(MySqlParser.CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER(int i) {
			return GetToken(MySqlParser.CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(MySqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(MySqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(MySqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarcharDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public LongVarcharDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarcharDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 552, RULE_dataType);
		int _la;
		try {
			State = 5946;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5815;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (CHAR - 211)) | (1L << (VARCHAR - 211)) | (1L << (NVARCHAR - 211)) | (1L << (LONG - 211)) | (1L << (TINYTEXT - 211)) | (1L << (TEXT - 211)) | (1L << (MEDIUMTEXT - 211)) | (1L << (LONGTEXT - 211)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARYING) {
					{
					State = 5816;
					Match(VARYING);
					}
				}

				State = 5820;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
				case 1:
					{
					State = 5819;
					lengthOneDimension();
					}
					break;
				}
				State = 5823;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
				case 1:
					{
					State = 5822;
					Match(BINARY);
					}
					break;
				}
				State = 5831;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
				case 1:
					{
					State = 5828;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHARACTER:
						{
						State = 5825;
						Match(CHARACTER);
						State = 5826;
						Match(SET);
						}
						break;
					case CHARSET:
						{
						State = 5827;
						Match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5830;
					charsetName();
					}
					break;
				}
				State = 5836;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
				case 1:
					{
					State = 5833;
					Match(COLLATE);
					State = 5834;
					collationName();
					}
					break;
				case 2:
					{
					State = 5835;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5838;
				Match(NATIONAL);
				State = 5839;
				((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5841;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
				case 1:
					{
					State = 5840;
					lengthOneDimension();
					}
					break;
				}
				State = 5844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5843;
					Match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5846;
				Match(NCHAR);
				State = 5847;
				((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
				State = 5849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
				case 1:
					{
					State = 5848;
					lengthOneDimension();
					}
					break;
				}
				State = 5852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5851;
					Match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5854;
				Match(NATIONAL);
				State = 5855;
				((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5856;
				Match(VARYING);
				State = 5858;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
				case 1:
					{
					State = 5857;
					lengthOneDimension();
					}
					break;
				}
				State = 5861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5860;
					Match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5863;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (TINYINT - 185)) | (1L << (SMALLINT - 185)) | (1L << (MEDIUMINT - 185)) | (1L << (MIDDLEINT - 185)) | (1L << (INT - 185)) | (1L << (INT1 - 185)) | (1L << (INT2 - 185)) | (1L << (INT3 - 185)) | (1L << (INT4 - 185)) | (1L << (INT8 - 185)) | (1L << (INTEGER - 185)) | (1L << (BIGINT - 185)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5865;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,855,Context) ) {
				case 1:
					{
					State = 5864;
					lengthOneDimension();
					}
					break;
				}
				State = 5868;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
				case 1:
					{
					State = 5867;
					_la = TokenStream.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5870;
					Match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5873;
				((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
				State = 5875;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
				case 1:
					{
					State = 5874;
					lengthTwoDimension();
					}
					break;
				}
				State = 5878;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
				case 1:
					{
					State = 5877;
					_la = TokenStream.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5880;
					Match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5883;
				((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
				State = 5885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 5884;
					Match(PRECISION);
					}
				}

				State = 5888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,862,Context) ) {
				case 1:
					{
					State = 5887;
					lengthTwoDimension();
					}
					break;
				}
				State = 5891;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
				case 1:
					{
					State = 5890;
					_la = TokenStream.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5893;
					Match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5896;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (FLOAT - 200)) | (1L << (FLOAT4 - 200)) | (1L << (FLOAT8 - 200)) | (1L << (DECIMAL - 200)) | (1L << (DEC - 200)) | (1L << (NUMERIC - 200)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5898;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
				case 1:
					{
					State = 5897;
					lengthTwoOptionalDimension();
					}
					break;
				}
				State = 5901;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,866,Context) ) {
				case 1:
					{
					State = 5900;
					_la = TokenStream.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5903;
					Match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5906;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TINYBLOB - 206)) | (1L << (MEDIUMBLOB - 206)) | (1L << (LONGBLOB - 206)) | (1L << (SERIAL - 206)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5907;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (VARBINARY - 207)) | (1L << (BLOB - 207)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5909;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,868,Context) ) {
				case 1:
					{
					State = 5908;
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5911;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5912;
				collectionOptions();
				State = 5914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5913;
					Match(BINARY);
					}
				}

				State = 5922;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,871,Context) ) {
				case 1:
					{
					State = 5919;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHARACTER:
						{
						State = 5916;
						Match(CHARACTER);
						State = 5917;
						Match(SET);
						}
						break;
					case CHARSET:
						{
						State = 5918;
						Match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5921;
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5924;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (GEOMETRYCOLLECTION - 757)) | (1L << (GEOMCOLLECTION - 757)) | (1L << (GEOMETRY - 757)) | (1L << (LINESTRING - 757)) | (1L << (MULTILINESTRING - 757)) | (1L << (MULTIPOINT - 757)) | (1L << (MULTIPOLYGON - 757)) | (1L << (POINT - 757)) | (1L << (POLYGON - 757)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5925;
				((LongVarcharDataTypeContext)_localctx).typeName = Match(LONG);
				State = 5927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARCHAR) {
					{
					State = 5926;
					Match(VARCHAR);
					}
				}

				State = 5930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5929;
					Match(BINARY);
					}
				}

				State = 5938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,875,Context) ) {
				case 1:
					{
					State = 5935;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHARACTER:
						{
						State = 5932;
						Match(CHARACTER);
						State = 5933;
						Match(SET);
						}
						break;
					case CHARSET:
						{
						State = 5934;
						Match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5937;
					charsetName();
					}
					break;
				}
				State = 5942;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
				case 1:
					{
					State = 5940;
					Match(COLLATE);
					State = 5941;
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5944;
				Match(LONG);
				State = 5945;
				Match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionsContext collectionOptions() {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
		EnterRule(_localctx, 554, RULE_collectionOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5948;
			Match(LR_BRACKET);
			State = 5949;
			Match(STRING_LITERAL);
			State = 5954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5950;
				Match(COMMA);
				State = 5951;
				Match(STRING_LITERAL);
				}
				}
				State = 5956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5957;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MySqlParser.ARRAY, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 556, RULE_convertedDataType);
		int _la;
		try {
			State = 5986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5959;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5960;
					lengthOneDimension();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5963;
				_localctx.typeName = Match(CHAR);
				State = 5965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5964;
					lengthOneDimension();
					}
				}

				State = 5973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					State = 5970;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHARACTER:
						{
						State = 5967;
						Match(CHARACTER);
						State = 5968;
						Match(SET);
						}
						break;
					case CHARSET:
						{
						State = 5969;
						Match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5972;
					charsetName();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5975;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (DATETIME - 206)))) != 0) || _la==JSON) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5976;
				_localctx.typeName = Match(DECIMAL);
				State = 5978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5977;
					lengthTwoDimension();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5980;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 5981;
					Match(INTEGER);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5984;
				Match(UNSIGNED);
				State = 5985;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOneDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 558, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5988;
			Match(LR_BRACKET);
			State = 5989;
			decimalLiteral();
			State = 5990;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 560, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5992;
			Match(LR_BRACKET);
			State = 5993;
			decimalLiteral();
			State = 5994;
			Match(COMMA);
			State = 5995;
			decimalLiteral();
			State = 5996;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoOptionalDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 562, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998;
			Match(LR_BRACKET);
			State = 5999;
			decimalLiteral();
			State = 6002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6000;
				Match(COMMA);
				State = 6001;
				decimalLiteral();
				}
			}

			State = 6004;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUidList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 564, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6006;
			uid();
			State = 6011;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6007;
					Match(COMMA);
					State = 6008;
					uid();
					}
					} 
				}
				State = 6013;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 566, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6014;
			tableName();
			State = 6019;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,888,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6015;
					Match(COMMA);
					State = 6016;
					tableName();
					}
					} 
				}
				State = 6021;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,888,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 568, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6022;
			Match(LR_BRACKET);
			State = 6023;
			indexColumnName();
			State = 6028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6024;
				Match(COMMA);
				State = 6025;
				indexColumnName();
				}
				}
				State = 6030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6031;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 570, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6033;
			expression(0);
			State = 6038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6034;
				Match(COMMA);
				State = 6035;
				expression(0);
				}
				}
				State = 6040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsWithDefaults(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 572, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6041;
			expressionOrDefault();
			State = 6046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6042;
				Match(COMMA);
				State = 6043;
				expressionOrDefault();
				}
				}
				State = 6048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 574, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6049;
			constant();
			State = 6054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6050;
				Match(COMMA);
				State = 6051;
				constant();
				}
				}
				State = 6056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 576, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6057;
			Match(STRING_LITERAL);
			State = 6062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6058;
				Match(COMMA);
				State = 6059;
				Match(STRING_LITERAL);
				}
				}
				State = 6064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MySqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 578, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6065;
			Match(LOCAL_ID);
			State = 6070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6066;
				Match(COMMA);
				State = 6067;
				Match(LOCAL_ID);
				}
				}
				State = 6072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 580, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
			case 1:
				{
				State = 6073;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				State = 6075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 6074;
					unaryOperator();
					}
					break;
				}
				State = 6077;
				constant();
				}
				break;
			case 3:
				{
				State = 6078;
				currentTimestamp();
				}
				break;
			case 4:
				{
				State = 6079;
				Match(LR_BRACKET);
				State = 6080;
				expression(0);
				State = 6081;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
			case 1:
				{
				State = 6085;
				Match(ON);
				State = 6086;
				Match(UPDATE);
				State = 6087;
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 582, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				State = 6090;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (CURRENT_TIMESTAMP - 301)) | (1L << (LOCALTIME - 301)) | (1L << (LOCALTIMESTAMP - 301)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6096;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
				case 1:
					{
					State = 6091;
					Match(LR_BRACKET);
					State = 6093;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (ZERO_DECIMAL - 1088)) | (1L << (ONE_DECIMAL - 1088)) | (1L << (TWO_DECIMAL - 1088)) | (1L << (DECIMAL_LITERAL - 1088)) | (1L << (REAL_LITERAL - 1088)))) != 0)) {
						{
						State = 6092;
						decimalLiteral();
						}
					}

					State = 6095;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				State = 6098;
				Match(NOW);
				State = 6099;
				Match(LR_BRACKET);
				State = 6101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (ZERO_DECIMAL - 1088)) | (1L << (ONE_DECIMAL - 1088)) | (1L << (TWO_DECIMAL - 1088)) | (1L << (DECIMAL_LITERAL - 1088)) | (1L << (REAL_LITERAL - 1088)))) != 0)) {
					{
					State = 6100;
					decimalLiteral();
					}
				}

				State = 6103;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 584, RULE_expressionOrDefault);
		try {
			State = 6108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6106;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6107;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 586, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6110;
			Match(IF);
			State = 6111;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 588, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6113;
			Match(IF);
			State = 6114;
			Match(NOT);
			State = 6115;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return GetRuleContext<NonAggregateWindowedFunctionContext>(0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 590, RULE_functionCall);
		try {
			State = 6135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,905,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6117;
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6118;
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6119;
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6120;
				scalarFunctionName();
				State = 6121;
				Match(LR_BRACKET);
				State = 6123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
				case 1:
					{
					State = 6122;
					functionArgs();
					}
					break;
				}
				State = 6125;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6127;
				fullId();
				State = 6128;
				Match(LR_BRACKET);
				State = 6130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,904,Context) ) {
				case 1:
					{
					State = 6129;
					functionArgs();
					}
					break;
				}
				State = 6132;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6134;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonValueFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(MySqlParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MySqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(MySqlParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(MySqlParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_LITERAL() { return GetTokens(MySqlParser.NULL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL(int i) {
			return GetToken(MySqlParser.NULL_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext[] defaultValue() {
			return GetRuleContexts<DefaultValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue(int i) {
			return GetRuleContext<DefaultValueContext>(i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpressionFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetFormatFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 592, RULE_specificFunction);
		int _la;
		try {
			State = 6329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6137;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 299)) & ~0x3f) == 0 && ((1L << (_la - 299)) & ((1L << (CURRENT_DATE - 299)) | (1L << (CURRENT_TIME - 299)) | (1L << (CURRENT_TIMESTAMP - 299)) | (1L << (LOCALTIME - 299)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
				case 1:
					{
					State = 6138;
					Match(LR_BRACKET);
					State = 6139;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6142;
				Match(CONVERT);
				State = 6143;
				Match(LR_BRACKET);
				State = 6144;
				expression(0);
				State = 6145;
				((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 6146;
				convertedDataType();
				State = 6147;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6149;
				Match(CONVERT);
				State = 6150;
				Match(LR_BRACKET);
				State = 6151;
				expression(0);
				State = 6152;
				Match(USING);
				State = 6153;
				charsetName();
				State = 6154;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6156;
				Match(CAST);
				State = 6157;
				Match(LR_BRACKET);
				State = 6158;
				expression(0);
				State = 6159;
				Match(AS);
				State = 6160;
				convertedDataType();
				State = 6161;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6163;
				Match(VALUES);
				State = 6164;
				Match(LR_BRACKET);
				State = 6165;
				fullColumnName();
				State = 6166;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6168;
				Match(CASE);
				State = 6169;
				expression(0);
				State = 6171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6170;
					caseFuncAlternative();
					}
					}
					State = 6173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6175;
					Match(ELSE);
					State = 6176;
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6179;
				Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6181;
				Match(CASE);
				State = 6183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6182;
					caseFuncAlternative();
					}
					}
					State = 6185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6187;
					Match(ELSE);
					State = 6188;
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6191;
				Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6193;
				Match(CHAR);
				State = 6194;
				Match(LR_BRACKET);
				State = 6195;
				functionArgs();
				State = 6198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 6196;
					Match(USING);
					State = 6197;
					charsetName();
					}
				}

				State = 6200;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6202;
				Match(POSITION);
				State = 6203;
				Match(LR_BRACKET);
				State = 6206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
				case 1:
					{
					State = 6204;
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6205;
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 6208;
				Match(IN);
				State = 6211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,913,Context) ) {
				case 1:
					{
					State = 6209;
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6210;
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 6213;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6215;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6216;
				Match(LR_BRACKET);
				State = 6219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
				case 1:
					{
					State = 6217;
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6218;
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6221;
				Match(FROM);
				State = 6224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,915,Context) ) {
				case 1:
					{
					State = 6222;
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 6223;
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6226;
					Match(FOR);
					State = 6229;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
					case 1:
						{
						State = 6227;
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 6228;
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 6233;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6235;
				Match(TRIM);
				State = 6236;
				Match(LR_BRACKET);
				State = 6237;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 6238;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6239;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6242;
				Match(FROM);
				State = 6245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 6243;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6244;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6247;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6249;
				Match(TRIM);
				State = 6250;
				Match(LR_BRACKET);
				State = 6253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6251;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6252;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6255;
				Match(FROM);
				State = 6258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 6256;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6257;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6260;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6262;
				Match(WEIGHT_STRING);
				State = 6263;
				Match(LR_BRACKET);
				State = 6266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 6264;
					stringLiteral();
					}
					break;
				case 2:
					{
					State = 6265;
					expression(0);
					}
					break;
				}
				State = 6274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 6268;
					Match(AS);
					State = 6269;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6270;
					Match(LR_BRACKET);
					State = 6271;
					decimalLiteral();
					State = 6272;
					Match(RR_BRACKET);
					}
				}

				State = 6277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 6276;
					levelsInWeightString();
					}
				}

				State = 6279;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6281;
				Match(EXTRACT);
				State = 6282;
				Match(LR_BRACKET);
				State = 6283;
				intervalType();
				State = 6284;
				Match(FROM);
				State = 6287;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 6285;
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6286;
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6289;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6291;
				Match(GET_FORMAT);
				State = 6292;
				Match(LR_BRACKET);
				State = 6293;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (DATETIME - 206)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6294;
				Match(COMMA);
				State = 6295;
				stringLiteral();
				State = 6296;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 6298;
				Match(JSON_VALUE);
				State = 6299;
				Match(LR_BRACKET);
				State = 6300;
				expression(0);
				State = 6301;
				Match(COMMA);
				State = 6302;
				expression(0);
				State = 6305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 6303;
					Match(RETURNING);
					State = 6304;
					convertedDataType();
					}
				}

				State = 6315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 6311;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6307;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6308;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6309;
						Match(DEFAULT);
						State = 6310;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6313;
					Match(ON);
					State = 6314;
					Match(EMPTY);
					}
					break;
				}
				State = 6325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					State = 6321;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6317;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6318;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6319;
						Match(DEFAULT);
						State = 6320;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6323;
					Match(ON);
					State = 6324;
					Match(ERROR);
					}
				}

				State = 6327;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFuncAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 594, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6331;
			Match(WHEN);
			State = 6332;
			_localctx.condition = functionArg();
			State = 6333;
			Match(THEN);
			State = 6334;
			_localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 596, RULE_levelsInWeightString);
		int _la;
		try {
			State = 6350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6336;
				Match(LEVEL);
				State = 6337;
				levelInWeightListElement();
				State = 6342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6338;
					Match(COMMA);
					State = 6339;
					levelInWeightListElement();
					}
					}
					State = 6344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6345;
				Match(LEVEL);
				State = 6346;
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 6347;
				Match(MINUS);
				State = 6348;
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelInWeightListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 598, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6352;
			decimalLiteral();
			State = 6354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 6353;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 600, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 6415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6356;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (AVG - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (SUM - 272)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6357;
				Match(LR_BRACKET);
				State = 6359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
				case 1:
					{
					State = 6358;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6361;
				functionArg();
				State = 6362;
				Match(RR_BRACKET);
				State = 6364;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
				case 1:
					{
					State = 6363;
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6366;
				Match(COUNT);
				State = 6367;
				Match(LR_BRACKET);
				State = 6375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 6368;
					_localctx.starArg = Match(STAR);
					}
					break;
				case 2:
					{
					State = 6370;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
					case 1:
						{
						State = 6369;
						_localctx.aggregator = Match(ALL);
						}
						break;
					}
					State = 6372;
					functionArg();
					}
					break;
				case 3:
					{
					State = 6373;
					_localctx.aggregator = Match(DISTINCT);
					State = 6374;
					functionArgs();
					}
					break;
				}
				State = 6377;
				Match(RR_BRACKET);
				State = 6379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 6378;
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6381;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (BIT_AND - 273)) | (1L << (BIT_OR - 273)) | (1L << (BIT_XOR - 273)) | (1L << (STD - 273)) | (1L << (STDDEV - 273)) | (1L << (STDDEV_POP - 273)) | (1L << (STDDEV_SAMP - 273)) | (1L << (VAR_POP - 273)) | (1L << (VAR_SAMP - 273)) | (1L << (VARIANCE - 273)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6382;
				Match(LR_BRACKET);
				State = 6384;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 6383;
					_localctx.aggregator = Match(ALL);
					}
					break;
				}
				State = 6386;
				functionArg();
				State = 6387;
				Match(RR_BRACKET);
				State = 6389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
				case 1:
					{
					State = 6388;
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6391;
				Match(GROUP_CONCAT);
				State = 6392;
				Match(LR_BRACKET);
				State = 6394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
				case 1:
					{
					State = 6393;
					_localctx.aggregator = Match(DISTINCT);
					}
					break;
				}
				State = 6396;
				functionArgs();
				State = 6407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 6397;
					Match(ORDER);
					State = 6398;
					Match(BY);
					State = 6399;
					orderByExpression();
					State = 6404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 6400;
						Match(COMMA);
						State = 6401;
						orderByExpression();
						}
						}
						State = 6406;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 6411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 6409;
					Match(SEPARATOR);
					State = 6410;
					_localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 6413;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAggregateWindowedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 602, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			State = 6455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6417;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6418;
				Match(LR_BRACKET);
				State = 6419;
				expression(0);
				State = 6422;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 6420;
					Match(COMMA);
					State = 6421;
					decimalLiteral();
					}
					break;
				}
				State = 6426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6424;
					Match(COMMA);
					State = 6425;
					decimalLiteral();
					}
				}

				State = 6428;
				Match(RR_BRACKET);
				State = 6429;
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6431;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6432;
				Match(LR_BRACKET);
				State = 6433;
				expression(0);
				State = 6434;
				Match(RR_BRACKET);
				State = 6435;
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6437;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (CUME_DIST - 277)) | (1L << (DENSE_RANK - 277)) | (1L << (PERCENT_RANK - 277)) | (1L << (RANK - 277)) | (1L << (ROW_NUMBER - 277)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6438;
				Match(LR_BRACKET);
				State = 6439;
				Match(RR_BRACKET);
				State = 6440;
				overClause();
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6441;
				Match(NTH_VALUE);
				State = 6442;
				Match(LR_BRACKET);
				State = 6443;
				expression(0);
				State = 6444;
				Match(COMMA);
				State = 6445;
				decimalLiteral();
				State = 6446;
				Match(RR_BRACKET);
				State = 6447;
				overClause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6449;
				Match(NTILE);
				State = 6450;
				Match(LR_BRACKET);
				State = 6451;
				decimalLiteral();
				State = 6452;
				Match(RR_BRACKET);
				State = 6453;
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(MySqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(Context, State);
		EnterRule(_localctx, 604, RULE_overClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6457;
			Match(OVER);
			State = 6464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6458;
				Match(LR_BRACKET);
				State = 6460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 6459;
					windowSpec();
					}
					break;
				}
				State = 6462;
				Match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				State = 6463;
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameClauseContext frameClause() {
			return GetRuleContext<FrameClauseContext>(0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 606, RULE_windowSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
			case 1:
				{
				State = 6466;
				windowName();
				}
				break;
			}
			State = 6470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6469;
				partitionClause();
				}
			}

			State = 6473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6472;
				orderByClause();
				}
			}

			State = 6476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 6475;
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 608, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6478;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameUnitsContext frameUnits() {
			return GetRuleContext<FrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameClauseContext frameClause() {
		FrameClauseContext _localctx = new FrameClauseContext(Context, State);
		EnterRule(_localctx, 610, RULE_frameClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6480;
			frameUnits();
			State = 6481;
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameUnitsContext frameUnits() {
		FrameUnitsContext _localctx = new FrameUnitsContext(Context, State);
		EnterRule(_localctx, 612, RULE_frameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6483;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBetweenContext frameBetween() {
			return GetRuleContext<FrameBetweenContext>(0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 614, RULE_frameExtent);
		try {
			State = 6487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,956,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6485;
				frameRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6486;
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBetweenContext frameBetween() {
		FrameBetweenContext _localctx = new FrameBetweenContext(Context, State);
		EnterRule(_localctx, 616, RULE_frameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6489;
			Match(BETWEEN);
			State = 6490;
			frameRange();
			State = 6491;
			Match(AND);
			State = 6492;
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(MySqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(MySqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 618, RULE_frameRange);
		int _la;
		try {
			State = 6501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,957,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6494;
				Match(CURRENT);
				State = 6495;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6496;
				Match(UNBOUNDED);
				State = 6497;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6498;
				expression(0);
				State = 6499;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 620, RULE_partitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6503;
			Match(PARTITION);
			State = 6504;
			Match(BY);
			State = 6505;
			expression(0);
			State = 6510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6506;
				Match(COMMA);
				State = 6507;
				expression(0);
				}
				}
				State = 6512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 622, RULE_scalarFunctionName);
		try {
			State = 6536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6513;
				functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6514;
				Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6515;
				Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6516;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6517;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6518;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6519;
				Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6520;
				Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6521;
				Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6522;
				Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6523;
				Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6524;
				Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6525;
				Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6526;
				Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6527;
				Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6528;
				Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6529;
				Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6530;
				Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6531;
				Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6532;
				Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6533;
				Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6534;
				Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6535;
				Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 624, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6538;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6539;
			Match(LR_BRACKET);
			State = 6540;
			functionArg();
			State = 6541;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 626, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				{
				State = 6543;
				constant();
				}
				break;
			case 2:
				{
				State = 6544;
				fullColumnName();
				}
				break;
			case 3:
				{
				State = 6545;
				functionCall();
				}
				break;
			case 4:
				{
				State = 6546;
				expression(0);
				}
				break;
			}
			State = 6558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6549;
				Match(COMMA);
				State = 6554;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
				case 1:
					{
					State = 6550;
					constant();
					}
					break;
				case 2:
					{
					State = 6551;
					fullColumnName();
					}
					break;
				case 3:
					{
					State = 6552;
					functionCall();
					}
					break;
				case 4:
					{
					State = 6553;
					expression(0);
					}
					break;
				}
				}
				}
				State = 6560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 628, RULE_functionArg);
		try {
			State = 6565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6561;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6562;
				fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6563;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6564;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 630;
		EnterRecursionRule(_localctx, 630, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,965,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6568;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6569;
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6570;
				predicate(0);
				State = 6571;
				Match(IS);
				State = 6573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6572;
					Match(NOT);
					}
				}

				State = 6575;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6577;
				predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6586;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,966,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 6580;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 6581;
					logicalOperator();
					State = 6582;
					expression(4);
					}
					} 
				}
				State = 6588;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,966,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundsLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtomPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryComparisonPredicateContext : PredicateContext {
		public IToken quantifier;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonMemberOfPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonMemberOfPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryComparisonPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 632;
		EnterRecursionRule(_localctx, 632, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 6592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
			case 1:
				{
				State = 6590;
				Match(LOCAL_ID);
				State = 6591;
				Match(VAR_ASSIGN);
				}
				break;
			}
			State = 6594;
			expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6660;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,975,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6658;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6596;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 6597;
						comparisonOperator();
						State = 6598;
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6600;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 6602;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6601;
							Match(NOT);
							}
						}

						State = 6604;
						Match(BETWEEN);
						State = 6605;
						predicate(0);
						State = 6606;
						Match(AND);
						State = 6607;
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6609;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 6610;
						Match(SOUNDS);
						State = 6611;
						Match(LIKE);
						State = 6612;
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6613;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6615;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6614;
							Match(NOT);
							}
						}

						State = 6617;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6618;
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6619;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 6621;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6620;
							Match(NOT);
							}
						}

						State = 6623;
						Match(IN);
						State = 6624;
						Match(LR_BRACKET);
						State = 6627;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
						case 1:
							{
							State = 6625;
							selectStatement();
							}
							break;
						case 2:
							{
							State = 6626;
							expressions();
							}
							break;
						}
						State = 6629;
						Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6631;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 6632;
						Match(IS);
						State = 6633;
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6634;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 6635;
						comparisonOperator();
						State = 6636;
						((SubqueryComparisonPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6637;
						Match(LR_BRACKET);
						State = 6638;
						selectStatement();
						State = 6639;
						Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6641;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 6643;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6642;
							Match(NOT);
							}
						}

						State = 6645;
						Match(LIKE);
						State = 6646;
						predicate(0);
						State = 6649;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
						case 1:
							{
							State = 6647;
							Match(ESCAPE);
							State = 6648;
							Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6651;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6652;
						Match(MEMBER);
						State = 6653;
						Match(OF);
						State = 6654;
						Match(LR_BRACKET);
						State = 6655;
						predicate(0);
						State = 6656;
						Match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				State = 6662;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,975,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedRowExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 634;
		EnterRecursionRule(_localctx, 634, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,978,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6664;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6665;
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6666;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6667;
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6668;
				unaryOperator();
				State = 6669;
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6671;
				Match(BINARY);
				State = 6672;
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6673;
				Match(LR_BRACKET);
				State = 6674;
				expression(0);
				State = 6679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6675;
					Match(COMMA);
					State = 6676;
					expression(0);
					}
					}
					State = 6681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6682;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6684;
				Match(ROW);
				State = 6685;
				Match(LR_BRACKET);
				State = 6686;
				expression(0);
				State = 6689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6687;
					Match(COMMA);
					State = 6688;
					expression(0);
					}
					}
					State = 6691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 6693;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6695;
				Match(EXISTS);
				State = 6696;
				Match(LR_BRACKET);
				State = 6697;
				selectStatement();
				State = 6698;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6700;
				Match(LR_BRACKET);
				State = 6701;
				selectStatement();
				State = 6702;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6704;
				Match(INTERVAL);
				State = 6705;
				expression(0);
				State = 6706;
				intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6727;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,980,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6725;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6710;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6711;
						bitOperator();
						State = 6712;
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6714;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6715;
						mathOperator();
						State = 6716;
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6718;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6719;
						jsonOperator();
						State = 6720;
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6722;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 6723;
						Match(COLLATE);
						State = 6724;
						collationName();
						}
						break;
					}
					} 
				}
				State = 6729;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,980,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT_OP() { return GetToken(MySqlParser.BIT_NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 636, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6730;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || ((((_la - 1070)) & ~0x3f) == 0 && ((1L << (_la - 1070)) & ((1L << (PLUS - 1070)) | (1L << (MINUS - 1070)) | (1L << (EXCLAMATION_SYMBOL - 1070)) | (1L << (BIT_NOT_OP - 1070)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 638, RULE_comparisonOperator);
		try {
			State = 6746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6732;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6733;
				Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6734;
				Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6735;
				Match(LESS_SYMBOL);
				State = 6736;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6737;
				Match(GREATER_SYMBOL);
				State = 6738;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6739;
				Match(LESS_SYMBOL);
				State = 6740;
				Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6741;
				Match(EXCLAMATION_SYMBOL);
				State = 6742;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6743;
				Match(LESS_SYMBOL);
				State = 6744;
				Match(EQUAL_SYMBOL);
				State = 6745;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND_OP() { return GetTokens(MySqlParser.BIT_AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP(int i) {
			return GetToken(MySqlParser.BIT_AND_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR_OP() { return GetTokens(MySqlParser.BIT_OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP(int i) {
			return GetToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 640, RULE_logicalOperator);
		try {
			State = 6755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6748;
				Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6749;
				Match(BIT_AND_OP);
				State = 6750;
				Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6751;
				Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6752;
				Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6753;
				Match(BIT_OR_OP);
				State = 6754;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MySqlParser.LESS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL(int i) {
			return GetToken(MySqlParser.LESS_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP() { return GetToken(MySqlParser.BIT_AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_OP() { return GetToken(MySqlParser.BIT_XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP() { return GetToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 642, RULE_bitOperator);
		try {
			State = 6764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6757;
				Match(LESS_SYMBOL);
				State = 6758;
				Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6759;
				Match(GREATER_SYMBOL);
				State = 6760;
				Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6761;
				Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6762;
				Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6763;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MySqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MySqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 644, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6766;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1067)) & ~0x3f) == 0 && ((1L << (_la - 1067)) & ((1L << (STAR - 1067)) | (1L << (DIVIDE - 1067)) | (1L << (MODULE - 1067)) | (1L << (PLUS - 1067)) | (1L << (MINUS - 1067)) | (1L << (DIV - 1067)) | (1L << (MOD - 1067)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 646, RULE_jsonOperator);
		try {
			State = 6773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6768;
				Match(MINUS);
				State = 6769;
				Match(GREATER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6770;
				Match(MINUS);
				State = 6771;
				Match(GREATER_SYMBOL);
				State = 6772;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 648, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6775;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ARMSCII8 - 701)) | (1L << (ASCII - 701)) | (1L << (BIG5 - 701)) | (1L << (CP1250 - 701)) | (1L << (CP1251 - 701)) | (1L << (CP1256 - 701)) | (1L << (CP1257 - 701)) | (1L << (CP850 - 701)) | (1L << (CP852 - 701)) | (1L << (CP866 - 701)) | (1L << (CP932 - 701)) | (1L << (DEC8 - 701)) | (1L << (EUCJPMS - 701)) | (1L << (EUCKR - 701)) | (1L << (GB2312 - 701)) | (1L << (GBK - 701)) | (1L << (GEOSTD8 - 701)) | (1L << (GREEK - 701)) | (1L << (HEBREW - 701)) | (1L << (HP8 - 701)) | (1L << (KEYBCS2 - 701)) | (1L << (KOI8R - 701)) | (1L << (KOI8U - 701)) | (1L << (LATIN1 - 701)) | (1L << (LATIN2 - 701)) | (1L << (LATIN5 - 701)) | (1L << (LATIN7 - 701)) | (1L << (MACCE - 701)) | (1L << (MACROMAN - 701)) | (1L << (SJIS - 701)) | (1L << (SWE7 - 701)) | (1L << (TIS620 - 701)) | (1L << (UCS2 - 701)) | (1L << (UJIS - 701)) | (1L << (UTF16 - 701)) | (1L << (UTF16LE - 701)) | (1L << (UTF32 - 701)) | (1L << (UTF8 - 701)) | (1L << (UTF8MB3 - 701)) | (1L << (UTF8MB4 - 701)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevelBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 650, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6777;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 753)) & ~0x3f) == 0 && ((1L << (_la - 753)) & ((1L << (REPEATABLE - 753)) | (1L << (COMMITTED - 753)) | (1L << (UNCOMMITTED - 753)) | (1L << (SERIALIZABLE - 753)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegesBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 652, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6779;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 654, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6781;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 652)) & ~0x3f) == 0 && ((1L << (_la - 652)) & ((1L << (QUARTER - 652)) | (1L << (MONTH - 652)) | (1L << (DAY - 652)) | (1L << (HOUR - 652)) | (1L << (MINUTE - 652)) | (1L << (WEEK - 652)) | (1L << (SECOND - 652)) | (1L << (MICROSECOND - 652)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 656, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6783;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (DATETIME - 206)) | (1L << (YEAR - 206)) | (1L << (TEXT - 206)) | (1L << (ENUM - 206)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUR() { return GetToken(MySqlParser.EUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(MySqlParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(MySqlParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JIS() { return GetToken(MySqlParser.JIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MySqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MySqlParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MySqlParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USA() { return GetToken(MySqlParser.USA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordsCanBeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 658, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6785;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (ORDER - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (SERIAL - 228)) | (1L << (AVG - 228)) | (1L << (BIT_AND - 228)) | (1L << (BIT_OR - 228)) | (1L << (BIT_XOR - 228)) | (1L << (COUNT - 228)) | (1L << (GROUP_CONCAT - 228)) | (1L << (MAX - 228)) | (1L << (MIN - 228)) | (1L << (STD - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (STDDEV - 292)) | (1L << (STDDEV_POP - 292)) | (1L << (STDDEV_SAMP - 292)) | (1L << (SUM - 292)) | (1L << (VAR_POP - 292)) | (1L << (VAR_SAMP - 292)) | (1L << (VARIANCE - 292)) | (1L << (ACCOUNT - 292)) | (1L << (ACTION - 292)) | (1L << (AFTER - 292)) | (1L << (AGGREGATE - 292)) | (1L << (ALGORITHM - 292)) | (1L << (ANY - 292)) | (1L << (AT - 292)) | (1L << (AUTHORS - 292)) | (1L << (AUTOCOMMIT - 292)) | (1L << (AUTOEXTEND_SIZE - 292)) | (1L << (AUTO_INCREMENT - 292)) | (1L << (AVG_ROW_LENGTH - 292)) | (1L << (BEGIN - 292)) | (1L << (BINLOG - 292)) | (1L << (BIT - 292)) | (1L << (BLOCK - 292)) | (1L << (BOOL - 292)) | (1L << (BOOLEAN - 292)) | (1L << (BTREE - 292)) | (1L << (CACHE - 292)) | (1L << (CASCADED - 292)) | (1L << (CHAIN - 292)) | (1L << (CHANGED - 292)) | (1L << (CHANNEL - 292)) | (1L << (CHECKSUM - 292)) | (1L << (PAGE_CHECKSUM - 292)) | (1L << (CIPHER - 292)) | (1L << (CLASS_ORIGIN - 292)) | (1L << (CLIENT - 292)) | (1L << (CLOSE - 292)) | (1L << (COALESCE - 292)) | (1L << (CODE - 292)) | (1L << (COLUMNS - 292)) | (1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMPLETION - 356)) | (1L << (COMPRESSED - 356)) | (1L << (COMPRESSION - 356)) | (1L << (CONCURRENT - 356)) | (1L << (CONNECT - 356)) | (1L << (CONNECTION - 356)) | (1L << (CONSISTENT - 356)) | (1L << (CONSTRAINT_CATALOG - 356)) | (1L << (CONSTRAINT_SCHEMA - 356)) | (1L << (CONSTRAINT_NAME - 356)) | (1L << (CONTAINS - 356)) | (1L << (CONTEXT - 356)) | (1L << (CONTRIBUTORS - 356)) | (1L << (COPY - 356)) | (1L << (CPU - 356)) | (1L << (CURSOR_NAME - 356)) | (1L << (DATA - 356)) | (1L << (DATAFILE - 356)) | (1L << (DEALLOCATE - 356)) | (1L << (DEFAULT_AUTH - 356)) | (1L << (DEFINER - 356)) | (1L << (DELAY_KEY_WRITE - 356)) | (1L << (DES_KEY_FILE - 356)) | (1L << (DIRECTORY - 356)) | (1L << (DISABLE - 356)) | (1L << (DISCARD - 356)) | (1L << (DISK - 356)) | (1L << (DO - 356)) | (1L << (DUMPFILE - 356)) | (1L << (DUPLICATE - 356)) | (1L << (DYNAMIC - 356)) | (1L << (ENABLE - 356)) | (1L << (ENCRYPTION - 356)) | (1L << (END - 356)) | (1L << (ENDS - 356)) | (1L << (ENGINE - 356)) | (1L << (ENGINES - 356)) | (1L << (ERROR - 356)) | (1L << (ERRORS - 356)) | (1L << (ESCAPE - 356)) | (1L << (EVEN - 356)) | (1L << (EVENT - 356)) | (1L << (EVENTS - 356)) | (1L << (EVERY - 356)) | (1L << (EXCHANGE - 356)) | (1L << (EXCLUSIVE - 356)) | (1L << (EXPIRE - 356)) | (1L << (EXPORT - 356)) | (1L << (EXTENDED - 356)) | (1L << (EXTENT_SIZE - 356)) | (1L << (FAST - 356)) | (1L << (FAULTS - 356)) | (1L << (FIELDS - 356)) | (1L << (FILE_BLOCK_SIZE - 356)) | (1L << (FILTER - 356)) | (1L << (FIRST - 356)) | (1L << (FIXED - 356)) | (1L << (FLUSH - 356)) | (1L << (FOLLOWS - 356)) | (1L << (FOUND - 356)) | (1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (GLOBAL - 420)) | (1L << (GRANTS - 420)) | (1L << (GROUP_REPLICATION - 420)) | (1L << (HANDLER - 420)) | (1L << (HASH - 420)) | (1L << (HELP - 420)) | (1L << (HOST - 420)) | (1L << (HOSTS - 420)) | (1L << (IDENTIFIED - 420)) | (1L << (IGNORE_SERVER_IDS - 420)) | (1L << (IMPORT - 420)) | (1L << (INDEXES - 420)) | (1L << (INITIAL_SIZE - 420)) | (1L << (INPLACE - 420)) | (1L << (INSERT_METHOD - 420)) | (1L << (INSTALL - 420)) | (1L << (INSTANCE - 420)) | (1L << (INVOKER - 420)) | (1L << (IO - 420)) | (1L << (IO_THREAD - 420)) | (1L << (IPC - 420)) | (1L << (ISOLATION - 420)) | (1L << (ISSUER - 420)) | (1L << (JSON - 420)) | (1L << (KEY_BLOCK_SIZE - 420)) | (1L << (LANGUAGE - 420)) | (1L << (LAST - 420)) | (1L << (LEAVES - 420)) | (1L << (LESS - 420)) | (1L << (LEVEL - 420)) | (1L << (LIST - 420)) | (1L << (LOCAL - 420)) | (1L << (LOGFILE - 420)) | (1L << (LOGS - 420)) | (1L << (MASTER - 420)) | (1L << (MASTER_AUTO_POSITION - 420)) | (1L << (MASTER_CONNECT_RETRY - 420)) | (1L << (MASTER_DELAY - 420)) | (1L << (MASTER_HEARTBEAT_PERIOD - 420)) | (1L << (MASTER_HOST - 420)) | (1L << (MASTER_LOG_FILE - 420)) | (1L << (MASTER_LOG_POS - 420)) | (1L << (MASTER_PASSWORD - 420)) | (1L << (MASTER_PORT - 420)) | (1L << (MASTER_RETRY_COUNT - 420)) | (1L << (MASTER_SSL - 420)) | (1L << (MASTER_SSL_CA - 420)) | (1L << (MASTER_SSL_CAPATH - 420)) | (1L << (MASTER_SSL_CERT - 420)) | (1L << (MASTER_SSL_CIPHER - 420)) | (1L << (MASTER_SSL_CRL - 420)) | (1L << (MASTER_SSL_CRLPATH - 420)) | (1L << (MASTER_SSL_KEY - 420)) | (1L << (MASTER_TLS_VERSION - 420)) | (1L << (MASTER_USER - 420)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 420)) | (1L << (MAX_QUERIES_PER_HOUR - 420)) | (1L << (MAX_ROWS - 420)) | (1L << (MAX_SIZE - 420)) | (1L << (MAX_UPDATES_PER_HOUR - 420)) | (1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MEMBER - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (MERGE - 484)) | (1L << (MESSAGE_TEXT - 484)) | (1L << (MID - 484)) | (1L << (MIGRATE - 484)) | (1L << (MIN_ROWS - 484)) | (1L << (MODE - 484)) | (1L << (MODIFY - 484)) | (1L << (MUTEX - 484)) | (1L << (MYSQL - 484)) | (1L << (MYSQL_ERRNO - 484)) | (1L << (NAME - 484)) | (1L << (NAMES - 484)) | (1L << (NCHAR - 484)) | (1L << (NEVER - 484)) | (1L << (NEXT - 484)) | (1L << (NO - 484)) | (1L << (NODEGROUP - 484)) | (1L << (NONE - 484)) | (1L << (ODBC - 484)) | (1L << (OFFLINE - 484)) | (1L << (OFFSET - 484)) | (1L << (OF - 484)) | (1L << (OJ - 484)) | (1L << (OLD_PASSWORD - 484)) | (1L << (ONE - 484)) | (1L << (ONLINE - 484)) | (1L << (ONLY - 484)) | (1L << (OPEN - 484)) | (1L << (OPTIMIZER_COSTS - 484)) | (1L << (OPTIONS - 484)) | (1L << (OWNER - 484)) | (1L << (PACK_KEYS - 484)) | (1L << (PAGE - 484)) | (1L << (PARSER - 484)) | (1L << (PARTIAL - 484)) | (1L << (PARTITIONING - 484)) | (1L << (PARTITIONS - 484)) | (1L << (PASSWORD - 484)) | (1L << (PHASE - 484)) | (1L << (PLUGIN - 484)) | (1L << (PLUGIN_DIR - 484)) | (1L << (PLUGINS - 484)) | (1L << (PORT - 484)) | (1L << (PRECEDES - 484)) | (1L << (PREPARE - 484)) | (1L << (PRESERVE - 484)) | (1L << (PREV - 484)) | (1L << (PROCESSLIST - 484)) | (1L << (PROFILE - 484)) | (1L << (PROFILES - 484)) | (1L << (PROXY - 484)) | (1L << (QUERY - 484)) | (1L << (QUICK - 484)) | (1L << (REBUILD - 484)) | (1L << (RECOVER - 484)) | (1L << (REDO_BUFFER_SIZE - 484)) | (1L << (REDUNDANT - 484)) | (1L << (RELAY - 484)) | (1L << (RELAY_LOG_FILE - 484)) | (1L << (RELAY_LOG_POS - 484)) | (1L << (RELAYLOG - 484)) | (1L << (REMOVE - 484)) | (1L << (REORGANIZE - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (REPAIR - 548)) | (1L << (REPLICATE_DO_DB - 548)) | (1L << (REPLICATE_DO_TABLE - 548)) | (1L << (REPLICATE_IGNORE_DB - 548)) | (1L << (REPLICATE_IGNORE_TABLE - 548)) | (1L << (REPLICATE_REWRITE_DB - 548)) | (1L << (REPLICATE_WILD_DO_TABLE - 548)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 548)) | (1L << (REPLICATION - 548)) | (1L << (RESET - 548)) | (1L << (RESUME - 548)) | (1L << (RETURNED_SQLSTATE - 548)) | (1L << (RETURNS - 548)) | (1L << (ROLE - 548)) | (1L << (ROLLBACK - 548)) | (1L << (ROLLUP - 548)) | (1L << (ROTATE - 548)) | (1L << (ROW - 548)) | (1L << (ROWS - 548)) | (1L << (ROW_FORMAT - 548)) | (1L << (SAVEPOINT - 548)) | (1L << (SCHEDULE - 548)) | (1L << (SECURITY - 548)) | (1L << (SERVER - 548)) | (1L << (SESSION - 548)) | (1L << (SHARE - 548)) | (1L << (SHARED - 548)) | (1L << (SIGNED - 548)) | (1L << (SIMPLE - 548)) | (1L << (SLAVE - 548)) | (1L << (SLOW - 548)) | (1L << (SNAPSHOT - 548)) | (1L << (SOCKET - 548)) | (1L << (SOME - 548)) | (1L << (SONAME - 548)) | (1L << (SOUNDS - 548)) | (1L << (SOURCE - 548)) | (1L << (SQL_AFTER_GTIDS - 548)) | (1L << (SQL_AFTER_MTS_GAPS - 548)) | (1L << (SQL_BEFORE_GTIDS - 548)) | (1L << (SQL_BUFFER_RESULT - 548)) | (1L << (SQL_CACHE - 548)) | (1L << (SQL_NO_CACHE - 548)) | (1L << (SQL_THREAD - 548)) | (1L << (START - 548)) | (1L << (STARTS - 548)) | (1L << (STATS_AUTO_RECALC - 548)) | (1L << (STATS_PERSISTENT - 548)) | (1L << (STATS_SAMPLE_PAGES - 548)) | (1L << (STATUS - 548)) | (1L << (STOP - 548)) | (1L << (STORAGE - 548)) | (1L << (STRING - 548)) | (1L << (SUBCLASS_ORIGIN - 548)) | (1L << (SUBJECT - 548)) | (1L << (SUBPARTITION - 548)) | (1L << (SUBPARTITIONS - 548)) | (1L << (SUSPEND - 548)) | (1L << (SWAPS - 548)) | (1L << (SWITCHES - 548)) | (1L << (TABLE_NAME - 548)) | (1L << (TABLESPACE - 548)))) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & ((1L << (TEMPORARY - 613)) | (1L << (TEMPTABLE - 613)) | (1L << (THAN - 613)) | (1L << (TRADITIONAL - 613)) | (1L << (TRANSACTION - 613)) | (1L << (TRANSACTIONAL - 613)) | (1L << (TRIGGERS - 613)) | (1L << (TRUNCATE - 613)) | (1L << (UNDEFINED - 613)) | (1L << (UNDOFILE - 613)) | (1L << (UNDO_BUFFER_SIZE - 613)) | (1L << (UNINSTALL - 613)) | (1L << (UNKNOWN - 613)) | (1L << (UNTIL - 613)) | (1L << (UPGRADE - 613)) | (1L << (USER - 613)) | (1L << (USE_FRM - 613)) | (1L << (USER_RESOURCES - 613)) | (1L << (VALIDATION - 613)) | (1L << (VALUE - 613)) | (1L << (VARIABLES - 613)) | (1L << (VIEW - 613)) | (1L << (WAIT - 613)) | (1L << (WARNINGS - 613)) | (1L << (WITHOUT - 613)) | (1L << (WORK - 613)) | (1L << (WRAPPER - 613)) | (1L << (X509 - 613)) | (1L << (XA - 613)) | (1L << (XML - 613)) | (1L << (EUR - 613)) | (1L << (USA - 613)) | (1L << (JIS - 613)) | (1L << (ISO - 613)) | (1L << (INTERNAL - 613)) | (1L << (AUDIT_ADMIN - 613)) | (1L << (BACKUP_ADMIN - 613)) | (1L << (BINLOG_ADMIN - 613)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 613)) | (1L << (CLONE_ADMIN - 613)) | (1L << (CONNECTION_ADMIN - 613)) | (1L << (ENCRYPTION_KEY_ADMIN - 613)))) != 0) || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & ((1L << (FIREWALL_ADMIN - 677)) | (1L << (FIREWALL_USER - 677)) | (1L << (GROUP_REPLICATION_ADMIN - 677)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 677)) | (1L << (NDB_STORED_USER - 677)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 677)) | (1L << (REPLICATION_APPLIER - 677)) | (1L << (REPLICATION_SLAVE_ADMIN - 677)) | (1L << (RESOURCE_GROUP_ADMIN - 677)) | (1L << (RESOURCE_GROUP_USER - 677)) | (1L << (ROLE_ADMIN - 677)) | (1L << (SESSION_VARIABLES_ADMIN - 677)) | (1L << (SET_USER_ID - 677)) | (1L << (SHOW_ROUTINE - 677)) | (1L << (SYSTEM_VARIABLES_ADMIN - 677)) | (1L << (TABLE_ENCRYPTION_ADMIN - 677)) | (1L << (VERSION_TOKEN_ADMIN - 677)) | (1L << (XA_RECOVER_ADMIN - 677)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME || _la==OPTIONAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(MySqlParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(MySqlParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUOTE() { return GetToken(MySqlParser.JSON_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS() { return GetToken(MySqlParser.JSON_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS_PATH() { return GetToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXTRACT() { return GetToken(MySqlParser.JSON_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_KEYS() { return GetToken(MySqlParser.JSON_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OVERLAPS() { return GetToken(MySqlParser.JSON_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEARCH() { return GetToken(MySqlParser.JSON_SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_APPEND() { return GetToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_INSERT() { return GetToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_INSERT() { return GetToken(MySqlParser.JSON_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE() { return GetToken(MySqlParser.JSON_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PATCH() { return GetToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PRESERVE() { return GetToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REMOVE() { return GetToken(MySqlParser.JSON_REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REPLACE() { return GetToken(MySqlParser.JSON_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SET() { return GetToken(MySqlParser.JSON_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTE() { return GetToken(MySqlParser.JSON_UNQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_DEPTH() { return GetToken(MySqlParser.JSON_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_LENGTH() { return GetToken(MySqlParser.JSON_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TYPE() { return GetToken(MySqlParser.JSON_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALID() { return GetToken(MySqlParser.JSON_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MySqlParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALID() { return GetToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return GetToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_PRETTY() { return GetToken(MySqlParser.JSON_PRETTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_FREE() { return GetToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_SIZE() { return GetToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(MySqlParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 660, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6787;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (DATE - 206)) | (1L << (TIME - 206)) | (1L << (TIMESTAMP - 206)) | (1L << (YEAR - 206)) | (1L << (JSON_ARRAY - 206)) | (1L << (JSON_OBJECT - 206)) | (1L << (JSON_QUOTE - 206)) | (1L << (JSON_CONTAINS - 206)) | (1L << (JSON_CONTAINS_PATH - 206)) | (1L << (JSON_EXTRACT - 206)) | (1L << (JSON_KEYS - 206)) | (1L << (JSON_OVERLAPS - 206)) | (1L << (JSON_SEARCH - 206)) | (1L << (JSON_VALUE - 206)) | (1L << (JSON_ARRAY_APPEND - 206)) | (1L << (JSON_ARRAY_INSERT - 206)) | (1L << (JSON_INSERT - 206)) | (1L << (JSON_MERGE - 206)) | (1L << (JSON_MERGE_PATCH - 206)) | (1L << (JSON_MERGE_PRESERVE - 206)) | (1L << (JSON_REMOVE - 206)) | (1L << (JSON_REPLACE - 206)) | (1L << (JSON_SET - 206)) | (1L << (JSON_UNQUOTE - 206)) | (1L << (JSON_DEPTH - 206)) | (1L << (JSON_LENGTH - 206)) | (1L << (JSON_TYPE - 206)) | (1L << (JSON_VALID - 206)) | (1L << (JSON_TABLE - 206)) | (1L << (JSON_SCHEMA_VALID - 206)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1L << (JSON_PRETTY - 206)) | (1L << (JSON_STORAGE_FREE - 206)) | (1L << (JSON_STORAGE_SIZE - 206)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (JSON_ARRAYAGG - 270)) | (1L << (JSON_OBJECTAGG - 270)) | (1L << (COUNT - 270)) | (1L << (POSITION - 270)))) != 0) || _la==INVISIBLE || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (VISIBLE - 637)) | (1L << (QUARTER - 637)) | (1L << (MONTH - 637)) | (1L << (DAY - 637)) | (1L << (HOUR - 637)) | (1L << (MINUTE - 637)) | (1L << (WEEK - 637)) | (1L << (SECOND - 637)) | (1L << (MICROSECOND - 637)) | (1L << (SESSION_VARIABLES_ADMIN - 637)))) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (GEOMETRYCOLLECTION - 757)) | (1L << (LINESTRING - 757)) | (1L << (MULTILINESTRING - 757)) | (1L << (MULTIPOINT - 757)) | (1L << (MULTIPOLYGON - 757)) | (1L << (POINT - 757)) | (1L << (POLYGON - 757)) | (1L << (ABS - 757)) | (1L << (ACOS - 757)) | (1L << (ADDDATE - 757)) | (1L << (ADDTIME - 757)) | (1L << (AES_DECRYPT - 757)) | (1L << (AES_ENCRYPT - 757)) | (1L << (AREA - 757)) | (1L << (ASBINARY - 757)) | (1L << (ASIN - 757)) | (1L << (ASTEXT - 757)) | (1L << (ASWKB - 757)) | (1L << (ASWKT - 757)) | (1L << (ASYMMETRIC_DECRYPT - 757)) | (1L << (ASYMMETRIC_DERIVE - 757)) | (1L << (ASYMMETRIC_ENCRYPT - 757)) | (1L << (ASYMMETRIC_SIGN - 757)) | (1L << (ASYMMETRIC_VERIFY - 757)) | (1L << (ATAN - 757)) | (1L << (ATAN2 - 757)) | (1L << (BENCHMARK - 757)) | (1L << (BIN - 757)) | (1L << (BIT_COUNT - 757)) | (1L << (BIT_LENGTH - 757)) | (1L << (BUFFER - 757)) | (1L << (CEIL - 757)) | (1L << (CEILING - 757)) | (1L << (CENTROID - 757)) | (1L << (CHARACTER_LENGTH - 757)) | (1L << (CHARSET - 757)) | (1L << (CHAR_LENGTH - 757)) | (1L << (COERCIBILITY - 757)) | (1L << (COLLATION - 757)) | (1L << (COMPRESS - 757)) | (1L << (CONCAT - 757)) | (1L << (CONCAT_WS - 757)) | (1L << (CONNECTION_ID - 757)) | (1L << (CONV - 757)) | (1L << (CONVERT_TZ - 757)) | (1L << (COS - 757)) | (1L << (COT - 757)) | (1L << (CRC32 - 757)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 757)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 757)) | (1L << (CREATE_DH_PARAMETERS - 757)) | (1L << (CREATE_DIGEST - 757)) | (1L << (CROSSES - 757)) | (1L << (DATEDIFF - 757)) | (1L << (DATE_FORMAT - 757)) | (1L << (DAYNAME - 757)) | (1L << (DAYOFMONTH - 757)) | (1L << (DAYOFWEEK - 757)) | (1L << (DAYOFYEAR - 757)) | (1L << (DECODE - 757)) | (1L << (DEGREES - 757)))) != 0) || ((((_la - 821)) & ~0x3f) == 0 && ((1L << (_la - 821)) & ((1L << (DES_DECRYPT - 821)) | (1L << (DES_ENCRYPT - 821)) | (1L << (DIMENSION - 821)) | (1L << (DISJOINT - 821)) | (1L << (ELT - 821)) | (1L << (ENCODE - 821)) | (1L << (ENCRYPT - 821)) | (1L << (ENDPOINT - 821)) | (1L << (ENVELOPE - 821)) | (1L << (EQUALS - 821)) | (1L << (EXP - 821)) | (1L << (EXPORT_SET - 821)) | (1L << (EXTERIORRING - 821)) | (1L << (EXTRACTVALUE - 821)) | (1L << (FIELD - 821)) | (1L << (FIND_IN_SET - 821)) | (1L << (FLOOR - 821)) | (1L << (FORMAT - 821)) | (1L << (FOUND_ROWS - 821)) | (1L << (FROM_BASE64 - 821)) | (1L << (FROM_DAYS - 821)) | (1L << (FROM_UNIXTIME - 821)) | (1L << (GEOMCOLLFROMTEXT - 821)) | (1L << (GEOMCOLLFROMWKB - 821)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 821)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 821)) | (1L << (GEOMETRYFROMTEXT - 821)) | (1L << (GEOMETRYFROMWKB - 821)) | (1L << (GEOMETRYN - 821)) | (1L << (GEOMETRYTYPE - 821)) | (1L << (GEOMFROMTEXT - 821)) | (1L << (GEOMFROMWKB - 821)) | (1L << (GET_FORMAT - 821)) | (1L << (GET_LOCK - 821)) | (1L << (GLENGTH - 821)) | (1L << (GREATEST - 821)) | (1L << (GTID_SUBSET - 821)) | (1L << (GTID_SUBTRACT - 821)) | (1L << (HEX - 821)) | (1L << (IFNULL - 821)) | (1L << (INET6_ATON - 821)) | (1L << (INET6_NTOA - 821)) | (1L << (INET_ATON - 821)) | (1L << (INET_NTOA - 821)) | (1L << (INSTR - 821)) | (1L << (INTERIORRINGN - 821)) | (1L << (INTERSECTS - 821)) | (1L << (ISCLOSED - 821)) | (1L << (ISEMPTY - 821)) | (1L << (ISNULL - 821)) | (1L << (ISSIMPLE - 821)) | (1L << (IS_FREE_LOCK - 821)) | (1L << (IS_IPV4 - 821)) | (1L << (IS_IPV4_COMPAT - 821)) | (1L << (IS_IPV4_MAPPED - 821)) | (1L << (IS_IPV6 - 821)) | (1L << (IS_USED_LOCK - 821)) | (1L << (LAST_INSERT_ID - 821)) | (1L << (LCASE - 821)) | (1L << (LEAST - 821)) | (1L << (LENGTH - 821)) | (1L << (LINEFROMTEXT - 821)) | (1L << (LINEFROMWKB - 821)) | (1L << (LINESTRINGFROMTEXT - 821)))) != 0) || ((((_la - 885)) & ~0x3f) == 0 && ((1L << (_la - 885)) & ((1L << (LINESTRINGFROMWKB - 885)) | (1L << (LN - 885)) | (1L << (LOAD_FILE - 885)) | (1L << (LOCATE - 885)) | (1L << (LOG - 885)) | (1L << (LOG10 - 885)) | (1L << (LOG2 - 885)) | (1L << (LOWER - 885)) | (1L << (LPAD - 885)) | (1L << (LTRIM - 885)) | (1L << (MAKEDATE - 885)) | (1L << (MAKETIME - 885)) | (1L << (MAKE_SET - 885)) | (1L << (MASTER_POS_WAIT - 885)) | (1L << (MBRCONTAINS - 885)) | (1L << (MBRDISJOINT - 885)) | (1L << (MBREQUAL - 885)) | (1L << (MBRINTERSECTS - 885)) | (1L << (MBROVERLAPS - 885)) | (1L << (MBRTOUCHES - 885)) | (1L << (MBRWITHIN - 885)) | (1L << (MD5 - 885)) | (1L << (MLINEFROMTEXT - 885)) | (1L << (MLINEFROMWKB - 885)) | (1L << (MONTHNAME - 885)) | (1L << (MPOINTFROMTEXT - 885)) | (1L << (MPOINTFROMWKB - 885)) | (1L << (MPOLYFROMTEXT - 885)) | (1L << (MPOLYFROMWKB - 885)) | (1L << (MULTILINESTRINGFROMTEXT - 885)) | (1L << (MULTILINESTRINGFROMWKB - 885)) | (1L << (MULTIPOINTFROMTEXT - 885)) | (1L << (MULTIPOINTFROMWKB - 885)) | (1L << (MULTIPOLYGONFROMTEXT - 885)) | (1L << (MULTIPOLYGONFROMWKB - 885)) | (1L << (NAME_CONST - 885)) | (1L << (NULLIF - 885)) | (1L << (NUMGEOMETRIES - 885)) | (1L << (NUMINTERIORRINGS - 885)) | (1L << (NUMPOINTS - 885)) | (1L << (OCT - 885)) | (1L << (OCTET_LENGTH - 885)) | (1L << (ORD - 885)) | (1L << (OVERLAPS - 885)) | (1L << (PERIOD_ADD - 885)) | (1L << (PERIOD_DIFF - 885)) | (1L << (PI - 885)) | (1L << (POINTFROMTEXT - 885)) | (1L << (POINTFROMWKB - 885)) | (1L << (POINTN - 885)) | (1L << (POLYFROMTEXT - 885)) | (1L << (POLYFROMWKB - 885)) | (1L << (POLYGONFROMTEXT - 885)) | (1L << (POLYGONFROMWKB - 885)) | (1L << (POW - 885)) | (1L << (POWER - 885)) | (1L << (QUOTE - 885)) | (1L << (RADIANS - 885)) | (1L << (RAND - 885)) | (1L << (RANDOM_BYTES - 885)) | (1L << (RELEASE_LOCK - 885)) | (1L << (REVERSE - 885)) | (1L << (ROUND - 885)) | (1L << (ROW_COUNT - 885)))) != 0) || ((((_la - 949)) & ~0x3f) == 0 && ((1L << (_la - 949)) & ((1L << (RPAD - 949)) | (1L << (RTRIM - 949)) | (1L << (SEC_TO_TIME - 949)) | (1L << (SESSION_USER - 949)) | (1L << (SHA - 949)) | (1L << (SHA1 - 949)) | (1L << (SHA2 - 949)) | (1L << (SIGN - 949)) | (1L << (SIN - 949)) | (1L << (SLEEP - 949)) | (1L << (SOUNDEX - 949)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 949)) | (1L << (SQRT - 949)) | (1L << (SRID - 949)) | (1L << (STARTPOINT - 949)) | (1L << (STRCMP - 949)) | (1L << (STR_TO_DATE - 949)) | (1L << (ST_AREA - 949)) | (1L << (ST_ASBINARY - 949)) | (1L << (ST_ASTEXT - 949)) | (1L << (ST_ASWKB - 949)) | (1L << (ST_ASWKT - 949)) | (1L << (ST_BUFFER - 949)) | (1L << (ST_CENTROID - 949)) | (1L << (ST_CONTAINS - 949)) | (1L << (ST_CROSSES - 949)) | (1L << (ST_DIFFERENCE - 949)) | (1L << (ST_DIMENSION - 949)) | (1L << (ST_DISJOINT - 949)) | (1L << (ST_DISTANCE - 949)) | (1L << (ST_ENDPOINT - 949)) | (1L << (ST_ENVELOPE - 949)) | (1L << (ST_EQUALS - 949)) | (1L << (ST_EXTERIORRING - 949)) | (1L << (ST_GEOMCOLLFROMTEXT - 949)) | (1L << (ST_GEOMCOLLFROMTXT - 949)) | (1L << (ST_GEOMCOLLFROMWKB - 949)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 949)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 949)) | (1L << (ST_GEOMETRYFROMTEXT - 949)) | (1L << (ST_GEOMETRYFROMWKB - 949)) | (1L << (ST_GEOMETRYN - 949)) | (1L << (ST_GEOMETRYTYPE - 949)) | (1L << (ST_GEOMFROMTEXT - 949)) | (1L << (ST_GEOMFROMWKB - 949)) | (1L << (ST_INTERIORRINGN - 949)) | (1L << (ST_INTERSECTION - 949)) | (1L << (ST_INTERSECTS - 949)) | (1L << (ST_ISCLOSED - 949)) | (1L << (ST_ISEMPTY - 949)) | (1L << (ST_ISSIMPLE - 949)) | (1L << (ST_LINEFROMTEXT - 949)) | (1L << (ST_LINEFROMWKB - 949)) | (1L << (ST_LINESTRINGFROMTEXT - 949)) | (1L << (ST_LINESTRINGFROMWKB - 949)) | (1L << (ST_NUMGEOMETRIES - 949)) | (1L << (ST_NUMINTERIORRING - 949)) | (1L << (ST_NUMINTERIORRINGS - 949)) | (1L << (ST_NUMPOINTS - 949)) | (1L << (ST_OVERLAPS - 949)) | (1L << (ST_POINTFROMTEXT - 949)) | (1L << (ST_POINTFROMWKB - 949)) | (1L << (ST_POINTN - 949)))) != 0) || ((((_la - 1013)) & ~0x3f) == 0 && ((1L << (_la - 1013)) & ((1L << (ST_POLYFROMTEXT - 1013)) | (1L << (ST_POLYFROMWKB - 1013)) | (1L << (ST_POLYGONFROMTEXT - 1013)) | (1L << (ST_POLYGONFROMWKB - 1013)) | (1L << (ST_SRID - 1013)) | (1L << (ST_STARTPOINT - 1013)) | (1L << (ST_SYMDIFFERENCE - 1013)) | (1L << (ST_TOUCHES - 1013)) | (1L << (ST_UNION - 1013)) | (1L << (ST_WITHIN - 1013)) | (1L << (ST_X - 1013)) | (1L << (ST_Y - 1013)) | (1L << (SUBDATE - 1013)) | (1L << (SUBSTRING_INDEX - 1013)) | (1L << (SUBTIME - 1013)) | (1L << (SYSTEM_USER - 1013)) | (1L << (TAN - 1013)) | (1L << (TIMEDIFF - 1013)) | (1L << (TIMESTAMPADD - 1013)) | (1L << (TIMESTAMPDIFF - 1013)) | (1L << (TIME_FORMAT - 1013)) | (1L << (TIME_TO_SEC - 1013)) | (1L << (TOUCHES - 1013)) | (1L << (TO_BASE64 - 1013)) | (1L << (TO_DAYS - 1013)) | (1L << (TO_SECONDS - 1013)) | (1L << (UCASE - 1013)) | (1L << (UNCOMPRESS - 1013)) | (1L << (UNCOMPRESSED_LENGTH - 1013)) | (1L << (UNHEX - 1013)) | (1L << (UNIX_TIMESTAMP - 1013)) | (1L << (UPDATEXML - 1013)) | (1L << (UPPER - 1013)) | (1L << (UUID - 1013)) | (1L << (UUID_SHORT - 1013)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1013)) | (1L << (VERSION - 1013)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1013)) | (1L << (WEEKDAY - 1013)) | (1L << (WEEKOFYEAR - 1013)) | (1L << (WEIGHT_STRING - 1013)) | (1L << (WITHIN - 1013)) | (1L << (YEARWEEK - 1013)) | (1L << (Y_FUNCTION - 1013)) | (1L << (X_FUNCTION - 1013)) | (1L << (MOD - 1013)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 315: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 316: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 317: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45C', '\x1A88', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x3', '\x2', 
		'\x5', '\x2', '\x29A', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x29E', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x2A5', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x2A8', '\n', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x2AB', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x2AE', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x2B3', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x2B6', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x2B9', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x2C2', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x2E9', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x2F5', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x300', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x311', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x316', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x322', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x33D', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x346', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x34B', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x34F', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x352', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x356', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x35A', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x363', '\n', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x366', '\n', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x369', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x36D', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x374', '\n', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x377', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x37C', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x382', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x385', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x389', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x38E', '\n', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x391', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x394', '\v', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x39F', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3A2', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3A6', '\n', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x3A9', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x3AD', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3B0', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3B4', '\n', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x3B7', '\n', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x3BA', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x3BE', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3C1', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3C5', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x3CB', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x3D1', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x3D5', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x3D8', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x3DC', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x3DF', '\v', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x3E5', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x3EB', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x3EF', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x3F2', '\v', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x3F8', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x3FB', '\v', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x3FF', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x40D', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\x410', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x416', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x41A', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x424', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x428', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x42C', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x430', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x434', '\n', '\x15', '\x3', '\x15', '\a', '\x15', '\x437', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x43A', '\v', '\x15', '\x5', 
		'\x15', '\x43C', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x43F', 
		'\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x442', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x445', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x44B', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x44F', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x455', '\n', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x458', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x45B', '\v', '\x15', '\x5', '\x15', '\x45D', '\n', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x460', '\n', '\x15', '\x5', '\x15', '\x462', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x46D', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x471', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x474', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x482', '\n', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x485', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x489', '\n', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x48C', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x490', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x493', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x497', '\n', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x49A', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x49E', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x4A1', 
		'\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x4A4', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x4A8', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x4AB', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x4AF', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x4B5', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x4C2', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x4C9', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x4CE', '\n', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x4D1', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x4D6', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x4DE', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x4E4', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x4E8', '\n', '\x19', '\x3', '\x1A', '\x5', 
		'\x1A', '\x4EB', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x4F0', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4F3', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4F7', '\n', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4FA', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x4FE', '\n', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x501', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x509', '\n', 
		'\x1B', '\x5', '\x1B', '\x50B', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\x510', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x513', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x518', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\a', '\x1C', '\x51E', '\n', '\x1C', '\f', '\x1C', 
		'\xE', '\x1C', '\x521', '\v', '\x1C', '\x5', '\x1C', '\x523', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x528', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x52B', '\v', '\x1C', '\x5', '\x1C', 
		'\x52D', '\n', '\x1C', '\x5', '\x1C', '\x52F', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x535', '\n', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x53B', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x54C', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x553', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x55A', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x565', '\n', '\"', '\x3', '#', '\x5', '#', '\x568', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x575', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x582', '\n', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x587', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x597', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\a', '\'', '\x59D', '\n', '\'', '\f', '\'', '\xE', '\'', '\x5A0', 
		'\v', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x5', '(', '\x5A9', '\n', '(', '\x3', ')', '\x3', 
		')', '\a', ')', '\x5AD', '\n', ')', '\f', ')', '\xE', ')', '\x5B0', '\v', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x5BB', '\n', '*', 
		'\x3', '*', '\x5', '*', '\x5BE', '\n', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x5C3', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x5D0', '\n', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x5D7', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x5DE', '\n', '*', '\x5', '*', '\x5E0', '\n', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x5E7', '\n', '*', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x5EB', '\n', '+', '\x5', '+', '\x5ED', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x5F2', '\n', 
		'+', '\x3', '+', '\x5', '+', '\x5F5', '\n', '+', '\x3', '+', '\x3', '+', 
		'\a', '+', '\x5F9', '\n', '+', '\f', '+', '\xE', '+', '\x5FC', '\v', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x600', '\n', '+', '\x5', '+', '\x602', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x606', '\n', '+', '\x3', 
		'+', '\x5', '+', '\x609', '\n', '+', '\x3', '+', '\x5', '+', '\x60C', 
		'\n', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x610', '\n', '+', '\f', 
		'+', '\xE', '+', '\x613', '\v', '+', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x617', '\n', '+', '\x5', '+', '\x619', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x61E', '\n', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x625', '\n', '+', '\x5', 
		'+', '\x627', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x62E', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x633', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x637', '\n', ',', '\x3', ',', '\x5', ',', '\x63A', '\n', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x642', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x64A', '\n', '-', '\x5', '-', '\x64C', 
		'\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x654', '\n', '.', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x658', '\n', '/', '\x3', '/', '\x5', '/', '\x65B', '\n', '/', '\x3', 
		'/', '\x3', '/', '\a', '/', '\x65F', '\n', '/', '\f', '/', '\xE', '/', 
		'\x662', '\v', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x666', '\n', 
		'/', '\x3', '/', '\x5', '/', '\x669', '\n', '/', '\x3', '/', '\x3', '/', 
		'\a', '/', '\x66D', '\n', '/', '\f', '/', '\xE', '/', '\x670', '\v', '/', 
		'\x5', '/', '\x672', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x676', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x679', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x67D', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x682', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x686', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x68B', '\n', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x68E', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x692', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x696', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x69A', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x69E', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x6A3', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x6A8', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x6AD', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6B3', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6B8', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6BD', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x6C3', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x6C8', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x6CD', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x6D2', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x6D7', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6DC', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6E1', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6E6', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6EB', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x6F0', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x6F5', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x6FB', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x703', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x709', '\n', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x715', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x71C', '\n', '\x33', '\x5', '\x33', '\x71E', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\a', '\x33', '\x724', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x727', 
		'\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x72B', '\n', 
		'\x33', '\x3', '\x34', '\x5', '\x34', '\x72E', '\n', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x736', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x73C', '\n', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x74C', '\n', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x758', '\n', '\x34', '\x5', '\x34', '\x75A', 
		'\n', '\x34', '\x3', '\x35', '\x5', '\x35', '\x75D', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x765', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x76B', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x771', 
		'\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\a', '\x36', '\x77C', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x77F', 
		'\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x783', '\n', 
		'\x36', '\f', '\x36', '\xE', '\x36', '\x786', '\v', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x78C', '\n', 
		'\x36', '\f', '\x36', '\xE', '\x36', '\x78F', '\v', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x5', '\x36', '\x793', '\n', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\a', '\x36', '\x79C', '\n', '\x36', '\f', '\x36', '\xE', '\x36', 
		'\x79F', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\a', '\x36', '\x7A5', '\n', '\x36', '\f', '\x36', '\xE', '\x36', 
		'\x7A8', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x7AC', 
		'\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', 
		'\x7B6', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x7B9', '\v', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7BD', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x7C0', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7C6', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x7C9', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x7CD', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\a', '\x36', '\x7D7', '\n', '\x36', '\f', '\x36', '\xE', '\x36', 
		'\x7DA', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7DE', 
		'\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x7E1', '\v', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7E7', 
		'\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x7EA', '\v', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x7EE', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7F3', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x7F6', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x7FC', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x7FF', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x803', '\n', '\x36', '\x5', '\x36', '\x805', '\n', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x80A', '\n', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x6', 
		'\x38', '\x810', '\n', '\x38', '\r', '\x38', '\xE', '\x38', '\x811', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', 
		'\x39', '\x819', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x81C', '\v', 
		'\x39', '\x3', ':', '\x5', ':', '\x81F', '\n', ':', '\x3', ':', '\x5', 
		':', '\x822', '\n', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x826', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x82B', '\n', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x831', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x837', '\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x83C', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x841', '\n', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x846', '\n', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x84B', '\n', ':', '\x3', 
		':', '\x5', ':', '\x84E', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x853', '\n', ';', '\x3', ';', '\x6', ';', '\x856', '\n', 
		';', '\r', ';', '\xE', ';', '\x857', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', 
		'\x862', '\n', ';', '\x3', '<', '\x3', '<', '\x5', '<', '\x866', '\n', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x86D', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', 
		'\x872', '\n', '<', '\x3', '<', '\x5', '<', '\x875', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x5', '<', '\x87A', '\n', '<', '\x3', '<', 
		'\x5', '<', '\x87D', '\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x881', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x885', '\n', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x88B', '\n', '=', 
		'\f', '=', '\xE', '=', '\x88E', '\v', '=', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x5', '?', '\x8A0', '\n', '?', '\x3', '?', '\x5', '?', 
		'\x8A3', '\n', '?', '\x3', '?', '\x5', '?', '\x8A6', '\n', '?', '\x3', 
		'?', '\x3', '?', '\x5', '?', '\x8AA', '\n', '?', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\a', '@', '\x8B2', '\n', 
		'@', '\f', '@', '\xE', '@', '\x8B5', '\v', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\a', '\x41', '\x8BF', '\n', '\x41', '\f', '\x41', 
		'\xE', '\x41', '\x8C2', '\v', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x5', '\x42', '\x8C8', '\n', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x8CB', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x8D2', '\n', '\x42', 
		'\f', '\x42', '\xE', '\x42', '\x8D5', '\v', '\x42', '\x5', '\x42', '\x8D7', 
		'\n', '\x42', '\x3', '\x42', '\x5', '\x42', '\x8DA', '\n', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8E5', 
		'\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8E8', '\n', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x8EC', '\n', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x8F4', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8F7', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x8FC', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x904', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x90A', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x90E', 
		'\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x912', '\n', 
		'\x45', '\x3', '\x45', '\a', '\x45', '\x915', '\n', '\x45', '\f', '\x45', 
		'\xE', '\x45', '\x918', '\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x91C', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x923', '\n', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x927', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\a', '\x45', '\x930', '\n', '\x45', '\f', '\x45', '\xE', 
		'\x45', '\x933', '\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x93A', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x93D', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\a', '\x45', '\x941', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x944', 
		'\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x949', '\n', '\x45', '\x5', '\x45', '\x94B', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x950', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x953', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\a', '\x45', '\x957', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x95A', 
		'\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x95F', '\n', '\x45', '\x5', '\x45', '\x961', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x965', '\n', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x968', '\n', '\x45', '\x3', '\x45', '\x5', '\x45', '\x96B', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x96F', '\n', 
		'\x45', '\f', '\x45', '\xE', '\x45', '\x972', '\v', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x977', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x97A', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\a', '\x45', '\x97E', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x981', 
		'\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x986', '\n', '\x45', '\x5', '\x45', '\x988', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x98D', '\n', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x995', '\n', '\x45', '\x5', '\x45', '\x997', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9A0', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9A5', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9AD', '\n', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x9B1', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x9B9', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x9C3', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x9C8', '\n', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9CF', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9D3', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9D7', '\n', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x9F7', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x9FB', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\xA07', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\xA0A', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\xA13', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\a', '\x45', '\xA22', '\n', '\x45', '\f', '\x45', '\xE', '\x45', 
		'\xA25', '\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\xA30', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\xA37', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\xA3E', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', 
		'\xA4B', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\xA4E', '\v', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\xA5A', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\xA60', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\xA66', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\xA6C', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\xA72', '\n', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\xA78', '\n', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\xA7E', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\xA83', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\xA8A', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\xA91', '\n', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', 
		'\xA98', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\xA9D', 
		'\n', 'H', '\x3', 'H', '\a', 'H', '\xAA0', '\n', 'H', '\f', 'H', '\xE', 
		'H', '\xAA3', '\v', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x5', 'J', '\xAB0', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\xAB7', '\n', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\xABE', '\n', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\xAC4', 
		'\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\xAC8', '\n', 'M', '\x3', 
		'M', '\x3', 'M', '\x5', 'M', '\xACC', '\n', 'M', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\xAD3', '\n', 'N', '\x3', 
		'N', '\x5', 'N', '\xAD6', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x5', 'O', '\xADB', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x5', 'P', '\xAE2', '\n', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\a', 'P', '\xAE7', '\n', 'P', '\f', 'P', '\xE', 'P', '\xAEA', 
		'\v', 'P', '\x3', 'P', '\x5', 'P', '\xAED', '\n', 'P', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\xAF4', '\n', 'Q', 
		'\f', 'Q', '\xE', 'Q', '\xAF7', '\v', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\xAFF', '\n', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x5', 'T', '\xB08', '\n', 'T', '\x3', 'T', '\x5', 'T', '\xB0B', 
		'\n', 'T', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\xB0F', '\n', 'U', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x5', 'W', '\xB18', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\xB1C', '\n', 'X', '\x3', 'X', '\x5', 'X', '\xB1F', '\n', 'X', '\x3', 
		'X', '\x5', 'X', '\xB22', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x5', 'X', '\xB28', '\n', 'X', '\x3', 'X', '\x5', 'X', '\xB2B', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\xB31', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\a', 'X', '\xB38', '\n', 'X', '\f', 'X', '\xE', 'X', '\xB3B', '\v', 
		'X', '\x5', 'X', '\xB3D', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\xB46', '\n', 
		'X', '\f', 'X', '\xE', 'X', '\xB49', '\v', 'X', '\x5', 'X', '\xB4B', '\n', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB50', '\n', 'Y', 
		'\x3', 'Y', '\x5', 'Y', '\xB53', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x5', 'Y', '\xB58', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', 
		'\xB62', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB67', 
		'\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x6', 'Y', '\xB6B', '\n', 'Y', '\r', 
		'Y', '\xE', 'Y', '\xB6C', '\x5', 'Y', '\xB6F', '\n', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x6', 'Y', '\xB73', '\n', 'Y', '\r', 'Y', '\xE', 'Y', '\xB74', 
		'\x5', 'Y', '\xB77', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x5', 'Y', '\xB7D', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\a', 'Y', '\xB83', '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\xB86', 
		'\v', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB8A', '\n', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\xB90', '\n', 'Y', 
		'\f', 'Y', '\xE', 'Y', '\xB93', '\v', 'Y', '\x5', 'Y', '\xB95', '\n', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\xB9A', '\n', 'Z', 
		'\x3', 'Z', '\x5', 'Z', '\xB9D', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x5', 'Z', '\xBA2', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\xBAA', '\n', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 
		'Z', '\xBB2', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x5', 'Z', '\xBB8', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\a', 'Z', '\xBBE', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\xBC1', '\v', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\xBC5', '\n', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 'Z', '\xBCB', '\n', 'Z', '\f', 
		'Z', '\xE', 'Z', '\xBCE', '\v', 'Z', '\x5', 'Z', '\xBD0', '\n', 'Z', '\x3', 
		'[', '\x3', '[', '\x5', '[', '\xBD4', '\n', '[', '\x3', '[', '\x5', '[', 
		'\xBD7', '\n', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x5', '[', '\xBDF', '\n', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x5', '[', '\xBE5', '\n', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\a', '[', '\xBEC', '\n', '[', 
		'\f', '[', '\xE', '[', '\xBEF', '\v', '[', '\x5', '[', '\xBF1', '\n', 
		'[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\xBF5', '\n', '\\', '\x3', 
		'\\', '\x3', '\\', '\x5', '\\', '\xBF9', '\n', '\\', '\x3', '\\', '\x3', 
		'\\', '\x6', '\\', '\xBFD', '\n', '\\', '\r', '\\', '\xE', '\\', '\xBFE', 
		'\x3', '\\', '\x3', '\\', '\x5', '\\', '\xC03', '\n', '\\', '\x3', '\\', 
		'\x3', '\\', '\x5', '\\', '\xC07', '\n', '\\', '\x5', '\\', '\xC09', '\n', 
		'\\', '\x3', '\\', '\x5', '\\', '\xC0C', '\n', '\\', '\x3', '\\', '\x5', 
		'\\', '\xC0F', '\n', '\\', '\x3', '\\', '\x5', '\\', '\xC12', '\n', '\\', 
		'\x3', '\\', '\x3', '\\', '\x6', '\\', '\xC16', '\n', '\\', '\r', '\\', 
		'\xE', '\\', '\xC17', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\xC1C', 
		'\n', '\\', '\x3', '\\', '\x5', '\\', '\xC1F', '\n', '\\', '\x3', '\\', 
		'\x5', '\\', '\xC22', '\n', '\\', '\x3', '\\', '\x5', '\\', '\xC25', '\n', 
		'\\', '\x3', '\\', '\x5', '\\', '\xC28', '\n', '\\', '\x5', '\\', '\xC2A', 
		'\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\xC2E', '\n', ']', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\xC34', '\n', '^', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\xC3A', '\n', 
		'^', '\x3', '^', '\a', '^', '\xC3D', '\n', '^', '\f', '^', '\xE', '^', 
		'\xC40', '\v', '^', '\x5', '^', '\xC42', '\n', '^', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x5', '_', '\xC48', '\n', '_', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\xC4C', '\n', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\xC54', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC58', 
		'\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC5B', '\n', '\x62', '\x3', 
		'\x62', '\x5', '\x62', '\xC5E', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\xC67', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', 
		'\x62', '\xC6B', '\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC6E', 
		'\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC72', '\n', 
		'\x62', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\xC76', '\n', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\xC79', '\n', '\x63', '\x3', '\x63', '\x5', 
		'\x63', '\xC7C', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x5', '\x63', '\xC81', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x5', '\x63', '\xC87', '\n', '\x63', '\a', '\x63', 
		'\xC89', '\n', '\x63', '\f', '\x63', '\xE', '\x63', '\xC8C', '\v', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\xC95', '\n', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\xC9B', 
		'\n', '\x63', '\a', '\x63', '\xC9D', '\n', '\x63', '\f', '\x63', '\xE', 
		'\x63', '\xCA0', '\v', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x5', '\x63', '\xCA5', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', 
		'\x63', '\xCA9', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x5', '\x64', '\xCAF', '\n', '\x64', '\x3', '\x64', '\x5', 
		'\x64', '\xCB2', '\n', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\xCBE', '\n', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x5', '\x65', '\xCC2', '\n', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x5', '\x65', '\xCC6', '\n', '\x65', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', 
		'\x66', '\xCCE', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', 
		'\xCD2', '\n', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'h', '\x3', 'h', '\x5', 'h', '\xCDA', '\n', 'h', '\x3', 'h', '\x5', 
		'h', '\xCDD', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\xCE1', 
		'\n', 'h', '\x3', 'h', '\x5', 'h', '\xCE4', '\n', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\a', 'h', '\xCEA', '\n', 'h', '\f', 'h', 
		'\xE', 'h', '\xCED', '\v', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\xCF1', 
		'\n', 'h', '\x3', 'h', '\x5', 'h', '\xCF4', '\n', 'h', '\x3', 'h', '\x5', 
		'h', '\xCF7', '\n', 'h', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\xCFB', 
		'\n', 'i', '\x3', 'i', '\x5', 'i', '\xCFE', '\n', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\a', 'i', '\xD05', '\n', 'i', 
		'\f', 'i', '\xE', 'i', '\xD08', '\v', 'i', '\x3', 'i', '\x3', 'i', '\x5', 
		'i', '\xD0C', '\n', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\a', 'j', '\xD13', '\n', 'j', '\f', 'j', '\xE', 'j', '\xD16', 
		'\v', 'j', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\xD1A', '\n', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\a', 'l', '\xD1F', '\n', 'l', '\f', 'l', 
		'\xE', 'l', '\xD22', '\v', 'l', '\x3', 'm', '\x3', 'm', '\a', 'm', '\xD26', 
		'\n', 'm', '\f', 'm', '\xE', 'm', '\xD29', '\v', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\a', 'm', '\xD2E', '\n', 'm', '\f', 'm', '\xE', 'm', 
		'\xD31', '\v', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xD35', '\n', 
		'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x5', 'n', '\xD3D', '\n', 'n', '\x3', 'n', '\x5', 'n', '\xD40', 
		'\n', 'n', '\x3', 'n', '\x5', 'n', '\xD43', '\n', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\a', 'n', '\xD48', '\n', 'n', '\f', 'n', '\xE', 'n', 
		'\xD4B', '\v', 'n', '\x5', 'n', '\xD4D', '\n', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\xD54', '\n', 'n', 
		'\x3', 'n', '\x5', 'n', '\xD57', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\xD5F', '\n', 'n', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xD65', '\n', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\xD70', '\n', 'p', 
		'\x3', 'q', '\x5', 'q', '\xD73', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x5', 'q', '\xD7E', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x5', 'q', '\xD84', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x5', 
		'q', '\xD88', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', 
		'\xD93', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xD98', 
		'\n', 'q', '\x5', 'q', '\xD9A', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x5', 
		'q', '\xD9E', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\xDA8', '\n', 
		'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 
		's', '\x3', 's', '\x3', 's', '\x5', 's', '\xDB2', '\n', 's', '\x3', 't', 
		'\x3', 't', '\a', 't', '\xDB6', '\n', 't', '\f', 't', '\xE', 't', '\xDB9', 
		'\v', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\xDBD', '\n', 't', '\x3', 
		't', '\x5', 't', '\xDC0', '\n', 't', '\x3', 't', '\x5', 't', '\xDC3', 
		'\n', 't', '\x3', 't', '\x5', 't', '\xDC6', '\n', 't', '\x3', 't', '\x5', 
		't', '\xDC9', '\n', 't', '\x3', 't', '\x5', 't', '\xDCC', '\n', 't', '\x3', 
		't', '\x5', 't', '\xDCF', '\n', 't', '\x3', 't', '\x3', 't', '\a', 't', 
		'\xDD3', '\n', 't', '\f', 't', '\xE', 't', '\xDD6', '\v', 't', '\x3', 
		't', '\x3', 't', '\x5', 't', '\xDDA', '\n', 't', '\x3', 't', '\x5', 't', 
		'\xDDD', '\n', 't', '\x3', 't', '\x5', 't', '\xDE0', '\n', 't', '\x3', 
		't', '\x5', 't', '\xDE3', '\n', 't', '\x3', 't', '\x5', 't', '\xDE6', 
		'\n', 't', '\x3', 't', '\x5', 't', '\xDE9', '\n', 't', '\x3', 't', '\x5', 
		't', '\xDEC', '\n', 't', '\x5', 't', '\xDEE', '\n', 't', '\x3', 'u', '\x3', 
		'u', '\a', 'u', '\xDF2', '\n', 'u', '\f', 'u', '\xE', 'u', '\xDF5', '\v', 
		'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xDF9', '\n', 'u', '\x3', 'u', 
		'\x5', 'u', '\xDFC', '\n', 'u', '\x3', 'u', '\x5', 'u', '\xDFF', '\n', 
		'u', '\x3', 'u', '\x5', 'u', '\xE02', '\n', 'u', '\x3', 'u', '\x5', 'u', 
		'\xE05', '\n', 'u', '\x3', 'u', '\x5', 'u', '\xE08', '\n', 'u', '\x3', 
		'v', '\x3', 'v', '\x5', 'v', '\xE0C', '\n', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'w', '\x3', 'w', '\x5', 'w', '\xE12', '\n', 'w', '\x3', 'w', '\x3', 
		'w', '\x5', 'w', '\xE16', '\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', 
		'\xE20', '\n', 'x', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xE24', '\n', 
		'y', '\x3', 'y', '\x3', 'y', '\a', 'y', '\xE28', '\n', 'y', '\f', 'y', 
		'\xE', 'y', '\xE2B', '\v', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xE33', '\n', 'z', '\x3', 'z', 
		'\x5', 'z', '\xE36', '\n', 'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xE3A', 
		'\n', 'z', '\x3', 'z', '\x5', 'z', '\xE3D', '\n', 'z', '\x3', 'z', '\x3', 
		'z', '\x5', 'z', '\xE41', '\n', 'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', 
		'\xE45', '\n', 'z', '\x3', 'z', '\x5', 'z', '\xE48', '\n', 'z', '\x5', 
		'z', '\xE4A', '\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\a', '{', '\xE50', '\n', '{', '\f', '{', '\xE', '{', '\xE53', '\v', '{', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\xE5E', '\n', '{', '\x3', 
		'{', '\x3', '{', '\x6', '{', '\xE62', '\n', '{', '\r', '{', '\xE', '{', 
		'\xE63', '\x5', '{', '\xE66', '\n', '{', '\x3', '{', '\x3', '{', '\x6', 
		'{', '\xE6A', '\n', '{', '\r', '{', '\xE', '{', '\xE6B', '\x5', '{', '\xE6E', 
		'\n', '{', '\x5', '{', '\xE70', '\n', '{', '\x3', '|', '\x3', '|', '\x3', 
		'|', '\x3', '|', '\x5', '|', '\xE76', '\n', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\xE7E', '\n', 
		'|', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', 
		'}', '\x5', '}', '\xE86', '\n', '}', '\x3', '~', '\x3', '~', '\x3', '~', 
		'\x3', '~', '\x5', '~', '\xE8C', '\n', '~', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\a', '\x7F', '\xE93', '\n', 
		'\x7F', '\f', '\x7F', '\xE', '\x7F', '\xE96', '\v', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x5', '\x7F', '\xE9A', '\n', '\x7F', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\a', 
		'\x81', '\xEAC', '\n', '\x81', '\f', '\x81', '\xE', '\x81', '\xEAF', '\v', 
		'\x81', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xEB3', '\n', '\x82', 
		'\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\xEB9', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', 
		'\x83', '\x3', '\x83', '\x5', '\x83', '\xEC0', '\n', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xEC5', '\n', '\x84', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\a', 
		'\x85', '\xECC', '\n', '\x85', '\f', '\x85', '\xE', '\x85', '\xECF', '\v', 
		'\x85', '\x5', '\x85', '\xED1', '\n', '\x85', '\x3', '\x86', '\x3', '\x86', 
		'\x5', '\x86', '\xED5', '\n', '\x86', '\x3', '\x87', '\x3', '\x87', '\x5', 
		'\x87', '\xED9', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', 
		'\xEDD', '\n', '\x87', '\x3', '\x87', '\x5', '\x87', '\xEE0', '\n', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\xEE3', '\n', '\x87', '\x3', '\x87', '\x5', 
		'\x87', '\xEE6', '\n', '\x87', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xEEA', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xEEE', 
		'\n', '\x88', '\x3', '\x88', '\x5', '\x88', '\xEF1', '\n', '\x88', '\x3', 
		'\x88', '\x5', '\x88', '\xEF4', '\n', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xEF7', '\n', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xEFE', '\n', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x5', '\x8A', '\xF02', '\n', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\a', 
		'\x8C', '\xF0F', '\n', '\x8C', '\f', '\x8C', '\xE', '\x8C', '\xF12', '\v', 
		'\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', 
		'\x8F', '\x5', '\x8F', '\xF1E', '\n', '\x8F', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\a', '\x8F', '\xF24', '\n', '\x8F', '\f', 
		'\x8F', '\xE', '\x8F', '\xF27', '\v', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\x5', '\x90', '\xF30', '\n', '\x90', '\x3', '\x91', '\x3', '\x91', '\x5', 
		'\x91', '\xF34', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\xF37', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x92', '\x3', '\x92', 
		'\x5', '\x92', '\xF3D', '\n', '\x92', '\x3', '\x92', '\x5', '\x92', '\xF40', 
		'\n', '\x92', '\x3', '\x92', '\x5', '\x92', '\xF43', '\n', '\x92', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x5', '\x93', '\xF4C', '\n', '\x93', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x5', '\x94', '\xF55', '\n', '\x94', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\a', 
		'\x95', '\xF5D', '\n', '\x95', '\f', '\x95', '\xE', '\x95', '\xF60', '\v', 
		'\x95', '\x3', '\x95', '\x5', '\x95', '\xF63', '\n', '\x95', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\a', '\x96', '\xF6B', '\n', '\x96', '\f', '\x96', '\xE', '\x96', '\xF6E', 
		'\v', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\xF77', '\n', 
		'\x97', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x5', '\x99', '\xF7F', '\n', '\x99', '\x3', '\x99', 
		'\x5', '\x99', '\xF82', '\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\a', '\x9A', '\xF89', '\n', '\x9A', 
		'\f', '\x9A', '\xE', '\x9A', '\xF8C', '\v', '\x9A', '\x5', '\x9A', '\xF8E', 
		'\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xF92', '\n', 
		'\x9A', '\x3', '\x9A', '\a', '\x9A', '\xF95', '\n', '\x9A', '\f', '\x9A', 
		'\xE', '\x9A', '\xF98', '\v', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xF9B', 
		'\n', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\a', '\x9B', '\xFA2', '\n', '\x9B', '\f', '\x9B', '\xE', 
		'\x9B', '\xFA5', '\v', '\x9B', '\x5', '\x9B', '\xFA7', '\n', '\x9B', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\a', '\x9E', '\xFC4', '\n', '\x9E', '\f', '\x9E', 
		'\xE', '\x9E', '\xFC7', '\v', '\x9E', '\x5', '\x9E', '\xFC9', '\n', '\x9E', 
		'\x3', '\x9E', '\x5', '\x9E', '\xFCC', '\n', '\x9E', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\a', '\xA3', '\x1002', '\n', '\xA3', '\f', '\xA3', '\xE', '\xA3', 
		'\x1005', '\v', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\x1009', 
		'\n', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\x1025', '\n', '\xA6', '\x3', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x1033', '\n', '\xA7', '\x3', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\a', '\xA8', '\x1038', '\n', '\xA8', '\f', 
		'\xA8', '\xE', '\xA8', '\x103B', '\v', '\xA8', '\x3', '\xA8', '\x5', '\xA8', 
		'\x103E', '\n', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xA9', '\x5', '\xA9', '\x1044', '\n', '\xA9', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\x104C', '\n', '\xAA', '\x5', '\xAA', '\x104E', '\n', '\xAA', '\x3', 
		'\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x1059', 
		'\n', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', 
		'\x1063', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x106A', '\n', '\xAF', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x1070', 
		'\n', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', 
		'\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x1078', '\n', '\xB2', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x107D', '\n', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\a', '\xB3', 
		'\x1083', '\n', '\xB3', '\f', '\xB3', '\xE', '\xB3', '\x1086', '\v', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\a', '\xB3', '\x108B', '\n', 
		'\xB3', '\f', '\xB3', '\xE', '\xB3', '\x108E', '\v', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\a', '\xB3', '\x1093', '\n', '\xB3', '\f', 
		'\xB3', '\xE', '\xB3', '\x1096', '\v', '\xB3', '\x3', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\a', '\xB3', '\x109B', '\n', '\xB3', '\f', '\xB3', '\xE', 
		'\xB3', '\x109E', '\v', '\xB3', '\x3', '\xB3', '\a', '\xB3', '\x10A1', 
		'\n', '\xB3', '\f', '\xB3', '\xE', '\xB3', '\x10A4', '\v', '\xB3', '\x5', 
		'\xB3', '\x10A6', '\n', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', 
		'\x10AA', '\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', 
		'\xB4', '\x10AF', '\n', '\xB4', '\x3', '\xB4', '\x6', '\xB4', '\x10B2', 
		'\n', '\xB4', '\r', '\xB4', '\xE', '\xB4', '\x10B3', '\x3', '\xB4', '\x3', 
		'\xB4', '\x6', '\xB4', '\x10B8', '\n', '\xB4', '\r', '\xB4', '\xE', '\xB4', 
		'\x10B9', '\x5', '\xB4', '\x10BC', '\n', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x6', '\xB5', '\x10C5', '\n', '\xB5', '\r', '\xB5', '\xE', '\xB5', 
		'\x10C6', '\x3', '\xB5', '\a', '\xB5', '\x10CA', '\n', '\xB5', '\f', '\xB5', 
		'\xE', '\xB5', '\x10CD', '\v', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x6', 
		'\xB5', '\x10D1', '\n', '\xB5', '\r', '\xB5', '\xE', '\xB5', '\x10D2', 
		'\x5', '\xB5', '\x10D5', '\n', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', 
		'\xB8', '\x10E3', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x6', '\xB8', 
		'\x10E7', '\n', '\xB8', '\r', '\xB8', '\xE', '\xB8', '\x10E8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x10EE', '\n', '\xB8', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x10F3', 
		'\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x6', '\xB9', '\x10F7', '\n', 
		'\xB9', '\r', '\xB9', '\xE', '\xB9', '\x10F8', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x1100', 
		'\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x1108', '\n', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x6', '\xBB', '\x110E', 
		'\n', '\xBB', '\r', '\xBB', '\xE', '\xBB', '\x110F', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x1115', '\n', '\xBB', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x111B', 
		'\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x111E', '\n', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x5', '\xBC', '\x1126', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x112D', 
		'\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x1136', 
		'\n', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x1139', '\n', '\xBE', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\a', '\xC0', '\x1148', '\n', '\xC0', 
		'\f', '\xC0', '\xE', '\xC0', '\x114B', '\v', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x1152', 
		'\n', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x115A', '\n', '\xC1', '\x3', 
		'\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x115E', '\n', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', 
		'\x1165', '\n', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x6', '\xC3', '\x1169', 
		'\n', '\xC3', '\r', '\xC3', '\xE', '\xC3', '\x116A', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x6', '\xC4', '\x1171', '\n', '\xC4', 
		'\r', '\xC4', '\xE', '\xC4', '\x1172', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\a', '\xC5', '\x117A', '\n', '\xC5', 
		'\f', '\xC5', '\xE', '\xC5', '\x117D', '\v', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x1182', '\n', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\a', '\xC5', '\x1187', '\n', '\xC5', '\f', 
		'\xC5', '\xE', '\xC5', '\x118A', '\v', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x1190', '\n', '\xC5', '\x3', 
		'\xC5', '\a', '\xC5', '\x1193', '\n', '\xC5', '\f', '\xC5', '\xE', '\xC5', 
		'\x1196', '\v', '\xC5', '\x5', '\xC5', '\x1198', '\n', '\xC5', '\x5', 
		'\xC5', '\x119A', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x6', '\xC5', 
		'\x119E', '\n', '\xC5', '\r', '\xC5', '\xE', '\xC5', '\x119F', '\x5', 
		'\xC5', '\x11A2', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\a', '\xC5', 
		'\x11A6', '\n', '\xC5', '\f', '\xC5', '\xE', '\xC5', '\x11A9', '\v', '\xC5', 
		'\x5', '\xC5', '\x11AB', '\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x11B2', '\n', '\xC6', 
		'\f', '\xC6', '\xE', '\xC6', '\x11B5', '\v', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x11BA', '\n', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x11BF', '\n', '\xC6', '\f', 
		'\xC6', '\xE', '\xC6', '\x11C2', '\v', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x11C8', '\n', '\xC6', '\x3', 
		'\xC6', '\a', '\xC6', '\x11CB', '\n', '\xC6', '\f', '\xC6', '\xE', '\xC6', 
		'\x11CE', '\v', '\xC6', '\x5', '\xC6', '\x11D0', '\n', '\xC6', '\x5', 
		'\xC6', '\x11D2', '\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x6', '\xC6', 
		'\x11D6', '\n', '\xC6', '\r', '\xC6', '\xE', '\xC6', '\x11D7', '\x5', 
		'\xC6', '\x11DA', '\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', 
		'\x11DE', '\n', '\xC6', '\f', '\xC6', '\xE', '\xC6', '\x11E1', '\v', '\xC6', 
		'\x5', '\xC6', '\x11E3', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x5', '\xC7', '\x11E8', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\a', '\xC7', '\x11ED', '\n', '\xC7', '\f', '\xC7', '\xE', 
		'\xC7', '\x11F0', '\v', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\a', '\xC8', '\x11F6', '\n', '\xC8', '\f', '\xC8', '\xE', 
		'\xC8', '\x11F9', '\v', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', 
		'\x11FD', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\a', '\xC8', '\x1204', '\n', '\xC8', '\f', '\xC8', 
		'\xE', '\xC8', '\x1207', '\v', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x120D', '\n', '\xC8', '\x3', '\xC8', 
		'\a', '\xC8', '\x1210', '\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\x1213', 
		'\v', '\xC8', '\x5', '\xC8', '\x1215', '\n', '\xC8', '\x5', '\xC8', '\x1217', 
		'\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\a', '\xC8', '\x121D', '\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\x1220', 
		'\v', '\xC8', '\x5', '\xC8', '\x1222', '\n', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', 
		'\xC8', '\x122A', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\a', '\xC8', '\x1230', '\n', '\xC8', '\f', '\xC8', '\xE', 
		'\xC8', '\x1233', '\v', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x5', '\xC8', '\x1238', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x5', '\xC8', '\x123D', '\n', '\xC8', '\a', '\xC8', '\x123F', 
		'\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\x1242', '\v', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x1247', '\n', '\xC8', 
		'\x5', '\xC8', '\x1249', '\n', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\a', 
		'\xC9', '\x1252', '\n', '\xC9', '\f', '\xC9', '\xE', '\xC9', '\x1255', 
		'\v', '\xC9', '\x5', '\xC9', '\x1257', '\n', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\a', '\xC9', '\x125C', '\n', '\xC9', '\f', '\xC9', 
		'\xE', '\xC9', '\x125F', '\v', '\xC9', '\x5', '\xC9', '\x1261', '\n', 
		'\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\a', '\xCA', '\x126B', 
		'\n', '\xCA', '\f', '\xCA', '\xE', '\xCA', '\x126E', '\v', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x1273', '\n', '\xCA', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\a', '\xCB', '\x127A', '\n', '\xCB', '\f', '\xCB', '\xE', '\xCB', '\x127D', 
		'\v', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\a', '\xCC', '\x1283', '\n', '\xCC', '\f', '\xCC', '\xE', '\xCC', '\x1286', 
		'\v', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x128A', '\n', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\a', '\xCC', '\x1291', '\n', '\xCC', '\f', '\xCC', '\xE', '\xCC', 
		'\x1294', '\v', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', 
		'\xCC', '\x1299', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\a', '\xCC', 
		'\x12A2', '\n', '\xCC', '\f', '\xCC', '\xE', '\xCC', '\x12A5', '\v', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\a', '\xCC', 
		'\x12AB', '\n', '\xCC', '\f', '\xCC', '\xE', '\xCC', '\x12AE', '\v', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x12B3', 
		'\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', 
		'\x12B8', '\n', '\xCC', '\a', '\xCC', '\x12BA', '\n', '\xCC', '\f', '\xCC', 
		'\xE', '\xCC', '\x12BD', '\v', '\xCC', '\x5', '\xCC', '\x12BF', '\n', 
		'\xCC', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\a', '\xCD', '\x12C9', 
		'\n', '\xCD', '\f', '\xCD', '\xE', '\xCD', '\x12CC', '\v', '\xCD', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x12D2', 
		'\n', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', 
		'\x12D7', '\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', 
		'\xD0', '\x12E6', '\n', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x12ED', '\n', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x5', '\xD0', '\x12F5', '\n', '\xD0', '\x3', '\xD0', '\x5', '\xD0', 
		'\x12F8', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', 
		'\xD1', '\x1302', '\n', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x5', '\xD2', '\x130C', '\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x5', '\xD3', '\x1316', '\n', '\xD3', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', 
		'\x3', '\xD5', '\x5', '\xD5', '\x1320', '\n', '\xD5', '\x3', '\xD6', '\x3', 
		'\xD6', '\x5', '\xD6', '\x1324', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x5', '\xD6', '\x1328', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x5', '\xD6', '\x1332', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD6', '\x5', '\xD6', '\x1337', '\n', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x5', 
		'\xD6', '\x1371', '\n', '\xD6', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\x1383', 
		'\n', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\x138B', '\n', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\a', '\xD9', '\x1395', '\n', '\xD9', 
		'\f', '\xD9', '\xE', '\xD9', '\x1398', '\v', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\x139E', '\n', '\xD9', 
		'\x5', '\xD9', '\x13A0', '\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\a', '\xD9', '\x13A8', 
		'\n', '\xD9', '\f', '\xD9', '\xE', '\xD9', '\x13AB', '\v', '\xD9', '\x5', 
		'\xD9', '\x13AD', '\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', 
		'\x3', '\xDA', '\a', '\xDA', '\x13B3', '\n', '\xDA', '\f', '\xDA', '\xE', 
		'\xDA', '\x13B6', '\v', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x5', '\xDB', '\x13BC', '\n', '\xDB', '\x3', '\xDC', '\x3', 
		'\xDC', '\x5', '\xDC', '\x13C0', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x13C7', 
		'\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', 
		'\x13CC', '\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x13CF', '\n', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x13D2', '\n', '\xDD', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x5', '\xDE', '\x13DB', '\n', '\xDE', '\x3', '\xDF', '\x3', 
		'\xDF', '\x5', '\xDF', '\x13DF', '\n', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\a', '\xE2', 
		'\x13FB', '\n', '\xE2', '\f', '\xE2', '\xE', '\xE2', '\x13FE', '\v', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', 
		'\x1404', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x1408', 
		'\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x5', '\xE2', '\x140F', '\n', '\xE2', '\x3', '\xE2', '\x5', 
		'\xE2', '\x1412', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\a', '\xE2', 
		'\x1420', '\n', '\xE2', '\f', '\xE2', '\xE', '\xE2', '\x1423', '\v', '\xE2', 
		'\x5', '\xE2', '\x1425', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x5', '\xE3', '\x142F', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x5', '\xE3', '\x1433', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x1439', '\n', '\xE3', '\x3', '\xE3', 
		'\x5', '\xE3', '\x143C', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x5', '\xE3', '\x1441', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x5', '\xE3', '\x1445', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x144C', '\n', '\xE3', 
		'\x3', '\xE3', '\x5', '\xE3', '\x144F', '\n', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x1455', '\n', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x146D', '\n', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x5', '\xE3', '\x147A', '\n', '\xE3', '\x3', '\xE3', '\x5', '\xE3', 
		'\x147D', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', 
		'\xE3', '\x1487', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x148F', 
		'\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x1493', '\n', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x5', '\xE3', '\x149A', '\n', '\xE3', '\x3', '\xE3', '\x5', '\xE3', 
		'\x149D', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\a', '\xE3', '\x14A4', '\n', '\xE3', '\f', '\xE3', 
		'\xE', '\xE3', '\x14A7', '\v', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x5', '\xE3', '\x14AC', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x14B2', '\n', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x14BC', '\n', '\xE3', 
		'\x5', '\xE3', '\x14BE', '\n', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x5', '\xE4', '\x14C4', '\n', '\xE4', '\x3', '\xE4', 
		'\x5', '\xE4', '\x14C7', '\n', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\x14CA', 
		'\n', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\x3', '\xE5', '\x5', '\xE5', '\x14D6', '\n', '\xE5', '\x3', '\xE5', '\x5', 
		'\xE5', '\x14D9', '\n', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x5', '\xE6', '\x14DF', '\n', '\xE6', '\x3', '\xE7', '\x5', 
		'\xE7', '\x14E2', '\n', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x14EA', 
		'\n', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x14F2', '\n', '\xE7', '\x3', 
		'\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x14F8', 
		'\n', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x14FC', '\n', 
		'\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', 
		'\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', 
		'\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x5', '\xE9', '\x150A', '\n', '\xE9', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\a', '\xEB', '\x1514', '\n', 
		'\xEB', '\f', '\xEB', '\xE', '\xEB', '\x1517', '\v', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\x151D', 
		'\n', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\x1520', '\n', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x5', 
		'\xEC', '\x1527', '\n', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', 
		'\a', '\xEC', '\x152C', '\n', '\xEC', '\f', '\xEC', '\xE', '\xEC', '\x152F', 
		'\v', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\x1533', '\n', 
		'\xED', '\x3', '\xED', '\x6', '\xED', '\x1536', '\n', '\xED', '\r', '\xED', 
		'\xE', '\xED', '\x1537', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', 
		'\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\a', '\xEE', 
		'\x1541', '\n', '\xEE', '\f', '\xEE', '\xE', '\xEE', '\x1544', '\v', '\xEE', 
		'\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xF0', 
		'\x3', '\xF0', '\x3', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\x154E', 
		'\n', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', 
		'\x5', '\xF1', '\x1554', '\n', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF2', '\x5', '\xF2', '\x1559', '\n', '\xF2', '\x3', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', 
		'\x1566', '\n', '\xF2', '\x5', '\xF2', '\x1568', '\n', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x156D', '\n', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1572', 
		'\n', '\xF2', '\x5', '\xF2', '\x1574', '\n', '\xF2', '\x3', '\xF3', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x157B', 
		'\n', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', 
		'\x3', '\xF4', '\x5', '\xF4', '\x1582', '\n', '\xF4', '\x3', '\xF4', '\x5', 
		'\xF4', '\x1585', '\n', '\xF4', '\x3', '\xF4', '\x5', '\xF4', '\x1588', 
		'\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', 
		'\x5', '\xF4', '\x158E', '\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x5', 
		'\xF4', '\x1592', '\n', '\xF4', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x5', '\xF5', '\x1598', '\n', '\xF5', '\x3', '\xF6', '\x3', 
		'\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\x159E', '\n', '\xF6', 
		'\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x5', '\xF9', '\x15AB', '\n', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x5', '\xF9', '\x15B0', '\n', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\a', '\xF9', '\x15B6', '\n', 
		'\xF9', '\f', '\xF9', '\xE', '\xF9', '\x15B9', '\v', '\xF9', '\x5', '\xF9', 
		'\x15BB', '\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', 
		'\xFA', '\x15C0', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x5', '\xFA', '\x15C5', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\a', '\xFA', '\x15CB', '\n', '\xFA', '\f', '\xFA', 
		'\xE', '\xFA', '\x15CE', '\v', '\xFA', '\x5', '\xFA', '\x15D0', '\n', 
		'\xFA', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x15D8', '\n', '\xFB', '\x3', '\xFC', 
		'\x3', '\xFC', '\x5', '\xFC', '\x15DC', '\n', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\a', '\xFC', '\x15E7', '\n', '\xFC', 
		'\f', '\xFC', '\xE', '\xFC', '\x15EA', '\v', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x5', '\xFC', '\x15EF', '\n', '\xFC', '\x3', '\xFC', 
		'\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', 
		'\x3', '\xFC', '\x3', '\xFC', '\a', '\xFC', '\x15F9', '\n', '\xFC', '\f', 
		'\xFC', '\xE', '\xFC', '\x15FC', '\v', '\xFC', '\x5', '\xFC', '\x15FE', 
		'\n', '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFE', '\x3', '\xFE', 
		'\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x1607', 
		'\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', 
		'\x160C', '\n', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x5', '\xFF', '\x1612', '\n', '\xFF', '\x3', '\x100', '\x3', 
		'\x100', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', '\x101', 
		'\x1619', '\n', '\x101', '\x5', '\x101', '\x161B', '\n', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x101', '\x5', '\x101', '\x1620', '\n', 
		'\x101', '\x5', '\x101', '\x1622', '\n', '\x101', '\x3', '\x102', '\x3', 
		'\x102', '\x5', '\x102', '\x1626', '\n', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', '\x162C', '\n', 
		'\x102', '\x3', '\x102', '\x5', '\x102', '\x162F', '\n', '\x102', '\x3', 
		'\x102', '\x5', '\x102', '\x1632', '\n', '\x102', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x104', '\x3', '\x104', '\x3', '\x105', '\x3', '\x105', 
		'\x3', '\x105', '\x3', '\x105', '\x5', '\x105', '\x163C', '\n', '\x105', 
		'\x3', '\x106', '\x3', '\x106', '\x5', '\x106', '\x1640', '\n', '\x106', 
		'\x3', '\x107', '\x3', '\x107', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x6', '\x108', '\x1652', '\n', 
		'\x108', '\r', '\x108', '\xE', '\x108', '\x1653', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x5', '\x109', 
		'\x165B', '\n', '\x109', '\x5', '\x109', '\x165D', '\n', '\x109', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x6', '\x10A', '\x1662', '\n', 
		'\x10A', '\r', '\x10A', '\xE', '\x10A', '\x1663', '\x5', '\x10A', '\x1666', 
		'\n', '\x10A', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x166A', 
		'\n', '\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', 
		'\x10C', '\x166F', '\n', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x5', '\x10D', '\x167A', '\n', '\x10D', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', '\x10E', '\x167F', 
		'\n', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x110', '\x3', 
		'\x110', '\x5', '\x110', '\x1685', '\n', '\x110', '\x3', '\x111', '\x5', 
		'\x111', '\x1688', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', 
		'\x111', '\x168C', '\n', '\x111', '\x3', '\x111', '\x6', '\x111', '\x168F', 
		'\n', '\x111', '\r', '\x111', '\xE', '\x111', '\x1690', '\x3', '\x111', 
		'\x5', '\x111', '\x1694', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', 
		'\x5', '\x111', '\x1698', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', 
		'\x5', '\x111', '\x169C', '\n', '\x111', '\x5', '\x111', '\x169E', '\n', 
		'\x111', '\x3', '\x112', '\x3', '\x112', '\x3', '\x113', '\x5', '\x113', 
		'\x16A3', '\n', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x114', 
		'\x5', '\x114', '\x16A8', '\n', '\x114', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', 
		'\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', 
		'\x5', '\x115', '\x16B5', '\n', '\x115', '\x3', '\x115', '\x5', '\x115', 
		'\x16B8', '\n', '\x115', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x16BC', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16BF', '\n', 
		'\x116', '\x3', '\x116', '\x5', '\x116', '\x16C2', '\n', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16C7', '\n', 
		'\x116', '\x3', '\x116', '\x5', '\x116', '\x16CA', '\n', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16CF', '\n', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x16D4', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16D7', '\n', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x16DC', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16DF', '\n', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', 
		'\x5', '\x116', '\x16E5', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x16E8', '\n', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x16EC', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x16EF', '\n', 
		'\x116', '\x3', '\x116', '\x5', '\x116', '\x16F2', '\n', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x5', '\x116', '\x16F6', '\n', '\x116', '\x3', 
		'\x116', '\x5', '\x116', '\x16F9', '\n', '\x116', '\x3', '\x116', '\x5', 
		'\x116', '\x16FC', '\n', '\x116', '\x3', '\x116', '\x3', '\x116', '\x5', 
		'\x116', '\x1700', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1703', 
		'\n', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1706', '\n', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x1709', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x170D', '\n', '\x116', '\x3', '\x116', 
		'\x5', '\x116', '\x1710', '\n', '\x116', '\x3', '\x116', '\x5', '\x116', 
		'\x1713', '\n', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', 
		'\x5', '\x116', '\x1718', '\n', '\x116', '\x3', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x171D', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1722', '\n', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x1725', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x172A', '\n', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x172D', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1732', '\n', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x1735', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x1739', '\n', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x5', '\x116', '\x173D', '\n', '\x116', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\a', '\x117', '\x1743', 
		'\n', '\x117', '\f', '\x117', '\xE', '\x117', '\x1746', '\v', '\x117', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x118', '\x3', '\x118', '\x5', 
		'\x118', '\x174C', '\n', '\x118', '\x3', '\x118', '\x3', '\x118', '\x5', 
		'\x118', '\x1750', '\n', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x5', '\x118', '\x1755', '\n', '\x118', '\x3', '\x118', '\x5', 
		'\x118', '\x1758', '\n', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x5', '\x118', '\x175D', '\n', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x5', '\x118', '\x1761', '\n', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x5', '\x118', '\x1765', '\n', '\x118', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x5', '\x11B', 
		'\x1775', '\n', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\a', '\x11C', '\x177C', '\n', '\x11C', 
		'\f', '\x11C', '\xE', '\x11C', '\x177F', '\v', '\x11C', '\x3', '\x11D', 
		'\x3', '\x11D', '\x3', '\x11D', '\a', '\x11D', '\x1784', '\n', '\x11D', 
		'\f', '\x11D', '\xE', '\x11D', '\x1787', '\v', '\x11D', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\a', '\x11E', '\x178D', 
		'\n', '\x11E', '\f', '\x11E', '\xE', '\x11E', '\x1790', '\v', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11F', '\x3', '\x11F', '\x3', 
		'\x11F', '\a', '\x11F', '\x1797', '\n', '\x11F', '\f', '\x11F', '\xE', 
		'\x11F', '\x179A', '\v', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\a', '\x120', '\x179F', '\n', '\x120', '\f', '\x120', '\xE', 
		'\x120', '\x17A2', '\v', '\x120', '\x3', '\x121', '\x3', '\x121', '\x3', 
		'\x121', '\a', '\x121', '\x17A7', '\n', '\x121', '\f', '\x121', '\xE', 
		'\x121', '\x17AA', '\v', '\x121', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\a', '\x122', '\x17AF', '\n', '\x122', '\f', '\x122', '\xE', 
		'\x122', '\x17B2', '\v', '\x122', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\a', '\x123', '\x17B7', '\n', '\x123', '\f', '\x123', '\xE', 
		'\x123', '\x17BA', '\v', '\x123', '\x3', '\x124', '\x3', '\x124', '\x5', 
		'\x124', '\x17BE', '\n', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', 
		'\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', 
		'\x17C6', '\n', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', 
		'\x5', '\x124', '\x17CB', '\n', '\x124', '\x3', '\x125', '\x3', '\x125', 
		'\x3', '\x125', '\x5', '\x125', '\x17D0', '\n', '\x125', '\x3', '\x125', 
		'\x5', '\x125', '\x17D3', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', 
		'\x3', '\x125', '\x5', '\x125', '\x17D8', '\n', '\x125', '\x3', '\x125', 
		'\x5', '\x125', '\x17DB', '\n', '\x125', '\x3', '\x126', '\x3', '\x126', 
		'\x5', '\x126', '\x17DF', '\n', '\x126', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x17EE', '\n', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x5', '\x129', '\x17F5', '\n', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x5', '\x129', '\x17FA', '\n', '\x129', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x17FF', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x6', '\x12A', '\x181E', '\n', 
		'\x12A', '\r', '\x12A', '\xE', '\x12A', '\x181F', '\x3', '\x12A', '\x3', 
		'\x12A', '\x5', '\x12A', '\x1824', '\n', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x6', '\x12A', '\x182A', '\n', 
		'\x12A', '\r', '\x12A', '\xE', '\x12A', '\x182B', '\x3', '\x12A', '\x3', 
		'\x12A', '\x5', '\x12A', '\x1830', '\n', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x5', '\x12A', '\x1839', '\n', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x5', '\x12A', '\x1841', '\n', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1846', '\n', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x5', '\x12A', '\x184E', '\n', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1853', '\n', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1858', 
		'\n', '\x12A', '\x5', '\x12A', '\x185A', '\n', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1863', '\n', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1868', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1870', '\n', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1875', 
		'\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x187D', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1885', '\n', '\x12A', 
		'\x3', '\x12A', '\x5', '\x12A', '\x1888', '\n', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x1892', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x18A4', 
		'\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x5', '\x12A', '\x18AA', '\n', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x5', '\x12A', '\x18AE', '\n', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x18B4', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x18B8', '\n', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x18BC', '\n', 
		'\x12A', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\a', '\x12C', '\x18C7', '\n', '\x12C', '\f', '\x12C', '\xE', 
		'\x12C', '\x18CA', '\v', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x5', '\x12C', '\x18D1', '\n', 
		'\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x18D5', '\n', 
		'\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', 
		'\x18DA', '\n', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', 
		'\x5', '\x12E', '\x18DF', '\n', '\x12E', '\x3', '\x12E', '\x3', '\x12E', 
		'\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x18E5', '\n', '\x12E', 
		'\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x18EA', 
		'\n', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x18EE', 
		'\n', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', 
		'\x12E', '\x18F3', '\n', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x5', '\x12E', '\x18F8', '\n', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x18FD', '\n', '\x12E', '\x3', 
		'\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', 
		'\x3', '\x12E', '\a', '\x12E', '\x1905', '\n', '\x12E', '\f', '\x12E', 
		'\xE', '\x12E', '\x1908', '\v', '\x12E', '\x5', '\x12E', '\x190A', '\n', 
		'\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x190E', '\n', 
		'\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x1912', '\n', 
		'\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x5', '\x12F', '\x1919', '\n', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x5', '\x12F', '\x191D', '\n', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', 
		'\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', 
		'\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', 
		'\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x5', '\x12F', 
		'\x193A', '\n', '\x12F', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x5', '\x130', '\x193F', '\n', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x5', '\x130', '\x1943', '\n', '\x130', '\x3', '\x131', '\x5', '\x131', 
		'\x1946', '\n', '\x131', '\x3', '\x131', '\x5', '\x131', '\x1949', '\n', 
		'\x131', '\x3', '\x131', '\x5', '\x131', '\x194C', '\n', '\x131', '\x3', 
		'\x131', '\x5', '\x131', '\x194F', '\n', '\x131', '\x3', '\x132', '\x3', 
		'\x132', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x195A', 
		'\n', '\x135', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x5', 
		'\x137', '\x1968', '\n', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', 
		'\x138', '\x3', '\x138', '\x3', '\x138', '\a', '\x138', '\x196F', '\n', 
		'\x138', '\f', '\x138', '\xE', '\x138', '\x1972', '\v', '\x138', '\x3', 
		'\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', 
		'\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', 
		'\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', 
		'\x5', '\x139', '\x198B', '\n', '\x139', '\x3', '\x13A', '\x3', '\x13A', 
		'\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', '\x1996', '\n', 
		'\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13B', '\x5', '\x13B', '\x199D', '\n', '\x13B', '\a', '\x13B', 
		'\x199F', '\n', '\x13B', '\f', '\x13B', '\xE', '\x13B', '\x19A2', '\v', 
		'\x13B', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', 
		'\x5', '\x13C', '\x19A8', '\n', '\x13C', '\x3', '\x13D', '\x3', '\x13D', 
		'\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x5', 
		'\x13D', '\x19B0', '\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x5', '\x13D', '\x19B5', '\n', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x3', '\x13D', '\a', '\x13D', '\x19BB', '\n', 
		'\x13D', '\f', '\x13D', '\xE', '\x13D', '\x19BE', '\v', '\x13D', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x19C3', '\n', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', 
		'\x13E', '\x19CD', '\n', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', 
		'\x13E', '\x19DA', '\n', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x19E0', '\n', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', 
		'\x19E6', '\n', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x19F6', '\n', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', 
		'\x13E', '\x19FC', '\n', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\a', '\x13E', '\x1A05', '\n', '\x13E', '\f', '\x13E', '\xE', '\x13E', 
		'\x1A08', '\v', '\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\a', '\x13F', '\x1A18', '\n', '\x13F', 
		'\f', '\x13F', '\xE', '\x13F', '\x1A1B', '\v', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x6', '\x13F', '\x1A24', '\n', '\x13F', '\r', 
		'\x13F', '\xE', '\x13F', '\x1A25', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', 
		'\x1A37', '\n', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\a', '\x13F', '\x1A48', 
		'\n', '\x13F', '\f', '\x13F', '\xE', '\x13F', '\x1A4B', '\v', '\x13F', 
		'\x3', '\x140', '\x3', '\x140', '\x3', '\x141', '\x3', '\x141', '\x3', 
		'\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', 
		'\x141', '\x3', '\x141', '\x3', '\x141', '\x5', '\x141', '\x1A5D', '\n', 
		'\x141', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x5', '\x142', '\x1A66', 
		'\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x5', '\x143', 
		'\x1A6F', '\n', '\x143', '\x3', '\x144', '\x3', '\x144', '\x3', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x5', 
		'\x145', '\x1A78', '\n', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x147', '\x3', '\x147', '\x3', '\x148', '\x3', '\x148', '\x3', '\x149', 
		'\x3', '\x149', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x2', '\x5', 
		'\x278', '\x27A', '\x27C', '\x14D', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', 
		'\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', 
		'\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', 
		'\x292', '\x294', '\x296', '\x2', '\x88', '\x4', '\x2', '\'', '\'', '\x90', 
		'\x90', '\x4', '\x2', '\x1F9', '\x1F9', '\x1FF', '\x1FF', '\x5', '\x2', 
		'\x44', '\x44', '\x97', '\x97', '\xAC', '\xAC', '\x5', '\x2', '*', '*', 
		'\x173', '\x173', '\x1B3', '\x1B3', '\x6', '\x2', '*', '*', '\x193', '\x193', 
		'\x1F7', '\x1F7', '\x241', '\x241', '\x4', '\x2', '\x1EE', '\x1EE', '\x44C', 
		'\x44C', '\x4', '\x2', 'M', 'M', '\x87', '\x87', '\x4', '\x2', '\x10', 
		'\x10', '\x142', '\x142', '\x5', '\x2', ',', ',', 'S', 'S', '\xAF', '\xAF', 
		'\x4', '\x2', '\x1A1', '\x1A1', '\x211', '\x211', '\x5', '\x2', '\x1E6', 
		'\x1E6', '\x268', '\x268', '\x270', '\x270', '\x4', '\x2', '\x17A', '\x17A', 
		'\x1B8', '\x1B8', '\x4', '\x2', '\x154', '\x154', '\x1C6', '\x1C6', '\x4', 
		'\x2', '\x152', '\x152', '\x1AA', '\x1AA', '\x5', '\x2', 'N', 'N', 'R', 
		'R', 'w', 'w', '\x5', '\x2', '*', '*', '\x184', '\x184', '\x19E', '\x19E', 
		'\x5', '\x2', '*', '*', '\x180', '\x180', '\x2EC', '\x2EC', '\x4', '\x2', 
		'\x25B', '\x25B', '\x27E', '\x27E', '\x4', '\x2', 'O', 'O', 'Y', 'Y', 
		'\x5', '\x2', '\x1A3', '\x1A3', '\x208', '\x208', '\x243', '\x243', '\x4', 
		'\x2', '\x44', '\x44', '\x97', '\x97', '\x3', '\x2', '\x158', '\x159', 
		'\x3', '\x2', '\x442', '\x443', '\x4', '\x2', '\x44C', '\x44C', '\x454', 
		'\x454', '\x5', '\x2', '\x19D', '\x19D', '\x1C1', '\x1C1', '\x1F5', '\x1F5', 
		'\x4', '\x2', '*', '*', '\x442', '\x443', '\t', '\x2', '*', '*', '\x165', 
		'\x165', '\x167', '\x167', '\x184', '\x184', '\x19E', '\x19E', '\x21F', 
		'\x21F', '\x454', '\x454', '\x4', '\x2', '\x1EE', '\x1EE', '\x1F8', '\x1F8', 
		'\x3', '\x2', '\x443', '\x444', '\x4', '\x2', '\a', '\a', '\x33', '\x33', 
		'\x4', '\x2', '\x1B', '\x1B', '\x1F', '\x1F', '\x4', '\x2', '\x1B7', '\x1B7', 
		'\x27F', '\x27F', '\x4', '\x2', '\xE', '\xE', '\xA6', '\xA6', '\x4', '\x2', 
		'\xB7', '\xB7', '\x283', '\x283', '\x4', '\x2', '\x16', '\x16', '\x8A', 
		'\x8A', '\x5', '\x2', '+', '+', 'J', 'J', '\x66', '\x66', '\x4', '\x2', 
		'\x66', '\x66', '\x169', '\x169', '\x4', '\x2', '\x160', '\x160', '\x19A', 
		'\x19A', '\x4', '\x2', '\x62', '\x62', '\x239', '\x239', '\x4', '\x2', 
		'+', '+', '\x66', '\x66', '\x4', '\x2', '\b', '\b', '\x31', '\x31', '\x4', 
		'\x2', '\xB3', '\xB3', '\x27B', '\x27B', '\x6', '\x2', '\x19D', '\x19D', 
		'\x1C1', '\x1C1', '\x1F4', '\x1F4', '\x215', '\x215', '\x4', '\x2', '\x19D', 
		'\x19D', '\x1F4', '\x1F4', '\x4', '\x2', '\xF', '\xF', '-', '-', '\x5', 
		'\x2', '\x41', '\x41', 'M', 'M', '\xB1', '\xB1', '\x4', '\x2', '#', '#', 
		'Q', 'Q', '\x4', '\x2', '^', '^', '\x8E', '\x8E', '\x4', '\x2', '\b', 
		'\b', '\x31', '\x32', '\x3', '\x2', '\x250', '\x251', '\x4', '\x2', '\x1A6', 
		'\x1A6', '\x23F', '\x23F', '\x4', '\x2', '\xD9', '\xD9', '\x1C9', '\x1C9', 
		'\a', '\x2', 'g', 'g', '\x1CE', '\x1CF', '\x1D1', '\x1D1', '\x1D5', '\x1DD', 
		'\x221', '\x221', '\x6', '\x2', '\x1CB', '\x1CC', '\x1D0', '\x1D0', '\x1D2', 
		'\x1D3', '\x222', '\x222', '\x5', '\x2', 'h', 'h', '\x1CA', '\x1CA', '\x1D4', 
		'\x1D4', '\x4', '\x2', '\x1BA', '\x1BA', '\x252', '\x252', '\x4', '\x2', 
		'\x24C', '\x24C', '\x24E', '\x24E', '\x4', '\x2', '\x14C', '\x14C', '\x253', 
		'\x253', '\x4', '\x2', 'X', 'X', '\x230', '\x230', '\x4', '\x2', '\x33', 
		'\x33', '\x178', '\x178', '\x5', '\x2', ' ', ' ', '<', '<', '\xAA', '\xAA', 
		'\x5', '\x2', '}', '}', '\xA3', '\xA3', '\x1A4', '\x1A4', '\x4', '\x2', 
		'\x64', '\x64', '\xAD', '\xAD', '\x4', '\x2', '\x15C', '\x15C', '\x244', 
		'\x244', '\x4', '\x2', '(', '(', '\x27D', '\x27D', '\x4', '\x2', 'n', 
		'n', '\x1C6', '\x1C6', '\x4', '\x2', '\x196', '\x196', '\x21B', '\x21B', 
		'\x4', '\x2', '\xA3', '\xA3', '\x296', '\x296', '\x6', '\x2', '\xC5', 
		'\xC5', '\xC7', '\xC7', '\xCD', '\xCD', '\x25C', '\x25C', '\x4', '\x2', 
		'\x424', '\x424', '\x434', '\x434', '\x4', '\x2', '\x14D', '\x14D', '\x223', 
		'\x223', '\x4', '\x2', '\x43', '\x43', 'N', 'N', '\b', '\x2', '}', '}', 
		'\xA3', '\xA3', '\xA8', '\xA8', '\x18F', '\x18F', '\x1A4', '\x1A4', '\x27D', 
		'\x27D', '\x4', '\x2', '\x1ED', '\x1ED', '\x258', '\x258', '\x4', '\x2', 
		'\x18C', '\x18C', '\x281', '\x281', '\x4', '\x2', '}', '}', '\x1A4', '\x1A4', 
		'\x5', '\x2', 'O', 'O', 'Z', 'Z', '\x1B1', '\x1B1', '\x5', '\x2', '\x1A6', 
		'\x1A6', '\x1C6', '\x1C6', '\x23F', '\x23F', '\x4', '\x2', '\x258', '\x258', 
		'\x27C', '\x27C', '\x4', '\x2', '\x16B', '\x16B', '\x21A', '\x21A', '\b', 
		'\x2', '\xD9', '\xD9', '\x189', '\x189', '\x18B', '\x18B', '\x1A5', '\x1A5', 
		'\x220', '\x220', '\x245', '\x245', '\x4', '\x2', '-', '.', '=', '=', 
		'\x5', '\x2', '\x196', '\x196', '\x20A', '\x20A', '\x348', '\x348', '\x4', 
		'\x2', '\x1BE', '\x1BE', '\x26A', '\x26A', '\f', '\x2', '\x15B', '\x15B', 
		'\x162', '\x162', '\x16D', '\x16F', '\x175', '\x175', '\x1E7', '\x1E7', 
		'\x1EF', '\x1EF', '\x25D', '\x25D', '\x264', '\x264', '\x318', '\x318', 
		'\x3BE', '\x3BE', '\x4', '\x2', '$', '$', '\xA0', '\xA0', '\x4', '\x2', 
		'p', 'p', '\x3B6', '\x3B6', '\r', '\x2', '\x15B', '\x15B', '\x162', '\x162', 
		'\x16D', '\x16F', '\x175', '\x175', '\x1E7', '\x1E7', '\x1EF', '\x1EF', 
		'\x231', '\x231', '\x25D', '\x25D', '\x264', '\x264', '\x318', '\x318', 
		'\x3BE', '\x3BE', '\x5', '\x2', '\x44C', '\x44C', '\x454', '\x454', '\x456', 
		'\x456', '\x3', '\x2', '\x458', '\x459', '\x6', '\x2', '\x16A', '\x16A', 
		'\x2E7', '\x2F2', '\x44C', '\x44C', '\x454', '\x455', '\x5', '\x2', '\x442', 
		'\x444', '\x44D', '\x44D', '\x44F', '\x44F', '\x4', '\x2', '>', '>', '\xA9', 
		'\xA9', '\x4', '\x2', 'o', 'o', '\x450', '\x450', '\a', '\x2', '\x1A', 
		'\x1A', '\xD5', '\xD7', '\xDE', '\xDE', '\xE0', '\xE3', '\x1F2', '\x1F2', 
		'\x4', '\x2', '\x1A', '\x1A', '\xD6', '\xD6', '\x4', '\x2', '\x1A', '\x1A', 
		'\xD5', '\xD5', '\x3', '\x2', '\xBB', '\xC6', '\x4', '\x2', '\xAE', '\xAE', 
		'\x242', '\x242', '\x4', '\x2', '\xCA', '\xCF', '\x19E', '\x19E', '\b', 
		'\x2', '\xD0', '\xD0', '\xDB', '\xDB', '\xDD', '\xDD', '\xDF', '\xDF', 
		'\xE6', '\xE6', '\x150', '\x151', '\x6', '\x2', '\xD1', '\xD4', '\xD9', 
		'\xDA', '\xDC', '\xDC', '\x14E', '\x14E', '\x4', '\x2', '\x93', '\x93', 
		'\xE4', '\xE4', '\x4', '\x2', '\x1BE', '\x1BE', '\x2F7', '\x2FF', '\x4', 
		'\x2', '\xD9', '\xD9', '\x1F2', '\x1F2', '\x5', '\x2', '\xD0', '\xD1', 
		'\xD3', '\xD3', '\x1BE', '\x1BE', '\x4', '\x2', '\x12F', '\x130', '\x136', 
		'\x136', '\x4', '\x2', '%', '%', '\x12D', '\x130', '\x3', '\x2', '\x139', 
		'\x13A', '\x5', '\x2', '\x12', '\x12', '\\', '\\', '\xA7', '\xA7', '\x4', 
		'\x2', '\xD5', '\xD5', '\xD9', '\xD9', '\x4', '\x2', '\xD0', '\xD1', '\xD3', 
		'\xD3', '\x5', '\x2', '\xF', '\xF', '-', '-', '\x3B4', '\x3B4', '\x5', 
		'\x2', '\x112', '\x112', '\x11E', '\x11F', '\x129', '\x129', '\x5', '\x2', 
		'\x113', '\x115', '\x125', '\x128', '\x12A', '\x12C', '\x4', '\x2', '\x11B', 
		'\x11B', '\x11D', '\x11D', '\x4', '\x2', '\x119', '\x119', '\x11C', '\x11C', 
		'\x4', '\x2', '\x117', '\x118', '\x122', '\x124', '\x4', '\x2', '\x7F', 
		'\x7F', '\x239', '\x239', '\x4', '\x2', '\x1A0', '\x1A0', '\x212', '\x212', 
		'\x4', '\x2', '\x1FD', '\x1FD', '\x20B', '\x20B', '\x4', '\x2', 'm', 'm', 
		'\x437', '\x437', '\x5', '\x2', '>', '>', '\xA9', '\xA9', '\x274', '\x274', 
		'\x4', '\x2', '\x83', '\x83', '\x8F', '\x8F', '\x5', '\x2', '\b', '\b', 
		'\x145', '\x145', '\x248', '\x248', '\x5', '\x2', 'm', 'm', '\x430', '\x431', 
		'\x437', '\x438', '\x3', '\x2', '\x42D', '\x433', '\x3', '\x2', '\x2BF', 
		'\x2E6', '\x3', '\x2', '\x2F3', '\x2F6', '\x3', '\x2', '\x296', '\x29E', 
		'\x3', '\x2', '\x28E', '\x295', '\x5', '\x2', '\xD0', '\xD4', '\xE1', 
		'\xE1', '\xE4', '\xE4', ' ', '\x2', '$', '$', '\x30', '\x30', ':', ':', 
		'H', 'H', 'p', 'p', 'v', 'v', '\xA0', '\xA0', '\xE6', '\xE6', '\x112', 
		'\x116', '\x11A', '\x11A', '\x11E', '\x11F', '\x125', '\x12C', '\x140', 
		'\x19F', '\x1A1', '\x1B6', '\x1B8', '\x211', '\x213', '\x231', '\x233', 
		'\x25A', '\x25C', '\x265', '\x267', '\x26E', '\x270', '\x27D', '\x280', 
		'\x281', '\x283', '\x28D', '\x2A0', '\x2A8', '\x2AD', '\x2AE', '\x2B0', 
		'\x2B6', '\x2B8', '\x2BE', '\x2EC', '\x2EC', '\x318', '\x318', '\x3BE', 
		'\x3BE', '\x45C', '\x45C', '\x14', '\x2', '\'', '\'', '^', '^', '\x8E', 
		'\x8E', '\x90', '\x90', '\xD0', '\xD2', '\xD4', '\xD4', '\xF2', '\x111', 
		'\x116', '\x116', '\x138', '\x138', '\x1B7', '\x1B7', '\x27F', '\x27F', 
		'\x28E', '\x295', '\x2B8', '\x2B8', '\x2F7', '\x2F7', '\x2FA', '\x317', 
		'\x319', '\x3BD', '\x3BF', '\x423', '\x433', '\x433', '\x2', '\x1F32', 
		'\x2', '\x299', '\x3', '\x2', '\x2', '\x2', '\x4', '\x2AC', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\b', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x310', '\x3', '\x2', '\x2', '\x2', '\x12', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x18', '\x345', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x347', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x371', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x395', '\x3', '\x2', '\x2', '\x2', '\"', '\x3C8', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x3E2', '\x3', '\x2', '\x2', '\x2', '&', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x461', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x463', '\x3', '\x2', '\x2', '\x2', ',', '\x475', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x30', '\x4C5', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x502', '\x3', '\x2', '\x2', '\x2', '\x36', '\x52E', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x534', '\x3', '\x2', '\x2', '\x2', ':', '\x536', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x54B', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x552', '\x3', '\x2', '\x2', '\x2', '@', '\x554', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x564', '\x3', '\x2', '\x2', '\x2', '\x44', '\x567', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x56C', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x586', '\x3', '\x2', '\x2', '\x2', 'J', '\x596', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x598', '\x3', '\x2', '\x2', '\x2', 'N', '\x5A8', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x5AA', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x5E6', '\x3', '\x2', '\x2', '\x2', 'T', '\x62D', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x62F', '\x3', '\x2', '\x2', '\x2', 'X', '\x64B', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x653', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x671', '\x3', '\x2', '\x2', '\x2', '^', '\x708', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x62', '\x70C', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x70F', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x759', '\x3', '\x2', '\x2', '\x2', 'h', '\x770', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x804', '\x3', '\x2', '\x2', '\x2', 'l', '\x809', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x80B', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x815', '\x3', '\x2', '\x2', '\x2', 'r', '\x84D', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x861', '\x3', '\x2', '\x2', '\x2', 'v', '\x863', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x886', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x88F', '\x3', '\x2', '\x2', '\x2', '|', '\x896', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x8AD', '\x3', '\x2', '\x2', '\x2', '\x80', '\x8B6', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x8C5', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x8DB', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8EF', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\xA7D', '\x3', '\x2', '\x2', '\x2', '\x8A', '\xA7F', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\xA86', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\xA8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\xAA4', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\xAAC', '\x3', '\x2', '\x2', '\x2', '\x94', '\xAB3', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\xABA', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xACD', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\xAD7', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xADE', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xAEE', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xAF8', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xAFC', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xB0E', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xB10', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xB17', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB19', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB4C', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB96', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xBD1', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xC29', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xC2D', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xC41', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC43', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xC4B', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC53', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC55', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC73', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xCAA', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB3', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD3', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCD7', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCF8', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0D', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD1B', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD34', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD5E', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xD60', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xD6F', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD9D', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xDA7', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xDB1', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xDED', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xDEF', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE09', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xE0F', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xE1F', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xE23', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xE6F', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xE7D', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xE85', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xE87', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xE8D', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xE9B', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\x102', '\xEB0', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\xEB4', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xEC4', '\x3', '\x2', '\x2', '\x2', '\x108', '\xEC6', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\xED2', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\xED6', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xEE7', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\xEF8', '\x3', '\x2', '\x2', '\x2', '\x112', '\xEFB', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\xF05', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\xF09', '\x3', '\x2', '\x2', '\x2', '\x118', '\xF13', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\xF16', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\xF1B', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xF2F', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\xF31', '\x3', '\x2', '\x2', '\x2', '\x122', '\xF42', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\xF4B', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\xF54', '\x3', '\x2', '\x2', '\x2', '\x128', '\xF56', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\xF64', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\xF6F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\xF78', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\xF7B', '\x3', '\x2', '\x2', '\x2', '\x132', '\xF83', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\xF9C', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\xFA8', '\x3', '\x2', '\x2', '\x2', '\x138', '\xFAB', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\xFCB', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\xFCD', '\x3', '\x2', '\x2', '\x2', '\x13E', '\xFCF', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\xFD1', '\x3', '\x2', '\x2', '\x2', '\x142', '\xFD3', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x1008', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x100A', '\x3', '\x2', '\x2', '\x2', '\x148', '\x1010', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x1024', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x1032', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x103D', '\x3', '\x2', 
		'\x2', '\x2', '\x150', '\x103F', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x1045', '\x3', '\x2', '\x2', '\x2', '\x154', '\x104F', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x1053', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x105A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x105E', '\x3', '\x2', 
		'\x2', '\x2', '\x15C', '\x1064', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x106B', '\x3', '\x2', '\x2', '\x2', '\x160', '\x1071', '\x3', '\x2', 
		'\x2', '\x2', '\x162', '\x1077', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x107C', '\x3', '\x2', '\x2', '\x2', '\x166', '\x10AB', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x10C0', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x10D9', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x10DC', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x10E2', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x10F2', '\x3', '\x2', '\x2', '\x2', '\x172', '\x1101', '\x3', '\x2', 
		'\x2', '\x2', '\x174', '\x1107', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x1125', '\x3', '\x2', '\x2', '\x2', '\x178', '\x1127', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x112E', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x113A', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x1140', '\x3', '\x2', 
		'\x2', '\x2', '\x180', '\x1159', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x115D', '\x3', '\x2', '\x2', '\x2', '\x184', '\x1161', '\x3', '\x2', 
		'\x2', '\x2', '\x186', '\x116C', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x11AA', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x11E2', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x11E4', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x1248', '\x3', '\x2', '\x2', '\x2', '\x190', '\x1260', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x1262', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x1274', '\x3', '\x2', '\x2', '\x2', '\x196', '\x12BE', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x12C0', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x12CD', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x12D8', '\x3', '\x2', 
		'\x2', '\x2', '\x19E', '\x12F7', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1301', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x130B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x130D', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1317', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x131A', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA', '\x1370', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1382', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1384', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x13AE', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x13B7', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x13BD', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x13C4', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x13DA', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x13DC', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x13E7', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x13ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1424', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x14BD', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x14C9', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x14D8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x14DE', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x14F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE', '\x14FB', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1509', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x150B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x150E', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1524', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1530', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA', '\x1539', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1545', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1549', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1573', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x157A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6', '\x157C', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1593', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1599', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x15A1', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x15A4', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x15A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x15BC', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x15D1', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x15D9', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x15FF', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x160B', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x160D', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x1613', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1621', '\x3', '\x2', '\x2', '\x2', '\x202', '\x162E', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x1633', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x1635', '\x3', '\x2', '\x2', '\x2', '\x208', '\x163B', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x163F', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x1641', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x1643', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x1655', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x1665', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1669', '\x3', '\x2', 
		'\x2', '\x2', '\x216', '\x166E', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x1679', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x167E', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x1680', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x1684', '\x3', '\x2', '\x2', '\x2', '\x220', '\x169D', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x169F', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x16A2', '\x3', '\x2', '\x2', '\x2', '\x226', '\x16A7', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x16B7', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x173C', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x173E', '\x3', '\x2', 
		'\x2', '\x2', '\x22E', '\x1764', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x1766', '\x3', '\x2', '\x2', '\x2', '\x232', '\x176A', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x1770', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x1778', '\x3', '\x2', '\x2', '\x2', '\x238', '\x1780', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x1788', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x1793', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x179B', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x17A3', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x17AB', '\x3', '\x2', '\x2', '\x2', '\x244', '\x17B3', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x17C5', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x17DA', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x17DE', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x17E0', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x17E3', '\x3', '\x2', '\x2', '\x2', '\x250', '\x17F9', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x18BB', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x18BD', '\x3', '\x2', '\x2', '\x2', '\x256', '\x18D0', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x18D2', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x1911', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x1939', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x193B', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x1945', '\x3', '\x2', '\x2', '\x2', '\x262', '\x1950', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x1952', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x1955', '\x3', '\x2', '\x2', '\x2', '\x268', '\x1959', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x195B', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x1967', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x1969', '\x3', '\x2', 
		'\x2', '\x2', '\x270', '\x198A', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x198C', '\x3', '\x2', '\x2', '\x2', '\x274', '\x1995', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x19A7', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x19B4', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x19BF', '\x3', '\x2', 
		'\x2', '\x2', '\x27C', '\x1A36', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x1A4C', '\x3', '\x2', '\x2', '\x2', '\x280', '\x1A5C', '\x3', '\x2', 
		'\x2', '\x2', '\x282', '\x1A65', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x1A6E', '\x3', '\x2', '\x2', '\x2', '\x286', '\x1A70', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x1A77', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x1A79', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x1A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x28E', '\x1A7D', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x292', '\x1A81', '\x3', '\x2', 
		'\x2', '\x2', '\x294', '\x1A83', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x1A85', '\x3', '\x2', '\x2', '\x2', '\x298', '\x29A', '\x5', '\x4', 
		'\x3', '\x2', '\x299', '\x298', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\x29B', '\x29C', '\a', '\x431', '\x2', '\x2', '\x29C', '\x29E', '\a', 
		'\x431', '\x2', '\x2', '\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x2A0', '\a', '\x2', '\x2', '\x3', '\x2A0', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A4', '\x5', '\x6', '\x4', '\x2', '\x2A2', 
		'\x2A3', '\a', '\x431', '\x2', '\x2', '\x2A3', '\x2A5', '\a', '\x431', 
		'\x2', '\x2', '\x2A4', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x2A6', '\x2A8', '\a', '\x440', '\x2', '\x2', '\x2A7', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AB', '\x5', '\b', '\x5', 
		'\x2', '\x2AA', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2AC', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B5', '\x5', '\x6', '\x4', 
		'\x2', '\x2B0', '\x2B1', '\a', '\x431', '\x2', '\x2', '\x2B1', '\x2B3', 
		'\a', '\x431', '\x2', '\x2', '\x2B2', '\x2B0', '\x3', '\x2', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\x2B6', '\a', '\x440', '\x2', '\x2', '\x2B5', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B9', 
		'\x5', '\b', '\x5', '\x2', '\x2B8', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2B8', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x2C2', '\x5', '\n', '\x6', '\x2', '\x2BB', '\x2C2', 
		'\x5', '\f', '\a', '\x2', '\x2BC', '\x2C2', '\x5', '\xE', '\b', '\x2', 
		'\x2BD', '\x2C2', '\x5', '\x10', '\t', '\x2', '\x2BE', '\x2C2', '\x5', 
		'\x12', '\n', '\x2', '\x2BF', '\x2C2', '\x5', '\x16', '\f', '\x2', '\x2C0', 
		'\x2C2', '\x5', '\x18', '\r', '\x2', '\x2C1', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BF', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', '\x440', '\x2', 
		'\x2', '\x2C4', '\t', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2E9', '\x5', 
		'\x1A', '\xE', '\x2', '\x2C6', '\x2E9', '\x5', '\x1C', '\xF', '\x2', '\x2C7', 
		'\x2E9', '\x5', '\x1E', '\x10', '\x2', '\x2C8', '\x2E9', '\x5', ' ', '\x11', 
		'\x2', '\x2C9', '\x2E9', '\x5', '\"', '\x12', '\x2', '\x2CA', '\x2E9', 
		'\x5', '$', '\x13', '\x2', '\x2CB', '\x2E9', '\x5', '&', '\x14', '\x2', 
		'\x2CC', '\x2E9', '\x5', '(', '\x15', '\x2', '\x2CD', '\x2E9', '\x5', 
		'*', '\x16', '\x2', '\x2CE', '\x2E9', '\x5', ',', '\x17', '\x2', '\x2CF', 
		'\x2E9', '\x5', '.', '\x18', '\x2', '\x2D0', '\x2E9', '\x5', '\x30', '\x19', 
		'\x2', '\x2D1', '\x2E9', '\x5', 't', ';', '\x2', '\x2D2', '\x2E9', '\x5', 
		'v', '<', '\x2', '\x2D3', '\x2E9', '\x5', 'x', '=', '\x2', '\x2D4', '\x2E9', 
		'\x5', 'z', '>', '\x2', '\x2D5', '\x2E9', '\x5', '|', '?', '\x2', '\x2D6', 
		'\x2E9', '\x5', '~', '@', '\x2', '\x2D7', '\x2E9', '\x5', '\x80', '\x41', 
		'\x2', '\x2D8', '\x2E9', '\x5', '\x82', '\x42', '\x2', '\x2D9', '\x2E9', 
		'\x5', '\x84', '\x43', '\x2', '\x2DA', '\x2E9', '\x5', '\x86', '\x44', 
		'\x2', '\x2DB', '\x2E9', '\x5', '\x8A', '\x46', '\x2', '\x2DC', '\x2E9', 
		'\x5', '\x8C', 'G', '\x2', '\x2DD', '\x2E9', '\x5', '\x8E', 'H', '\x2', 
		'\x2DE', '\x2E9', '\x5', '\x90', 'I', '\x2', '\x2DF', '\x2E9', '\x5', 
		'\x92', 'J', '\x2', '\x2E0', '\x2E9', '\x5', '\x94', 'K', '\x2', '\x2E1', 
		'\x2E9', '\x5', '\x96', 'L', '\x2', '\x2E2', '\x2E9', '\x5', '\x98', 'M', 
		'\x2', '\x2E3', '\x2E9', '\x5', '\x9A', 'N', '\x2', '\x2E4', '\x2E9', 
		'\x5', '\x9C', 'O', '\x2', '\x2E5', '\x2E9', '\x5', '\x9E', 'P', '\x2', 
		'\x2E6', '\x2E9', '\x5', '\xA0', 'Q', '\x2', '\x2E7', '\x2E9', '\x5', 
		'\xA4', 'S', '\x2', '\x2E8', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2C7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2C9', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2CC', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2CF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2D4', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2DC', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E4', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\v', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2F5', '\x5', 
		'\xB6', '\\', '\x2', '\x2EB', '\x2F5', '\x5', '\xAE', 'X', '\x2', '\x2EC', 
		'\x2F5', '\x5', '\xB8', ']', '\x2', '\x2ED', '\x2F5', '\x5', '\xA8', 'U', 
		'\x2', '\x2EE', '\x2F5', '\x5', '\xB4', '[', '\x2', '\x2EF', '\x2F5', 
		'\x5', '\xA6', 'T', '\x2', '\x2F0', '\x2F5', '\x5', '\xB0', 'Y', '\x2', 
		'\x2F1', '\x2F5', '\x5', '\xB2', 'Z', '\x2', '\x2F2', '\x2F5', '\x5', 
		'\xAA', 'V', '\x2', '\x2F3', '\x2F5', '\x5', '\xAC', 'W', '\x2', '\x2F4', 
		'\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2EB', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2F4', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F0', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F3', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\r', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x300', '\x5', 
		'\x108', '\x85', '\x2', '\x2F7', '\x300', '\x5', '\x10A', '\x86', '\x2', 
		'\x2F8', '\x300', '\x5', '\x10C', '\x87', '\x2', '\x2F9', '\x300', '\x5', 
		'\x10E', '\x88', '\x2', '\x2FA', '\x300', '\x5', '\x110', '\x89', '\x2', 
		'\x2FB', '\x300', '\x5', '\x112', '\x8A', '\x2', '\x2FC', '\x300', '\x5', 
		'\x114', '\x8B', '\x2', '\x2FD', '\x300', '\x5', '\x116', '\x8C', '\x2', 
		'\x2FE', '\x300', '\x5', '\x118', '\x8D', '\x2', '\x2FF', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2FF', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FB', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FC', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FE', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\xF', '\x3', '\x2', '\x2', '\x2', '\x301', 
		'\x311', '\x5', '\x128', '\x95', '\x2', '\x302', '\x311', '\x5', '\x12A', 
		'\x96', '\x2', '\x303', '\x311', '\x5', '\x12C', '\x97', '\x2', '\x304', 
		'\x311', '\x5', '\x12E', '\x98', '\x2', '\x305', '\x311', '\x5', '\x130', 
		'\x99', '\x2', '\x306', '\x311', '\x5', '\x132', '\x9A', '\x2', '\x307', 
		'\x311', '\x5', '\x134', '\x9B', '\x2', '\x308', '\x311', '\x5', '\x136', 
		'\x9C', '\x2', '\x309', '\x311', '\x5', '\x138', '\x9D', '\x2', '\x30A', 
		'\x311', '\x5', '\x150', '\xA9', '\x2', '\x30B', '\x311', '\x5', '\x152', 
		'\xAA', '\x2', '\x30C', '\x311', '\x5', '\x154', '\xAB', '\x2', '\x30D', 
		'\x311', '\x5', '\x156', '\xAC', '\x2', '\x30E', '\x311', '\x5', '\x158', 
		'\xAD', '\x2', '\x30F', '\x311', '\x5', '\x15A', '\xAE', '\x2', '\x310', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x310', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x303', '\x3', '\x2', '\x2', '\x2', '\x310', '\x304', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x305', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x306', '\x3', '\x2', '\x2', '\x2', '\x310', '\x307', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x308', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30A', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x30D', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x11', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x316', '\x5', '\x15C', '\xAF', '\x2', '\x313', '\x316', '\x5', '\x15E', 
		'\xB0', '\x2', '\x314', '\x316', '\x5', '\x160', '\xB1', '\x2', '\x315', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x315', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x314', '\x3', '\x2', '\x2', '\x2', '\x316', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x322', '\x5', '\x164', '\xB3', 
		'\x2', '\x318', '\x322', '\x5', '\x166', '\xB4', '\x2', '\x319', '\x322', 
		'\x5', '\x168', '\xB5', '\x2', '\x31A', '\x322', '\x5', '\x16C', '\xB7', 
		'\x2', '\x31B', '\x322', '\x5', '\x16E', '\xB8', '\x2', '\x31C', '\x322', 
		'\x5', '\x170', '\xB9', '\x2', '\x31D', '\x322', '\x5', '\x174', '\xBB', 
		'\x2', '\x31E', '\x322', '\x5', '\x16A', '\xB6', '\x2', '\x31F', '\x322', 
		'\x5', '\x172', '\xBA', '\x2', '\x320', '\x322', '\x5', '\x176', '\xBC', 
		'\x2', '\x321', '\x317', '\x3', '\x2', '\x2', '\x2', '\x321', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\x321', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x321', '\x31B', '\x3', 
		'\x2', '\x2', '\x2', '\x321', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x321', 
		'\x31D', '\x3', '\x2', '\x2', '\x2', '\x321', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x321', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x321', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x323', '\x33D', '\x5', '\x188', '\xC5', '\x2', '\x324', '\x33D', '\x5', 
		'\x18A', '\xC6', '\x2', '\x325', '\x33D', '\x5', '\x18C', '\xC7', '\x2', 
		'\x326', '\x33D', '\x5', '\x18E', '\xC8', '\x2', '\x327', '\x33D', '\x5', 
		'\x192', '\xCA', '\x2', '\x328', '\x33D', '\x5', '\x194', '\xCB', '\x2', 
		'\x329', '\x33D', '\x5', '\x196', '\xCC', '\x2', '\x32A', '\x33D', '\x5', 
		'\x198', '\xCD', '\x2', '\x32B', '\x33D', '\x5', '\x1B0', '\xD9', '\x2', 
		'\x32C', '\x33D', '\x5', '\x1B2', '\xDA', '\x2', '\x32D', '\x33D', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x32E', '\x33D', '\x5', '\x1B6', '\xDC', '\x2', 
		'\x32F', '\x33D', '\x5', '\x1B8', '\xDD', '\x2', '\x330', '\x33D', '\x5', 
		'\x1BC', '\xDF', '\x2', '\x331', '\x33D', '\x5', '\x1BE', '\xE0', '\x2', 
		'\x332', '\x33D', '\x5', '\x1C0', '\xE1', '\x2', '\x333', '\x33D', '\x5', 
		'\x1C2', '\xE2', '\x2', '\x334', '\x33D', '\x5', '\x1C4', '\xE3', '\x2', 
		'\x335', '\x33D', '\x5', '\x1D2', '\xEA', '\x2', '\x336', '\x33D', '\x5', 
		'\x1D4', '\xEB', '\x2', '\x337', '\x33D', '\x5', '\x1D6', '\xEC', '\x2', 
		'\x338', '\x33D', '\x5', '\x1D8', '\xED', '\x2', '\x339', '\x33D', '\x5', 
		'\x1DA', '\xEE', '\x2', '\x33A', '\x33D', '\x5', '\x1DC', '\xEF', '\x2', 
		'\x33B', '\x33D', '\x5', '\x1DE', '\xF0', '\x2', '\x33C', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\x33C', '\x324', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x326', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x327', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x328', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x32B', '\x3', 
		'\x2', '\x2', '\x2', '\x33C', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x32D', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x32E', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', '\x332', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x33C', '\x334', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x337', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x338', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x339', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33B', '\x3', 
		'\x2', '\x2', '\x2', '\x33D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x346', '\x5', '\x1E8', '\xF5', '\x2', '\x33F', '\x346', '\x5', '\x1EA', 
		'\xF6', '\x2', '\x340', '\x346', '\x5', '\x1EC', '\xF7', '\x2', '\x341', 
		'\x346', '\x5', '\x1EE', '\xF8', '\x2', '\x342', '\x346', '\x5', '\x1F0', 
		'\xF9', '\x2', '\x343', '\x346', '\x5', '\x1F2', '\xFA', '\x2', '\x344', 
		'\x346', '\x5', '\x1F6', '\xFC', '\x2', '\x345', '\x33E', '\x3', '\x2', 
		'\x2', '\x2', '\x345', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x345', '\x340', 
		'\x3', '\x2', '\x2', '\x2', '\x345', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x345', '\x342', '\x3', '\x2', '\x2', '\x2', '\x345', '\x343', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', '\a', '\"', '\x2', 
		'\x2', '\x348', '\x34A', '\t', '\x2', '\x2', '\x2', '\x349', '\x34B', 
		'\x5', '\x24E', '\x128', '\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x350', '\x5', '\x216', '\x10C', 
		'\x2', '\x34D', '\x34F', '\x5', '\x32', '\x1A', '\x2', '\x34E', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\x34F', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3', 
		'\x2', '\x2', '\x2', '\x351', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x350', '\x3', '\x2', '\x2', '\x2', '\x353', '\x355', '\a', '\"', '\x2', 
		'\x2', '\x354', '\x356', '\x5', '\x34', '\x1B', '\x2', '\x355', '\x354', 
		'\x3', '\x2', '\x2', '\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', 
		'\x356', '\x357', '\x3', '\x2', '\x2', '\x2', '\x357', '\x359', '\a', 
		'\x18F', '\x2', '\x2', '\x358', '\x35A', '\x5', '\x24E', '\x128', '\x2', 
		'\x359', '\x358', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', 
		'\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\x5', '\x1FC', '\xFF', '\x2', '\x35C', '\x35D', '\a', 'q', '\x2', 
		'\x2', '\x35D', '\x35E', '\a', '\x23C', '\x2', '\x2', '\x35E', '\x365', 
		'\x5', '\x36', '\x1C', '\x2', '\x35F', '\x360', '\a', 'q', '\x2', '\x2', 
		'\x360', '\x362', '\a', '\x166', '\x2', '\x2', '\x361', '\x363', '\a', 
		'm', '\x2', '\x2', '\x362', '\x361', '\x3', '\x2', '\x2', '\x2', '\x362', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x363', '\x364', '\x3', '\x2', '\x2', 
		'\x2', '\x364', '\x366', '\a', '\x214', '\x2', '\x2', '\x365', '\x35F', 
		'\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', '\x2', 
		'\x366', '\x368', '\x3', '\x2', '\x2', '\x2', '\x367', '\x369', '\x5', 
		'>', ' ', '\x2', '\x368', '\x367', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36C', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x36B', '\a', '\x163', '\x2', '\x2', '\x36B', '\x36D', 
		'\a', '\x44C', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36F', '\a', '\x181', '\x2', '\x2', '\x36F', 
		'\x370', '\x5', '\x162', '\xB2', '\x2', '\x370', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x371', '\x373', '\a', '\"', '\x2', '\x2', '\x372', '\x374', 
		'\t', '\x3', '\x2', '\x2', '\x373', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x373', '\x374', '\x3', '\x2', '\x2', '\x2', '\x374', '\x376', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x377', '\t', '\x4', '\x2', '\x2', '\x376', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x378', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', 
		'\a', 'O', '\x2', '\x2', '\x379', '\x37B', '\x5', '\x216', '\x10C', '\x2', 
		'\x37A', '\x37C', '\x5', '@', '!', '\x2', '\x37B', '\x37A', '\x3', '\x2', 
		'\x2', '\x2', '\x37B', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37D', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\a', 'q', '\x2', '\x2', 
		'\x37E', '\x37F', '\x5', '\x1FE', '\x100', '\x2', '\x37F', '\x383', '\x5', 
		'\x23A', '\x11E', '\x2', '\x380', '\x382', '\x5', '\x42', '\"', '\x2', 
		'\x381', '\x380', '\x3', '\x2', '\x2', '\x2', '\x382', '\x385', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x384', '\x3', '\x2', '\x2', '\x2', '\x384', '\x392', '\x3', '\x2', '\x2', 
		'\x2', '\x385', '\x383', '\x3', '\x2', '\x2', '\x2', '\x386', '\x388', 
		'\a', '\x144', '\x2', '\x2', '\x387', '\x389', '\a', '\x434', '\x2', '\x2', 
		'\x388', '\x387', '\x3', '\x2', '\x2', '\x2', '\x388', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x391', '\t', '\x5', '\x2', '\x2', '\x38B', '\x38D', '\a', '\x64', '\x2', 
		'\x2', '\x38C', '\x38E', '\a', '\x434', '\x2', '\x2', '\x38D', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x38D', '\x38E', '\x3', '\x2', '\x2', '\x2', 
		'\x38E', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x391', '\t', 
		'\x6', '\x2', '\x2', '\x390', '\x386', '\x3', '\x2', '\x2', '\x2', '\x390', 
		'\x38B', '\x3', '\x2', '\x2', '\x2', '\x391', '\x394', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x390', '\x3', '\x2', '\x2', '\x2', '\x392', '\x393', 
		'\x3', '\x2', '\x2', '\x2', '\x393', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\x392', '\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\a', 
		'\"', '\x2', '\x2', '\x396', '\x397', '\a', '\x1C7', '\x2', '\x2', '\x397', 
		'\x398', '\a', 'H', '\x2', '\x2', '\x398', '\x399', '\x5', '\x216', '\x10C', 
		'\x2', '\x399', '\x39A', '\a', '\a', '\x2', '\x2', '\x39A', '\x39B', '\a', 
		'\x271', '\x2', '\x2', '\x39B', '\x3A1', '\a', '\x44C', '\x2', '\x2', 
		'\x39C', '\x39E', '\a', '\x1B2', '\x2', '\x2', '\x39D', '\x39F', '\a', 
		'\x434', '\x2', '\x2', '\x39E', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3A2', '\x5', '\x21E', '\x110', '\x2', '\x3A1', '\x39C', 
		'\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', 
		'\x3A2', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A5', '\a', 
		'\x272', '\x2', '\x2', '\x3A4', '\x3A6', '\a', '\x434', '\x2', '\x2', 
		'\x3A5', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x3A6', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A7', 
		'\x3A9', '\x5', '\x21E', '\x110', '\x2', '\x3A8', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', '\x3A8', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AC', '\a', '\x21E', '\x2', '\x2', 
		'\x3AB', '\x3AD', '\a', '\x434', '\x2', '\x2', '\x3AC', '\x3AB', '\x3', 
		'\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', 
		'\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3B0', '\x5', '\x21E', 
		'\x110', '\x2', '\x3AF', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B6', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x3B3', '\a', '\x1F6', '\x2', '\x2', '\x3B2', '\x3B4', 
		'\a', '\x434', '\x2', '\x2', '\x3B3', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B7', '\x5', '\x216', '\x10C', '\x2', 
		'\x3B6', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x3BA', '\a', '\x280', '\x2', '\x2', '\x3B9', '\x3B8', '\x3', '\x2', 
		'\x2', '\x2', '\x3B9', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3C0', 
		'\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BD', '\a', '\x163', '\x2', '\x2', 
		'\x3BC', '\x3BE', '\a', '\x434', '\x2', '\x2', '\x3BD', '\x3BC', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3BE', 
		'\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C1', '\a', '\x44C', 
		'\x2', '\x2', '\x3C0', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3C4', '\a', '\x189', '\x2', '\x2', '\x3C3', '\x3C5', '\a', 
		'\x434', '\x2', '\x2', '\x3C4', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C7', '\x5', '\x20C', '\x107', '\x2', '\x3C7', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3CA', '\a', '\"', '\x2', '\x2', 
		'\x3C9', '\x3CB', '\x5', '\x34', '\x1B', '\x2', '\x3CA', '\x3C9', '\x3', 
		'\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CB', 
		'\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\a', '}', '\x2', 
		'\x2', '\x3CD', '\x3CE', '\x5', '\x1FC', '\xFF', '\x2', '\x3CE', '\x3D0', 
		'\a', '\x43D', '\x2', '\x2', '\x3CF', '\x3D1', '\x5', '\x44', '#', '\x2', 
		'\x3D0', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D2', 
		'\x3D3', '\a', '\x43F', '\x2', '\x2', '\x3D3', '\x3D5', '\x5', '\x44', 
		'#', '\x2', '\x3D4', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D8', 
		'\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x3D6', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D9', '\x3', 
		'\x2', '\x2', '\x2', '\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D9', 
		'\x3DD', '\a', '\x43E', '\x2', '\x2', '\x3DA', '\x3DC', '\x5', 'H', '%', 
		'\x2', '\x3DB', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3DD', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3DF', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3E0', 
		'\x3E1', '\x5', '\x162', '\xB2', '\x2', '\x3E1', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x3E2', '\x3E4', '\a', '\"', '\x2', '\x2', '\x3E3', '\x3E5', '\x5', 
		'\x34', '\x1B', '\x2', '\x3E4', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E4', 
		'\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E6', '\x3', '\x2', '\x2', 
		'\x2', '\x3E6', '\x3E7', '\a', '\x1A4', '\x2', '\x2', '\x3E7', '\x3E8', 
		'\x5', '\x1FC', '\xFF', '\x2', '\x3E8', '\x3EA', '\a', '\x43D', '\x2', 
		'\x2', '\x3E9', '\x3EB', '\x5', '\x46', '$', '\x2', '\x3EA', '\x3E9', 
		'\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', '\x3', '\x2', '\x2', '\x2', 
		'\x3EB', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\a', 
		'\x43F', '\x2', '\x2', '\x3ED', '\x3EF', '\x5', '\x46', '$', '\x2', '\x3EE', 
		'\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F2', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', 
		'\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F3', '\x3', '\x2', '\x2', '\x2', 
		'\x3F2', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\a', 
		'\x43E', '\x2', '\x2', '\x3F4', '\x3F5', '\a', '\x233', '\x2', '\x2', 
		'\x3F5', '\x3F9', '\x5', '\x22A', '\x116', '\x2', '\x3F6', '\x3F8', '\x5', 
		'H', '%', '\x2', '\x3F7', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F8', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3F7', '\x3', '\x2', '\x2', 
		'\x2', '\x3F9', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FE', 
		'\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3FC', '\x3FF', '\x5', '\x162', '\xB2', '\x2', '\x3FD', '\x3FF', '\x5', 
		'\x172', '\xBA', '\x2', '\x3FE', '\x3FC', '\x3', '\x2', '\x2', '\x2', 
		'\x3FE', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FF', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x400', '\x401', '\a', '\"', '\x2', '\x2', '\x401', '\x402', 
		'\a', '\x23E', '\x2', '\x2', '\x402', '\x403', '\x5', '\x216', '\x10C', 
		'\x2', '\x403', '\x404', '\a', '\x42', '\x2', '\x2', '\x404', '\x405', 
		'\a', '\x176', '\x2', '\x2', '\x405', '\x406', '\a', '\x285', '\x2', '\x2', 
		'\x406', '\x407', '\t', '\a', '\x2', '\x2', '\x407', '\x408', '\a', '\x203', 
		'\x2', '\x2', '\x408', '\x409', '\a', '\x43D', '\x2', '\x2', '\x409', 
		'\x40E', '\x5', 'J', '&', '\x2', '\x40A', '\x40B', '\a', '\x43F', '\x2', 
		'\x2', '\x40B', '\x40D', '\x5', 'J', '&', '\x2', '\x40C', '\x40A', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x410', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x40C', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x40F', '\x3', '\x2', '\x2', 
		'\x2', '\x40F', '\x411', '\x3', '\x2', '\x2', '\x2', '\x410', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x411', '\x412', '\a', '\x43E', '\x2', '\x2', 
		'\x412', '\'', '\x3', '\x2', '\x2', '\x2', '\x413', '\x415', '\a', '\"', 
		'\x2', '\x2', '\x414', '\x416', '\a', '\x267', '\x2', '\x2', '\x415', 
		'\x414', '\x3', '\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2', 
		'\x2', '\x416', '\x417', '\x3', '\x2', '\x2', '\x2', '\x417', '\x419', 
		'\a', '\xA3', '\x2', '\x2', '\x418', '\x41A', '\x5', '\x24E', '\x128', 
		'\x2', '\x419', '\x418', '\x3', '\x2', '\x2', '\x2', '\x419', '\x41A', 
		'\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', 
		'\x41B', '\x423', '\x5', '\x1FE', '\x100', '\x2', '\x41C', '\x41D', '\a', 
		'_', '\x2', '\x2', '\x41D', '\x424', '\x5', '\x1FE', '\x100', '\x2', '\x41E', 
		'\x41F', '\a', '\x43D', '\x2', '\x2', '\x41F', '\x420', '\a', '_', '\x2', 
		'\x2', '\x420', '\x421', '\x5', '\x1FE', '\x100', '\x2', '\x421', '\x422', 
		'\a', '\x43E', '\x2', '\x2', '\x422', '\x424', '\x3', '\x2', '\x2', '\x2', 
		'\x423', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x423', '\x41E', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x462', '\x3', '\x2', '\x2', '\x2', '\x425', 
		'\x427', '\a', '\"', '\x2', '\x2', '\x426', '\x428', '\a', '\x267', '\x2', 
		'\x2', '\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x427', '\x428', 
		'\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x429', '\x42B', '\a', '\xA3', '\x2', '\x2', '\x42A', '\x42C', '\x5', 
		'\x24E', '\x128', '\x2', '\x42B', '\x42A', '\x3', '\x2', '\x2', '\x2', 
		'\x42B', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42D', '\x3', 
		'\x2', '\x2', '\x2', '\x42D', '\x42F', '\x5', '\x1FE', '\x100', '\x2', 
		'\x42E', '\x430', '\x5', 'L', '\'', '\x2', '\x42F', '\x42E', '\x3', '\x2', 
		'\x2', '\x2', '\x42F', '\x430', '\x3', '\x2', '\x2', '\x2', '\x430', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x431', '\x438', '\x5', '^', '\x30', '\x2', 
		'\x432', '\x434', '\a', '\x43F', '\x2', '\x2', '\x433', '\x432', '\x3', 
		'\x2', '\x2', '\x2', '\x433', '\x434', '\x3', '\x2', '\x2', '\x2', '\x434', 
		'\x435', '\x3', '\x2', '\x2', '\x2', '\x435', '\x437', '\x5', '^', '\x30', 
		'\x2', '\x436', '\x433', '\x3', '\x2', '\x2', '\x2', '\x437', '\x43A', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\x436', '\x3', '\x2', '\x2', '\x2', 
		'\x438', '\x439', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43B', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43C', '\x3', '\x2', '\x2', 
		'\x2', '\x43C', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x43F', 
		'\x5', '\x64', '\x33', '\x2', '\x43E', '\x43D', '\x3', '\x2', '\x2', '\x2', 
		'\x43E', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x441', '\x3', 
		'\x2', '\x2', '\x2', '\x440', '\x442', '\t', '\b', '\x2', '\x2', '\x441', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x441', '\x442', '\x3', '\x2', '\x2', 
		'\x2', '\x442', '\x444', '\x3', '\x2', '\x2', '\x2', '\x443', '\x445', 
		'\a', '\xE', '\x2', '\x2', '\x444', '\x443', '\x3', '\x2', '\x2', '\x2', 
		'\x444', '\x445', '\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x446', '\x447', '\x5', '\xB6', '\\', '\x2', '\x447', 
		'\x462', '\x3', '\x2', '\x2', '\x2', '\x448', '\x44A', '\a', '\"', '\x2', 
		'\x2', '\x449', '\x44B', '\a', '\x267', '\x2', '\x2', '\x44A', '\x449', 
		'\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', '\x3', '\x2', '\x2', '\x2', 
		'\x44B', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44E', '\a', 
		'\xA3', '\x2', '\x2', '\x44D', '\x44F', '\x5', '\x24E', '\x128', '\x2', 
		'\x44E', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x44F', '\x3', 
		'\x2', '\x2', '\x2', '\x44F', '\x450', '\x3', '\x2', '\x2', '\x2', '\x450', 
		'\x451', '\x5', '\x1FE', '\x100', '\x2', '\x451', '\x45C', '\x5', 'L', 
		'\'', '\x2', '\x452', '\x459', '\x5', '^', '\x30', '\x2', '\x453', '\x455', 
		'\a', '\x43F', '\x2', '\x2', '\x454', '\x453', '\x3', '\x2', '\x2', '\x2', 
		'\x454', '\x455', '\x3', '\x2', '\x2', '\x2', '\x455', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x456', '\x458', '\x5', '^', '\x30', '\x2', '\x457', 
		'\x454', '\x3', '\x2', '\x2', '\x2', '\x458', '\x45B', '\x3', '\x2', '\x2', 
		'\x2', '\x459', '\x457', '\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\x45A', '\x45D', '\x3', '\x2', '\x2', '\x2', 
		'\x45B', '\x459', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x452', '\x3', 
		'\x2', '\x2', '\x2', '\x45C', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45D', 
		'\x45F', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x460', '\x5', '\x64', 
		'\x33', '\x2', '\x45F', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x45F', 
		'\x460', '\x3', '\x2', '\x2', '\x2', '\x460', '\x462', '\x3', '\x2', '\x2', 
		'\x2', '\x461', '\x413', '\x3', '\x2', '\x2', '\x2', '\x461', '\x425', 
		'\x3', '\x2', '\x2', '\x2', '\x461', '\x448', '\x3', '\x2', '\x2', '\x2', 
		'\x462', ')', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', '\a', '\"', 
		'\x2', '\x2', '\x464', '\x465', '\a', '\x265', '\x2', '\x2', '\x465', 
		'\x466', '\x5', '\x216', '\x10C', '\x2', '\x466', '\x467', '\a', '\a', 
		'\x2', '\x2', '\x467', '\x468', '\a', '\x177', '\x2', '\x2', '\x468', 
		'\x46C', '\a', '\x44C', '\x2', '\x2', '\x469', '\x46A', '\a', '\x19B', 
		'\x2', '\x2', '\x46A', '\x46B', '\a', '\x434', '\x2', '\x2', '\x46B', 
		'\x46D', '\x5', '\x21E', '\x110', '\x2', '\x46C', '\x469', '\x3', '\x2', 
		'\x2', '\x2', '\x46C', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x473', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x470', '\a', '\x189', '\x2', '\x2', 
		'\x46F', '\x471', '\a', '\x434', '\x2', '\x2', '\x470', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x470', '\x471', '\x3', '\x2', '\x2', '\x2', '\x471', 
		'\x472', '\x3', '\x2', '\x2', '\x2', '\x472', '\x474', '\x5', '\x20C', 
		'\x107', '\x2', '\x473', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x473', 
		'\x474', '\x3', '\x2', '\x2', '\x2', '\x474', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x475', '\x476', '\a', '\"', '\x2', '\x2', '\x476', '\x477', '\a', 
		'\x265', '\x2', '\x2', '\x477', '\x478', '\x5', '\x216', '\x10C', '\x2', 
		'\x478', '\x479', '\a', '\a', '\x2', '\x2', '\x479', '\x47A', '\a', '\x177', 
		'\x2', '\x2', '\x47A', '\x47B', '\a', '\x44C', '\x2', '\x2', '\x47B', 
		'\x47C', '\a', '\xB1', '\x2', '\x2', '\x47C', '\x47D', '\a', '\x1C7', 
		'\x2', '\x2', '\x47D', '\x47E', '\a', 'H', '\x2', '\x2', '\x47E', '\x484', 
		'\x5', '\x216', '\x10C', '\x2', '\x47F', '\x481', '\a', '\x197', '\x2', 
		'\x2', '\x480', '\x482', '\a', '\x434', '\x2', '\x2', '\x481', '\x480', 
		'\x3', '\x2', '\x2', '\x2', '\x481', '\x482', '\x3', '\x2', '\x2', '\x2', 
		'\x482', '\x483', '\x3', '\x2', '\x2', '\x2', '\x483', '\x485', '\x5', 
		'\x21E', '\x110', '\x2', '\x484', '\x47F', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x485', '\x3', '\x2', '\x2', '\x2', '\x485', '\x48B', '\x3', 
		'\x2', '\x2', '\x2', '\x486', '\x488', '\a', '\x1B2', '\x2', '\x2', '\x487', 
		'\x489', '\a', '\x434', '\x2', '\x2', '\x488', '\x487', '\x3', '\x2', 
		'\x2', '\x2', '\x488', '\x489', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', 
		'\x3', '\x2', '\x2', '\x2', '\x48A', '\x48C', '\x5', '\x21E', '\x110', 
		'\x2', '\x48B', '\x486', '\x3', '\x2', '\x2', '\x2', '\x48B', '\x48C', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x492', '\x3', '\x2', '\x2', '\x2', 
		'\x48D', '\x48F', '\a', '\x149', '\x2', '\x2', '\x48E', '\x490', '\a', 
		'\x434', '\x2', '\x2', '\x48F', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x48F', 
		'\x490', '\x3', '\x2', '\x2', '\x2', '\x490', '\x491', '\x3', '\x2', '\x2', 
		'\x2', '\x491', '\x493', '\x5', '\x21E', '\x110', '\x2', '\x492', '\x48D', 
		'\x3', '\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', 
		'\x493', '\x499', '\x3', '\x2', '\x2', '\x2', '\x494', '\x496', '\a', 
		'\x1E1', '\x2', '\x2', '\x495', '\x497', '\a', '\x434', '\x2', '\x2', 
		'\x496', '\x495', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\x3', 
		'\x2', '\x2', '\x2', '\x497', '\x498', '\x3', '\x2', '\x2', '\x2', '\x498', 
		'\x49A', '\x5', '\x21E', '\x110', '\x2', '\x499', '\x494', '\x3', '\x2', 
		'\x2', '\x2', '\x499', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x4A0', 
		'\x3', '\x2', '\x2', '\x2', '\x49B', '\x49D', '\a', '\x1F6', '\x2', '\x2', 
		'\x49C', '\x49E', '\a', '\x434', '\x2', '\x2', '\x49D', '\x49C', '\x3', 
		'\x2', '\x2', '\x2', '\x49D', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x49E', 
		'\x49F', '\x3', '\x2', '\x2', '\x2', '\x49F', '\x4A1', '\x5', '\x216', 
		'\x10C', '\x2', '\x4A0', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x4A3', '\x3', '\x2', '\x2', 
		'\x2', '\x4A2', '\x4A4', '\a', '\x280', '\x2', '\x2', '\x4A3', '\x4A2', 
		'\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x3', '\x2', '\x2', '\x2', 
		'\x4A4', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A7', '\a', 
		'\x163', '\x2', '\x2', '\x4A6', '\x4A8', '\a', '\x434', '\x2', '\x2', 
		'\x4A7', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A8', '\x3', 
		'\x2', '\x2', '\x2', '\x4A8', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4A9', 
		'\x4AB', '\a', '\x44C', '\x2', '\x2', '\x4AA', '\x4A5', '\x3', '\x2', 
		'\x2', '\x2', '\x4AA', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', 
		'\x3', '\x2', '\x2', '\x2', '\x4AC', '\x4AE', '\a', '\x189', '\x2', '\x2', 
		'\x4AD', '\x4AF', '\a', '\x434', '\x2', '\x2', '\x4AE', '\x4AD', '\x3', 
		'\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4AF', 
		'\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', '\x5', '\x20C', 
		'\x107', '\x2', '\x4B1', '-', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B4', 
		'\a', '\"', '\x2', '\x2', '\x4B3', '\x4B5', '\x5', '\x34', '\x1B', '\x2', 
		'\x4B4', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B5', '\x3', 
		'\x2', '\x2', '\x2', '\x4B5', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B6', 
		'\x4B7', '\a', '\xA8', '\x2', '\x2', '\x4B7', '\x4B8', '\x5', '\x1FC', 
		'\xFF', '\x2', '\x4B8', '\x4B9', '\t', '\t', '\x2', '\x2', '\x4B9', '\x4BA', 
		'\t', '\n', '\x2', '\x2', '\x4BA', '\x4BB', '\a', 'q', '\x2', '\x2', '\x4BB', 
		'\x4BC', '\x5', '\x1FE', '\x100', '\x2', '\x4BC', '\x4BD', '\a', '@', 
		'\x2', '\x2', '\x4BD', '\x4BE', '\a', '\x34', '\x2', '\x2', '\x4BE', '\x4C1', 
		'\a', '\x238', '\x2', '\x2', '\x4BF', '\x4C0', '\t', '\v', '\x2', '\x2', 
		'\x4C0', '\x4C2', '\x5', '\x1FC', '\xFF', '\x2', '\x4C1', '\x4BF', '\x3', 
		'\x2', '\x2', '\x2', '\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', 
		'\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4C4', '\x5', '\x162', 
		'\xB2', '\x2', '\x4C4', '/', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C8', 
		'\a', '\"', '\x2', '\x2', '\x4C6', '\x4C7', '\a', 'u', '\x2', '\x2', '\x4C7', 
		'\x4C9', '\a', '\x87', '\x2', '\x2', '\x4C8', '\x4C6', '\x3', '\x2', '\x2', 
		'\x2', '\x4C8', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CD', 
		'\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CB', '\a', '\x144', '\x2', '\x2', 
		'\x4CB', '\x4CC', '\a', '\x434', '\x2', '\x2', '\x4CC', '\x4CE', '\t', 
		'\f', '\x2', '\x2', '\x4CD', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4D0', '\x3', '\x2', '\x2', 
		'\x2', '\x4CF', '\x4D1', '\x5', '\x34', '\x1B', '\x2', '\x4D0', '\x4CF', 
		'\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D1', '\x3', '\x2', '\x2', '\x2', 
		'\x4D1', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\a', 
		'\x98', '\x2', '\x2', '\x4D3', '\x4D4', '\a', '\x23D', '\x2', '\x2', '\x4D4', 
		'\x4D6', '\t', '\r', '\x2', '\x2', '\x4D5', '\x4D2', '\x3', '\x2', '\x2', 
		'\x2', '\x4D5', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D8', '\a', '\x27D', '\x2', '\x2', 
		'\x4D8', '\x4DD', '\x5', '\x1FC', '\xFF', '\x2', '\x4D9', '\x4DA', '\a', 
		'\x43D', '\x2', '\x2', '\x4DA', '\x4DB', '\x5', '\x236', '\x11C', '\x2', 
		'\x4DB', '\x4DC', '\a', '\x43E', '\x2', '\x2', '\x4DC', '\x4DE', '\x3', 
		'\x2', '\x2', '\x2', '\x4DD', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4DD', 
		'\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', '\x3', '\x2', '\x2', 
		'\x2', '\x4DF', '\x4E0', '\a', '\xE', '\x2', '\x2', '\x4E0', '\x4E7', 
		'\x5', '\xB6', '\\', '\x2', '\x4E1', '\x4E3', '\a', '\xB7', '\x2', '\x2', 
		'\x4E2', '\x4E4', '\t', '\xE', '\x2', '\x2', '\x4E3', '\x4E2', '\x3', 
		'\x2', '\x2', '\x2', '\x4E3', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E4', 
		'\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\a', '\x1B', '\x2', 
		'\x2', '\x4E6', '\x4E8', '\a', 's', '\x2', '\x2', '\x4E7', '\x4E1', '\x3', 
		'\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EB', '\a', '*', '\x2', 
		'\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'\x4EC', '\x4ED', '\a', '\x1A', '\x2', '\x2', '\x4ED', '\x4F0', '\a', 
		'\x93', '\x2', '\x2', '\x4EE', '\x4F0', '\a', '\x31D', '\x2', '\x2', '\x4EF', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4EE', '\x3', '\x2', '\x2', 
		'\x2', '\x4F0', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4F3', 
		'\a', '\x434', '\x2', '\x2', '\x4F2', '\x4F1', '\x3', '\x2', '\x2', '\x2', 
		'\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F6', '\x3', 
		'\x2', '\x2', '\x2', '\x4F4', '\x4F7', '\x5', '\x208', '\x105', '\x2', 
		'\x4F5', '\x4F7', '\a', '*', '\x2', '\x2', '\x4F6', '\x4F4', '\x3', '\x2', 
		'\x2', '\x2', '\x4F6', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x501', 
		'\x3', '\x2', '\x2', '\x2', '\x4F8', '\x4FA', '\a', '*', '\x2', '\x2', 
		'\x4F9', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\x3', 
		'\x2', '\x2', '\x2', '\x4FA', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FB', 
		'\x4FD', '\a', '\x1C', '\x2', '\x2', '\x4FC', '\x4FE', '\a', '\x434', 
		'\x2', '\x2', '\x4FD', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', 
		'\x4FF', '\x501', '\x5', '\x20A', '\x106', '\x2', '\x500', '\x4EA', '\x3', 
		'\x2', '\x2', '\x2', '\x500', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x501', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x502', '\x503', '\a', '\x17A', '\x2', 
		'\x2', '\x503', '\x50A', '\a', '\x434', '\x2', '\x2', '\x504', '\x50B', 
		'\x5', '\x204', '\x103', '\x2', '\x505', '\x508', '\a', '%', '\x2', '\x2', 
		'\x506', '\x507', '\a', '\x43D', '\x2', '\x2', '\x507', '\x509', '\a', 
		'\x43E', '\x2', '\x2', '\x508', '\x506', '\x3', '\x2', '\x2', '\x2', '\x508', 
		'\x509', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50B', '\x3', '\x2', '\x2', 
		'\x2', '\x50A', '\x504', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x505', 
		'\x3', '\x2', '\x2', '\x2', '\x50B', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x50C', '\x50D', '\a', '\x146', '\x2', '\x2', '\x50D', '\x511', '\x5', 
		'\x38', '\x1D', '\x2', '\x50E', '\x510', '\x5', ':', '\x1E', '\x2', '\x50F', 
		'\x50E', '\x3', '\x2', '\x2', '\x2', '\x510', '\x513', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x511', '\x512', 
		'\x3', '\x2', '\x2', '\x2', '\x512', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x513', '\x511', '\x3', '\x2', '\x2', '\x2', '\x514', '\x517', '\a', 
		'\x191', '\x2', '\x2', '\x515', '\x518', '\x5', '\x21C', '\x10F', '\x2', 
		'\x516', '\x518', '\x5', '\x278', '\x13D', '\x2', '\x517', '\x515', '\x3', 
		'\x2', '\x2', '\x2', '\x517', '\x516', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x519', '\x3', '\x2', '\x2', '\x2', '\x519', '\x522', '\x5', '<', '\x1F', 
		'\x2', '\x51A', '\x51B', '\a', '\x254', '\x2', '\x2', '\x51B', '\x51F', 
		'\x5', '\x38', '\x1D', '\x2', '\x51C', '\x51E', '\x5', ':', '\x1E', '\x2', 
		'\x51D', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x521', '\x3', 
		'\x2', '\x2', '\x2', '\x51F', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\x3', '\x2', '\x2', '\x2', '\x520', '\x523', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x522', '\x51A', 
		'\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\x3', '\x2', '\x2', '\x2', 
		'\x523', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\a', 
		'\x188', '\x2', '\x2', '\x525', '\x529', '\x5', '\x38', '\x1D', '\x2', 
		'\x526', '\x528', '\x5', ':', '\x1E', '\x2', '\x527', '\x526', '\x3', 
		'\x2', '\x2', '\x2', '\x528', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x529', 
		'\x527', '\x3', '\x2', '\x2', '\x2', '\x529', '\x52A', '\x3', '\x2', '\x2', 
		'\x2', '\x52A', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x529', 
		'\x3', '\x2', '\x2', '\x2', '\x52C', '\x524', '\x3', '\x2', '\x2', '\x2', 
		'\x52C', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x52F', '\x3', 
		'\x2', '\x2', '\x2', '\x52E', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x52E', 
		'\x514', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x530', '\x535', '\a', '\x12F', '\x2', '\x2', '\x531', '\x535', 
		'\x5', '\x220', '\x111', '\x2', '\x532', '\x535', '\x5', '\x21C', '\x10F', 
		'\x2', '\x533', '\x535', '\x5', '\x278', '\x13D', '\x2', '\x534', '\x530', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\x531', '\x3', '\x2', '\x2', '\x2', 
		'\x534', '\x532', '\x3', '\x2', '\x2', '\x2', '\x534', '\x533', '\x3', 
		'\x2', '\x2', '\x2', '\x535', '\x39', '\x3', '\x2', '\x2', '\x2', '\x536', 
		'\x537', '\a', '\x430', '\x2', '\x2', '\x537', '\x53A', '\a', 'T', '\x2', 
		'\x2', '\x538', '\x53B', '\x5', '\x21C', '\x10F', '\x2', '\x539', '\x53B', 
		'\x5', '\x278', '\x13D', '\x2', '\x53A', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\x539', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x53D', '\x5', '<', '\x1F', '\x2', 
		'\x53D', ';', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x54C', '\x5', '\x290', 
		'\x149', '\x2', '\x53F', '\x54C', '\a', '\xD4', '\x2', '\x2', '\x540', 
		'\x54C', '\a', '\xE7', '\x2', '\x2', '\x541', '\x54C', '\a', '\xE8', '\x2', 
		'\x2', '\x542', '\x54C', '\a', '\xE9', '\x2', '\x2', '\x543', '\x54C', 
		'\a', '\xEA', '\x2', '\x2', '\x544', '\x54C', '\a', '\xEB', '\x2', '\x2', 
		'\x545', '\x54C', '\a', '\xEC', '\x2', '\x2', '\x546', '\x54C', '\a', 
		'\xED', '\x2', '\x2', '\x547', '\x54C', '\a', '\xEE', '\x2', '\x2', '\x548', 
		'\x54C', '\a', '\xEF', '\x2', '\x2', '\x549', '\x54C', '\a', '\xF0', '\x2', 
		'\x2', '\x54A', '\x54C', '\a', '\xF1', '\x2', '\x2', '\x54B', '\x53E', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x54B', '\x540', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x541', '\x3', 
		'\x2', '\x2', '\x2', '\x54B', '\x542', '\x3', '\x2', '\x2', '\x2', '\x54B', 
		'\x543', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x544', '\x3', '\x2', '\x2', 
		'\x2', '\x54B', '\x545', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x546', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x547', '\x3', '\x2', '\x2', '\x2', 
		'\x54B', '\x548', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x549', '\x3', 
		'\x2', '\x2', '\x2', '\x54B', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54C', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x553', '\a', '\x185', '\x2', 
		'\x2', '\x54E', '\x553', '\a', '\x17E', '\x2', '\x2', '\x54F', '\x550', 
		'\a', '\x17E', '\x2', '\x2', '\x550', '\x551', '\a', 'q', '\x2', '\x2', 
		'\x551', '\x553', '\a', '\x244', '\x2', '\x2', '\x552', '\x54D', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x54E', '\x3', '\x2', '\x2', '\x2', '\x552', 
		'\x54F', '\x3', '\x2', '\x2', '\x2', '\x553', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x554', '\x555', '\a', '\xB2', '\x2', '\x2', '\x555', '\x556', 
		'\t', '\xF', '\x2', '\x2', '\x556', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x557', '\x559', '\a', '\x1BF', '\x2', '\x2', '\x558', '\x55A', '\a', 
		'\x434', '\x2', '\x2', '\x559', '\x558', '\x3', '\x2', '\x2', '\x2', '\x559', 
		'\x55A', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x55B', '\x3', '\x2', '\x2', 
		'\x2', '\x55B', '\x565', '\x5', '\x21E', '\x110', '\x2', '\x55C', '\x565', 
		'\x5', '@', '!', '\x2', '\x55D', '\x55E', '\a', '\xB7', '\x2', '\x2', 
		'\x55E', '\x55F', '\a', '\x207', '\x2', '\x2', '\x55F', '\x565', '\x5', 
		'\x216', '\x10C', '\x2', '\x560', '\x561', '\a', '\x163', '\x2', '\x2', 
		'\x561', '\x565', '\a', '\x44C', '\x2', '\x2', '\x562', '\x565', '\a', 
		'\x1B7', '\x2', '\x2', '\x563', '\x565', '\a', '\x27F', '\x2', '\x2', 
		'\x564', '\x557', '\x3', '\x2', '\x2', '\x2', '\x564', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x564', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x564', 
		'\x560', '\x3', '\x2', '\x2', '\x2', '\x564', '\x562', '\x3', '\x2', '\x2', 
		'\x2', '\x564', '\x563', '\x3', '\x2', '\x2', '\x2', '\x565', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x566', '\x568', '\t', '\x10', '\x2', '\x2', 
		'\x567', '\x566', '\x3', '\x2', '\x2', '\x2', '\x567', '\x568', '\x3', 
		'\x2', '\x2', '\x2', '\x568', '\x569', '\x3', '\x2', '\x2', '\x2', '\x569', 
		'\x56A', '\x5', '\x216', '\x10C', '\x2', '\x56A', '\x56B', '\x5', '\x22A', 
		'\x116', '\x2', '\x56B', '\x45', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56D', '\x5', '\x216', '\x10C', '\x2', '\x56D', '\x56E', '\x5', '\x22A', 
		'\x116', '\x2', '\x56E', 'G', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x570', 
		'\a', '\x163', '\x2', '\x2', '\x570', '\x587', '\a', '\x44C', '\x2', '\x2', 
		'\x571', '\x572', '\a', '\x1C0', '\x2', '\x2', '\x572', '\x587', '\a', 
		'\x98', '\x2', '\x2', '\x573', '\x575', '\a', 'm', '\x2', '\x2', '\x574', 
		'\x573', '\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x575', '\x576', '\x3', '\x2', '\x2', '\x2', '\x576', '\x587', 
		'\a', '/', '\x2', '\x2', '\x577', '\x578', '\a', '\x170', '\x2', '\x2', 
		'\x578', '\x582', '\a', '\x98', '\x2', '\x2', '\x579', '\x57A', '\a', 
		'\x1F5', '\x2', '\x2', '\x57A', '\x582', '\a', '\x98', '\x2', '\x2', '\x57B', 
		'\x57C', '\a', '\x81', '\x2', '\x2', '\x57C', '\x57D', '\a', '\x98', '\x2', 
		'\x2', '\x57D', '\x582', '\a', '\x176', '\x2', '\x2', '\x57E', '\x57F', 
		'\a', 'k', '\x2', '\x2', '\x57F', '\x580', '\a', '\x98', '\x2', '\x2', 
		'\x580', '\x582', '\a', '\x176', '\x2', '\x2', '\x581', '\x577', '\x3', 
		'\x2', '\x2', '\x2', '\x581', '\x579', '\x3', '\x2', '\x2', '\x2', '\x581', 
		'\x57B', '\x3', '\x2', '\x2', '\x2', '\x581', '\x57E', '\x3', '\x2', '\x2', 
		'\x2', '\x582', '\x587', '\x3', '\x2', '\x2', '\x2', '\x583', '\x584', 
		'\a', '\x98', '\x2', '\x2', '\x584', '\x585', '\a', '\x23D', '\x2', '\x2', 
		'\x585', '\x587', '\t', '\r', '\x2', '\x2', '\x586', '\x56F', '\x3', '\x2', 
		'\x2', '\x2', '\x586', '\x571', '\x3', '\x2', '\x2', '\x2', '\x586', '\x574', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x581', '\x3', '\x2', '\x2', '\x2', 
		'\x586', '\x583', '\x3', '\x2', '\x2', '\x2', '\x587', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x588', '\x589', '\a', '\x1AC', '\x2', '\x2', '\x589', 
		'\x597', '\a', '\x44C', '\x2', '\x2', '\x58A', '\x58B', '\a', '\'', '\x2', 
		'\x2', '\x58B', '\x597', '\a', '\x44C', '\x2', '\x2', '\x58C', '\x58D', 
		'\a', '\x277', '\x2', '\x2', '\x58D', '\x597', '\a', '\x44C', '\x2', '\x2', 
		'\x58E', '\x58F', '\a', '\x20B', '\x2', '\x2', '\x58F', '\x597', '\a', 
		'\x44C', '\x2', '\x2', '\x590', '\x591', '\a', '\x247', '\x2', '\x2', 
		'\x591', '\x597', '\a', '\x44C', '\x2', '\x2', '\x592', '\x593', '\a', 
		'\x204', '\x2', '\x2', '\x593', '\x597', '\a', '\x44C', '\x2', '\x2', 
		'\x594', '\x595', '\a', '\x210', '\x2', '\x2', '\x595', '\x597', '\x5', 
		'\x21C', '\x10F', '\x2', '\x596', '\x588', '\x3', '\x2', '\x2', '\x2', 
		'\x596', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x596', '\x58C', '\x3', 
		'\x2', '\x2', '\x2', '\x596', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x596', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x596', '\x592', '\x3', '\x2', '\x2', 
		'\x2', '\x596', '\x594', '\x3', '\x2', '\x2', '\x2', '\x597', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x598', '\x599', '\a', '\x43D', '\x2', '\x2', '\x599', 
		'\x59E', '\x5', 'N', '(', '\x2', '\x59A', '\x59B', '\a', '\x43F', '\x2', 
		'\x2', '\x59B', '\x59D', '\x5', 'N', '(', '\x2', '\x59C', '\x59A', '\x3', 
		'\x2', '\x2', '\x2', '\x59D', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x59E', 
		'\x59C', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\x3', '\x2', '\x2', 
		'\x2', '\x59F', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\a', '\x43E', '\x2', '\x2', 
		'\x5A2', 'M', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\x5', '\x216', 
		'\x10C', '\x2', '\x5A4', '\x5A5', '\x5', 'P', ')', '\x2', '\x5A5', '\x5A9', 
		'\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A9', '\x5', 'T', '+', '\x2', 
		'\x5A7', '\x5A9', '\x5', '\\', '/', '\x2', '\x5A8', '\x5A3', '\x3', '\x2', 
		'\x2', '\x2', '\x5A8', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A7', 
		'\x3', '\x2', '\x2', '\x2', '\x5A9', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x5AA', '\x5AE', '\x5', '\x22A', '\x116', '\x2', '\x5AB', '\x5AD', '\x5', 
		'R', '*', '\x2', '\x5AC', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x5AD', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AC', '\x3', '\x2', '\x2', 
		'\x2', '\x5AE', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5AF', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x5B0', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5B1', 
		'\x5E7', '\x5', '\x226', '\x114', '\x2', '\x5B2', '\x5B3', '\a', '*', 
		'\x2', '\x2', '\x5B3', '\x5E7', '\x5', '\x246', '\x124', '\x2', '\x5B4', 
		'\x5E7', '\a', '\x27F', '\x2', '\x2', '\x5B5', '\x5E7', '\a', '\x1B7', 
		'\x2', '\x2', '\x5B6', '\x5BB', '\a', '\x14A', '\x2', '\x2', '\x5B7', 
		'\x5B8', '\a', 'q', '\x2', '\x2', '\x5B8', '\x5B9', '\a', '\xAF', '\x2', 
		'\x2', '\x5B9', '\x5BB', '\x5', '\x248', '\x125', '\x2', '\x5BA', '\x5B6', 
		'\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5B7', '\x3', '\x2', '\x2', '\x2', 
		'\x5BB', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BE', '\a', 
		'|', '\x2', '\x2', '\x5BD', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BD', 
		'\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BF', '\x3', '\x2', '\x2', 
		'\x2', '\x5BF', '\x5E7', '\a', 'Y', '\x2', '\x2', '\x5C0', '\x5C2', '\a', 
		'\xAC', '\x2', '\x2', '\x5C1', '\x5C3', '\a', 'Y', '\x2', '\x2', '\x5C2', 
		'\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', '\x3', '\x2', '\x2', 
		'\x2', '\x5C3', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', 
		'\a', '\x163', '\x2', '\x2', '\x5C5', '\x5E7', '\a', '\x44C', '\x2', '\x2', 
		'\x5C6', '\x5C7', '\a', '\x161', '\x2', '\x2', '\x5C7', '\x5E7', '\t', 
		'\x11', '\x2', '\x2', '\x5C8', '\x5C9', '\a', '\x25A', '\x2', '\x2', '\x5C9', 
		'\x5E7', '\t', '\x12', '\x2', '\x2', '\x5CA', '\x5E7', '\x5', 'V', ',', 
		'\x2', '\x5CB', '\x5CC', '\a', '\x1C', '\x2', '\x2', '\x5CC', '\x5E7', 
		'\x5', '\x20A', '\x106', '\x2', '\x5CD', '\x5CE', '\a', '\x45', '\x2', 
		'\x2', '\x5CE', '\x5D0', '\a', '\n', '\x2', '\x2', '\x5CF', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5CF', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5D0', 
		'\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D2', '\a', '\xE', '\x2', 
		'\x2', '\x5D2', '\x5D3', '\a', '\x43D', '\x2', '\x2', '\x5D3', '\x5D4', 
		'\x5', '\x278', '\x13D', '\x2', '\x5D4', '\x5D6', '\a', '\x43E', '\x2', 
		'\x2', '\x5D5', '\x5D7', '\t', '\x13', '\x2', '\x2', '\x5D6', '\x5D5', 
		'\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D7', '\x3', '\x2', '\x2', '\x2', 
		'\x5D7', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', '\a', 
		'\xE6', '\x2', '\x2', '\x5D9', '\x5DA', '\a', '*', '\x2', '\x2', '\x5DA', 
		'\x5E7', '\a', '\x27B', '\x2', '\x2', '\x5DB', '\x5DD', '\a', '\x1F', 
		'\x2', '\x2', '\x5DC', '\x5DE', '\x5', '\x216', '\x10C', '\x2', '\x5DD', 
		'\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\x3', '\x2', '\x2', 
		'\x2', '\x5DE', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5DB', 
		'\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', '\x3', '\x2', '\x2', '\x2', 
		'\x5E0', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', '\a', 
		'\x1B', '\x2', '\x2', '\x5E2', '\x5E3', '\a', '\x43D', '\x2', '\x2', '\x5E3', 
		'\x5E4', '\x5', '\x278', '\x13D', '\x2', '\x5E4', '\x5E5', '\a', '\x43E', 
		'\x2', '\x2', '\x5E5', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5B1', 
		'\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E6', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5B5', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5E6', 
		'\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5C0', '\x3', '\x2', '\x2', 
		'\x2', '\x5E6', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5C6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5C8', '\x3', '\x2', '\x2', '\x2', 
		'\x5E6', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5CB', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5E6', 
		'\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', 'S', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5EA', '\a', 
		'\x1F', '\x2', '\x2', '\x5E9', '\x5EB', '\x5', '\x216', '\x10C', '\x2', 
		'\x5EA', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\x3', 
		'\x2', '\x2', '\x2', '\x5EB', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5EC', 
		'\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5EC', '\x5ED', '\x3', '\x2', '\x2', 
		'\x2', '\x5ED', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5EF', 
		'\a', '|', '\x2', '\x2', '\x5EF', '\x5F1', '\a', 'Y', '\x2', '\x2', '\x5F0', 
		'\x5F2', '\x5', '\x216', '\x10C', '\x2', '\x5F1', '\x5F0', '\x3', '\x2', 
		'\x2', '\x2', '\x5F1', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F4', 
		'\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F5', '\x5', '@', '!', '\x2', 
		'\x5F4', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F5', '\x3', 
		'\x2', '\x2', '\x2', '\x5F5', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x5FA', '\x5', '\x23A', '\x11E', '\x2', '\x5F7', '\x5F9', '\x5', '\x42', 
		'\"', '\x2', '\x5F8', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FC', 
		'\x3', '\x2', '\x2', '\x2', '\x5FA', '\x5F8', '\x3', '\x2', '\x2', '\x2', 
		'\x5FA', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x62E', '\x3', 
		'\x2', '\x2', '\x2', '\x5FC', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x5FD', 
		'\x5FF', '\a', '\x1F', '\x2', '\x2', '\x5FE', '\x600', '\x5', '\x216', 
		'\x10C', '\x2', '\x5FF', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FF', 
		'\x600', '\x3', '\x2', '\x2', '\x2', '\x600', '\x602', '\x3', '\x2', '\x2', 
		'\x2', '\x601', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x601', '\x602', 
		'\x3', '\x2', '\x2', '\x2', '\x602', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x603', '\x605', '\a', '\xAC', '\x2', '\x2', '\x604', '\x606', '\t', 
		'\x14', '\x2', '\x2', '\x605', '\x604', '\x3', '\x2', '\x2', '\x2', '\x605', 
		'\x606', '\x3', '\x2', '\x2', '\x2', '\x606', '\x608', '\x3', '\x2', '\x2', 
		'\x2', '\x607', '\x609', '\x5', '\x216', '\x10C', '\x2', '\x608', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\x3', '\x2', '\x2', '\x2', 
		'\x609', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x60A', '\x60C', '\x5', 
		'@', '!', '\x2', '\x60B', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x60B', 
		'\x60C', '\x3', '\x2', '\x2', '\x2', '\x60C', '\x60D', '\x3', '\x2', '\x2', 
		'\x2', '\x60D', '\x611', '\x5', '\x23A', '\x11E', '\x2', '\x60E', '\x610', 
		'\x5', '\x42', '\"', '\x2', '\x60F', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x610', '\x613', '\x3', '\x2', '\x2', '\x2', '\x611', '\x60F', '\x3', 
		'\x2', '\x2', '\x2', '\x611', '\x612', '\x3', '\x2', '\x2', '\x2', '\x612', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x613', '\x611', '\x3', '\x2', '\x2', 
		'\x2', '\x614', '\x616', '\a', '\x1F', '\x2', '\x2', '\x615', '\x617', 
		'\x5', '\x216', '\x10C', '\x2', '\x616', '\x615', '\x3', '\x2', '\x2', 
		'\x2', '\x616', '\x617', '\x3', '\x2', '\x2', '\x2', '\x617', '\x619', 
		'\x3', '\x2', '\x2', '\x2', '\x618', '\x614', '\x3', '\x2', '\x2', '\x2', 
		'\x618', '\x619', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61A', '\x3', 
		'\x2', '\x2', '\x2', '\x61A', '\x61B', '\a', '\x42', '\x2', '\x2', '\x61B', 
		'\x61D', '\a', 'Y', '\x2', '\x2', '\x61C', '\x61E', '\x5', '\x216', '\x10C', 
		'\x2', '\x61D', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61D', '\x61E', 
		'\x3', '\x2', '\x2', '\x2', '\x61E', '\x61F', '\x3', '\x2', '\x2', '\x2', 
		'\x61F', '\x620', '\x5', '\x23A', '\x11E', '\x2', '\x620', '\x621', '\x5', 
		'V', ',', '\x2', '\x621', '\x62E', '\x3', '\x2', '\x2', '\x2', '\x622', 
		'\x624', '\a', '\x1F', '\x2', '\x2', '\x623', '\x625', '\x5', '\x216', 
		'\x10C', '\x2', '\x624', '\x623', '\x3', '\x2', '\x2', '\x2', '\x624', 
		'\x625', '\x3', '\x2', '\x2', '\x2', '\x625', '\x627', '\x3', '\x2', '\x2', 
		'\x2', '\x626', '\x622', '\x3', '\x2', '\x2', '\x2', '\x626', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x627', '\x628', '\x3', '\x2', '\x2', '\x2', 
		'\x628', '\x629', '\a', '\x1B', '\x2', '\x2', '\x629', '\x62A', '\a', 
		'\x43D', '\x2', '\x2', '\x62A', '\x62B', '\x5', '\x278', '\x13D', '\x2', 
		'\x62B', '\x62C', '\a', '\x43E', '\x2', '\x2', '\x62C', '\x62E', '\x3', 
		'\x2', '\x2', '\x2', '\x62D', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x62D', 
		'\x601', '\x3', '\x2', '\x2', '\x2', '\x62D', '\x618', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x626', '\x3', '\x2', '\x2', '\x2', '\x62E', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x62F', '\x630', '\a', '\x82', '\x2', '\x2', '\x630', 
		'\x632', '\x5', '\x1FE', '\x100', '\x2', '\x631', '\x633', '\x5', '\x23A', 
		'\x11E', '\x2', '\x632', '\x631', '\x3', '\x2', '\x2', '\x2', '\x632', 
		'\x633', '\x3', '\x2', '\x2', '\x2', '\x633', '\x636', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x635', '\a', 'i', '\x2', '\x2', '\x635', '\x637', '\t', 
		'\x15', '\x2', '\x2', '\x636', '\x634', '\x3', '\x2', '\x2', '\x2', '\x636', 
		'\x637', '\x3', '\x2', '\x2', '\x2', '\x637', '\x639', '\x3', '\x2', '\x2', 
		'\x2', '\x638', '\x63A', '\x5', 'X', '-', '\x2', '\x639', '\x638', '\x3', 
		'\x2', '\x2', '\x2', '\x639', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x63A', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63C', '\a', 'q', '\x2', '\x2', 
		'\x63C', '\x63D', '\a', ',', '\x2', '\x2', '\x63D', '\x641', '\x5', 'Z', 
		'.', '\x2', '\x63E', '\x63F', '\a', 'q', '\x2', '\x2', '\x63F', '\x640', 
		'\a', '\xAF', '\x2', '\x2', '\x640', '\x642', '\x5', 'Z', '.', '\x2', 
		'\x641', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x641', '\x642', '\x3', 
		'\x2', '\x2', '\x2', '\x642', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x643', 
		'\x644', '\a', 'q', '\x2', '\x2', '\x644', '\x645', '\a', '\xAF', '\x2', 
		'\x2', '\x645', '\x649', '\x5', 'Z', '.', '\x2', '\x646', '\x647', '\a', 
		'q', '\x2', '\x2', '\x647', '\x648', '\a', ',', '\x2', '\x2', '\x648', 
		'\x64A', '\x5', 'Z', '.', '\x2', '\x649', '\x646', '\x3', '\x2', '\x2', 
		'\x2', '\x649', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64C', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x63B', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', '\x643', '\x3', '\x2', '\x2', '\x2', '\x64C', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x64D', '\x654', '\a', '\x8A', '\x2', '\x2', '\x64E', '\x654', 
		'\a', '\x16', '\x2', '\x2', '\x64F', '\x650', '\a', '\x93', '\x2', '\x2', 
		'\x650', '\x654', '\a', 'o', '\x2', '\x2', '\x651', '\x652', '\a', '\x1F5', 
		'\x2', '\x2', '\x652', '\x654', '\a', '\x141', '\x2', '\x2', '\x653', 
		'\x64D', '\x3', '\x2', '\x2', '\x2', '\x653', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x653', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x653', '\x651', 
		'\x3', '\x2', '\x2', '\x2', '\x654', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x655', '\x657', '\t', '\x14', '\x2', '\x2', '\x656', '\x658', '\x5', 
		'\x216', '\x10C', '\x2', '\x657', '\x656', '\x3', '\x2', '\x2', '\x2', 
		'\x657', '\x658', '\x3', '\x2', '\x2', '\x2', '\x658', '\x65A', '\x3', 
		'\x2', '\x2', '\x2', '\x659', '\x65B', '\x5', '@', '!', '\x2', '\x65A', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', 
		'\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x660', 
		'\x5', '\x23A', '\x11E', '\x2', '\x65D', '\x65F', '\x5', '\x42', '\"', 
		'\x2', '\x65E', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x662', 
		'\x3', '\x2', '\x2', '\x2', '\x660', '\x65E', '\x3', '\x2', '\x2', '\x2', 
		'\x660', '\x661', '\x3', '\x2', '\x2', '\x2', '\x661', '\x672', '\x3', 
		'\x2', '\x2', '\x2', '\x662', '\x660', '\x3', '\x2', '\x2', '\x2', '\x663', 
		'\x665', '\t', '\x16', '\x2', '\x2', '\x664', '\x666', '\t', '\x14', '\x2', 
		'\x2', '\x665', '\x664', '\x3', '\x2', '\x2', '\x2', '\x665', '\x666', 
		'\x3', '\x2', '\x2', '\x2', '\x666', '\x668', '\x3', '\x2', '\x2', '\x2', 
		'\x667', '\x669', '\x5', '\x216', '\x10C', '\x2', '\x668', '\x667', '\x3', 
		'\x2', '\x2', '\x2', '\x668', '\x669', '\x3', '\x2', '\x2', '\x2', '\x669', 
		'\x66A', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66E', '\x5', '\x23A', 
		'\x11E', '\x2', '\x66B', '\x66D', '\x5', '\x42', '\"', '\x2', '\x66C', 
		'\x66B', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x670', '\x3', '\x2', '\x2', 
		'\x2', '\x66E', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x66F', 
		'\x3', '\x2', '\x2', '\x2', '\x66F', '\x672', '\x3', '\x2', '\x2', '\x2', 
		'\x670', '\x66E', '\x3', '\x2', '\x2', '\x2', '\x671', '\x655', '\x3', 
		'\x2', '\x2', '\x2', '\x671', '\x663', '\x3', '\x2', '\x2', '\x2', '\x672', 
		']', '\x3', '\x2', '\x2', '\x2', '\x673', '\x675', '\a', '\x189', '\x2', 
		'\x2', '\x674', '\x676', '\a', '\x434', '\x2', '\x2', '\x675', '\x674', 
		'\x3', '\x2', '\x2', '\x2', '\x675', '\x676', '\x3', '\x2', '\x2', '\x2', 
		'\x676', '\x678', '\x3', '\x2', '\x2', '\x2', '\x677', '\x679', '\x5', 
		'\x20C', '\x107', '\x2', '\x678', '\x677', '\x3', '\x2', '\x2', '\x2', 
		'\x678', '\x679', '\x3', '\x2', '\x2', '\x2', '\x679', '\x709', '\x3', 
		'\x2', '\x2', '\x2', '\x67A', '\x67C', '\a', '\x14A', '\x2', '\x2', '\x67B', 
		'\x67D', '\a', '\x434', '\x2', '\x2', '\x67C', '\x67B', '\x3', '\x2', 
		'\x2', '\x2', '\x67C', '\x67D', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', 
		'\x3', '\x2', '\x2', '\x2', '\x67E', '\x709', '\x5', '\x21C', '\x10F', 
		'\x2', '\x67F', '\x681', '\a', '\x14B', '\x2', '\x2', '\x680', '\x682', 
		'\a', '\x434', '\x2', '\x2', '\x681', '\x680', '\x3', '\x2', '\x2', '\x2', 
		'\x681', '\x682', '\x3', '\x2', '\x2', '\x2', '\x682', '\x683', '\x3', 
		'\x2', '\x2', '\x2', '\x683', '\x709', '\x5', '\x21C', '\x10F', '\x2', 
		'\x684', '\x686', '\a', '*', '\x2', '\x2', '\x685', '\x684', '\x3', '\x2', 
		'\x2', '\x2', '\x685', '\x686', '\x3', '\x2', '\x2', '\x2', '\x686', '\x68A', 
		'\x3', '\x2', '\x2', '\x2', '\x687', '\x688', '\a', '\x1A', '\x2', '\x2', 
		'\x688', '\x68B', '\a', '\x93', '\x2', '\x2', '\x689', '\x68B', '\a', 
		'\x31D', '\x2', '\x2', '\x68A', '\x687', '\x3', '\x2', '\x2', '\x2', '\x68A', 
		'\x689', '\x3', '\x2', '\x2', '\x2', '\x68B', '\x68D', '\x3', '\x2', '\x2', 
		'\x2', '\x68C', '\x68E', '\a', '\x434', '\x2', '\x2', '\x68D', '\x68C', 
		'\x3', '\x2', '\x2', '\x2', '\x68D', '\x68E', '\x3', '\x2', '\x2', '\x2', 
		'\x68E', '\x691', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x692', '\x5', 
		'\x208', '\x105', '\x2', '\x690', '\x692', '\a', '*', '\x2', '\x2', '\x691', 
		'\x68F', '\x3', '\x2', '\x2', '\x2', '\x691', '\x690', '\x3', '\x2', '\x2', 
		'\x2', '\x692', '\x709', '\x3', '\x2', '\x2', '\x2', '\x693', '\x695', 
		'\t', '\x17', '\x2', '\x2', '\x694', '\x696', '\a', '\x434', '\x2', '\x2', 
		'\x695', '\x694', '\x3', '\x2', '\x2', '\x2', '\x695', '\x696', '\x3', 
		'\x2', '\x2', '\x2', '\x696', '\x697', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x709', '\t', '\x18', '\x2', '\x2', '\x698', '\x69A', '\a', '*', '\x2', 
		'\x2', '\x699', '\x698', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', 
		'\x3', '\x2', '\x2', '\x2', '\x69A', '\x69B', '\x3', '\x2', '\x2', '\x2', 
		'\x69B', '\x69D', '\a', '\x1C', '\x2', '\x2', '\x69C', '\x69E', '\a', 
		'\x434', '\x2', '\x2', '\x69D', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69D', 
		'\x69E', '\x3', '\x2', '\x2', '\x2', '\x69E', '\x69F', '\x3', '\x2', '\x2', 
		'\x2', '\x69F', '\x709', '\x5', '\x20A', '\x106', '\x2', '\x6A0', '\x6A2', 
		'\a', '\x163', '\x2', '\x2', '\x6A1', '\x6A3', '\a', '\x434', '\x2', '\x2', 
		'\x6A2', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A3', '\x3', 
		'\x2', '\x2', '\x2', '\x6A3', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6A4', 
		'\x709', '\a', '\x44C', '\x2', '\x2', '\x6A5', '\x6A7', '\a', '\x168', 
		'\x2', '\x2', '\x6A6', '\x6A8', '\a', '\x434', '\x2', '\x2', '\x6A7', 
		'\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', '\x3', '\x2', '\x2', 
		'\x2', '\x6A8', '\x6A9', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x709', 
		'\t', '\x19', '\x2', '\x2', '\x6AA', '\x6AC', '\a', '\x16B', '\x2', '\x2', 
		'\x6AB', '\x6AD', '\a', '\x434', '\x2', '\x2', '\x6AC', '\x6AB', '\x3', 
		'\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AD', 
		'\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x709', '\a', '\x44C', 
		'\x2', '\x2', '\x6AF', '\x6B0', '\a', '\x176', '\x2', '\x2', '\x6B0', 
		'\x6B2', '\a', '\x17D', '\x2', '\x2', '\x6B1', '\x6B3', '\a', '\x434', 
		'\x2', '\x2', '\x6B2', '\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6B3', 
		'\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\x3', '\x2', '\x2', '\x2', 
		'\x6B4', '\x709', '\a', '\x44C', '\x2', '\x2', '\x6B5', '\x6B7', '\a', 
		'\x17B', '\x2', '\x2', '\x6B6', '\x6B8', '\a', '\x434', '\x2', '\x2', 
		'\x6B7', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B8', '\x3', 
		'\x2', '\x2', '\x2', '\x6B8', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x709', '\t', '\x18', '\x2', '\x2', '\x6BA', '\x6BC', '\a', '\x186', 
		'\x2', '\x2', '\x6BB', '\x6BD', '\a', '\x434', '\x2', '\x2', '\x6BC', 
		'\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BD', '\x3', '\x2', '\x2', 
		'\x2', '\x6BD', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x709', 
		'\a', '\x44C', '\x2', '\x2', '\x6BF', '\x6C0', '\a', 'O', '\x2', '\x2', 
		'\x6C0', '\x6C2', '\a', '\x17D', '\x2', '\x2', '\x6C1', '\x6C3', '\a', 
		'\x434', '\x2', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x709', '\a', '\x44C', '\x2', '\x2', '\x6C5', '\x6C7', 
		'\a', '\x1B4', '\x2', '\x2', '\x6C6', '\x6C8', '\a', '\x434', '\x2', '\x2', 
		'\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\x3', 
		'\x2', '\x2', '\x2', '\x6C8', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C9', 
		'\x709', '\t', '\x1A', '\x2', '\x2', '\x6CA', '\x6CC', '\a', '\x1BF', 
		'\x2', '\x2', '\x6CB', '\x6CD', '\a', '\x434', '\x2', '\x2', '\x6CC', 
		'\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CD', '\x3', '\x2', '\x2', 
		'\x2', '\x6CD', '\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x709', 
		'\x5', '\x21E', '\x110', '\x2', '\x6CF', '\x6D1', '\a', '\x1E0', '\x2', 
		'\x2', '\x6D0', '\x6D2', '\a', '\x434', '\x2', '\x2', '\x6D1', '\x6D0', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D2', '\x3', '\x2', '\x2', '\x2', 
		'\x6D2', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x709', '\x5', 
		'\x21C', '\x10F', '\x2', '\x6D4', '\x6D6', '\a', '\x1EA', '\x2', '\x2', 
		'\x6D5', '\x6D7', '\a', '\x434', '\x2', '\x2', '\x6D6', '\x6D5', '\x3', 
		'\x2', '\x2', '\x2', '\x6D6', '\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6D7', 
		'\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x709', '\x5', '\x21C', 
		'\x10F', '\x2', '\x6D9', '\x6DB', '\a', '\x205', '\x2', '\x2', '\x6DA', 
		'\x6DC', '\a', '\x434', '\x2', '\x2', '\x6DB', '\x6DA', '\x3', '\x2', 
		'\x2', '\x2', '\x6DB', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x6DD', 
		'\x3', '\x2', '\x2', '\x2', '\x6DD', '\x709', '\t', '\x1B', '\x2', '\x2', 
		'\x6DE', '\x6E0', '\a', '\x20B', '\x2', '\x2', '\x6DF', '\x6E1', '\a', 
		'\x434', '\x2', '\x2', '\x6E0', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6E0', 
		'\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', '\x2', '\x2', 
		'\x2', '\x6E2', '\x709', '\a', '\x44C', '\x2', '\x2', '\x6E3', '\x6E5', 
		'\a', '\x23A', '\x2', '\x2', '\x6E4', '\x6E6', '\a', '\x434', '\x2', '\x2', 
		'\x6E5', '\x6E4', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E6', '\x3', 
		'\x2', '\x2', '\x2', '\x6E6', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E7', 
		'\x709', '\t', '\x1C', '\x2', '\x2', '\x6E8', '\x6EA', '\a', '\x255', 
		'\x2', '\x2', '\x6E9', '\x6EB', '\a', '\x434', '\x2', '\x2', '\x6EA', 
		'\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', '\x3', '\x2', '\x2', 
		'\x2', '\x6EB', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x709', 
		'\t', '\x1B', '\x2', '\x2', '\x6ED', '\x6EF', '\a', '\x256', '\x2', '\x2', 
		'\x6EE', '\x6F0', '\a', '\x434', '\x2', '\x2', '\x6EF', '\x6EE', '\x3', 
		'\x2', '\x2', '\x2', '\x6EF', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F0', 
		'\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x709', '\t', '\x1B', '\x2', 
		'\x2', '\x6F2', '\x6F4', '\a', '\x257', '\x2', '\x2', '\x6F3', '\x6F5', 
		'\a', '\x434', '\x2', '\x2', '\x6F4', '\x6F3', '\x3', '\x2', '\x2', '\x2', 
		'\x6F4', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\x3', 
		'\x2', '\x2', '\x2', '\x6F6', '\x709', '\x5', '\x21C', '\x10F', '\x2', 
		'\x6F7', '\x6F8', '\a', '\x265', '\x2', '\x2', '\x6F8', '\x6FA', '\x5', 
		'\x216', '\x10C', '\x2', '\x6F9', '\x6FB', '\x5', '\x62', '\x32', '\x2', 
		'\x6FA', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6FB', '\x3', 
		'\x2', '\x2', '\x2', '\x6FB', '\x709', '\x3', '\x2', '\x2', '\x2', '\x6FC', 
		'\x6FD', '\a', '\x266', '\x2', '\x2', '\x6FD', '\x6FE', '\a', '\x434', 
		'\x2', '\x2', '\x6FE', '\x709', '\x5', '`', '\x31', '\x2', '\x6FF', '\x709', 
		'\x5', '\x62', '\x32', '\x2', '\x700', '\x702', '\a', '\xAB', '\x2', '\x2', 
		'\x701', '\x703', '\a', '\x434', '\x2', '\x2', '\x702', '\x701', '\x3', 
		'\x2', '\x2', '\x2', '\x702', '\x703', '\x3', '\x2', '\x2', '\x2', '\x703', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x704', '\x705', '\a', '\x43D', 
		'\x2', '\x2', '\x705', '\x706', '\x5', '\x238', '\x11D', '\x2', '\x706', 
		'\x707', '\a', '\x43E', '\x2', '\x2', '\x707', '\x709', '\x3', '\x2', 
		'\x2', '\x2', '\x708', '\x673', '\x3', '\x2', '\x2', '\x2', '\x708', '\x67A', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x67F', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x685', '\x3', '\x2', '\x2', '\x2', '\x708', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x699', '\x3', '\x2', '\x2', '\x2', '\x708', 
		'\x6A0', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6A5', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6AF', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x6B5', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6BF', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x708', 
		'\x6CA', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6CF', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6D9', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x6DE', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6E8', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x6ED', '\x3', '\x2', '\x2', '\x2', '\x708', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6F7', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x708', '\x6FF', 
		'\x3', '\x2', '\x2', '\x2', '\x708', '\x700', '\x3', '\x2', '\x2', '\x2', 
		'\x709', '_', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x70B', '\t', '\x1D', 
		'\x2', '\x2', '\x70B', '\x61', '\x3', '\x2', '\x2', '\x2', '\x70C', '\x70D', 
		'\a', '\x25A', '\x2', '\x2', '\x70D', '\x70E', '\t', '\x12', '\x2', '\x2', 
		'\x70E', '\x63', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x710', '\a', '{', 
		'\x2', '\x2', '\x710', '\x711', '\a', '\x14', '\x2', '\x2', '\x711', '\x714', 
		'\x5', '\x66', '\x34', '\x2', '\x712', '\x713', '\a', '\x20A', '\x2', 
		'\x2', '\x713', '\x715', '\x5', '\x21C', '\x10F', '\x2', '\x714', '\x712', 
		'\x3', '\x2', '\x2', '\x2', '\x714', '\x715', '\x3', '\x2', '\x2', '\x2', 
		'\x715', '\x71D', '\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\a', 
		'\x25F', '\x2', '\x2', '\x717', '\x718', '\a', '\x14', '\x2', '\x2', '\x718', 
		'\x71B', '\x5', 'h', '\x35', '\x2', '\x719', '\x71A', '\a', '\x260', '\x2', 
		'\x2', '\x71A', '\x71C', '\x5', '\x21C', '\x10F', '\x2', '\x71B', '\x719', 
		'\x3', '\x2', '\x2', '\x2', '\x71B', '\x71C', '\x3', '\x2', '\x2', '\x2', 
		'\x71C', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x716', '\x3', 
		'\x2', '\x2', '\x2', '\x71D', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71E', 
		'\x72A', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', '\a', '\x43D', 
		'\x2', '\x2', '\x720', '\x725', '\x5', 'j', '\x36', '\x2', '\x721', '\x722', 
		'\a', '\x43F', '\x2', '\x2', '\x722', '\x724', '\x5', 'j', '\x36', '\x2', 
		'\x723', '\x721', '\x3', '\x2', '\x2', '\x2', '\x724', '\x727', '\x3', 
		'\x2', '\x2', '\x2', '\x725', '\x723', '\x3', '\x2', '\x2', '\x2', '\x725', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x726', '\x728', '\x3', '\x2', '\x2', 
		'\x2', '\x727', '\x725', '\x3', '\x2', '\x2', '\x2', '\x728', '\x729', 
		'\a', '\x43E', '\x2', '\x2', '\x729', '\x72B', '\x3', '\x2', '\x2', '\x2', 
		'\x72A', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x72B', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x65', '\x3', '\x2', '\x2', '\x2', '\x72C', 
		'\x72E', '\a', '\x61', '\x2', '\x2', '\x72D', '\x72C', '\x3', '\x2', '\x2', 
		'\x2', '\x72D', '\x72E', '\x3', '\x2', '\x2', '\x2', '\x72E', '\x72F', 
		'\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', '\a', '\x1AA', '\x2', '\x2', 
		'\x730', '\x731', '\a', '\x43D', '\x2', '\x2', '\x731', '\x732', '\x5', 
		'\x278', '\x13D', '\x2', '\x732', '\x733', '\a', '\x43E', '\x2', '\x2', 
		'\x733', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x734', '\x736', '\a', 
		'\x61', '\x2', '\x2', '\x735', '\x734', '\x3', '\x2', '\x2', '\x2', '\x735', 
		'\x736', '\x3', '\x2', '\x2', '\x2', '\x736', '\x737', '\x3', '\x2', '\x2', 
		'\x2', '\x737', '\x73B', '\a', 'Y', '\x2', '\x2', '\x738', '\x739', '\a', 
		'\x144', '\x2', '\x2', '\x739', '\x73A', '\a', '\x434', '\x2', '\x2', 
		'\x73A', '\x73C', '\t', '\x1E', '\x2', '\x2', '\x73B', '\x738', '\x3', 
		'\x2', '\x2', '\x2', '\x73B', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x73D', '\x73E', '\a', '\x43D', 
		'\x2', '\x2', '\x73E', '\x73F', '\x5', '\x236', '\x11C', '\x2', '\x73F', 
		'\x740', '\a', '\x43E', '\x2', '\x2', '\x740', '\x75A', '\x3', '\x2', 
		'\x2', '\x2', '\x741', '\x74B', '\a', '\x7F', '\x2', '\x2', '\x742', '\x743', 
		'\a', '\x43D', '\x2', '\x2', '\x743', '\x744', '\x5', '\x278', '\x13D', 
		'\x2', '\x744', '\x745', '\a', '\x43E', '\x2', '\x2', '\x745', '\x74C', 
		'\x3', '\x2', '\x2', '\x2', '\x746', '\x747', '\a', '\x160', '\x2', '\x2', 
		'\x747', '\x748', '\a', '\x43D', '\x2', '\x2', '\x748', '\x749', '\x5', 
		'\x236', '\x11C', '\x2', '\x749', '\x74A', '\a', '\x43E', '\x2', '\x2', 
		'\x74A', '\x74C', '\x3', '\x2', '\x2', '\x2', '\x74B', '\x742', '\x3', 
		'\x2', '\x2', '\x2', '\x74B', '\x746', '\x3', '\x2', '\x2', '\x2', '\x74C', 
		'\x75A', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x757', '\a', '\x1C5', 
		'\x2', '\x2', '\x74E', '\x74F', '\a', '\x43D', '\x2', '\x2', '\x74F', 
		'\x750', '\x5', '\x278', '\x13D', '\x2', '\x750', '\x751', '\a', '\x43E', 
		'\x2', '\x2', '\x751', '\x758', '\x3', '\x2', '\x2', '\x2', '\x752', '\x753', 
		'\a', '\x160', '\x2', '\x2', '\x753', '\x754', '\a', '\x43D', '\x2', '\x2', 
		'\x754', '\x755', '\x5', '\x236', '\x11C', '\x2', '\x755', '\x756', '\a', 
		'\x43E', '\x2', '\x2', '\x756', '\x758', '\x3', '\x2', '\x2', '\x2', '\x757', 
		'\x74E', '\x3', '\x2', '\x2', '\x2', '\x757', '\x752', '\x3', '\x2', '\x2', 
		'\x2', '\x758', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x759', '\x72D', 
		'\x3', '\x2', '\x2', '\x2', '\x759', '\x735', '\x3', '\x2', '\x2', '\x2', 
		'\x759', '\x741', '\x3', '\x2', '\x2', '\x2', '\x759', '\x74D', '\x3', 
		'\x2', '\x2', '\x2', '\x75A', 'g', '\x3', '\x2', '\x2', '\x2', '\x75B', 
		'\x75D', '\a', '\x61', '\x2', '\x2', '\x75C', '\x75B', '\x3', '\x2', '\x2', 
		'\x2', '\x75C', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x75D', '\x75E', 
		'\x3', '\x2', '\x2', '\x2', '\x75E', '\x75F', '\a', '\x1AA', '\x2', '\x2', 
		'\x75F', '\x760', '\a', '\x43D', '\x2', '\x2', '\x760', '\x761', '\x5', 
		'\x278', '\x13D', '\x2', '\x761', '\x762', '\a', '\x43E', '\x2', '\x2', 
		'\x762', '\x771', '\x3', '\x2', '\x2', '\x2', '\x763', '\x765', '\a', 
		'\x61', '\x2', '\x2', '\x764', '\x763', '\x3', '\x2', '\x2', '\x2', '\x764', 
		'\x765', '\x3', '\x2', '\x2', '\x2', '\x765', '\x766', '\x3', '\x2', '\x2', 
		'\x2', '\x766', '\x76A', '\a', 'Y', '\x2', '\x2', '\x767', '\x768', '\a', 
		'\x144', '\x2', '\x2', '\x768', '\x769', '\a', '\x434', '\x2', '\x2', 
		'\x769', '\x76B', '\t', '\x1E', '\x2', '\x2', '\x76A', '\x767', '\x3', 
		'\x2', '\x2', '\x2', '\x76A', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x76B', 
		'\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', '\a', '\x43D', 
		'\x2', '\x2', '\x76D', '\x76E', '\x5', '\x236', '\x11C', '\x2', '\x76E', 
		'\x76F', '\a', '\x43E', '\x2', '\x2', '\x76F', '\x771', '\x3', '\x2', 
		'\x2', '\x2', '\x770', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x770', '\x764', 
		'\x3', '\x2', '\x2', '\x2', '\x771', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x772', '\x773', '\a', '{', '\x2', '\x2', '\x773', '\x774', '\x5', '\x216', 
		'\x10C', '\x2', '\x774', '\x775', '\a', '\xB3', '\x2', '\x2', '\x775', 
		'\x776', '\a', '\x1C3', '\x2', '\x2', '\x776', '\x777', '\a', '\x269', 
		'\x2', '\x2', '\x777', '\x778', '\a', '\x43D', '\x2', '\x2', '\x778', 
		'\x77D', '\x5', 'l', '\x37', '\x2', '\x779', '\x77A', '\a', '\x43F', '\x2', 
		'\x2', '\x77A', '\x77C', '\x5', 'l', '\x37', '\x2', '\x77B', '\x779', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x77F', '\x3', '\x2', '\x2', '\x2', 
		'\x77D', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x77E', '\x3', 
		'\x2', '\x2', '\x2', '\x77E', '\x780', '\x3', '\x2', '\x2', '\x2', '\x77F', 
		'\x77D', '\x3', '\x2', '\x2', '\x2', '\x780', '\x784', '\a', '\x43E', 
		'\x2', '\x2', '\x781', '\x783', '\x5', 'r', ':', '\x2', '\x782', '\x781', 
		'\x3', '\x2', '\x2', '\x2', '\x783', '\x786', '\x3', '\x2', '\x2', '\x2', 
		'\x784', '\x782', '\x3', '\x2', '\x2', '\x2', '\x784', '\x785', '\x3', 
		'\x2', '\x2', '\x2', '\x785', '\x792', '\x3', '\x2', '\x2', '\x2', '\x786', 
		'\x784', '\x3', '\x2', '\x2', '\x2', '\x787', '\x788', '\a', '\x43D', 
		'\x2', '\x2', '\x788', '\x78D', '\x5', 'p', '\x39', '\x2', '\x789', '\x78A', 
		'\a', '\x43F', '\x2', '\x2', '\x78A', '\x78C', '\x5', 'p', '\x39', '\x2', 
		'\x78B', '\x789', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x78F', '\x3', 
		'\x2', '\x2', '\x2', '\x78D', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78D', 
		'\x78E', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x790', '\x3', '\x2', '\x2', 
		'\x2', '\x78F', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x790', '\x791', 
		'\a', '\x43E', '\x2', '\x2', '\x791', '\x793', '\x3', '\x2', '\x2', '\x2', 
		'\x792', '\x787', '\x3', '\x2', '\x2', '\x2', '\x792', '\x793', '\x3', 
		'\x2', '\x2', '\x2', '\x793', '\x805', '\x3', '\x2', '\x2', '\x2', '\x794', 
		'\x795', '\a', '{', '\x2', '\x2', '\x795', '\x796', '\x5', '\x216', '\x10C', 
		'\x2', '\x796', '\x797', '\a', '\xB3', '\x2', '\x2', '\x797', '\x798', 
		'\a', '\x1C3', '\x2', '\x2', '\x798', '\x799', '\a', '\x269', '\x2', '\x2', 
		'\x799', '\x79D', '\x5', 'l', '\x37', '\x2', '\x79A', '\x79C', '\x5', 
		'r', ':', '\x2', '\x79B', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x79C', 
		'\x79F', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x79B', '\x3', '\x2', '\x2', 
		'\x2', '\x79D', '\x79E', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x7AB', 
		'\x3', '\x2', '\x2', '\x2', '\x79F', '\x79D', '\x3', '\x2', '\x2', '\x2', 
		'\x7A0', '\x7A1', '\a', '\x43D', '\x2', '\x2', '\x7A1', '\x7A6', '\x5', 
		'p', '\x39', '\x2', '\x7A2', '\x7A3', '\a', '\x43F', '\x2', '\x2', '\x7A3', 
		'\x7A5', '\x5', 'p', '\x39', '\x2', '\x7A4', '\x7A2', '\x3', '\x2', '\x2', 
		'\x2', '\x7A5', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A4', 
		'\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', '\x3', '\x2', '\x2', '\x2', 
		'\x7A7', '\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7A8', '\x7A6', '\x3', 
		'\x2', '\x2', '\x2', '\x7A9', '\x7AA', '\a', '\x43E', '\x2', '\x2', '\x7AA', 
		'\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AB', '\x7A0', '\x3', '\x2', '\x2', 
		'\x2', '\x7AB', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x805', 
		'\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', '\a', '{', '\x2', '\x2', 
		'\x7AE', '\x7AF', '\x5', '\x216', '\x10C', '\x2', '\x7AF', '\x7B0', '\a', 
		'\xB3', '\x2', '\x2', '\x7B0', '\x7B1', '\a', 'N', '\x2', '\x2', '\x7B1', 
		'\x7B2', '\a', '\x43D', '\x2', '\x2', '\x7B2', '\x7B7', '\x5', 'l', '\x37', 
		'\x2', '\x7B3', '\x7B4', '\a', '\x43F', '\x2', '\x2', '\x7B4', '\x7B6', 
		'\x5', 'l', '\x37', '\x2', '\x7B5', '\x7B3', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7B9', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B5', '\x3', 
		'\x2', '\x2', '\x2', '\x7B7', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7B8', 
		'\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7B7', '\x3', '\x2', '\x2', 
		'\x2', '\x7BA', '\x7BE', '\a', '\x43E', '\x2', '\x2', '\x7BB', '\x7BD', 
		'\x5', 'r', ':', '\x2', '\x7BC', '\x7BB', '\x3', '\x2', '\x2', '\x2', 
		'\x7BD', '\x7C0', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7BC', '\x3', 
		'\x2', '\x2', '\x2', '\x7BE', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7BF', 
		'\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7BE', '\x3', '\x2', '\x2', 
		'\x2', '\x7C1', '\x7C2', '\a', '\x43D', '\x2', '\x2', '\x7C2', '\x7C7', 
		'\x5', 'p', '\x39', '\x2', '\x7C3', '\x7C4', '\a', '\x43F', '\x2', '\x2', 
		'\x7C4', '\x7C6', '\x5', 'p', '\x39', '\x2', '\x7C5', '\x7C3', '\x3', 
		'\x2', '\x2', '\x2', '\x7C6', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C7', 
		'\x7C5', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\x3', '\x2', '\x2', 
		'\x2', '\x7C8', '\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7C7', 
		'\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\a', '\x43E', '\x2', '\x2', 
		'\x7CB', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7C1', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', 
		'\x805', '\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7CF', '\a', '{', '\x2', 
		'\x2', '\x7CF', '\x7D0', '\x5', '\x216', '\x10C', '\x2', '\x7D0', '\x7D1', 
		'\a', '\xB3', '\x2', '\x2', '\x7D1', '\x7D2', '\a', 'N', '\x2', '\x2', 
		'\x7D2', '\x7D3', '\a', '\x43D', '\x2', '\x2', '\x7D3', '\x7D8', '\x5', 
		'n', '\x38', '\x2', '\x7D4', '\x7D5', '\a', '\x43F', '\x2', '\x2', '\x7D5', 
		'\x7D7', '\x5', 'n', '\x38', '\x2', '\x7D6', '\x7D4', '\x3', '\x2', '\x2', 
		'\x2', '\x7D7', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7D6', 
		'\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7D9', '\x3', '\x2', '\x2', '\x2', 
		'\x7D9', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7D8', '\x3', 
		'\x2', '\x2', '\x2', '\x7DB', '\x7DF', '\a', '\x43E', '\x2', '\x2', '\x7DC', 
		'\x7DE', '\x5', 'r', ':', '\x2', '\x7DD', '\x7DC', '\x3', '\x2', '\x2', 
		'\x2', '\x7DE', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7DD', 
		'\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E0', '\x3', '\x2', '\x2', '\x2', 
		'\x7E0', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7DF', '\x3', 
		'\x2', '\x2', '\x2', '\x7E2', '\x7E3', '\a', '\x43D', '\x2', '\x2', '\x7E3', 
		'\x7E8', '\x5', 'p', '\x39', '\x2', '\x7E4', '\x7E5', '\a', '\x43F', '\x2', 
		'\x2', '\x7E5', '\x7E7', '\x5', 'p', '\x39', '\x2', '\x7E6', '\x7E4', 
		'\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7EA', '\x3', '\x2', '\x2', '\x2', 
		'\x7E8', '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E8', '\x7E9', '\x3', 
		'\x2', '\x2', '\x2', '\x7E9', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x7EA', 
		'\x7E8', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x7EC', '\a', '\x43E', 
		'\x2', '\x2', '\x7EC', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7ED', '\x7E2', 
		'\x3', '\x2', '\x2', '\x2', '\x7ED', '\x7EE', '\x3', '\x2', '\x2', '\x2', 
		'\x7EE', '\x805', '\x3', '\x2', '\x2', '\x2', '\x7EF', '\x7F0', '\a', 
		'{', '\x2', '\x2', '\x7F0', '\x7F4', '\x5', '\x216', '\x10C', '\x2', '\x7F1', 
		'\x7F3', '\x5', 'r', ':', '\x2', '\x7F2', '\x7F1', '\x3', '\x2', '\x2', 
		'\x2', '\x7F3', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F2', 
		'\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', '\x3', '\x2', '\x2', '\x2', 
		'\x7F5', '\x802', '\x3', '\x2', '\x2', '\x2', '\x7F6', '\x7F4', '\x3', 
		'\x2', '\x2', '\x2', '\x7F7', '\x7F8', '\a', '\x43D', '\x2', '\x2', '\x7F8', 
		'\x7FD', '\x5', 'p', '\x39', '\x2', '\x7F9', '\x7FA', '\a', '\x43F', '\x2', 
		'\x2', '\x7FA', '\x7FC', '\x5', 'p', '\x39', '\x2', '\x7FB', '\x7F9', 
		'\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FF', '\x3', '\x2', '\x2', '\x2', 
		'\x7FD', '\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FD', '\x7FE', '\x3', 
		'\x2', '\x2', '\x2', '\x7FE', '\x800', '\x3', '\x2', '\x2', '\x2', '\x7FF', 
		'\x7FD', '\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\a', '\x43E', 
		'\x2', '\x2', '\x801', '\x803', '\x3', '\x2', '\x2', '\x2', '\x802', '\x7F7', 
		'\x3', '\x2', '\x2', '\x2', '\x802', '\x803', '\x3', '\x2', '\x2', '\x2', 
		'\x803', '\x805', '\x3', '\x2', '\x2', '\x2', '\x804', '\x772', '\x3', 
		'\x2', '\x2', '\x2', '\x804', '\x794', '\x3', '\x2', '\x2', '\x2', '\x804', 
		'\x7AD', '\x3', '\x2', '\x2', '\x2', '\x804', '\x7CE', '\x3', '\x2', '\x2', 
		'\x2', '\x804', '\x7EF', '\x3', '\x2', '\x2', '\x2', '\x805', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x806', '\x80A', '\x5', '\x228', '\x115', '\x2', 
		'\x807', '\x80A', '\x5', '\x278', '\x13D', '\x2', '\x808', '\x80A', '\a', 
		'j', '\x2', '\x2', '\x809', '\x806', '\x3', '\x2', '\x2', '\x2', '\x809', 
		'\x807', '\x3', '\x2', '\x2', '\x2', '\x809', '\x808', '\x3', '\x2', '\x2', 
		'\x2', '\x80A', 'm', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80C', '\a', 
		'\x43D', '\x2', '\x2', '\x80C', '\x80F', '\x5', 'l', '\x37', '\x2', '\x80D', 
		'\x80E', '\a', '\x43F', '\x2', '\x2', '\x80E', '\x810', '\x5', 'l', '\x37', 
		'\x2', '\x80F', '\x80D', '\x3', '\x2', '\x2', '\x2', '\x810', '\x811', 
		'\x3', '\x2', '\x2', '\x2', '\x811', '\x80F', '\x3', '\x2', '\x2', '\x2', 
		'\x811', '\x812', '\x3', '\x2', '\x2', '\x2', '\x812', '\x813', '\x3', 
		'\x2', '\x2', '\x2', '\x813', '\x814', '\a', '\x43E', '\x2', '\x2', '\x814', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x815', '\x816', '\a', '\x25F', '\x2', 
		'\x2', '\x816', '\x81A', '\x5', '\x216', '\x10C', '\x2', '\x817', '\x819', 
		'\x5', 'r', ':', '\x2', '\x818', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'\x819', '\x81C', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x818', '\x3', 
		'\x2', '\x2', '\x2', '\x81A', '\x81B', '\x3', '\x2', '\x2', '\x2', '\x81B', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x81C', '\x81A', '\x3', '\x2', '\x2', 
		'\x2', '\x81D', '\x81F', '\a', '*', '\x2', '\x2', '\x81E', '\x81D', '\x3', 
		'\x2', '\x2', '\x2', '\x81E', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x81F', 
		'\x821', '\x3', '\x2', '\x2', '\x2', '\x820', '\x822', '\a', '\x25A', 
		'\x2', '\x2', '\x821', '\x820', '\x3', '\x2', '\x2', '\x2', '\x821', '\x822', 
		'\x3', '\x2', '\x2', '\x2', '\x822', '\x823', '\x3', '\x2', '\x2', '\x2', 
		'\x823', '\x825', '\a', '\x189', '\x2', '\x2', '\x824', '\x826', '\a', 
		'\x434', '\x2', '\x2', '\x825', '\x824', '\x3', '\x2', '\x2', '\x2', '\x825', 
		'\x826', '\x3', '\x2', '\x2', '\x2', '\x826', '\x827', '\x3', '\x2', '\x2', 
		'\x2', '\x827', '\x84E', '\x5', '\x20C', '\x107', '\x2', '\x828', '\x82A', 
		'\a', '\x163', '\x2', '\x2', '\x829', '\x82B', '\a', '\x434', '\x2', '\x2', 
		'\x82A', '\x829', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x82C', '\x3', '\x2', '\x2', '\x2', '\x82C', 
		'\x84E', '\a', '\x44C', '\x2', '\x2', '\x82D', '\x82E', '\a', '\x176', 
		'\x2', '\x2', '\x82E', '\x830', '\a', '\x17D', '\x2', '\x2', '\x82F', 
		'\x831', '\a', '\x434', '\x2', '\x2', '\x830', '\x82F', '\x3', '\x2', 
		'\x2', '\x2', '\x830', '\x831', '\x3', '\x2', '\x2', '\x2', '\x831', '\x832', 
		'\x3', '\x2', '\x2', '\x2', '\x832', '\x84E', '\a', '\x44C', '\x2', '\x2', 
		'\x833', '\x834', '\a', 'O', '\x2', '\x2', '\x834', '\x836', '\a', '\x17D', 
		'\x2', '\x2', '\x835', '\x837', '\a', '\x434', '\x2', '\x2', '\x836', 
		'\x835', '\x3', '\x2', '\x2', '\x2', '\x836', '\x837', '\x3', '\x2', '\x2', 
		'\x2', '\x837', '\x838', '\x3', '\x2', '\x2', '\x2', '\x838', '\x84E', 
		'\a', '\x44C', '\x2', '\x2', '\x839', '\x83B', '\a', '\x1E0', '\x2', '\x2', 
		'\x83A', '\x83C', '\a', '\x434', '\x2', '\x2', '\x83B', '\x83A', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x83C', '\x3', '\x2', '\x2', '\x2', '\x83C', 
		'\x83D', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x84E', '\x5', '\x21C', 
		'\x10F', '\x2', '\x83E', '\x840', '\a', '\x1EA', '\x2', '\x2', '\x83F', 
		'\x841', '\a', '\x434', '\x2', '\x2', '\x840', '\x83F', '\x3', '\x2', 
		'\x2', '\x2', '\x840', '\x841', '\x3', '\x2', '\x2', '\x2', '\x841', '\x842', 
		'\x3', '\x2', '\x2', '\x2', '\x842', '\x84E', '\x5', '\x21C', '\x10F', 
		'\x2', '\x843', '\x845', '\a', '\x265', '\x2', '\x2', '\x844', '\x846', 
		'\a', '\x434', '\x2', '\x2', '\x845', '\x844', '\x3', '\x2', '\x2', '\x2', 
		'\x845', '\x846', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', '\x3', 
		'\x2', '\x2', '\x2', '\x847', '\x84E', '\x5', '\x216', '\x10C', '\x2', 
		'\x848', '\x84A', '\a', '\x1F6', '\x2', '\x2', '\x849', '\x84B', '\a', 
		'\x434', '\x2', '\x2', '\x84A', '\x849', '\x3', '\x2', '\x2', '\x2', '\x84A', 
		'\x84B', '\x3', '\x2', '\x2', '\x2', '\x84B', '\x84C', '\x3', '\x2', '\x2', 
		'\x2', '\x84C', '\x84E', '\x5', '\x216', '\x10C', '\x2', '\x84D', '\x81E', 
		'\x3', '\x2', '\x2', '\x2', '\x84D', '\x828', '\x3', '\x2', '\x2', '\x2', 
		'\x84D', '\x82D', '\x3', '\x2', '\x2', '\x2', '\x84D', '\x833', '\x3', 
		'\x2', '\x2', '\x2', '\x84D', '\x839', '\x3', '\x2', '\x2', '\x2', '\x84D', 
		'\x83E', '\x3', '\x2', '\x2', '\x2', '\x84D', '\x843', '\x3', '\x2', '\x2', 
		'\x2', '\x84D', '\x848', '\x3', '\x2', '\x2', '\x2', '\x84E', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x84F', '\x850', '\a', '\t', '\x2', '\x2', '\x850', 
		'\x852', '\t', '\x2', '\x2', '\x2', '\x851', '\x853', '\x5', '\x216', 
		'\x10C', '\x2', '\x852', '\x851', '\x3', '\x2', '\x2', '\x2', '\x852', 
		'\x853', '\x3', '\x2', '\x2', '\x2', '\x853', '\x855', '\x3', '\x2', '\x2', 
		'\x2', '\x854', '\x856', '\x5', '\x32', '\x1A', '\x2', '\x855', '\x854', 
		'\x3', '\x2', '\x2', '\x2', '\x856', '\x857', '\x3', '\x2', '\x2', '\x2', 
		'\x857', '\x855', '\x3', '\x2', '\x2', '\x2', '\x857', '\x858', '\x3', 
		'\x2', '\x2', '\x2', '\x858', '\x862', '\x3', '\x2', '\x2', '\x2', '\x859', 
		'\x85A', '\a', '\t', '\x2', '\x2', '\x85A', '\x85B', '\t', '\x2', '\x2', 
		'\x2', '\x85B', '\x85C', '\x5', '\x216', '\x10C', '\x2', '\x85C', '\x85D', 
		'\a', '\x276', '\x2', '\x2', '\x85D', '\x85E', '\a', '\x176', '\x2', '\x2', 
		'\x85E', '\x85F', '\a', '\x17D', '\x2', '\x2', '\x85F', '\x860', '\a', 
		'\x1F0', '\x2', '\x2', '\x860', '\x862', '\x3', '\x2', '\x2', '\x2', '\x861', 
		'\x84F', '\x3', '\x2', '\x2', '\x2', '\x861', '\x859', '\x3', '\x2', '\x2', 
		'\x2', '\x862', 'u', '\x3', '\x2', '\x2', '\x2', '\x863', '\x865', '\a', 
		'\t', '\x2', '\x2', '\x864', '\x866', '\x5', '\x34', '\x1B', '\x2', '\x865', 
		'\x864', '\x3', '\x2', '\x2', '\x2', '\x865', '\x866', '\x3', '\x2', '\x2', 
		'\x2', '\x866', '\x867', '\x3', '\x2', '\x2', '\x2', '\x867', '\x868', 
		'\a', '\x18F', '\x2', '\x2', '\x868', '\x86C', '\x5', '\x1FC', '\xFF', 
		'\x2', '\x869', '\x86A', '\a', 'q', '\x2', '\x2', '\x86A', '\x86B', '\a', 
		'\x23C', '\x2', '\x2', '\x86B', '\x86D', '\x5', '\x36', '\x1C', '\x2', 
		'\x86C', '\x869', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86D', '\x3', 
		'\x2', '\x2', '\x2', '\x86D', '\x874', '\x3', '\x2', '\x2', '\x2', '\x86E', 
		'\x86F', '\a', 'q', '\x2', '\x2', '\x86F', '\x871', '\a', '\x166', '\x2', 
		'\x2', '\x870', '\x872', '\a', 'm', '\x2', '\x2', '\x871', '\x870', '\x3', 
		'\x2', '\x2', '\x2', '\x871', '\x872', '\x3', '\x2', '\x2', '\x2', '\x872', 
		'\x873', '\x3', '\x2', '\x2', '\x2', '\x873', '\x875', '\a', '\x214', 
		'\x2', '\x2', '\x874', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x874', '\x875', 
		'\x3', '\x2', '\x2', '\x2', '\x875', '\x879', '\x3', '\x2', '\x2', '\x2', 
		'\x876', '\x877', '\a', '\x85', '\x2', '\x2', '\x877', '\x878', '\a', 
		'\xA6', '\x2', '\x2', '\x878', '\x87A', '\x5', '\x1FC', '\xFF', '\x2', 
		'\x879', '\x876', '\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\x3', 
		'\x2', '\x2', '\x2', '\x87A', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87B', 
		'\x87D', '\x5', '>', ' ', '\x2', '\x87C', '\x87B', '\x3', '\x2', '\x2', 
		'\x2', '\x87C', '\x87D', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x880', 
		'\x3', '\x2', '\x2', '\x2', '\x87E', '\x87F', '\a', '\x163', '\x2', '\x2', 
		'\x87F', '\x881', '\a', '\x44C', '\x2', '\x2', '\x880', '\x87E', '\x3', 
		'\x2', '\x2', '\x2', '\x880', '\x881', '\x3', '\x2', '\x2', '\x2', '\x881', 
		'\x884', '\x3', '\x2', '\x2', '\x2', '\x882', '\x883', '\a', '\x181', 
		'\x2', '\x2', '\x883', '\x885', '\x5', '\x162', '\xB2', '\x2', '\x884', 
		'\x882', '\x3', '\x2', '\x2', '\x2', '\x884', '\x885', '\x3', '\x2', '\x2', 
		'\x2', '\x885', 'w', '\x3', '\x2', '\x2', '\x2', '\x886', '\x887', '\a', 
		'\t', '\x2', '\x2', '\x887', '\x888', '\a', '\x1A4', '\x2', '\x2', '\x888', 
		'\x88C', '\x5', '\x1FC', '\xFF', '\x2', '\x889', '\x88B', '\x5', 'H', 
		'%', '\x2', '\x88A', '\x889', '\x3', '\x2', '\x2', '\x2', '\x88B', '\x88E', 
		'\x3', '\x2', '\x2', '\x2', '\x88C', '\x88A', '\x3', '\x2', '\x2', '\x2', 
		'\x88C', '\x88D', '\x3', '\x2', '\x2', '\x2', '\x88D', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x88E', '\x88C', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x890', 
		'\a', '\t', '\x2', '\x2', '\x890', '\x891', '\a', '\x1B6', '\x2', '\x2', 
		'\x891', '\x892', '\a', '\x237', '\x2', '\x2', '\x892', '\x893', '\a', 
		'\x2EB', '\x2', '\x2', '\x893', '\x894', '\a', '\x1C9', '\x2', '\x2', 
		'\x894', '\x895', '\a', 'Y', '\x2', '\x2', '\x895', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x896', '\x897', '\a', '\t', '\x2', '\x2', '\x897', '\x898', 
		'\a', '\x1C7', '\x2', '\x2', '\x898', '\x899', '\a', 'H', '\x2', '\x2', 
		'\x899', '\x89A', '\x5', '\x216', '\x10C', '\x2', '\x89A', '\x89B', '\a', 
		'\a', '\x2', '\x2', '\x89B', '\x89C', '\a', '\x271', '\x2', '\x2', '\x89C', 
		'\x8A2', '\a', '\x44C', '\x2', '\x2', '\x89D', '\x89F', '\a', '\x1B2', 
		'\x2', '\x2', '\x89E', '\x8A0', '\a', '\x434', '\x2', '\x2', '\x89F', 
		'\x89E', '\x3', '\x2', '\x2', '\x2', '\x89F', '\x8A0', '\x3', '\x2', '\x2', 
		'\x2', '\x8A0', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x8A1', '\x8A3', 
		'\x5', '\x21E', '\x110', '\x2', '\x8A2', '\x89D', '\x3', '\x2', '\x2', 
		'\x2', '\x8A2', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A5', 
		'\x3', '\x2', '\x2', '\x2', '\x8A4', '\x8A6', '\a', '\x280', '\x2', '\x2', 
		'\x8A5', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A6', '\x3', 
		'\x2', '\x2', '\x2', '\x8A6', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8A7', 
		'\x8A9', '\a', '\x189', '\x2', '\x2', '\x8A8', '\x8AA', '\a', '\x434', 
		'\x2', '\x2', '\x8A9', '\x8A8', '\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8AA', 
		'\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AB', '\x3', '\x2', '\x2', '\x2', 
		'\x8AB', '\x8AC', '\x5', '\x20C', '\x107', '\x2', '\x8AC', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x8AD', '\x8AE', '\a', '\t', '\x2', '\x2', '\x8AE', 
		'\x8AF', '\a', '}', '\x2', '\x2', '\x8AF', '\x8B3', '\x5', '\x1FC', '\xFF', 
		'\x2', '\x8B0', '\x8B2', '\x5', 'H', '%', '\x2', '\x8B1', '\x8B0', '\x3', 
		'\x2', '\x2', '\x2', '\x8B2', '\x8B5', '\x3', '\x2', '\x2', '\x2', '\x8B3', 
		'\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B4', '\x3', '\x2', '\x2', 
		'\x2', '\x8B4', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8B5', '\x8B3', 
		'\x3', '\x2', '\x2', '\x2', '\x8B6', '\x8B7', '\a', '\t', '\x2', '\x2', 
		'\x8B7', '\x8B8', '\a', '\x23E', '\x2', '\x2', '\x8B8', '\x8B9', '\x5', 
		'\x216', '\x10C', '\x2', '\x8B9', '\x8BA', '\a', '\x203', '\x2', '\x2', 
		'\x8BA', '\x8BB', '\a', '\x43D', '\x2', '\x2', '\x8BB', '\x8C0', '\x5', 
		'J', '&', '\x2', '\x8BC', '\x8BD', '\a', '\x43F', '\x2', '\x2', '\x8BD', 
		'\x8BF', '\x5', 'J', '&', '\x2', '\x8BE', '\x8BC', '\x3', '\x2', '\x2', 
		'\x2', '\x8BF', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C0', '\x8BE', 
		'\x3', '\x2', '\x2', '\x2', '\x8C0', '\x8C1', '\x3', '\x2', '\x2', '\x2', 
		'\x8C1', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x8C0', '\x3', 
		'\x2', '\x2', '\x2', '\x8C3', '\x8C4', '\a', '\x43E', '\x2', '\x2', '\x8C4', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x8C7', '\a', '\t', '\x2', 
		'\x2', '\x8C6', '\x8C8', '\t', '\x3', '\x2', '\x2', '\x8C7', '\x8C6', 
		'\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8C8', '\x3', '\x2', '\x2', '\x2', 
		'\x8C8', '\x8CA', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CB', '\a', 
		'M', '\x2', '\x2', '\x8CA', '\x8C9', '\x3', '\x2', '\x2', '\x2', '\x8CA', 
		'\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x3', '\x2', '\x2', 
		'\x2', '\x8CC', '\x8CD', '\a', '\xA3', '\x2', '\x2', '\x8CD', '\x8D6', 
		'\x5', '\x1FE', '\x100', '\x2', '\x8CE', '\x8D3', '\x5', '\x88', '\x45', 
		'\x2', '\x8CF', '\x8D0', '\a', '\x43F', '\x2', '\x2', '\x8D0', '\x8D2', 
		'\x5', '\x88', '\x45', '\x2', '\x8D1', '\x8CF', '\x3', '\x2', '\x2', '\x2', 
		'\x8D2', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D3', '\x8D1', '\x3', 
		'\x2', '\x2', '\x2', '\x8D3', '\x8D4', '\x3', '\x2', '\x2', '\x2', '\x8D4', 
		'\x8D7', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D3', '\x3', '\x2', '\x2', 
		'\x2', '\x8D6', '\x8CE', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', 
		'\x3', '\x2', '\x2', '\x2', '\x8D7', '\x8D9', '\x3', '\x2', '\x2', '\x2', 
		'\x8D8', '\x8DA', '\x5', '\x64', '\x33', '\x2', '\x8D9', '\x8D8', '\x3', 
		'\x2', '\x2', '\x2', '\x8D9', '\x8DA', '\x3', '\x2', '\x2', '\x2', '\x8DA', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x8DB', '\x8DC', '\a', '\t', '\x2', 
		'\x2', '\x8DC', '\x8DD', '\a', '\x265', '\x2', '\x2', '\x8DD', '\x8DE', 
		'\x5', '\x216', '\x10C', '\x2', '\x8DE', '\x8DF', '\t', '\x1F', '\x2', 
		'\x2', '\x8DF', '\x8E0', '\a', '\x177', '\x2', '\x2', '\x8E0', '\x8E4', 
		'\a', '\x44C', '\x2', '\x2', '\x8E1', '\x8E2', '\a', '\x1B2', '\x2', '\x2', 
		'\x8E2', '\x8E3', '\a', '\x434', '\x2', '\x2', '\x8E3', '\x8E5', '\x5', 
		'\x21E', '\x110', '\x2', '\x8E4', '\x8E1', '\x3', '\x2', '\x2', '\x2', 
		'\x8E4', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E7', '\x3', 
		'\x2', '\x2', '\x2', '\x8E6', '\x8E8', '\a', '\x280', '\x2', '\x2', '\x8E7', 
		'\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8E7', '\x8E8', '\x3', '\x2', '\x2', 
		'\x2', '\x8E8', '\x8E9', '\x3', '\x2', '\x2', '\x2', '\x8E9', '\x8EB', 
		'\a', '\x189', '\x2', '\x2', '\x8EA', '\x8EC', '\a', '\x434', '\x2', '\x2', 
		'\x8EB', '\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\x3', 
		'\x2', '\x2', '\x2', '\x8EC', '\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8ED', 
		'\x8EE', '\x5', '\x20C', '\x107', '\x2', '\x8EE', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x8EF', '\x8F3', '\a', '\t', '\x2', '\x2', '\x8F0', '\x8F1', 
		'\a', '\x144', '\x2', '\x2', '\x8F1', '\x8F2', '\a', '\x434', '\x2', '\x2', 
		'\x8F2', '\x8F4', '\t', '\f', '\x2', '\x2', '\x8F3', '\x8F0', '\x3', '\x2', 
		'\x2', '\x2', '\x8F3', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F6', 
		'\x3', '\x2', '\x2', '\x2', '\x8F5', '\x8F7', '\x5', '\x34', '\x1B', '\x2', 
		'\x8F6', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8F7', '\x3', 
		'\x2', '\x2', '\x2', '\x8F7', '\x8FB', '\x3', '\x2', '\x2', '\x2', '\x8F8', 
		'\x8F9', '\a', '\x98', '\x2', '\x2', '\x8F9', '\x8FA', '\a', '\x23D', 
		'\x2', '\x2', '\x8FA', '\x8FC', '\t', '\r', '\x2', '\x2', '\x8FB', '\x8F8', 
		'\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8FC', '\x3', '\x2', '\x2', '\x2', 
		'\x8FC', '\x8FD', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8FE', '\a', 
		'\x27D', '\x2', '\x2', '\x8FE', '\x903', '\x5', '\x1FC', '\xFF', '\x2', 
		'\x8FF', '\x900', '\a', '\x43D', '\x2', '\x2', '\x900', '\x901', '\x5', 
		'\x236', '\x11C', '\x2', '\x901', '\x902', '\a', '\x43E', '\x2', '\x2', 
		'\x902', '\x904', '\x3', '\x2', '\x2', '\x2', '\x903', '\x8FF', '\x3', 
		'\x2', '\x2', '\x2', '\x903', '\x904', '\x3', '\x2', '\x2', '\x2', '\x904', 
		'\x905', '\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\a', '\xE', '\x2', 
		'\x2', '\x906', '\x90D', '\x5', '\xB6', '\\', '\x2', '\x907', '\x909', 
		'\a', '\xB7', '\x2', '\x2', '\x908', '\x90A', '\t', '\xE', '\x2', '\x2', 
		'\x909', '\x908', '\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', '\x3', 
		'\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', '\x2', '\x2', '\x2', '\x90B', 
		'\x90C', '\a', '\x1B', '\x2', '\x2', '\x90C', '\x90E', '\a', 's', '\x2', 
		'\x2', '\x90D', '\x907', '\x3', '\x2', '\x2', '\x2', '\x90D', '\x90E', 
		'\x3', '\x2', '\x2', '\x2', '\x90E', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x90F', '\x916', '\x5', '^', '\x30', '\x2', '\x910', '\x912', '\a', '\x43F', 
		'\x2', '\x2', '\x911', '\x910', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', 
		'\x3', '\x2', '\x2', '\x2', '\x912', '\x913', '\x3', '\x2', '\x2', '\x2', 
		'\x913', '\x915', '\x5', '^', '\x30', '\x2', '\x914', '\x911', '\x3', 
		'\x2', '\x2', '\x2', '\x915', '\x918', '\x3', '\x2', '\x2', '\x2', '\x916', 
		'\x914', '\x3', '\x2', '\x2', '\x2', '\x916', '\x917', '\x3', '\x2', '\x2', 
		'\x2', '\x917', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x918', '\x916', 
		'\x3', '\x2', '\x2', '\x2', '\x919', '\x91B', '\a', '\a', '\x2', '\x2', 
		'\x91A', '\x91C', '\a', '\x1D', '\x2', '\x2', '\x91B', '\x91A', '\x3', 
		'\x2', '\x2', '\x2', '\x91B', '\x91C', '\x3', '\x2', '\x2', '\x2', '\x91C', 
		'\x91D', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', '\x5', '\x216', 
		'\x10C', '\x2', '\x91E', '\x922', '\x5', 'P', ')', '\x2', '\x91F', '\x923', 
		'\a', '\x19D', '\x2', '\x2', '\x920', '\x921', '\a', '\x142', '\x2', '\x2', 
		'\x921', '\x923', '\x5', '\x216', '\x10C', '\x2', '\x922', '\x91F', '\x3', 
		'\x2', '\x2', '\x2', '\x922', '\x920', '\x3', '\x2', '\x2', '\x2', '\x922', 
		'\x923', '\x3', '\x2', '\x2', '\x2', '\x923', '\xA7E', '\x3', '\x2', '\x2', 
		'\x2', '\x924', '\x926', '\a', '\a', '\x2', '\x2', '\x925', '\x927', '\a', 
		'\x1D', '\x2', '\x2', '\x926', '\x925', '\x3', '\x2', '\x2', '\x2', '\x926', 
		'\x927', '\x3', '\x2', '\x2', '\x2', '\x927', '\x928', '\x3', '\x2', '\x2', 
		'\x2', '\x928', '\x929', '\a', '\x43D', '\x2', '\x2', '\x929', '\x92A', 
		'\x5', '\x216', '\x10C', '\x2', '\x92A', '\x931', '\x5', 'P', ')', '\x2', 
		'\x92B', '\x92C', '\a', '\x43F', '\x2', '\x2', '\x92C', '\x92D', '\x5', 
		'\x216', '\x10C', '\x2', '\x92D', '\x92E', '\x5', 'P', ')', '\x2', '\x92E', 
		'\x930', '\x3', '\x2', '\x2', '\x2', '\x92F', '\x92B', '\x3', '\x2', '\x2', 
		'\x2', '\x930', '\x933', '\x3', '\x2', '\x2', '\x2', '\x931', '\x92F', 
		'\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\x3', '\x2', '\x2', '\x2', 
		'\x932', '\x934', '\x3', '\x2', '\x2', '\x2', '\x933', '\x931', '\x3', 
		'\x2', '\x2', '\x2', '\x934', '\x935', '\a', '\x43E', '\x2', '\x2', '\x935', 
		'\xA7E', '\x3', '\x2', '\x2', '\x2', '\x936', '\x937', '\a', '\a', '\x2', 
		'\x2', '\x937', '\x939', '\t', '\x14', '\x2', '\x2', '\x938', '\x93A', 
		'\x5', '\x216', '\x10C', '\x2', '\x939', '\x938', '\x3', '\x2', '\x2', 
		'\x2', '\x939', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x93A', '\x93C', 
		'\x3', '\x2', '\x2', '\x2', '\x93B', '\x93D', '\x5', '@', '!', '\x2', 
		'\x93C', '\x93B', '\x3', '\x2', '\x2', '\x2', '\x93C', '\x93D', '\x3', 
		'\x2', '\x2', '\x2', '\x93D', '\x93E', '\x3', '\x2', '\x2', '\x2', '\x93E', 
		'\x942', '\x5', '\x23A', '\x11E', '\x2', '\x93F', '\x941', '\x5', '\x42', 
		'\"', '\x2', '\x940', '\x93F', '\x3', '\x2', '\x2', '\x2', '\x941', '\x944', 
		'\x3', '\x2', '\x2', '\x2', '\x942', '\x940', '\x3', '\x2', '\x2', '\x2', 
		'\x942', '\x943', '\x3', '\x2', '\x2', '\x2', '\x943', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\x944', '\x942', '\x3', '\x2', '\x2', '\x2', '\x945', 
		'\x94A', '\a', '\a', '\x2', '\x2', '\x946', '\x948', '\a', '\x1F', '\x2', 
		'\x2', '\x947', '\x949', '\x5', '\x216', '\x10C', '\x2', '\x948', '\x947', 
		'\x3', '\x2', '\x2', '\x2', '\x948', '\x949', '\x3', '\x2', '\x2', '\x2', 
		'\x949', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x946', '\x3', 
		'\x2', '\x2', '\x2', '\x94A', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94B', 
		'\x94C', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94D', '\a', '|', '\x2', 
		'\x2', '\x94D', '\x94F', '\a', 'Y', '\x2', '\x2', '\x94E', '\x950', '\x5', 
		'\x216', '\x10C', '\x2', '\x94F', '\x94E', '\x3', '\x2', '\x2', '\x2', 
		'\x94F', '\x950', '\x3', '\x2', '\x2', '\x2', '\x950', '\x952', '\x3', 
		'\x2', '\x2', '\x2', '\x951', '\x953', '\x5', '@', '!', '\x2', '\x952', 
		'\x951', '\x3', '\x2', '\x2', '\x2', '\x952', '\x953', '\x3', '\x2', '\x2', 
		'\x2', '\x953', '\x954', '\x3', '\x2', '\x2', '\x2', '\x954', '\x958', 
		'\x5', '\x23A', '\x11E', '\x2', '\x955', '\x957', '\x5', '\x42', '\"', 
		'\x2', '\x956', '\x955', '\x3', '\x2', '\x2', '\x2', '\x957', '\x95A', 
		'\x3', '\x2', '\x2', '\x2', '\x958', '\x956', '\x3', '\x2', '\x2', '\x2', 
		'\x958', '\x959', '\x3', '\x2', '\x2', '\x2', '\x959', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\x95A', '\x958', '\x3', '\x2', '\x2', '\x2', '\x95B', 
		'\x960', '\a', '\a', '\x2', '\x2', '\x95C', '\x95E', '\a', '\x1F', '\x2', 
		'\x2', '\x95D', '\x95F', '\x5', '\x216', '\x10C', '\x2', '\x95E', '\x95D', 
		'\x3', '\x2', '\x2', '\x2', '\x95E', '\x95F', '\x3', '\x2', '\x2', '\x2', 
		'\x95F', '\x961', '\x3', '\x2', '\x2', '\x2', '\x960', '\x95C', '\x3', 
		'\x2', '\x2', '\x2', '\x960', '\x961', '\x3', '\x2', '\x2', '\x2', '\x961', 
		'\x962', '\x3', '\x2', '\x2', '\x2', '\x962', '\x964', '\a', '\xAC', '\x2', 
		'\x2', '\x963', '\x965', '\t', '\x14', '\x2', '\x2', '\x964', '\x963', 
		'\x3', '\x2', '\x2', '\x2', '\x964', '\x965', '\x3', '\x2', '\x2', '\x2', 
		'\x965', '\x967', '\x3', '\x2', '\x2', '\x2', '\x966', '\x968', '\x5', 
		'\x216', '\x10C', '\x2', '\x967', '\x966', '\x3', '\x2', '\x2', '\x2', 
		'\x967', '\x968', '\x3', '\x2', '\x2', '\x2', '\x968', '\x96A', '\x3', 
		'\x2', '\x2', '\x2', '\x969', '\x96B', '\x5', '@', '!', '\x2', '\x96A', 
		'\x969', '\x3', '\x2', '\x2', '\x2', '\x96A', '\x96B', '\x3', '\x2', '\x2', 
		'\x2', '\x96B', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x970', 
		'\x5', '\x23A', '\x11E', '\x2', '\x96D', '\x96F', '\x5', '\x42', '\"', 
		'\x2', '\x96E', '\x96D', '\x3', '\x2', '\x2', '\x2', '\x96F', '\x972', 
		'\x3', '\x2', '\x2', '\x2', '\x970', '\x96E', '\x3', '\x2', '\x2', '\x2', 
		'\x970', '\x971', '\x3', '\x2', '\x2', '\x2', '\x971', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\x972', '\x970', '\x3', '\x2', '\x2', '\x2', '\x973', 
		'\x974', '\a', '\a', '\x2', '\x2', '\x974', '\x976', '\t', '\x16', '\x2', 
		'\x2', '\x975', '\x977', '\t', '\x14', '\x2', '\x2', '\x976', '\x975', 
		'\x3', '\x2', '\x2', '\x2', '\x976', '\x977', '\x3', '\x2', '\x2', '\x2', 
		'\x977', '\x979', '\x3', '\x2', '\x2', '\x2', '\x978', '\x97A', '\x5', 
		'\x216', '\x10C', '\x2', '\x979', '\x978', '\x3', '\x2', '\x2', '\x2', 
		'\x979', '\x97A', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x97B', '\x3', 
		'\x2', '\x2', '\x2', '\x97B', '\x97F', '\x5', '\x23A', '\x11E', '\x2', 
		'\x97C', '\x97E', '\x5', '\x42', '\"', '\x2', '\x97D', '\x97C', '\x3', 
		'\x2', '\x2', '\x2', '\x97E', '\x981', '\x3', '\x2', '\x2', '\x2', '\x97F', 
		'\x97D', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x980', '\x3', '\x2', '\x2', 
		'\x2', '\x980', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x981', '\x97F', 
		'\x3', '\x2', '\x2', '\x2', '\x982', '\x987', '\a', '\a', '\x2', '\x2', 
		'\x983', '\x985', '\a', '\x1F', '\x2', '\x2', '\x984', '\x986', '\x5', 
		'\x216', '\x10C', '\x2', '\x985', '\x984', '\x3', '\x2', '\x2', '\x2', 
		'\x985', '\x986', '\x3', '\x2', '\x2', '\x2', '\x986', '\x988', '\x3', 
		'\x2', '\x2', '\x2', '\x987', '\x983', '\x3', '\x2', '\x2', '\x2', '\x987', 
		'\x988', '\x3', '\x2', '\x2', '\x2', '\x988', '\x989', '\x3', '\x2', '\x2', 
		'\x2', '\x989', '\x98A', '\a', '\x42', '\x2', '\x2', '\x98A', '\x98C', 
		'\a', 'Y', '\x2', '\x2', '\x98B', '\x98D', '\x5', '\x216', '\x10C', '\x2', 
		'\x98C', '\x98B', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98D', '\x3', 
		'\x2', '\x2', '\x2', '\x98D', '\x98E', '\x3', '\x2', '\x2', '\x2', '\x98E', 
		'\x98F', '\x5', '\x23A', '\x11E', '\x2', '\x98F', '\x990', '\x5', 'V', 
		',', '\x2', '\x990', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x991', '\x996', 
		'\a', '\a', '\x2', '\x2', '\x992', '\x994', '\a', '\x1F', '\x2', '\x2', 
		'\x993', '\x995', '\x5', '\x216', '\x10C', '\x2', '\x994', '\x993', '\x3', 
		'\x2', '\x2', '\x2', '\x994', '\x995', '\x3', '\x2', '\x2', '\x2', '\x995', 
		'\x997', '\x3', '\x2', '\x2', '\x2', '\x996', '\x992', '\x3', '\x2', '\x2', 
		'\x2', '\x996', '\x997', '\x3', '\x2', '\x2', '\x2', '\x997', '\x998', 
		'\x3', '\x2', '\x2', '\x2', '\x998', '\x999', '\a', '\x1B', '\x2', '\x2', 
		'\x999', '\x99A', '\a', '\x43D', '\x2', '\x2', '\x99A', '\x99B', '\x5', 
		'\x278', '\x13D', '\x2', '\x99B', '\x99C', '\a', '\x43E', '\x2', '\x2', 
		'\x99C', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x99D', '\x99F', '\a', 
		'\x144', '\x2', '\x2', '\x99E', '\x9A0', '\a', '\x434', '\x2', '\x2', 
		'\x99F', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x99F', '\x9A0', '\x3', 
		'\x2', '\x2', '\x2', '\x9A0', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9A1', 
		'\xA7E', '\t', '\x5', '\x2', '\x2', '\x9A2', '\x9A4', '\a', '\t', '\x2', 
		'\x2', '\x9A3', '\x9A5', '\a', '\x1D', '\x2', '\x2', '\x9A4', '\x9A3', 
		'\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A5', '\x3', '\x2', '\x2', '\x2', 
		'\x9A5', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9AC', '\x5', 
		'\x216', '\x10C', '\x2', '\x9A7', '\x9A8', '\a', '\x93', '\x2', '\x2', 
		'\x9A8', '\x9A9', '\a', '*', '\x2', '\x2', '\x9A9', '\x9AD', '\x5', '\x246', 
		'\x124', '\x2', '\x9AA', '\x9AB', '\a', '\x33', '\x2', '\x2', '\x9AB', 
		'\x9AD', '\a', '*', '\x2', '\x2', '\x9AC', '\x9A7', '\x3', '\x2', '\x2', 
		'\x2', '\x9AC', '\x9AA', '\x3', '\x2', '\x2', '\x2', '\x9AD', '\xA7E', 
		'\x3', '\x2', '\x2', '\x2', '\x9AE', '\x9B0', '\a', '\x19', '\x2', '\x2', 
		'\x9AF', '\x9B1', '\a', '\x1D', '\x2', '\x2', '\x9B0', '\x9AF', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9B1', 
		'\x9B2', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B3', '\x5', '\x216', 
		'\x10C', '\x2', '\x9B3', '\x9B4', '\x5', '\x216', '\x10C', '\x2', '\x9B4', 
		'\x9B8', '\x5', 'P', ')', '\x2', '\x9B5', '\x9B9', '\a', '\x19D', '\x2', 
		'\x2', '\x9B6', '\x9B7', '\a', '\x142', '\x2', '\x2', '\x9B7', '\x9B9', 
		'\x5', '\x216', '\x10C', '\x2', '\x9B8', '\x9B5', '\x3', '\x2', '\x2', 
		'\x2', '\x9B8', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B8', '\x9B9', 
		'\x3', '\x2', '\x2', '\x2', '\x9B9', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\x9BA', '\x9BB', '\a', '\x85', '\x2', '\x2', '\x9BB', '\x9BC', '\a', 
		'\x1D', '\x2', '\x2', '\x9BC', '\x9BD', '\x5', '\x216', '\x10C', '\x2', 
		'\x9BD', '\x9BE', '\a', '\xA6', '\x2', '\x2', '\x9BE', '\x9BF', '\x5', 
		'\x216', '\x10C', '\x2', '\x9BF', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C0', '\x9C2', '\a', '\x64', '\x2', '\x2', '\x9C1', '\x9C3', '\a', 
		'\x434', '\x2', '\x2', '\x9C2', '\x9C1', '\x3', '\x2', '\x2', '\x2', '\x9C2', 
		'\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\x3', '\x2', '\x2', 
		'\x2', '\x9C4', '\xA7E', '\t', '\x6', '\x2', '\x2', '\x9C5', '\x9C7', 
		'\a', '\x1EC', '\x2', '\x2', '\x9C6', '\x9C8', '\a', '\x1D', '\x2', '\x2', 
		'\x9C7', '\x9C6', '\x3', '\x2', '\x2', '\x2', '\x9C7', '\x9C8', '\x3', 
		'\x2', '\x2', '\x2', '\x9C8', '\x9C9', '\x3', '\x2', '\x2', '\x2', '\x9C9', 
		'\x9CA', '\x5', '\x216', '\x10C', '\x2', '\x9CA', '\x9CE', '\x5', 'P', 
		')', '\x2', '\x9CB', '\x9CF', '\a', '\x19D', '\x2', '\x2', '\x9CC', '\x9CD', 
		'\a', '\x142', '\x2', '\x2', '\x9CD', '\x9CF', '\x5', '\x216', '\x10C', 
		'\x2', '\x9CE', '\x9CB', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CC', 
		'\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CF', '\x3', '\x2', '\x2', '\x2', 
		'\x9CF', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x9D0', '\x9D2', '\a', 
		'\x33', '\x2', '\x2', '\x9D1', '\x9D3', '\a', '\x1D', '\x2', '\x2', '\x9D2', 
		'\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D3', '\x3', '\x2', '\x2', 
		'\x2', '\x9D3', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D6', 
		'\x5', '\x216', '\x10C', '\x2', '\x9D5', '\x9D7', '\a', '\x8A', '\x2', 
		'\x2', '\x9D6', '\x9D5', '\x3', '\x2', '\x2', '\x2', '\x9D6', '\x9D7', 
		'\x3', '\x2', '\x2', '\x2', '\x9D7', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\x9D8', '\x9D9', '\a', '\x33', '\x2', '\x2', '\x9D9', '\x9DA', '\t', 
		' ', '\x2', '\x2', '\x9DA', '\xA7E', '\x5', '\x216', '\x10C', '\x2', '\x9DB', 
		'\x9DC', '\a', '\x33', '\x2', '\x2', '\x9DC', '\x9DD', '\a', '|', '\x2', 
		'\x2', '\x9DD', '\xA7E', '\a', 'Y', '\x2', '\x2', '\x9DE', '\x9DF', '\a', 
		'\x85', '\x2', '\x2', '\x9DF', '\x9E0', '\t', '\x14', '\x2', '\x2', '\x9E0', 
		'\x9E1', '\x5', '\x216', '\x10C', '\x2', '\x9E1', '\x9E2', '\a', '\xA6', 
		'\x2', '\x2', '\x9E2', '\x9E3', '\x5', '\x216', '\x10C', '\x2', '\x9E3', 
		'\xA7E', '\x3', '\x2', '\x2', '\x2', '\x9E4', '\x9E5', '\a', '\t', '\x2', 
		'\x2', '\x9E5', '\x9E6', '\a', 'O', '\x2', '\x2', '\x9E6', '\x9E7', '\x5', 
		'\x216', '\x10C', '\x2', '\x9E7', '\x9E8', '\t', '!', '\x2', '\x2', '\x9E8', 
		'\xA7E', '\x3', '\x2', '\x2', '\x2', '\x9E9', '\x9EA', '\a', '\x33', '\x2', 
		'\x2', '\x9EA', '\x9EB', '\t', '\x14', '\x2', '\x2', '\x9EB', '\xA7E', 
		'\x5', '\x216', '\x10C', '\x2', '\x9EC', '\x9ED', '\a', '\x33', '\x2', 
		'\x2', '\x9ED', '\x9EE', '\a', '\x42', '\x2', '\x2', '\x9EE', '\x9EF', 
		'\a', 'Y', '\x2', '\x2', '\x9EF', '\xA7E', '\x5', '\x216', '\x10C', '\x2', 
		'\x9F0', '\x9F1', '\a', '\x17E', '\x2', '\x2', '\x9F1', '\xA7E', '\a', 
		'Z', '\x2', '\x2', '\x9F2', '\x9F3', '\a', '\x185', '\x2', '\x2', '\x9F3', 
		'\xA7E', '\a', 'Z', '\x2', '\x2', '\x9F4', '\x9F6', '\a', '\x85', '\x2', 
		'\x2', '\x9F5', '\x9F7', '\t', '\"', '\x2', '\x2', '\x9F6', '\x9F5', '\x3', 
		'\x2', '\x2', '\x2', '\x9F6', '\x9F7', '\x3', '\x2', '\x2', '\x2', '\x9F7', 
		'\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9F8', '\x9FB', '\x5', '\x216', 
		'\x10C', '\x2', '\x9F9', '\x9FB', '\x5', '\x1FC', '\xFF', '\x2', '\x9FA', 
		'\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9FA', '\x9F9', '\x3', '\x2', '\x2', 
		'\x2', '\x9FB', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9FD', 
		'\a', 'v', '\x2', '\x2', '\x9FD', '\x9FE', '\a', '\x14', '\x2', '\x2', 
		'\x9FE', '\xA7E', '\x5', '\x236', '\x11C', '\x2', '\x9FF', '\xA00', '\a', 
		'!', '\x2', '\x2', '\xA00', '\xA01', '\a', '\xA6', '\x2', '\x2', '\xA01', 
		'\xA02', '\a', '\x1A', '\x2', '\x2', '\xA02', '\xA03', '\a', '\x93', '\x2', 
		'\x2', '\xA03', '\xA06', '\x5', '\x208', '\x105', '\x2', '\xA04', '\xA05', 
		'\a', '\x1C', '\x2', '\x2', '\xA05', '\xA07', '\x5', '\x20A', '\x106', 
		'\x2', '\xA06', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA07', 
		'\x3', '\x2', '\x2', '\x2', '\xA07', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\xA08', '\xA0A', '\a', '*', '\x2', '\x2', '\xA09', '\xA08', '\x3', '\x2', 
		'\x2', '\x2', '\xA09', '\xA0A', '\x3', '\x2', '\x2', '\x2', '\xA0A', '\xA0B', 
		'\x3', '\x2', '\x2', '\x2', '\xA0B', '\xA0C', '\a', '\x1A', '\x2', '\x2', 
		'\xA0C', '\xA0D', '\a', '\x93', '\x2', '\x2', '\xA0D', '\xA0E', '\a', 
		'\x434', '\x2', '\x2', '\xA0E', '\xA12', '\x5', '\x208', '\x105', '\x2', 
		'\xA0F', '\xA10', '\a', '\x1C', '\x2', '\x2', '\xA10', '\xA11', '\a', 
		'\x434', '\x2', '\x2', '\xA11', '\xA13', '\x5', '\x20A', '\x106', '\x2', 
		'\xA12', '\xA0F', '\x3', '\x2', '\x2', '\x2', '\xA12', '\xA13', '\x3', 
		'\x2', '\x2', '\x2', '\xA13', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA14', 
		'\xA15', '\a', '\x17F', '\x2', '\x2', '\xA15', '\xA7E', '\a', '\x265', 
		'\x2', '\x2', '\xA16', '\xA17', '\a', '\x1B0', '\x2', '\x2', '\xA17', 
		'\xA7E', '\a', '\x265', '\x2', '\x2', '\xA18', '\xA7E', '\a', '\x41', 
		'\x2', '\x2', '\xA19', '\xA1A', '\t', '#', '\x2', '\x2', '\xA1A', '\xA7E', 
		'\a', '\x27A', '\x2', '\x2', '\xA1B', '\xA1C', '\a', '\a', '\x2', '\x2', 
		'\xA1C', '\xA1D', '\a', '{', '\x2', '\x2', '\xA1D', '\xA1E', '\a', '\x43D', 
		'\x2', '\x2', '\xA1E', '\xA23', '\x5', 'j', '\x36', '\x2', '\xA1F', '\xA20', 
		'\a', '\x43F', '\x2', '\x2', '\xA20', '\xA22', '\x5', 'j', '\x36', '\x2', 
		'\xA21', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA25', '\x3', 
		'\x2', '\x2', '\x2', '\xA23', '\xA21', '\x3', '\x2', '\x2', '\x2', '\xA23', 
		'\xA24', '\x3', '\x2', '\x2', '\x2', '\xA24', '\xA26', '\x3', '\x2', '\x2', 
		'\x2', '\xA25', '\xA23', '\x3', '\x2', '\x2', '\x2', '\xA26', '\xA27', 
		'\a', '\x43E', '\x2', '\x2', '\xA27', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\xA28', '\xA29', '\a', '\x33', '\x2', '\x2', '\xA29', '\xA2A', '\a', 
		'{', '\x2', '\x2', '\xA2A', '\xA7E', '\x5', '\x236', '\x11C', '\x2', '\xA2B', 
		'\xA2C', '\a', '\x17F', '\x2', '\x2', '\xA2C', '\xA2F', '\a', '{', '\x2', 
		'\x2', '\xA2D', '\xA30', '\x5', '\x236', '\x11C', '\x2', '\xA2E', '\xA30', 
		'\a', '\b', '\x2', '\x2', '\xA2F', '\xA2D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2F', '\xA2E', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA31', '\x3', 
		'\x2', '\x2', '\x2', '\xA31', '\xA7E', '\a', '\x265', '\x2', '\x2', '\xA32', 
		'\xA33', '\a', '\x1B0', '\x2', '\x2', '\xA33', '\xA36', '\a', '{', '\x2', 
		'\x2', '\xA34', '\xA37', '\x5', '\x236', '\x11C', '\x2', '\xA35', '\xA37', 
		'\a', '\b', '\x2', '\x2', '\xA36', '\xA34', '\x3', '\x2', '\x2', '\x2', 
		'\xA36', '\xA35', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA38', '\x3', 
		'\x2', '\x2', '\x2', '\xA38', '\xA7E', '\a', '\x265', '\x2', '\x2', '\xA39', 
		'\xA3A', '\a', '\x26E', '\x2', '\x2', '\xA3A', '\xA3D', '\a', '{', '\x2', 
		'\x2', '\xA3B', '\xA3E', '\x5', '\x236', '\x11C', '\x2', '\xA3C', '\xA3E', 
		'\a', '\b', '\x2', '\x2', '\xA3D', '\xA3B', '\x3', '\x2', '\x2', '\x2', 
		'\xA3D', '\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA3E', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\xA3F', '\xA40', '\a', '\x15E', '\x2', '\x2', '\xA40', 
		'\xA41', '\a', '{', '\x2', '\x2', '\xA41', '\xA7E', '\x5', '\x21C', '\x10F', 
		'\x2', '\xA42', '\xA43', '\a', '\x225', '\x2', '\x2', '\xA43', '\xA44', 
		'\a', '{', '\x2', '\x2', '\xA44', '\xA45', '\x5', '\x236', '\x11C', '\x2', 
		'\xA45', '\xA46', '\a', 'U', '\x2', '\x2', '\xA46', '\xA47', '\a', '\x43D', 
		'\x2', '\x2', '\xA47', '\xA4C', '\x5', 'j', '\x36', '\x2', '\xA48', '\xA49', 
		'\a', '\x43F', '\x2', '\x2', '\xA49', '\xA4B', '\x5', 'j', '\x36', '\x2', 
		'\xA4A', '\xA48', '\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4E', '\x3', 
		'\x2', '\x2', '\x2', '\xA4C', '\xA4A', '\x3', '\x2', '\x2', '\x2', '\xA4C', 
		'\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4F', '\x3', '\x2', '\x2', 
		'\x2', '\xA4E', '\xA4C', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA50', 
		'\a', '\x43E', '\x2', '\x2', '\xA50', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\xA51', '\xA52', '\a', '\x192', '\x2', '\x2', '\xA52', '\xA53', '\a', 
		'{', '\x2', '\x2', '\xA53', '\xA54', '\x5', '\x216', '\x10C', '\x2', '\xA54', 
		'\xA55', '\a', '\xB7', '\x2', '\x2', '\xA55', '\xA56', '\a', '\xA3', '\x2', 
		'\x2', '\xA56', '\xA59', '\x5', '\x1FE', '\x100', '\x2', '\xA57', '\xA58', 
		'\t', '#', '\x2', '\x2', '\xA58', '\xA5A', '\a', '\x27A', '\x2', '\x2', 
		'\xA59', '\xA57', '\x3', '\x2', '\x2', '\x2', '\xA59', '\xA5A', '\x3', 
		'\x2', '\x2', '\x2', '\xA5A', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA5B', 
		'\xA5C', '\a', '\v', '\x2', '\x2', '\xA5C', '\xA5F', '\a', '{', '\x2', 
		'\x2', '\xA5D', '\xA60', '\x5', '\x236', '\x11C', '\x2', '\xA5E', '\xA60', 
		'\a', '\b', '\x2', '\x2', '\xA5F', '\xA5D', '\x3', '\x2', '\x2', '\x2', 
		'\xA5F', '\xA5E', '\x3', '\x2', '\x2', '\x2', '\xA60', '\xA7E', '\x3', 
		'\x2', '\x2', '\x2', '\xA61', '\xA62', '\a', '\x1B', '\x2', '\x2', '\xA62', 
		'\xA65', '\a', '{', '\x2', '\x2', '\xA63', '\xA66', '\x5', '\x236', '\x11C', 
		'\x2', '\xA64', '\xA66', '\a', '\b', '\x2', '\x2', '\xA65', '\xA63', '\x3', 
		'\x2', '\x2', '\x2', '\xA65', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA66', 
		'\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA67', '\xA68', '\a', 'r', '\x2', 
		'\x2', '\xA68', '\xA6B', '\a', '{', '\x2', '\x2', '\xA69', '\xA6C', '\x5', 
		'\x236', '\x11C', '\x2', '\xA6A', '\xA6C', '\a', '\b', '\x2', '\x2', '\xA6B', 
		'\xA69', '\x3', '\x2', '\x2', '\x2', '\xA6B', '\xA6A', '\x3', '\x2', '\x2', 
		'\x2', '\xA6C', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6E', 
		'\a', '\x21C', '\x2', '\x2', '\xA6E', '\xA71', '\a', '{', '\x2', '\x2', 
		'\xA6F', '\xA72', '\x5', '\x236', '\x11C', '\x2', '\xA70', '\xA72', '\a', 
		'\b', '\x2', '\x2', '\xA71', '\xA6F', '\x3', '\x2', '\x2', '\x2', '\xA71', 
		'\xA70', '\x3', '\x2', '\x2', '\x2', '\xA72', '\xA7E', '\x3', '\x2', '\x2', 
		'\x2', '\xA73', '\xA74', '\a', '\x226', '\x2', '\x2', '\xA74', '\xA77', 
		'\a', '{', '\x2', '\x2', '\xA75', '\xA78', '\x5', '\x236', '\x11C', '\x2', 
		'\xA76', '\xA78', '\a', '\b', '\x2', '\x2', '\xA77', '\xA75', '\x3', '\x2', 
		'\x2', '\x2', '\xA77', '\xA76', '\x3', '\x2', '\x2', '\x2', '\xA78', '\xA7E', 
		'\x3', '\x2', '\x2', '\x2', '\xA79', '\xA7A', '\a', '\x224', '\x2', '\x2', 
		'\xA7A', '\xA7E', '\a', '\x209', '\x2', '\x2', '\xA7B', '\xA7C', '\a', 
		'\x276', '\x2', '\x2', '\xA7C', '\xA7E', '\a', '\x209', '\x2', '\x2', 
		'\xA7D', '\x90F', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x919', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\x924', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\x936', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x945', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\x95B', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x973', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\x982', '\x3', '\x2', '\x2', '\x2', 
		'\xA7D', '\x991', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x99D', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\x9AE', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9BA', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9C5', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9D0', '\x3', '\x2', '\x2', '\x2', 
		'\xA7D', '\x9D8', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9DB', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\x9E4', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9E9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\x9EC', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9F0', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9F2', '\x3', '\x2', '\x2', '\x2', 
		'\xA7D', '\x9F4', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\x9FC', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\x9FF', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\xA09', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA14', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\xA16', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA18', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA19', '\x3', '\x2', '\x2', '\x2', 
		'\xA7D', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA28', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\xA32', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA39', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\xA3F', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA42', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA51', '\x3', '\x2', '\x2', '\x2', 
		'\xA7D', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA61', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\xA67', '\x3', '\x2', '\x2', '\x2', '\xA7D', 
		'\xA6D', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA73', '\x3', '\x2', '\x2', 
		'\x2', '\xA7D', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA7B', 
		'\x3', '\x2', '\x2', '\x2', '\xA7E', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\xA7F', '\xA80', '\a', '\x33', '\x2', '\x2', '\xA80', '\xA82', '\t', 
		'\x2', '\x2', '\x2', '\xA81', '\xA83', '\x5', '\x24C', '\x127', '\x2', 
		'\xA82', '\xA81', '\x3', '\x2', '\x2', '\x2', '\xA82', '\xA83', '\x3', 
		'\x2', '\x2', '\x2', '\xA83', '\xA84', '\x3', '\x2', '\x2', '\x2', '\xA84', 
		'\xA85', '\x5', '\x216', '\x10C', '\x2', '\xA85', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\xA86', '\xA87', '\a', '\x33', '\x2', '\x2', '\xA87', '\xA89', 
		'\a', '\x18F', '\x2', '\x2', '\xA88', '\xA8A', '\x5', '\x24C', '\x127', 
		'\x2', '\xA89', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA89', '\xA8A', 
		'\x3', '\x2', '\x2', '\x2', '\xA8A', '\xA8B', '\x3', '\x2', '\x2', '\x2', 
		'\xA8B', '\xA8C', '\x5', '\x1FC', '\xFF', '\x2', '\xA8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\xA8D', '\xA8E', '\a', '\x33', '\x2', '\x2', '\xA8E', 
		'\xA90', '\a', 'O', '\x2', '\x2', '\xA8F', '\xA91', '\t', '\x3', '\x2', 
		'\x2', '\xA90', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA90', '\xA91', 
		'\x3', '\x2', '\x2', '\x2', '\xA91', '\xA92', '\x3', '\x2', '\x2', '\x2', 
		'\xA92', '\xA93', '\x5', '\x216', '\x10C', '\x2', '\xA93', '\xA94', '\a', 
		'q', '\x2', '\x2', '\xA94', '\xAA1', '\x5', '\x1FE', '\x100', '\x2', '\xA95', 
		'\xA97', '\a', '\x144', '\x2', '\x2', '\xA96', '\xA98', '\a', '\x434', 
		'\x2', '\x2', '\xA97', '\xA96', '\x3', '\x2', '\x2', '\x2', '\xA97', '\xA98', 
		'\x3', '\x2', '\x2', '\x2', '\xA98', '\xA99', '\x3', '\x2', '\x2', '\x2', 
		'\xA99', '\xAA0', '\t', '\x5', '\x2', '\x2', '\xA9A', '\xA9C', '\a', '\x64', 
		'\x2', '\x2', '\xA9B', '\xA9D', '\a', '\x434', '\x2', '\x2', '\xA9C', 
		'\xA9B', '\x3', '\x2', '\x2', '\x2', '\xA9C', '\xA9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA9D', '\xA9E', '\x3', '\x2', '\x2', '\x2', '\xA9E', '\xAA0', 
		'\t', '\x6', '\x2', '\x2', '\xA9F', '\xA95', '\x3', '\x2', '\x2', '\x2', 
		'\xA9F', '\xA9A', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xAA3', '\x3', 
		'\x2', '\x2', '\x2', '\xAA1', '\xA9F', '\x3', '\x2', '\x2', '\x2', '\xAA1', 
		'\xAA2', '\x3', '\x2', '\x2', '\x2', '\xAA2', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\xAA3', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xAA4', '\xAA5', 
		'\a', '\x33', '\x2', '\x2', '\xAA5', '\xAA6', '\a', '\x1C7', '\x2', '\x2', 
		'\xAA6', '\xAA7', '\a', 'H', '\x2', '\x2', '\xAA7', '\xAA8', '\x5', '\x216', 
		'\x10C', '\x2', '\xAA8', '\xAA9', '\a', '\x189', '\x2', '\x2', '\xAA9', 
		'\xAAA', '\a', '\x434', '\x2', '\x2', '\xAAA', '\xAAB', '\x5', '\x20C', 
		'\x107', '\x2', '\xAAB', '\x91', '\x3', '\x2', '\x2', '\x2', '\xAAC', 
		'\xAAD', '\a', '\x33', '\x2', '\x2', '\xAAD', '\xAAF', '\a', '}', '\x2', 
		'\x2', '\xAAE', '\xAB0', '\x5', '\x24C', '\x127', '\x2', '\xAAF', '\xAAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAAF', '\xAB0', '\x3', '\x2', '\x2', '\x2', 
		'\xAB0', '\xAB1', '\x3', '\x2', '\x2', '\x2', '\xAB1', '\xAB2', '\x5', 
		'\x1FC', '\xFF', '\x2', '\xAB2', '\x93', '\x3', '\x2', '\x2', '\x2', '\xAB3', 
		'\xAB4', '\a', '\x33', '\x2', '\x2', '\xAB4', '\xAB6', '\a', '\x1A4', 
		'\x2', '\x2', '\xAB5', '\xAB7', '\x5', '\x24C', '\x127', '\x2', '\xAB6', 
		'\xAB5', '\x3', '\x2', '\x2', '\x2', '\xAB6', '\xAB7', '\x3', '\x2', '\x2', 
		'\x2', '\xAB7', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xAB9', 
		'\x5', '\x1FC', '\xFF', '\x2', '\xAB9', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\xABA', '\xABB', '\a', '\x33', '\x2', '\x2', '\xABB', '\xABD', '\a', 
		'\x23E', '\x2', '\x2', '\xABC', '\xABE', '\x5', '\x24C', '\x127', '\x2', 
		'\xABD', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xABD', '\xABE', '\x3', 
		'\x2', '\x2', '\x2', '\xABE', '\xABF', '\x3', '\x2', '\x2', '\x2', '\xABF', 
		'\xAC0', '\x5', '\x216', '\x10C', '\x2', '\xAC0', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\xAC1', '\xAC3', '\a', '\x33', '\x2', '\x2', '\xAC2', '\xAC4', 
		'\a', '\x267', '\x2', '\x2', '\xAC3', '\xAC2', '\x3', '\x2', '\x2', '\x2', 
		'\xAC3', '\xAC4', '\x3', '\x2', '\x2', '\x2', '\xAC4', '\xAC5', '\x3', 
		'\x2', '\x2', '\x2', '\xAC5', '\xAC7', '\a', '\xA3', '\x2', '\x2', '\xAC6', 
		'\xAC8', '\x5', '\x24C', '\x127', '\x2', '\xAC7', '\xAC6', '\x3', '\x2', 
		'\x2', '\x2', '\xAC7', '\xAC8', '\x3', '\x2', '\x2', '\x2', '\xAC8', '\xAC9', 
		'\x3', '\x2', '\x2', '\x2', '\xAC9', '\xACB', '\x5', '\x238', '\x11D', 
		'\x2', '\xACA', '\xACC', '\t', '$', '\x2', '\x2', '\xACB', '\xACA', '\x3', 
		'\x2', '\x2', '\x2', '\xACB', '\xACC', '\x3', '\x2', '\x2', '\x2', '\xACC', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xACE', '\a', '\x33', '\x2', 
		'\x2', '\xACE', '\xACF', '\a', '\x265', '\x2', '\x2', '\xACF', '\xAD5', 
		'\x5', '\x216', '\x10C', '\x2', '\xAD0', '\xAD2', '\a', '\x189', '\x2', 
		'\x2', '\xAD1', '\xAD3', '\a', '\x434', '\x2', '\x2', '\xAD2', '\xAD1', 
		'\x3', '\x2', '\x2', '\x2', '\xAD2', '\xAD3', '\x3', '\x2', '\x2', '\x2', 
		'\xAD3', '\xAD4', '\x3', '\x2', '\x2', '\x2', '\xAD4', '\xAD6', '\x5', 
		'\x20C', '\x107', '\x2', '\xAD5', '\xAD0', '\x3', '\x2', '\x2', '\x2', 
		'\xAD5', '\xAD6', '\x3', '\x2', '\x2', '\x2', '\xAD6', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\xAD7', '\xAD8', '\a', '\x33', '\x2', '\x2', '\xAD8', 
		'\xADA', '\a', '\xA8', '\x2', '\x2', '\xAD9', '\xADB', '\x5', '\x24C', 
		'\x127', '\x2', '\xADA', '\xAD9', '\x3', '\x2', '\x2', '\x2', '\xADA', 
		'\xADB', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xADC', '\x3', '\x2', '\x2', 
		'\x2', '\xADC', '\xADD', '\x5', '\x1FC', '\xFF', '\x2', '\xADD', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xADE', '\xADF', '\a', '\x33', '\x2', '\x2', 
		'\xADF', '\xAE1', '\a', '\x27D', '\x2', '\x2', '\xAE0', '\xAE2', '\x5', 
		'\x24C', '\x127', '\x2', '\xAE1', '\xAE0', '\x3', '\x2', '\x2', '\x2', 
		'\xAE1', '\xAE2', '\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAE3', '\x3', 
		'\x2', '\x2', '\x2', '\xAE3', '\xAE8', '\x5', '\x1FC', '\xFF', '\x2', 
		'\xAE4', '\xAE5', '\a', '\x43F', '\x2', '\x2', '\xAE5', '\xAE7', '\x5', 
		'\x1FC', '\xFF', '\x2', '\xAE6', '\xAE4', '\x3', '\x2', '\x2', '\x2', 
		'\xAE7', '\xAEA', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE6', '\x3', 
		'\x2', '\x2', '\x2', '\xAE8', '\xAE9', '\x3', '\x2', '\x2', '\x2', '\xAE9', 
		'\xAEC', '\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAE8', '\x3', '\x2', '\x2', 
		'\x2', '\xAEB', '\xAED', '\t', '$', '\x2', '\x2', '\xAEC', '\xAEB', '\x3', 
		'\x2', '\x2', '\x2', '\xAEC', '\xAED', '\x3', '\x2', '\x2', '\x2', '\xAED', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xAEE', '\xAEF', '\a', '\x85', '\x2', 
		'\x2', '\xAEF', '\xAF0', '\a', '\xA3', '\x2', '\x2', '\xAF0', '\xAF5', 
		'\x5', '\xA2', 'R', '\x2', '\xAF1', '\xAF2', '\a', '\x43F', '\x2', '\x2', 
		'\xAF2', '\xAF4', '\x5', '\xA2', 'R', '\x2', '\xAF3', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF4', '\xAF7', '\x3', '\x2', '\x2', '\x2', '\xAF5', 
		'\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF6', '\x3', '\x2', '\x2', 
		'\x2', '\xAF6', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xAF7', '\xAF5', 
		'\x3', '\x2', '\x2', '\x2', '\xAF8', '\xAF9', '\x5', '\x1FE', '\x100', 
		'\x2', '\xAF9', '\xAFA', '\a', '\xA6', '\x2', '\x2', '\xAFA', '\xAFB', 
		'\x5', '\x1FE', '\x100', '\x2', '\xAFB', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xAFC', '\xAFE', '\a', '\x26E', '\x2', '\x2', '\xAFD', '\xAFF', 
		'\a', '\xA3', '\x2', '\x2', '\xAFE', '\xAFD', '\x3', '\x2', '\x2', '\x2', 
		'\xAFE', '\xAFF', '\x3', '\x2', '\x2', '\x2', '\xAFF', '\xB00', '\x3', 
		'\x2', '\x2', '\x2', '\xB00', '\xB01', '\x5', '\x1FE', '\x100', '\x2', 
		'\xB01', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xB02', '\xB03', '\a', '\x15', 
		'\x2', '\x2', '\xB03', '\xB0A', '\x5', '\x1FC', '\xFF', '\x2', '\xB04', 
		'\xB07', '\a', '\x43D', '\x2', '\x2', '\xB05', '\xB08', '\x5', '\x240', 
		'\x121', '\x2', '\xB06', '\xB08', '\x5', '\x23C', '\x11F', '\x2', '\xB07', 
		'\xB05', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xB06', '\x3', '\x2', '\x2', 
		'\x2', '\xB07', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB08', '\xB09', 
		'\x3', '\x2', '\x2', '\x2', '\xB09', '\xB0B', '\a', '\x43E', '\x2', '\x2', 
		'\xB0A', '\xB04', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', '\x3', 
		'\x2', '\x2', '\x2', '\xB0B', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB0C', 
		'\xB0F', '\x5', '\xC2', '\x62', '\x2', '\xB0D', '\xB0F', '\x5', '\xC4', 
		'\x63', '\x2', '\xB0E', '\xB0C', '\x3', '\x2', '\x2', '\x2', '\xB0E', 
		'\xB0D', '\x3', '\x2', '\x2', '\x2', '\xB0F', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xB10', '\xB11', '\a', '\x181', '\x2', '\x2', '\xB11', '\xB12', 
		'\x5', '\x23C', '\x11F', '\x2', '\xB12', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xB13', '\xB18', '\x5', '\xC6', '\x64', '\x2', '\xB14', '\xB18', 
		'\x5', '\xC8', '\x65', '\x2', '\xB15', '\xB18', '\x5', '\xCA', '\x66', 
		'\x2', '\xB16', '\xB18', '\x5', '\xCC', 'g', '\x2', '\xB17', '\xB13', 
		'\x3', '\x2', '\x2', '\x2', '\xB17', '\xB14', '\x3', '\x2', '\x2', '\x2', 
		'\xB17', '\xB15', '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB16', '\x3', 
		'\x2', '\x2', '\x2', '\xB18', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB19', 
		'\xB1B', '\a', 'S', '\x2', '\x2', '\xB1A', '\xB1C', '\t', '%', '\x2', 
		'\x2', '\xB1B', '\xB1A', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB1C', 
		'\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB1E', '\x3', '\x2', '\x2', '\x2', 
		'\xB1D', '\xB1F', '\a', 'M', '\x2', '\x2', '\xB1E', '\xB1D', '\x3', '\x2', 
		'\x2', '\x2', '\xB1E', '\xB1F', '\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB21', 
		'\x3', '\x2', '\x2', '\x2', '\xB20', '\xB22', '\a', 'U', '\x2', '\x2', 
		'\xB21', '\xB20', '\x3', '\x2', '\x2', '\x2', '\xB21', '\xB22', '\x3', 
		'\x2', '\x2', '\x2', '\xB22', '\xB23', '\x3', '\x2', '\x2', '\x2', '\xB23', 
		'\xB2A', '\x5', '\x1FE', '\x100', '\x2', '\xB24', '\xB25', '\a', '{', 
		'\x2', '\x2', '\xB25', '\xB27', '\a', '\x43D', '\x2', '\x2', '\xB26', 
		'\xB28', '\x5', '\x236', '\x11C', '\x2', '\xB27', '\xB26', '\x3', '\x2', 
		'\x2', '\x2', '\xB27', '\xB28', '\x3', '\x2', '\x2', '\x2', '\xB28', '\xB29', 
		'\x3', '\x2', '\x2', '\x2', '\xB29', '\xB2B', '\a', '\x43E', '\x2', '\x2', 
		'\xB2A', '\xB24', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB2B', '\x3', 
		'\x2', '\x2', '\x2', '\xB2B', '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB2C', 
		'\xB2D', '\a', '\x43D', '\x2', '\x2', '\xB2D', '\xB2E', '\x5', '\x236', 
		'\x11C', '\x2', '\xB2E', '\xB2F', '\a', '\x43E', '\x2', '\x2', '\xB2F', 
		'\xB31', '\x3', '\x2', '\x2', '\x2', '\xB30', '\xB2C', '\x3', '\x2', '\x2', 
		'\x2', '\xB30', '\xB31', '\x3', '\x2', '\x2', '\x2', '\xB31', '\xB32', 
		'\x3', '\x2', '\x2', '\x2', '\xB32', '\xB3D', '\x5', '\xBA', '^', '\x2', 
		'\xB33', '\xB34', '\a', '\x93', '\x2', '\x2', '\xB34', '\xB39', '\x5', 
		'\xBC', '_', '\x2', '\xB35', '\xB36', '\a', '\x43F', '\x2', '\x2', '\xB36', 
		'\xB38', '\x5', '\xBC', '_', '\x2', '\xB37', '\xB35', '\x3', '\x2', '\x2', 
		'\x2', '\xB38', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB37', 
		'\x3', '\x2', '\x2', '\x2', '\xB39', '\xB3A', '\x3', '\x2', '\x2', '\x2', 
		'\xB3A', '\xB3D', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB39', '\x3', 
		'\x2', '\x2', '\x2', '\xB3C', '\xB30', '\x3', '\x2', '\x2', '\x2', '\xB3C', 
		'\xB33', '\x3', '\x2', '\x2', '\x2', '\xB3D', '\xB4A', '\x3', '\x2', '\x2', 
		'\x2', '\xB3E', '\xB3F', '\a', 'q', '\x2', '\x2', '\xB3F', '\xB40', '\a', 
		'\x183', '\x2', '\x2', '\xB40', '\xB41', '\a', 'Y', '\x2', '\x2', '\xB41', 
		'\xB42', '\a', '\xAF', '\x2', '\x2', '\xB42', '\xB47', '\x5', '\xBC', 
		'_', '\x2', '\xB43', '\xB44', '\a', '\x43F', '\x2', '\x2', '\xB44', '\xB46', 
		'\x5', '\xBC', '_', '\x2', '\xB45', '\xB43', '\x3', '\x2', '\x2', '\x2', 
		'\xB46', '\xB49', '\x3', '\x2', '\x2', '\x2', '\xB47', '\xB45', '\x3', 
		'\x2', '\x2', '\x2', '\xB47', '\xB48', '\x3', '\x2', '\x2', '\x2', '\xB48', 
		'\xB4B', '\x3', '\x2', '\x2', '\x2', '\xB49', '\xB47', '\x3', '\x2', '\x2', 
		'\x2', '\xB4A', '\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB4A', '\xB4B', 
		'\x3', '\x2', '\x2', '\x2', '\xB4B', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB4C', '\xB4D', '\a', '\x63', '\x2', '\x2', '\xB4D', '\xB4F', '\a', 
		'\x176', '\x2', '\x2', '\xB4E', '\xB50', '\t', '&', '\x2', '\x2', '\xB4F', 
		'\xB4E', '\x3', '\x2', '\x2', '\x2', '\xB4F', '\xB50', '\x3', '\x2', '\x2', 
		'\x2', '\xB50', '\xB52', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB53', 
		'\a', '\x1C6', '\x2', '\x2', '\xB52', '\xB51', '\x3', '\x2', '\x2', '\x2', 
		'\xB52', '\xB53', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB54', '\x3', 
		'\x2', '\x2', '\x2', '\xB54', '\xB55', '\a', 'P', '\x2', '\x2', '\xB55', 
		'\xB57', '\a', '\x44C', '\x2', '\x2', '\xB56', '\xB58', '\t', '\b', '\x2', 
		'\x2', '\xB57', '\xB56', '\x3', '\x2', '\x2', '\x2', '\xB57', '\xB58', 
		'\x3', '\x2', '\x2', '\x2', '\xB58', '\xB59', '\x3', '\x2', '\x2', '\x2', 
		'\xB59', '\xB5A', '\a', 'U', '\x2', '\x2', '\xB5A', '\xB5B', '\a', '\xA3', 
		'\x2', '\x2', '\xB5B', '\xB61', '\x5', '\x1FE', '\x100', '\x2', '\xB5C', 
		'\xB5D', '\a', '{', '\x2', '\x2', '\xB5D', '\xB5E', '\a', '\x43D', '\x2', 
		'\x2', '\xB5E', '\xB5F', '\x5', '\x236', '\x11C', '\x2', '\xB5F', '\xB60', 
		'\a', '\x43E', '\x2', '\x2', '\xB60', '\xB62', '\x3', '\x2', '\x2', '\x2', 
		'\xB61', '\xB5C', '\x3', '\x2', '\x2', '\x2', '\xB61', '\xB62', '\x3', 
		'\x2', '\x2', '\x2', '\xB62', '\xB66', '\x3', '\x2', '\x2', '\x2', '\xB63', 
		'\xB64', '\a', '\x1A', '\x2', '\x2', '\xB64', '\xB65', '\a', '\x93', '\x2', 
		'\x2', '\xB65', '\xB67', '\x5', '\x208', '\x105', '\x2', '\xB66', '\xB63', 
		'\x3', '\x2', '\x2', '\x2', '\xB66', '\xB67', '\x3', '\x2', '\x2', '\x2', 
		'\xB67', '\xB6E', '\x3', '\x2', '\x2', '\x2', '\xB68', '\xB6A', '\t', 
		'\'', '\x2', '\x2', '\xB69', '\xB6B', '\x5', '\xF6', '|', '\x2', '\xB6A', 
		'\xB69', '\x3', '\x2', '\x2', '\x2', '\xB6B', '\xB6C', '\x3', '\x2', '\x2', 
		'\x2', '\xB6C', '\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB6C', '\xB6D', 
		'\x3', '\x2', '\x2', '\x2', '\xB6D', '\xB6F', '\x3', '\x2', '\x2', '\x2', 
		'\xB6E', '\xB68', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB6F', '\x3', 
		'\x2', '\x2', '\x2', '\xB6F', '\xB76', '\x3', '\x2', '\x2', '\x2', '\xB70', 
		'\xB72', '\a', '\x62', '\x2', '\x2', '\xB71', '\xB73', '\x5', '\xF8', 
		'}', '\x2', '\xB72', '\xB71', '\x3', '\x2', '\x2', '\x2', '\xB73', '\xB74', 
		'\x3', '\x2', '\x2', '\x2', '\xB74', '\xB72', '\x3', '\x2', '\x2', '\x2', 
		'\xB74', '\xB75', '\x3', '\x2', '\x2', '\x2', '\xB75', '\xB77', '\x3', 
		'\x2', '\x2', '\x2', '\xB76', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB76', 
		'\xB77', '\x3', '\x2', '\x2', '\x2', '\xB77', '\xB7C', '\x3', '\x2', '\x2', 
		'\x2', '\xB78', '\xB79', '\a', 'M', '\x2', '\x2', '\xB79', '\xB7A', '\x5', 
		'\x21C', '\x10F', '\x2', '\xB7A', '\xB7B', '\t', '(', '\x2', '\x2', '\xB7B', 
		'\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7C', '\xB78', '\x3', '\x2', '\x2', 
		'\x2', '\xB7C', '\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7D', '\xB89', 
		'\x3', '\x2', '\x2', '\x2', '\xB7E', '\xB7F', '\a', '\x43D', '\x2', '\x2', 
		'\xB7F', '\xB84', '\x5', '\xBE', '`', '\x2', '\xB80', '\xB81', '\a', '\x43F', 
		'\x2', '\x2', '\xB81', '\xB83', '\x5', '\xBE', '`', '\x2', '\xB82', '\xB80', 
		'\x3', '\x2', '\x2', '\x2', '\xB83', '\xB86', '\x3', '\x2', '\x2', '\x2', 
		'\xB84', '\xB82', '\x3', '\x2', '\x2', '\x2', '\xB84', '\xB85', '\x3', 
		'\x2', '\x2', '\x2', '\xB85', '\xB87', '\x3', '\x2', '\x2', '\x2', '\xB86', 
		'\xB84', '\x3', '\x2', '\x2', '\x2', '\xB87', '\xB88', '\a', '\x43E', 
		'\x2', '\x2', '\xB88', '\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB89', '\xB7E', 
		'\x3', '\x2', '\x2', '\x2', '\xB89', '\xB8A', '\x3', '\x2', '\x2', '\x2', 
		'\xB8A', '\xB94', '\x3', '\x2', '\x2', '\x2', '\xB8B', '\xB8C', '\a', 
		'\x93', '\x2', '\x2', '\xB8C', '\xB91', '\x5', '\xBC', '_', '\x2', '\xB8D', 
		'\xB8E', '\a', '\x43F', '\x2', '\x2', '\xB8E', '\xB90', '\x5', '\xBC', 
		'_', '\x2', '\xB8F', '\xB8D', '\x3', '\x2', '\x2', '\x2', '\xB90', '\xB93', 
		'\x3', '\x2', '\x2', '\x2', '\xB91', '\xB8F', '\x3', '\x2', '\x2', '\x2', 
		'\xB91', '\xB92', '\x3', '\x2', '\x2', '\x2', '\xB92', '\xB95', '\x3', 
		'\x2', '\x2', '\x2', '\xB93', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xB94', 
		'\xB8B', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB95', '\x3', '\x2', '\x2', 
		'\x2', '\xB95', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB96', '\xB97', 
		'\a', '\x63', '\x2', '\x2', '\xB97', '\xB99', '\a', '\x288', '\x2', '\x2', 
		'\xB98', '\xB9A', '\t', '&', '\x2', '\x2', '\xB99', '\xB98', '\x3', '\x2', 
		'\x2', '\x2', '\xB99', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\xB9A', '\xB9C', 
		'\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9D', '\a', '\x1C6', '\x2', '\x2', 
		'\xB9C', '\xB9B', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\x3', 
		'\x2', '\x2', '\x2', '\xB9D', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9E', 
		'\xB9F', '\a', 'P', '\x2', '\x2', '\xB9F', '\xBA1', '\a', '\x44C', '\x2', 
		'\x2', '\xBA0', '\xBA2', '\t', '\b', '\x2', '\x2', '\xBA1', '\xBA0', '\x3', 
		'\x2', '\x2', '\x2', '\xBA1', '\xBA2', '\x3', '\x2', '\x2', '\x2', '\xBA2', 
		'\xBA3', '\x3', '\x2', '\x2', '\x2', '\xBA3', '\xBA4', '\a', 'U', '\x2', 
		'\x2', '\xBA4', '\xBA5', '\a', '\xA3', '\x2', '\x2', '\xBA5', '\xBA9', 
		'\x5', '\x1FE', '\x100', '\x2', '\xBA6', '\xBA7', '\a', '\x1A', '\x2', 
		'\x2', '\xBA7', '\xBA8', '\a', '\x93', '\x2', '\x2', '\xBA8', '\xBAA', 
		'\x5', '\x208', '\x105', '\x2', '\xBA9', '\xBA6', '\x3', '\x2', '\x2', 
		'\x2', '\xBA9', '\xBAA', '\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBB1', 
		'\x3', '\x2', '\x2', '\x2', '\xBAB', '\xBAC', '\a', '\x239', '\x2', '\x2', 
		'\xBAC', '\xBAD', '\a', '\x1AE', '\x2', '\x2', '\xBAD', '\xBAE', '\a', 
		'\x14', '\x2', '\x2', '\xBAE', '\xBAF', '\a', '\x436', '\x2', '\x2', '\xBAF', 
		'\xBB0', '\a', '\x44C', '\x2', '\x2', '\xBB0', '\xBB2', '\a', '\x435', 
		'\x2', '\x2', '\xBB1', '\xBAB', '\x3', '\x2', '\x2', '\x2', '\xBB1', '\xBB2', 
		'\x3', '\x2', '\x2', '\x2', '\xBB2', '\xBB7', '\x3', '\x2', '\x2', '\x2', 
		'\xBB3', '\xBB4', '\a', 'M', '\x2', '\x2', '\xBB4', '\xBB5', '\x5', '\x21C', 
		'\x10F', '\x2', '\xBB5', '\xBB6', '\t', '(', '\x2', '\x2', '\xBB6', '\xBB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBB7', '\xBB3', '\x3', '\x2', '\x2', '\x2', 
		'\xBB7', '\xBB8', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBC4', '\x3', 
		'\x2', '\x2', '\x2', '\xBB9', '\xBBA', '\a', '\x43D', '\x2', '\x2', '\xBBA', 
		'\xBBF', '\x5', '\xBE', '`', '\x2', '\xBBB', '\xBBC', '\a', '\x43F', '\x2', 
		'\x2', '\xBBC', '\xBBE', '\x5', '\xBE', '`', '\x2', '\xBBD', '\xBBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBC1', '\x3', '\x2', '\x2', '\x2', 
		'\xBBF', '\xBBD', '\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBC0', '\x3', 
		'\x2', '\x2', '\x2', '\xBC0', '\xBC2', '\x3', '\x2', '\x2', '\x2', '\xBC1', 
		'\xBBF', '\x3', '\x2', '\x2', '\x2', '\xBC2', '\xBC3', '\a', '\x43E', 
		'\x2', '\x2', '\xBC3', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC4', '\xBB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBC4', '\xBC5', '\x3', '\x2', '\x2', '\x2', 
		'\xBC5', '\xBCF', '\x3', '\x2', '\x2', '\x2', '\xBC6', '\xBC7', '\a', 
		'\x93', '\x2', '\x2', '\xBC7', '\xBCC', '\x5', '\xBC', '_', '\x2', '\xBC8', 
		'\xBC9', '\a', '\x43F', '\x2', '\x2', '\xBC9', '\xBCB', '\x5', '\xBC', 
		'_', '\x2', '\xBCA', '\xBC8', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCE', 
		'\x3', '\x2', '\x2', '\x2', '\xBCC', '\xBCA', '\x3', '\x2', '\x2', '\x2', 
		'\xBCC', '\xBCD', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBD0', '\x3', 
		'\x2', '\x2', '\x2', '\xBCE', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCF', 
		'\xBC6', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\x3', '\x2', '\x2', 
		'\x2', '\xBD0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xBD1', '\xBD3', 
		'\a', '\x87', '\x2', '\x2', '\xBD2', '\xBD4', '\t', ')', '\x2', '\x2', 
		'\xBD3', '\xBD2', '\x3', '\x2', '\x2', '\x2', '\xBD3', '\xBD4', '\x3', 
		'\x2', '\x2', '\x2', '\xBD4', '\xBD6', '\x3', '\x2', '\x2', '\x2', '\xBD5', 
		'\xBD7', '\a', 'U', '\x2', '\x2', '\xBD6', '\xBD5', '\x3', '\x2', '\x2', 
		'\x2', '\xBD6', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD7', '\xBD8', 
		'\x3', '\x2', '\x2', '\x2', '\xBD8', '\xBDE', '\x5', '\x1FE', '\x100', 
		'\x2', '\xBD9', '\xBDA', '\a', '{', '\x2', '\x2', '\xBDA', '\xBDB', '\a', 
		'\x43D', '\x2', '\x2', '\xBDB', '\xBDC', '\x5', '\x236', '\x11C', '\x2', 
		'\xBDC', '\xBDD', '\a', '\x43E', '\x2', '\x2', '\xBDD', '\xBDF', '\x3', 
		'\x2', '\x2', '\x2', '\xBDE', '\xBD9', '\x3', '\x2', '\x2', '\x2', '\xBDE', 
		'\xBDF', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBF0', '\x3', '\x2', '\x2', 
		'\x2', '\xBE0', '\xBE1', '\a', '\x43D', '\x2', '\x2', '\xBE1', '\xBE2', 
		'\x5', '\x236', '\x11C', '\x2', '\xBE2', '\xBE3', '\a', '\x43E', '\x2', 
		'\x2', '\xBE3', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBE0', 
		'\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBE5', '\x3', '\x2', '\x2', '\x2', 
		'\xBE5', '\xBE6', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xBF1', '\x5', 
		'\xBA', '^', '\x2', '\xBE7', '\xBE8', '\a', '\x93', '\x2', '\x2', '\xBE8', 
		'\xBED', '\x5', '\xBC', '_', '\x2', '\xBE9', '\xBEA', '\a', '\x43F', '\x2', 
		'\x2', '\xBEA', '\xBEC', '\x5', '\xBC', '_', '\x2', '\xBEB', '\xBE9', 
		'\x3', '\x2', '\x2', '\x2', '\xBEC', '\xBEF', '\x3', '\x2', '\x2', '\x2', 
		'\xBED', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEE', '\x3', 
		'\x2', '\x2', '\x2', '\xBEE', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBEF', 
		'\xBED', '\x3', '\x2', '\x2', '\x2', '\xBF0', '\xBE4', '\x3', '\x2', '\x2', 
		'\x2', '\xBF0', '\xBE7', '\x3', '\x2', '\x2', '\x2', '\xBF1', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBF4', '\x5', '\xE6', 't', '\x2', 
		'\xBF3', '\xBF5', '\x5', '\xC0', '\x61', '\x2', '\xBF4', '\xBF3', '\x3', 
		'\x2', '\x2', '\x2', '\xBF4', '\xBF5', '\x3', '\x2', '\x2', '\x2', '\xBF5', 
		'\xC2A', '\x3', '\x2', '\x2', '\x2', '\xBF6', '\xBF8', '\x5', '\xE2', 
		'r', '\x2', '\xBF7', '\xBF9', '\x5', '\xC0', '\x61', '\x2', '\xBF8', '\xBF7', 
		'\x3', '\x2', '\x2', '\x2', '\xBF8', '\xBF9', '\x3', '\x2', '\x2', '\x2', 
		'\xBF9', '\xC2A', '\x3', '\x2', '\x2', '\x2', '\xBFA', '\xBFC', '\x5', 
		'\xE8', 'u', '\x2', '\xBFB', '\xBFD', '\x5', '\xEC', 'w', '\x2', '\xBFC', 
		'\xBFB', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBFE', '\x3', '\x2', '\x2', 
		'\x2', '\xBFE', '\xBFC', '\x3', '\x2', '\x2', '\x2', '\xBFE', '\xBFF', 
		'\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC08', '\x3', '\x2', '\x2', '\x2', 
		'\xC00', '\xC02', '\a', '\xAB', '\x2', '\x2', '\xC01', '\xC03', '\t', 
		'*', '\x2', '\x2', '\xC02', '\xC01', '\x3', '\x2', '\x2', '\x2', '\xC02', 
		'\xC03', '\x3', '\x2', '\x2', '\x2', '\xC03', '\xC06', '\x3', '\x2', '\x2', 
		'\x2', '\xC04', '\xC07', '\x5', '\xE6', 't', '\x2', '\xC05', '\xC07', 
		'\x5', '\xE2', 'r', '\x2', '\xC06', '\xC04', '\x3', '\x2', '\x2', '\x2', 
		'\xC06', '\xC05', '\x3', '\x2', '\x2', '\x2', '\xC07', '\xC09', '\x3', 
		'\x2', '\x2', '\x2', '\xC08', '\xC00', '\x3', '\x2', '\x2', '\x2', '\xC08', 
		'\xC09', '\x3', '\x2', '\x2', '\x2', '\xC09', '\xC0B', '\x3', '\x2', '\x2', 
		'\x2', '\xC0A', '\xC0C', '\x5', '\xD2', 'j', '\x2', '\xC0B', '\xC0A', 
		'\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC0C', '\x3', '\x2', '\x2', '\x2', 
		'\xC0C', '\xC0E', '\x3', '\x2', '\x2', '\x2', '\xC0D', '\xC0F', '\x5', 
		'\x104', '\x83', '\x2', '\xC0E', '\xC0D', '\x3', '\x2', '\x2', '\x2', 
		'\xC0E', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC0F', '\xC11', '\x3', 
		'\x2', '\x2', '\x2', '\xC10', '\xC12', '\x5', '\xC0', '\x61', '\x2', '\xC11', 
		'\xC10', '\x3', '\x2', '\x2', '\x2', '\xC11', '\xC12', '\x3', '\x2', '\x2', 
		'\x2', '\xC12', '\xC2A', '\x3', '\x2', '\x2', '\x2', '\xC13', '\xC15', 
		'\x5', '\xE4', 's', '\x2', '\xC14', '\xC16', '\x5', '\xEA', 'v', '\x2', 
		'\xC15', '\xC14', '\x3', '\x2', '\x2', '\x2', '\xC16', '\xC17', '\x3', 
		'\x2', '\x2', '\x2', '\xC17', '\xC15', '\x3', '\x2', '\x2', '\x2', '\xC17', 
		'\xC18', '\x3', '\x2', '\x2', '\x2', '\xC18', '\xC1E', '\x3', '\x2', '\x2', 
		'\x2', '\xC19', '\xC1B', '\a', '\xAB', '\x2', '\x2', '\xC1A', '\xC1C', 
		'\t', '*', '\x2', '\x2', '\xC1B', '\xC1A', '\x3', '\x2', '\x2', '\x2', 
		'\xC1B', '\xC1C', '\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC1D', '\x3', 
		'\x2', '\x2', '\x2', '\xC1D', '\xC1F', '\x5', '\xE2', 'r', '\x2', '\xC1E', 
		'\xC19', '\x3', '\x2', '\x2', '\x2', '\xC1E', '\xC1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC1F', '\xC21', '\x3', '\x2', '\x2', '\x2', '\xC20', '\xC22', 
		'\x5', '\xD2', 'j', '\x2', '\xC21', '\xC20', '\x3', '\x2', '\x2', '\x2', 
		'\xC21', '\xC22', '\x3', '\x2', '\x2', '\x2', '\xC22', '\xC24', '\x3', 
		'\x2', '\x2', '\x2', '\xC23', '\xC25', '\x5', '\x104', '\x83', '\x2', 
		'\xC24', '\xC23', '\x3', '\x2', '\x2', '\x2', '\xC24', '\xC25', '\x3', 
		'\x2', '\x2', '\x2', '\xC25', '\xC27', '\x3', '\x2', '\x2', '\x2', '\xC26', 
		'\xC28', '\x5', '\xC0', '\x61', '\x2', '\xC27', '\xC26', '\x3', '\x2', 
		'\x2', '\x2', '\xC27', '\xC28', '\x3', '\x2', '\x2', '\x2', '\xC28', '\xC2A', 
		'\x3', '\x2', '\x2', '\x2', '\xC29', '\xBF2', '\x3', '\x2', '\x2', '\x2', 
		'\xC29', '\xBF6', '\x3', '\x2', '\x2', '\x2', '\xC29', '\xBFA', '\x3', 
		'\x2', '\x2', '\x2', '\xC29', '\xC13', '\x3', '\x2', '\x2', '\x2', '\xC2A', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xC2B', '\xC2E', '\x5', '\xCE', 'h', 
		'\x2', '\xC2C', '\xC2E', '\x5', '\xD0', 'i', '\x2', '\xC2D', '\xC2B', 
		'\x3', '\x2', '\x2', '\x2', '\xC2D', '\xC2C', '\x3', '\x2', '\x2', '\x2', 
		'\xC2E', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC2F', '\xC42', '\x5', 
		'\xB6', '\\', '\x2', '\xC30', '\xC31', '\t', '+', '\x2', '\x2', '\xC31', 
		'\xC33', '\a', '\x43D', '\x2', '\x2', '\xC32', '\xC34', '\x5', '\x23E', 
		'\x120', '\x2', '\xC33', '\xC32', '\x3', '\x2', '\x2', '\x2', '\xC33', 
		'\xC34', '\x3', '\x2', '\x2', '\x2', '\xC34', '\xC35', '\x3', '\x2', '\x2', 
		'\x2', '\xC35', '\xC3E', '\a', '\x43E', '\x2', '\x2', '\xC36', '\xC37', 
		'\a', '\x43F', '\x2', '\x2', '\xC37', '\xC39', '\a', '\x43D', '\x2', '\x2', 
		'\xC38', '\xC3A', '\x5', '\x23E', '\x120', '\x2', '\xC39', '\xC38', '\x3', 
		'\x2', '\x2', '\x2', '\xC39', '\xC3A', '\x3', '\x2', '\x2', '\x2', '\xC3A', 
		'\xC3B', '\x3', '\x2', '\x2', '\x2', '\xC3B', '\xC3D', '\a', '\x43E', 
		'\x2', '\x2', '\xC3C', '\xC36', '\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC40', 
		'\x3', '\x2', '\x2', '\x2', '\xC3E', '\xC3C', '\x3', '\x2', '\x2', '\x2', 
		'\xC3E', '\xC3F', '\x3', '\x2', '\x2', '\x2', '\xC3F', '\xC42', '\x3', 
		'\x2', '\x2', '\x2', '\xC40', '\xC3E', '\x3', '\x2', '\x2', '\x2', '\xC41', 
		'\xC2F', '\x3', '\x2', '\x2', '\x2', '\xC41', '\xC30', '\x3', '\x2', '\x2', 
		'\x2', '\xC42', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC43', '\xC44', 
		'\x5', '\x200', '\x101', '\x2', '\xC44', '\xC47', '\a', '\x434', '\x2', 
		'\x2', '\xC45', '\xC48', '\x5', '\x278', '\x13D', '\x2', '\xC46', '\xC48', 
		'\a', '*', '\x2', '\x2', '\xC47', '\xC45', '\x3', '\x2', '\x2', '\x2', 
		'\xC47', '\xC46', '\x3', '\x2', '\x2', '\x2', '\xC48', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC49', '\xC4C', '\x5', '\x216', '\x10C', '\x2', 
		'\xC4A', '\xC4C', '\a', '\x458', '\x2', '\x2', '\xC4B', '\xC49', '\x3', 
		'\x2', '\x2', '\x2', '\xC4B', '\xC4A', '\x3', '\x2', '\x2', '\x2', '\xC4C', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC4D', '\xC4E', '\a', '@', '\x2', 
		'\x2', '\xC4E', '\xC54', '\a', '\xAF', '\x2', '\x2', '\xC4F', '\xC50', 
		'\a', '\x64', '\x2', '\x2', '\xC50', '\xC51', '\a', 'N', '\x2', '\x2', 
		'\xC51', '\xC52', '\a', '\x240', '\x2', '\x2', '\xC52', '\xC54', '\a', 
		'\x1EB', '\x2', '\x2', '\xC53', '\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC53', 
		'\xC4F', '\x3', '\x2', '\x2', '\x2', '\xC54', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC55', '\xC57', '\a', ',', '\x2', '\x2', '\xC56', '\xC58', '\a', 
		'\x66', '\x2', '\x2', '\xC57', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC57', 
		'\xC58', '\x3', '\x2', '\x2', '\x2', '\xC58', '\xC5A', '\x3', '\x2', '\x2', 
		'\x2', '\xC59', '\xC5B', '\a', '\x21B', '\x2', '\x2', '\xC5A', '\xC59', 
		'\x3', '\x2', '\x2', '\x2', '\xC5A', '\xC5B', '\x3', '\x2', '\x2', '\x2', 
		'\xC5B', '\xC5D', '\x3', '\x2', '\x2', '\x2', '\xC5C', '\xC5E', '\a', 
		'M', '\x2', '\x2', '\xC5D', '\xC5C', '\x3', '\x2', '\x2', '\x2', '\xC5D', 
		'\xC5E', '\x3', '\x2', '\x2', '\x2', '\xC5E', '\xC5F', '\x3', '\x2', '\x2', 
		'\x2', '\xC5F', '\xC60', '\a', '\x43', '\x2', '\x2', '\xC60', '\xC66', 
		'\x5', '\x1FE', '\x100', '\x2', '\xC61', '\xC62', '\a', '{', '\x2', '\x2', 
		'\xC62', '\xC63', '\a', '\x43D', '\x2', '\x2', '\xC63', '\xC64', '\x5', 
		'\x236', '\x11C', '\x2', '\xC64', '\xC65', '\a', '\x43E', '\x2', '\x2', 
		'\xC65', '\xC67', '\x3', '\x2', '\x2', '\x2', '\xC66', '\xC61', '\x3', 
		'\x2', '\x2', '\x2', '\xC66', '\xC67', '\x3', '\x2', '\x2', '\x2', '\xC67', 
		'\xC6A', '\x3', '\x2', '\x2', '\x2', '\xC68', '\xC69', '\a', '\xB5', '\x2', 
		'\x2', '\xC69', '\xC6B', '\x5', '\x278', '\x13D', '\x2', '\xC6A', '\xC68', 
		'\x3', '\x2', '\x2', '\x2', '\xC6A', '\xC6B', '\x3', '\x2', '\x2', '\x2', 
		'\xC6B', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC6C', '\xC6E', '\x5', 
		'\xD2', 'j', '\x2', '\xC6D', '\xC6C', '\x3', '\x2', '\x2', '\x2', '\xC6D', 
		'\xC6E', '\x3', '\x2', '\x2', '\x2', '\xC6E', '\xC71', '\x3', '\x2', '\x2', 
		'\x2', '\xC6F', '\xC70', '\a', '`', '\x2', '\x2', '\xC70', '\xC72', '\x5', 
		'\x106', '\x84', '\x2', '\xC71', '\xC6F', '\x3', '\x2', '\x2', '\x2', 
		'\xC71', '\xC72', '\x3', '\x2', '\x2', '\x2', '\xC72', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC73', '\xC75', '\a', ',', '\x2', '\x2', '\xC74', 
		'\xC76', '\a', '\x66', '\x2', '\x2', '\xC75', '\xC74', '\x3', '\x2', '\x2', 
		'\x2', '\xC75', '\xC76', '\x3', '\x2', '\x2', '\x2', '\xC76', '\xC78', 
		'\x3', '\x2', '\x2', '\x2', '\xC77', '\xC79', '\a', '\x21B', '\x2', '\x2', 
		'\xC78', '\xC77', '\x3', '\x2', '\x2', '\x2', '\xC78', '\xC79', '\x3', 
		'\x2', '\x2', '\x2', '\xC79', '\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC7A', 
		'\xC7C', '\a', 'M', '\x2', '\x2', '\xC7B', '\xC7A', '\x3', '\x2', '\x2', 
		'\x2', '\xC7B', '\xC7C', '\x3', '\x2', '\x2', '\x2', '\xC7C', '\xCA4', 
		'\x3', '\x2', '\x2', '\x2', '\xC7D', '\xC80', '\x5', '\x1FE', '\x100', 
		'\x2', '\xC7E', '\xC7F', '\a', '\x43C', '\x2', '\x2', '\xC7F', '\xC81', 
		'\a', '\x42D', '\x2', '\x2', '\xC80', '\xC7E', '\x3', '\x2', '\x2', '\x2', 
		'\xC80', '\xC81', '\x3', '\x2', '\x2', '\x2', '\xC81', '\xC8A', '\x3', 
		'\x2', '\x2', '\x2', '\xC82', '\xC83', '\a', '\x43F', '\x2', '\x2', '\xC83', 
		'\xC86', '\x5', '\x1FE', '\x100', '\x2', '\xC84', '\xC85', '\a', '\x43C', 
		'\x2', '\x2', '\xC85', '\xC87', '\a', '\x42D', '\x2', '\x2', '\xC86', 
		'\xC84', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC87', '\x3', '\x2', '\x2', 
		'\x2', '\xC87', '\xC89', '\x3', '\x2', '\x2', '\x2', '\xC88', '\xC82', 
		'\x3', '\x2', '\x2', '\x2', '\xC89', '\xC8C', '\x3', '\x2', '\x2', '\x2', 
		'\xC8A', '\xC88', '\x3', '\x2', '\x2', '\x2', '\xC8A', '\xC8B', '\x3', 
		'\x2', '\x2', '\x2', '\xC8B', '\xC8D', '\x3', '\x2', '\x2', '\x2', '\xC8C', 
		'\xC8A', '\x3', '\x2', '\x2', '\x2', '\xC8D', '\xC8E', '\a', '\x43', '\x2', 
		'\x2', '\xC8E', '\xC8F', '\x5', '\xD6', 'l', '\x2', '\xC8F', '\xCA5', 
		'\x3', '\x2', '\x2', '\x2', '\xC90', '\xC91', '\a', '\x43', '\x2', '\x2', 
		'\xC91', '\xC94', '\x5', '\x1FE', '\x100', '\x2', '\xC92', '\xC93', '\a', 
		'\x43C', '\x2', '\x2', '\xC93', '\xC95', '\a', '\x42D', '\x2', '\x2', 
		'\xC94', '\xC92', '\x3', '\x2', '\x2', '\x2', '\xC94', '\xC95', '\x3', 
		'\x2', '\x2', '\x2', '\xC95', '\xC9E', '\x3', '\x2', '\x2', '\x2', '\xC96', 
		'\xC97', '\a', '\x43F', '\x2', '\x2', '\xC97', '\xC9A', '\x5', '\x1FE', 
		'\x100', '\x2', '\xC98', '\xC99', '\a', '\x43C', '\x2', '\x2', '\xC99', 
		'\xC9B', '\a', '\x42D', '\x2', '\x2', '\xC9A', '\xC98', '\x3', '\x2', 
		'\x2', '\x2', '\xC9A', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9B', '\xC9D', 
		'\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC96', '\x3', '\x2', '\x2', '\x2', 
		'\xC9D', '\xCA0', '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xC9C', '\x3', 
		'\x2', '\x2', '\x2', '\xC9E', '\xC9F', '\x3', '\x2', '\x2', '\x2', '\xC9F', 
		'\xCA1', '\x3', '\x2', '\x2', '\x2', '\xCA0', '\xC9E', '\x3', '\x2', '\x2', 
		'\x2', '\xCA1', '\xCA2', '\a', '\xB2', '\x2', '\x2', '\xCA2', '\xCA3', 
		'\x5', '\xD6', 'l', '\x2', '\xCA3', '\xCA5', '\x3', '\x2', '\x2', '\x2', 
		'\xCA4', '\xC7D', '\x3', '\x2', '\x2', '\x2', '\xCA4', '\xC90', '\x3', 
		'\x2', '\x2', '\x2', '\xCA5', '\xCA8', '\x3', '\x2', '\x2', '\x2', '\xCA6', 
		'\xCA7', '\a', '\xB5', '\x2', '\x2', '\xCA7', '\xCA9', '\x5', '\x278', 
		'\x13D', '\x2', '\xCA8', '\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCA8', 
		'\xCA9', '\x3', '\x2', '\x2', '\x2', '\xCA9', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xCAA', '\xCAB', '\a', '\x1A9', '\x2', '\x2', '\xCAB', '\xCAC', 
		'\x5', '\x1FE', '\x100', '\x2', '\xCAC', '\xCB1', '\a', '\x201', '\x2', 
		'\x2', '\xCAD', '\xCAF', '\a', '\xE', '\x2', '\x2', '\xCAE', '\xCAD', 
		'\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCAF', '\x3', '\x2', '\x2', '\x2', 
		'\xCAF', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\xCB0', '\xCB2', '\x5', 
		'\x216', '\x10C', '\x2', '\xCB1', '\xCAE', '\x3', '\x2', '\x2', '\x2', 
		'\xCB1', '\xCB2', '\x3', '\x2', '\x2', '\x2', '\xCB2', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCB3', '\xCB4', '\a', '\x1A9', '\x2', '\x2', '\xCB4', 
		'\xCB5', '\x5', '\x1FE', '\x100', '\x2', '\xCB5', '\xCB6', '\a', '\x80', 
		'\x2', '\x2', '\xCB6', '\xCBD', '\x5', '\x216', '\x10C', '\x2', '\xCB7', 
		'\xCB8', '\x5', '\x280', '\x141', '\x2', '\xCB8', '\xCB9', '\a', '\x43D', 
		'\x2', '\x2', '\xCB9', '\xCBA', '\x5', '\x240', '\x121', '\x2', '\xCBA', 
		'\xCBB', '\a', '\x43E', '\x2', '\x2', '\xCBB', '\xCBE', '\x3', '\x2', 
		'\x2', '\x2', '\xCBC', '\xCBE', '\t', ',', '\x2', '\x2', '\xCBD', '\xCB7', 
		'\x3', '\x2', '\x2', '\x2', '\xCBD', '\xCBC', '\x3', '\x2', '\x2', '\x2', 
		'\xCBE', '\xCC1', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCC0', '\a', 
		'\xB5', '\x2', '\x2', '\xCC0', '\xCC2', '\x5', '\x278', '\x13D', '\x2', 
		'\xCC1', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCC1', '\xCC2', '\x3', 
		'\x2', '\x2', '\x2', '\xCC2', '\xCC5', '\x3', '\x2', '\x2', '\x2', '\xCC3', 
		'\xCC4', '\a', '`', '\x2', '\x2', '\xCC4', '\xCC6', '\x5', '\x106', '\x84', 
		'\x2', '\xCC5', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC5', '\xCC6', 
		'\x3', '\x2', '\x2', '\x2', '\xCC6', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xCC7', '\xCC8', '\a', '\x1A9', '\x2', '\x2', '\xCC8', '\xCC9', '\x5', 
		'\x1FE', '\x100', '\x2', '\xCC9', '\xCCA', '\a', '\x80', '\x2', '\x2', 
		'\xCCA', '\xCCD', '\t', '-', '\x2', '\x2', '\xCCB', '\xCCC', '\a', '\xB5', 
		'\x2', '\x2', '\xCCC', '\xCCE', '\x5', '\x278', '\x13D', '\x2', '\xCCD', 
		'\xCCB', '\x3', '\x2', '\x2', '\x2', '\xCCD', '\xCCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCCE', '\xCD1', '\x3', '\x2', '\x2', '\x2', '\xCCF', '\xCD0', 
		'\a', '`', '\x2', '\x2', '\xCD0', '\xCD2', '\x5', '\x106', '\x84', '\x2', 
		'\xCD1', '\xCCF', '\x3', '\x2', '\x2', '\x2', '\xCD1', '\xCD2', '\x3', 
		'\x2', '\x2', '\x2', '\xCD2', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD3', 
		'\xCD4', '\a', '\x1A9', '\x2', '\x2', '\xCD4', '\xCD5', '\x5', '\x1FE', 
		'\x100', '\x2', '\xCD5', '\xCD6', '\a', '\x15D', '\x2', '\x2', '\xCD6', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD7', '\xCD9', '\a', '\xAF', '\x2', 
		'\x2', '\xCD8', '\xCDA', '\a', '\x66', '\x2', '\x2', '\xCD9', '\xCD8', 
		'\x3', '\x2', '\x2', '\x2', '\xCD9', '\xCDA', '\x3', '\x2', '\x2', '\x2', 
		'\xCDA', '\xCDC', '\x3', '\x2', '\x2', '\x2', '\xCDB', '\xCDD', '\a', 
		'M', '\x2', '\x2', '\xCDC', '\xCDB', '\x3', '\x2', '\x2', '\x2', '\xCDC', 
		'\xCDD', '\x3', '\x2', '\x2', '\x2', '\xCDD', '\xCDE', '\x3', '\x2', '\x2', 
		'\x2', '\xCDE', '\xCE3', '\x5', '\x1FE', '\x100', '\x2', '\xCDF', '\xCE1', 
		'\a', '\xE', '\x2', '\x2', '\xCE0', '\xCDF', '\x3', '\x2', '\x2', '\x2', 
		'\xCE0', '\xCE1', '\x3', '\x2', '\x2', '\x2', '\xCE1', '\xCE2', '\x3', 
		'\x2', '\x2', '\x2', '\xCE2', '\xCE4', '\x5', '\x216', '\x10C', '\x2', 
		'\xCE3', '\xCE0', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\xCE4', '\x3', 
		'\x2', '\x2', '\x2', '\xCE4', '\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE5', 
		'\xCE6', '\a', '\x93', '\x2', '\x2', '\xCE6', '\xCEB', '\x5', '\xBC', 
		'_', '\x2', '\xCE7', '\xCE8', '\a', '\x43F', '\x2', '\x2', '\xCE8', '\xCEA', 
		'\x5', '\xBC', '_', '\x2', '\xCE9', '\xCE7', '\x3', '\x2', '\x2', '\x2', 
		'\xCEA', '\xCED', '\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCE9', '\x3', 
		'\x2', '\x2', '\x2', '\xCEB', '\xCEC', '\x3', '\x2', '\x2', '\x2', '\xCEC', 
		'\xCF0', '\x3', '\x2', '\x2', '\x2', '\xCED', '\xCEB', '\x3', '\x2', '\x2', 
		'\x2', '\xCEE', '\xCEF', '\a', '\xB5', '\x2', '\x2', '\xCEF', '\xCF1', 
		'\x5', '\x278', '\x13D', '\x2', '\xCF0', '\xCEE', '\x3', '\x2', '\x2', 
		'\x2', '\xCF0', '\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF1', '\xCF3', 
		'\x3', '\x2', '\x2', '\x2', '\xCF2', '\xCF4', '\x5', '\xD2', 'j', '\x2', 
		'\xCF3', '\xCF2', '\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF4', '\x3', 
		'\x2', '\x2', '\x2', '\xCF4', '\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCF5', 
		'\xCF7', '\x5', '\x104', '\x83', '\x2', '\xCF6', '\xCF5', '\x3', '\x2', 
		'\x2', '\x2', '\xCF6', '\xCF7', '\x3', '\x2', '\x2', '\x2', '\xCF7', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xCF8', '\xCFA', '\a', '\xAF', '\x2', '\x2', 
		'\xCF9', '\xCFB', '\a', '\x66', '\x2', '\x2', '\xCFA', '\xCF9', '\x3', 
		'\x2', '\x2', '\x2', '\xCFA', '\xCFB', '\x3', '\x2', '\x2', '\x2', '\xCFB', 
		'\xCFD', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\xCFE', '\a', 'M', '\x2', 
		'\x2', '\xCFD', '\xCFC', '\x3', '\x2', '\x2', '\x2', '\xCFD', '\xCFE', 
		'\x3', '\x2', '\x2', '\x2', '\xCFE', '\xCFF', '\x3', '\x2', '\x2', '\x2', 
		'\xCFF', '\xD00', '\x5', '\xD6', 'l', '\x2', '\xD00', '\xD01', '\a', '\x93', 
		'\x2', '\x2', '\xD01', '\xD06', '\x5', '\xBC', '_', '\x2', '\xD02', '\xD03', 
		'\a', '\x43F', '\x2', '\x2', '\xD03', '\xD05', '\x5', '\xBC', '_', '\x2', 
		'\xD04', '\xD02', '\x3', '\x2', '\x2', '\x2', '\xD05', '\xD08', '\x3', 
		'\x2', '\x2', '\x2', '\xD06', '\xD04', '\x3', '\x2', '\x2', '\x2', '\xD06', 
		'\xD07', '\x3', '\x2', '\x2', '\x2', '\xD07', '\xD0B', '\x3', '\x2', '\x2', 
		'\x2', '\xD08', '\xD06', '\x3', '\x2', '\x2', '\x2', '\xD09', '\xD0A', 
		'\a', '\xB5', '\x2', '\x2', '\xD0A', '\xD0C', '\x5', '\x278', '\x13D', 
		'\x2', '\xD0B', '\xD09', '\x3', '\x2', '\x2', '\x2', '\xD0B', '\xD0C', 
		'\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD0D', '\xD0E', '\a', 'v', '\x2', '\x2', '\xD0E', '\xD0F', '\a', '\x14', 
		'\x2', '\x2', '\xD0F', '\xD14', '\x5', '\xD4', 'k', '\x2', '\xD10', '\xD11', 
		'\a', '\x43F', '\x2', '\x2', '\xD11', '\xD13', '\x5', '\xD4', 'k', '\x2', 
		'\xD12', '\xD10', '\x3', '\x2', '\x2', '\x2', '\xD13', '\xD16', '\x3', 
		'\x2', '\x2', '\x2', '\xD14', '\xD12', '\x3', '\x2', '\x2', '\x2', '\xD14', 
		'\xD15', '\x3', '\x2', '\x2', '\x2', '\xD15', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD16', '\xD14', '\x3', '\x2', '\x2', '\x2', '\xD17', '\xD19', 
		'\x5', '\x278', '\x13D', '\x2', '\xD18', '\xD1A', '\t', '.', '\x2', '\x2', 
		'\xD19', '\xD18', '\x3', '\x2', '\x2', '\x2', '\xD19', '\xD1A', '\x3', 
		'\x2', '\x2', '\x2', '\xD1A', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD1B', 
		'\xD20', '\x5', '\xD8', 'm', '\x2', '\xD1C', '\xD1D', '\a', '\x43F', '\x2', 
		'\x2', '\xD1D', '\xD1F', '\x5', '\xD8', 'm', '\x2', '\xD1E', '\xD1C', 
		'\x3', '\x2', '\x2', '\x2', '\xD1F', '\xD22', '\x3', '\x2', '\x2', '\x2', 
		'\xD20', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\xD20', '\xD21', '\x3', 
		'\x2', '\x2', '\x2', '\xD21', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD22', 
		'\xD20', '\x3', '\x2', '\x2', '\x2', '\xD23', '\xD27', '\x5', '\xDA', 
		'n', '\x2', '\xD24', '\xD26', '\x5', '\xE0', 'q', '\x2', '\xD25', '\xD24', 
		'\x3', '\x2', '\x2', '\x2', '\xD26', '\xD29', '\x3', '\x2', '\x2', '\x2', 
		'\xD27', '\xD25', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xD28', '\x3', 
		'\x2', '\x2', '\x2', '\xD28', '\xD35', '\x3', '\x2', '\x2', '\x2', '\xD29', 
		'\xD27', '\x3', '\x2', '\x2', '\x2', '\xD2A', '\xD2B', '\a', '\x43D', 
		'\x2', '\x2', '\xD2B', '\xD2F', '\x5', '\xDA', 'n', '\x2', '\xD2C', '\xD2E', 
		'\x5', '\xE0', 'q', '\x2', '\xD2D', '\xD2C', '\x3', '\x2', '\x2', '\x2', 
		'\xD2E', '\xD31', '\x3', '\x2', '\x2', '\x2', '\xD2F', '\xD2D', '\x3', 
		'\x2', '\x2', '\x2', '\xD2F', '\xD30', '\x3', '\x2', '\x2', '\x2', '\xD30', 
		'\xD32', '\x3', '\x2', '\x2', '\x2', '\xD31', '\xD2F', '\x3', '\x2', '\x2', 
		'\x2', '\xD32', '\xD33', '\a', '\x43E', '\x2', '\x2', '\xD33', '\xD35', 
		'\x3', '\x2', '\x2', '\x2', '\xD34', '\xD23', '\x3', '\x2', '\x2', '\x2', 
		'\xD34', '\xD2A', '\x3', '\x2', '\x2', '\x2', '\xD35', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xD36', '\xD3C', '\x5', '\x1FE', '\x100', '\x2', 
		'\xD37', '\xD38', '\a', '{', '\x2', '\x2', '\xD38', '\xD39', '\a', '\x43D', 
		'\x2', '\x2', '\xD39', '\xD3A', '\x5', '\x236', '\x11C', '\x2', '\xD3A', 
		'\xD3B', '\a', '\x43E', '\x2', '\x2', '\xD3B', '\xD3D', '\x3', '\x2', 
		'\x2', '\x2', '\xD3C', '\xD37', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3D', 
		'\x3', '\x2', '\x2', '\x2', '\xD3D', '\xD42', '\x3', '\x2', '\x2', '\x2', 
		'\xD3E', '\xD40', '\a', '\xE', '\x2', '\x2', '\xD3F', '\xD3E', '\x3', 
		'\x2', '\x2', '\x2', '\xD3F', '\xD40', '\x3', '\x2', '\x2', '\x2', '\xD40', 
		'\xD41', '\x3', '\x2', '\x2', '\x2', '\xD41', '\xD43', '\x5', '\x216', 
		'\x10C', '\x2', '\xD42', '\xD3F', '\x3', '\x2', '\x2', '\x2', '\xD42', 
		'\xD43', '\x3', '\x2', '\x2', '\x2', '\xD43', '\xD4C', '\x3', '\x2', '\x2', 
		'\x2', '\xD44', '\xD49', '\x5', '\xDC', 'o', '\x2', '\xD45', '\xD46', 
		'\a', '\x43F', '\x2', '\x2', '\xD46', '\xD48', '\x5', '\xDC', 'o', '\x2', 
		'\xD47', '\xD45', '\x3', '\x2', '\x2', '\x2', '\xD48', '\xD4B', '\x3', 
		'\x2', '\x2', '\x2', '\xD49', '\xD47', '\x3', '\x2', '\x2', '\x2', '\xD49', 
		'\xD4A', '\x3', '\x2', '\x2', '\x2', '\xD4A', '\xD4D', '\x3', '\x2', '\x2', 
		'\x2', '\xD4B', '\xD49', '\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD44', 
		'\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD4D', '\x3', '\x2', '\x2', '\x2', 
		'\xD4D', '\xD5F', '\x3', '\x2', '\x2', '\x2', '\xD4E', '\xD54', '\x5', 
		'\xB6', '\\', '\x2', '\xD4F', '\xD50', '\a', '\x43D', '\x2', '\x2', '\xD50', 
		'\xD51', '\x5', '\xB6', '\\', '\x2', '\xD51', '\xD52', '\a', '\x43E', 
		'\x2', '\x2', '\xD52', '\xD54', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD4E', 
		'\x3', '\x2', '\x2', '\x2', '\xD53', '\xD4F', '\x3', '\x2', '\x2', '\x2', 
		'\xD54', '\xD56', '\x3', '\x2', '\x2', '\x2', '\xD55', '\xD57', '\a', 
		'\xE', '\x2', '\x2', '\xD56', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD56', 
		'\xD57', '\x3', '\x2', '\x2', '\x2', '\xD57', '\xD58', '\x3', '\x2', '\x2', 
		'\x2', '\xD58', '\xD59', '\x5', '\x216', '\x10C', '\x2', '\xD59', '\xD5F', 
		'\x3', '\x2', '\x2', '\x2', '\xD5A', '\xD5B', '\a', '\x43D', '\x2', '\x2', 
		'\xD5B', '\xD5C', '\x5', '\xD6', 'l', '\x2', '\xD5C', '\xD5D', '\a', '\x43E', 
		'\x2', '\x2', '\xD5D', '\xD5F', '\x3', '\x2', '\x2', '\x2', '\xD5E', '\xD36', 
		'\x3', '\x2', '\x2', '\x2', '\xD5E', '\xD53', '\x3', '\x2', '\x2', '\x2', 
		'\xD5E', '\xD5A', '\x3', '\x2', '\x2', '\x2', '\xD5F', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xD60', '\xD61', '\t', '/', '\x2', '\x2', '\xD61', 
		'\xD64', '\t', '\x14', '\x2', '\x2', '\xD62', '\xD63', '\a', '@', '\x2', 
		'\x2', '\xD63', '\xD65', '\x5', '\xDE', 'p', '\x2', '\xD64', '\xD62', 
		'\x3', '\x2', '\x2', '\x2', '\xD64', '\xD65', '\x3', '\x2', '\x2', '\x2', 
		'\xD65', '\xD66', '\x3', '\x2', '\x2', '\x2', '\xD66', '\xD67', '\a', 
		'\x43D', '\x2', '\x2', '\xD67', '\xD68', '\x5', '\x236', '\x11C', '\x2', 
		'\xD68', '\xD69', '\a', '\x43E', '\x2', '\x2', '\xD69', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xD6A', '\xD70', '\a', 'X', '\x2', '\x2', '\xD6B', 
		'\xD6C', '\a', 'v', '\x2', '\x2', '\xD6C', '\xD70', '\a', '\x14', '\x2', 
		'\x2', '\xD6D', '\xD6E', '\a', 'H', '\x2', '\x2', '\xD6E', '\xD70', '\a', 
		'\x14', '\x2', '\x2', '\xD6F', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD6F', 
		'\xD6B', '\x3', '\x2', '\x2', '\x2', '\xD6F', '\xD6D', '\x3', '\x2', '\x2', 
		'\x2', '\xD70', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xD71', '\xD73', 
		'\t', '\x30', '\x2', '\x2', '\xD72', '\xD71', '\x3', '\x2', '\x2', '\x2', 
		'\xD72', '\xD73', '\x3', '\x2', '\x2', '\x2', '\xD73', '\xD74', '\x3', 
		'\x2', '\x2', '\x2', '\xD74', '\xD75', '\a', 'X', '\x2', '\x2', '\xD75', 
		'\xD7D', '\x5', '\xDA', 'n', '\x2', '\xD76', '\xD77', '\a', 'q', '\x2', 
		'\x2', '\xD77', '\xD7E', '\x5', '\x278', '\x13D', '\x2', '\xD78', '\xD79', 
		'\a', '\xB2', '\x2', '\x2', '\xD79', '\xD7A', '\a', '\x43D', '\x2', '\x2', 
		'\xD7A', '\xD7B', '\x5', '\x236', '\x11C', '\x2', '\xD7B', '\xD7C', '\a', 
		'\x43E', '\x2', '\x2', '\xD7C', '\xD7E', '\x3', '\x2', '\x2', '\x2', '\xD7D', 
		'\xD76', '\x3', '\x2', '\x2', '\x2', '\xD7D', '\xD78', '\x3', '\x2', '\x2', 
		'\x2', '\xD7D', '\xD7E', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD9E', 
		'\x3', '\x2', '\x2', '\x2', '\xD7F', '\xD80', '\a', '\xA2', '\x2', '\x2', 
		'\xD80', '\xD83', '\x5', '\xDA', 'n', '\x2', '\xD81', '\xD82', '\a', 'q', 
		'\x2', '\x2', '\xD82', '\xD84', '\x5', '\x278', '\x13D', '\x2', '\xD83', 
		'\xD81', '\x3', '\x2', '\x2', '\x2', '\xD83', '\xD84', '\x3', '\x2', '\x2', 
		'\x2', '\xD84', '\xD9E', '\x3', '\x2', '\x2', '\x2', '\xD85', '\xD87', 
		'\t', '\x31', '\x2', '\x2', '\xD86', '\xD88', '\a', 'y', '\x2', '\x2', 
		'\xD87', '\xD86', '\x3', '\x2', '\x2', '\x2', '\xD87', '\xD88', '\x3', 
		'\x2', '\x2', '\x2', '\xD88', '\xD89', '\x3', '\x2', '\x2', '\x2', '\xD89', 
		'\xD8A', '\a', 'X', '\x2', '\x2', '\xD8A', '\xD92', '\x5', '\xDA', 'n', 
		'\x2', '\xD8B', '\xD8C', '\a', 'q', '\x2', '\x2', '\xD8C', '\xD93', '\x5', 
		'\x278', '\x13D', '\x2', '\xD8D', '\xD8E', '\a', '\xB2', '\x2', '\x2', 
		'\xD8E', '\xD8F', '\a', '\x43D', '\x2', '\x2', '\xD8F', '\xD90', '\x5', 
		'\x236', '\x11C', '\x2', '\xD90', '\xD91', '\a', '\x43E', '\x2', '\x2', 
		'\xD91', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD92', '\xD8B', '\x3', 
		'\x2', '\x2', '\x2', '\xD92', '\xD8D', '\x3', '\x2', '\x2', '\x2', '\xD93', 
		'\xD9E', '\x3', '\x2', '\x2', '\x2', '\xD94', '\xD99', '\a', 'l', '\x2', 
		'\x2', '\xD95', '\xD97', '\t', '\x31', '\x2', '\x2', '\xD96', '\xD98', 
		'\a', 'y', '\x2', '\x2', '\xD97', '\xD96', '\x3', '\x2', '\x2', '\x2', 
		'\xD97', '\xD98', '\x3', '\x2', '\x2', '\x2', '\xD98', '\xD9A', '\x3', 
		'\x2', '\x2', '\x2', '\xD99', '\xD95', '\x3', '\x2', '\x2', '\x2', '\xD99', 
		'\xD9A', '\x3', '\x2', '\x2', '\x2', '\xD9A', '\xD9B', '\x3', '\x2', '\x2', 
		'\x2', '\xD9B', '\xD9C', '\a', 'X', '\x2', '\x2', '\xD9C', '\xD9E', '\x5', 
		'\xDA', 'n', '\x2', '\xD9D', '\xD72', '\x3', '\x2', '\x2', '\x2', '\xD9D', 
		'\xD7F', '\x3', '\x2', '\x2', '\x2', '\xD9D', '\xD85', '\x3', '\x2', '\x2', 
		'\x2', '\xD9D', '\xD94', '\x3', '\x2', '\x2', '\x2', '\xD9E', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xD9F', '\xDA0', '\a', '\x43D', '\x2', '\x2', 
		'\xDA0', '\xDA1', '\x5', '\xE6', 't', '\x2', '\xDA1', '\xDA2', '\a', '\x43E', 
		'\x2', '\x2', '\xDA2', '\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDA3', '\xDA4', 
		'\a', '\x43D', '\x2', '\x2', '\xDA4', '\xDA5', '\x5', '\xE2', 'r', '\x2', 
		'\xDA5', '\xDA6', '\a', '\x43E', '\x2', '\x2', '\xDA6', '\xDA8', '\x3', 
		'\x2', '\x2', '\x2', '\xDA7', '\xD9F', '\x3', '\x2', '\x2', '\x2', '\xDA7', 
		'\xDA3', '\x3', '\x2', '\x2', '\x2', '\xDA8', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xDA9', '\xDAA', '\a', '\x43D', '\x2', '\x2', '\xDAA', '\xDAB', 
		'\x5', '\xE8', 'u', '\x2', '\xDAB', '\xDAC', '\a', '\x43E', '\x2', '\x2', 
		'\xDAC', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDAD', '\xDAE', '\a', 
		'\x43D', '\x2', '\x2', '\xDAE', '\xDAF', '\x5', '\xE4', 's', '\x2', '\xDAF', 
		'\xDB0', '\a', '\x43E', '\x2', '\x2', '\xDB0', '\xDB2', '\x3', '\x2', 
		'\x2', '\x2', '\xDB1', '\xDA9', '\x3', '\x2', '\x2', '\x2', '\xDB1', '\xDAD', 
		'\x3', '\x2', '\x2', '\x2', '\xDB2', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xDB3', '\xDB7', '\a', '\x92', '\x2', '\x2', '\xDB4', '\xDB6', '\x5', 
		'\xEE', 'x', '\x2', '\xDB5', '\xDB4', '\x3', '\x2', '\x2', '\x2', '\xDB6', 
		'\xDB9', '\x3', '\x2', '\x2', '\x2', '\xDB7', '\xDB5', '\x3', '\x2', '\x2', 
		'\x2', '\xDB7', '\xDB8', '\x3', '\x2', '\x2', '\x2', '\xDB8', '\xDBA', 
		'\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDB7', '\x3', '\x2', '\x2', '\x2', 
		'\xDBA', '\xDBC', '\x5', '\xF0', 'y', '\x2', '\xDBB', '\xDBD', '\x5', 
		'\xF4', '{', '\x2', '\xDBC', '\xDBB', '\x3', '\x2', '\x2', '\x2', '\xDBC', 
		'\xDBD', '\x3', '\x2', '\x2', '\x2', '\xDBD', '\xDBF', '\x3', '\x2', '\x2', 
		'\x2', '\xDBE', '\xDC0', '\x5', '\xFA', '~', '\x2', '\xDBF', '\xDBE', 
		'\x3', '\x2', '\x2', '\x2', '\xDBF', '\xDC0', '\x3', '\x2', '\x2', '\x2', 
		'\xDC0', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDC1', '\xDC3', '\x5', 
		'\xFC', '\x7F', '\x2', '\xDC2', '\xDC1', '\x3', '\x2', '\x2', '\x2', '\xDC2', 
		'\xDC3', '\x3', '\x2', '\x2', '\x2', '\xDC3', '\xDC5', '\x3', '\x2', '\x2', 
		'\x2', '\xDC4', '\xDC6', '\x5', '\xFE', '\x80', '\x2', '\xDC5', '\xDC4', 
		'\x3', '\x2', '\x2', '\x2', '\xDC5', '\xDC6', '\x3', '\x2', '\x2', '\x2', 
		'\xDC6', '\xDC8', '\x3', '\x2', '\x2', '\x2', '\xDC7', '\xDC9', '\x5', 
		'\x100', '\x81', '\x2', '\xDC8', '\xDC7', '\x3', '\x2', '\x2', '\x2', 
		'\xDC8', '\xDC9', '\x3', '\x2', '\x2', '\x2', '\xDC9', '\xDCB', '\x3', 
		'\x2', '\x2', '\x2', '\xDCA', '\xDCC', '\x5', '\xD2', 'j', '\x2', '\xDCB', 
		'\xDCA', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDCC', '\x3', '\x2', '\x2', 
		'\x2', '\xDCC', '\xDCE', '\x3', '\x2', '\x2', '\x2', '\xDCD', '\xDCF', 
		'\x5', '\x104', '\x83', '\x2', '\xDCE', '\xDCD', '\x3', '\x2', '\x2', 
		'\x2', '\xDCE', '\xDCF', '\x3', '\x2', '\x2', '\x2', '\xDCF', '\xDEE', 
		'\x3', '\x2', '\x2', '\x2', '\xDD0', '\xDD4', '\a', '\x92', '\x2', '\x2', 
		'\xDD1', '\xDD3', '\x5', '\xEE', 'x', '\x2', '\xDD2', '\xDD1', '\x3', 
		'\x2', '\x2', '\x2', '\xDD3', '\xDD6', '\x3', '\x2', '\x2', '\x2', '\xDD4', 
		'\xDD2', '\x3', '\x2', '\x2', '\x2', '\xDD4', '\xDD5', '\x3', '\x2', '\x2', 
		'\x2', '\xDD5', '\xDD7', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDD4', 
		'\x3', '\x2', '\x2', '\x2', '\xDD7', '\xDD9', '\x5', '\xF0', 'y', '\x2', 
		'\xDD8', '\xDDA', '\x5', '\xFA', '~', '\x2', '\xDD9', '\xDD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDD9', '\xDDA', '\x3', '\x2', '\x2', '\x2', '\xDDA', 
		'\xDDC', '\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDDD', '\x5', '\xFC', 
		'\x7F', '\x2', '\xDDC', '\xDDB', '\x3', '\x2', '\x2', '\x2', '\xDDC', 
		'\xDDD', '\x3', '\x2', '\x2', '\x2', '\xDDD', '\xDDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDDE', '\xDE0', '\x5', '\xFE', '\x80', '\x2', '\xDDF', '\xDDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDE0', '\x3', '\x2', '\x2', '\x2', 
		'\xDE0', '\xDE2', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE3', '\x5', 
		'\x100', '\x81', '\x2', '\xDE2', '\xDE1', '\x3', '\x2', '\x2', '\x2', 
		'\xDE2', '\xDE3', '\x3', '\x2', '\x2', '\x2', '\xDE3', '\xDE5', '\x3', 
		'\x2', '\x2', '\x2', '\xDE4', '\xDE6', '\x5', '\xD2', 'j', '\x2', '\xDE5', 
		'\xDE4', '\x3', '\x2', '\x2', '\x2', '\xDE5', '\xDE6', '\x3', '\x2', '\x2', 
		'\x2', '\xDE6', '\xDE8', '\x3', '\x2', '\x2', '\x2', '\xDE7', '\xDE9', 
		'\x5', '\x104', '\x83', '\x2', '\xDE8', '\xDE7', '\x3', '\x2', '\x2', 
		'\x2', '\xDE8', '\xDE9', '\x3', '\x2', '\x2', '\x2', '\xDE9', '\xDEB', 
		'\x3', '\x2', '\x2', '\x2', '\xDEA', '\xDEC', '\x5', '\xF4', '{', '\x2', 
		'\xDEB', '\xDEA', '\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDEC', '\x3', 
		'\x2', '\x2', '\x2', '\xDEC', '\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDED', 
		'\xDB3', '\x3', '\x2', '\x2', '\x2', '\xDED', '\xDD0', '\x3', '\x2', '\x2', 
		'\x2', '\xDEE', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xDEF', '\xDF3', 
		'\a', '\x92', '\x2', '\x2', '\xDF0', '\xDF2', '\x5', '\xEE', 'x', '\x2', 
		'\xDF1', '\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDF5', '\x3', 
		'\x2', '\x2', '\x2', '\xDF3', '\xDF1', '\x3', '\x2', '\x2', '\x2', '\xDF3', 
		'\xDF4', '\x3', '\x2', '\x2', '\x2', '\xDF4', '\xDF6', '\x3', '\x2', '\x2', 
		'\x2', '\xDF5', '\xDF3', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\xDF8', 
		'\x5', '\xF0', 'y', '\x2', '\xDF7', '\xDF9', '\x5', '\xFA', '~', '\x2', 
		'\xDF8', '\xDF7', '\x3', '\x2', '\x2', '\x2', '\xDF8', '\xDF9', '\x3', 
		'\x2', '\x2', '\x2', '\xDF9', '\xDFB', '\x3', '\x2', '\x2', '\x2', '\xDFA', 
		'\xDFC', '\x5', '\xFC', '\x7F', '\x2', '\xDFB', '\xDFA', '\x3', '\x2', 
		'\x2', '\x2', '\xDFB', '\xDFC', '\x3', '\x2', '\x2', '\x2', '\xDFC', '\xDFE', 
		'\x3', '\x2', '\x2', '\x2', '\xDFD', '\xDFF', '\x5', '\xFE', '\x80', '\x2', 
		'\xDFE', '\xDFD', '\x3', '\x2', '\x2', '\x2', '\xDFE', '\xDFF', '\x3', 
		'\x2', '\x2', '\x2', '\xDFF', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE00', 
		'\xE02', '\x5', '\x100', '\x81', '\x2', '\xE01', '\xE00', '\x3', '\x2', 
		'\x2', '\x2', '\xE01', '\xE02', '\x3', '\x2', '\x2', '\x2', '\xE02', '\xE04', 
		'\x3', '\x2', '\x2', '\x2', '\xE03', '\xE05', '\x5', '\xD2', 'j', '\x2', 
		'\xE04', '\xE03', '\x3', '\x2', '\x2', '\x2', '\xE04', '\xE05', '\x3', 
		'\x2', '\x2', '\x2', '\xE05', '\xE07', '\x3', '\x2', '\x2', '\x2', '\xE06', 
		'\xE08', '\x5', '\x104', '\x83', '\x2', '\xE07', '\xE06', '\x3', '\x2', 
		'\x2', '\x2', '\xE07', '\xE08', '\x3', '\x2', '\x2', '\x2', '\xE08', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE09', '\xE0B', '\a', '\xAB', '\x2', '\x2', 
		'\xE0A', '\xE0C', '\t', '*', '\x2', '\x2', '\xE0B', '\xE0A', '\x3', '\x2', 
		'\x2', '\x2', '\xE0B', '\xE0C', '\x3', '\x2', '\x2', '\x2', '\xE0C', '\xE0D', 
		'\x3', '\x2', '\x2', '\x2', '\xE0D', '\xE0E', '\x5', '\xE4', 's', '\x2', 
		'\xE0E', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE11', '\a', '\xAB', 
		'\x2', '\x2', '\xE10', '\xE12', '\t', '*', '\x2', '\x2', '\xE11', '\xE10', 
		'\x3', '\x2', '\x2', '\x2', '\xE11', '\xE12', '\x3', '\x2', '\x2', '\x2', 
		'\xE12', '\xE15', '\x3', '\x2', '\x2', '\x2', '\xE13', '\xE16', '\x5', 
		'\xE8', 'u', '\x2', '\xE14', '\xE16', '\x5', '\xE4', 's', '\x2', '\xE15', 
		'\xE13', '\x3', '\x2', '\x2', '\x2', '\xE15', '\xE14', '\x3', '\x2', '\x2', 
		'\x2', '\xE16', '\xED', '\x3', '\x2', '\x2', '\x2', '\xE17', '\xE20', 
		'\t', '\x32', '\x2', '\x2', '\xE18', '\xE20', '\a', 'J', '\x2', '\x2', 
		'\xE19', '\xE20', '\a', '\xA2', '\x2', '\x2', '\xE1A', '\xE20', '\a', 
		'\x9E', '\x2', '\x2', '\xE1B', '\xE20', '\a', '\x9C', '\x2', '\x2', '\xE1C', 
		'\xE20', '\a', '\x24F', '\x2', '\x2', '\xE1D', '\xE20', '\t', '\x33', 
		'\x2', '\x2', '\xE1E', '\xE20', '\a', '\x9D', '\x2', '\x2', '\xE1F', '\xE17', 
		'\x3', '\x2', '\x2', '\x2', '\xE1F', '\xE18', '\x3', '\x2', '\x2', '\x2', 
		'\xE1F', '\xE19', '\x3', '\x2', '\x2', '\x2', '\xE1F', '\xE1A', '\x3', 
		'\x2', '\x2', '\x2', '\xE1F', '\xE1B', '\x3', '\x2', '\x2', '\x2', '\xE1F', 
		'\xE1C', '\x3', '\x2', '\x2', '\x2', '\xE1F', '\xE1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE1F', '\xE1E', '\x3', '\x2', '\x2', '\x2', '\xE20', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xE21', '\xE24', '\a', '\x42D', '\x2', '\x2', 
		'\xE22', '\xE24', '\x5', '\xF2', 'z', '\x2', '\xE23', '\xE21', '\x3', 
		'\x2', '\x2', '\x2', '\xE23', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE24', 
		'\xE29', '\x3', '\x2', '\x2', '\x2', '\xE25', '\xE26', '\a', '\x43F', 
		'\x2', '\x2', '\xE26', '\xE28', '\x5', '\xF2', 'z', '\x2', '\xE27', '\xE25', 
		'\x3', '\x2', '\x2', '\x2', '\xE28', '\xE2B', '\x3', '\x2', '\x2', '\x2', 
		'\xE29', '\xE27', '\x3', '\x2', '\x2', '\x2', '\xE29', '\xE2A', '\x3', 
		'\x2', '\x2', '\x2', '\xE2A', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xE2B', 
		'\xE29', '\x3', '\x2', '\x2', '\x2', '\xE2C', '\xE2D', '\x5', '\x1FC', 
		'\xFF', '\x2', '\xE2D', '\xE2E', '\a', '\x43C', '\x2', '\x2', '\xE2E', 
		'\xE2F', '\a', '\x42D', '\x2', '\x2', '\xE2F', '\xE4A', '\x3', '\x2', 
		'\x2', '\x2', '\xE30', '\xE35', '\x5', '\x200', '\x101', '\x2', '\xE31', 
		'\xE33', '\a', '\xE', '\x2', '\x2', '\xE32', '\xE31', '\x3', '\x2', '\x2', 
		'\x2', '\xE32', '\xE33', '\x3', '\x2', '\x2', '\x2', '\xE33', '\xE34', 
		'\x3', '\x2', '\x2', '\x2', '\xE34', '\xE36', '\x5', '\x216', '\x10C', 
		'\x2', '\xE35', '\xE32', '\x3', '\x2', '\x2', '\x2', '\xE35', '\xE36', 
		'\x3', '\x2', '\x2', '\x2', '\xE36', '\xE4A', '\x3', '\x2', '\x2', '\x2', 
		'\xE37', '\xE3C', '\x5', '\x250', '\x129', '\x2', '\xE38', '\xE3A', '\a', 
		'\xE', '\x2', '\x2', '\xE39', '\xE38', '\x3', '\x2', '\x2', '\x2', '\xE39', 
		'\xE3A', '\x3', '\x2', '\x2', '\x2', '\xE3A', '\xE3B', '\x3', '\x2', '\x2', 
		'\x2', '\xE3B', '\xE3D', '\x5', '\x216', '\x10C', '\x2', '\xE3C', '\xE39', 
		'\x3', '\x2', '\x2', '\x2', '\xE3C', '\xE3D', '\x3', '\x2', '\x2', '\x2', 
		'\xE3D', '\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE3E', '\xE3F', '\a', 
		'\x458', '\x2', '\x2', '\xE3F', '\xE41', '\a', '\x424', '\x2', '\x2', 
		'\xE40', '\xE3E', '\x3', '\x2', '\x2', '\x2', '\xE40', '\xE41', '\x3', 
		'\x2', '\x2', '\x2', '\xE41', '\xE42', '\x3', '\x2', '\x2', '\x2', '\xE42', 
		'\xE47', '\x5', '\x278', '\x13D', '\x2', '\xE43', '\xE45', '\a', '\xE', 
		'\x2', '\x2', '\xE44', '\xE43', '\x3', '\x2', '\x2', '\x2', '\xE44', '\xE45', 
		'\x3', '\x2', '\x2', '\x2', '\xE45', '\xE46', '\x3', '\x2', '\x2', '\x2', 
		'\xE46', '\xE48', '\x5', '\x216', '\x10C', '\x2', '\xE47', '\xE44', '\x3', 
		'\x2', '\x2', '\x2', '\xE47', '\xE48', '\x3', '\x2', '\x2', '\x2', '\xE48', 
		'\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE49', '\xE2C', '\x3', '\x2', '\x2', 
		'\x2', '\xE49', '\xE30', '\x3', '\x2', '\x2', '\x2', '\xE49', '\xE37', 
		'\x3', '\x2', '\x2', '\x2', '\xE49', '\xE40', '\x3', '\x2', '\x2', '\x2', 
		'\xE4A', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xE4B', '\xE4C', '\a', 'U', 
		'\x2', '\x2', '\xE4C', '\xE51', '\x5', '\xBE', '`', '\x2', '\xE4D', '\xE4E', 
		'\a', '\x43F', '\x2', '\x2', '\xE4E', '\xE50', '\x5', '\xBE', '`', '\x2', 
		'\xE4F', '\xE4D', '\x3', '\x2', '\x2', '\x2', '\xE50', '\xE53', '\x3', 
		'\x2', '\x2', '\x2', '\xE51', '\xE4F', '\x3', '\x2', '\x2', '\x2', '\xE51', 
		'\xE52', '\x3', '\x2', '\x2', '\x2', '\xE52', '\xE70', '\x3', '\x2', '\x2', 
		'\x2', '\xE53', '\xE51', '\x3', '\x2', '\x2', '\x2', '\xE54', '\xE55', 
		'\a', 'U', '\x2', '\x2', '\xE55', '\xE56', '\a', '\x182', '\x2', '\x2', 
		'\xE56', '\xE70', '\a', '\x44C', '\x2', '\x2', '\xE57', '\xE58', '\a', 
		'U', '\x2', '\x2', '\xE58', '\xE59', '\a', 'z', '\x2', '\x2', '\xE59', 
		'\xE5D', '\a', '\x44C', '\x2', '\x2', '\xE5A', '\xE5B', '\a', '\x1A', 
		'\x2', '\x2', '\xE5B', '\xE5C', '\a', '\x93', '\x2', '\x2', '\xE5C', '\xE5E', 
		'\x5', '\x208', '\x105', '\x2', '\xE5D', '\xE5A', '\x3', '\x2', '\x2', 
		'\x2', '\xE5D', '\xE5E', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\xE65', 
		'\x3', '\x2', '\x2', '\x2', '\xE5F', '\xE61', '\t', '\'', '\x2', '\x2', 
		'\xE60', '\xE62', '\x5', '\xF6', '|', '\x2', '\xE61', '\xE60', '\x3', 
		'\x2', '\x2', '\x2', '\xE62', '\xE63', '\x3', '\x2', '\x2', '\x2', '\xE63', 
		'\xE61', '\x3', '\x2', '\x2', '\x2', '\xE63', '\xE64', '\x3', '\x2', '\x2', 
		'\x2', '\xE64', '\xE66', '\x3', '\x2', '\x2', '\x2', '\xE65', '\xE5F', 
		'\x3', '\x2', '\x2', '\x2', '\xE65', '\xE66', '\x3', '\x2', '\x2', '\x2', 
		'\xE66', '\xE6D', '\x3', '\x2', '\x2', '\x2', '\xE67', '\xE69', '\a', 
		'\x62', '\x2', '\x2', '\xE68', '\xE6A', '\x5', '\xF8', '}', '\x2', '\xE69', 
		'\xE68', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B', '\x3', '\x2', '\x2', 
		'\x2', '\xE6B', '\xE69', '\x3', '\x2', '\x2', '\x2', '\xE6B', '\xE6C', 
		'\x3', '\x2', '\x2', '\x2', '\xE6C', '\xE6E', '\x3', '\x2', '\x2', '\x2', 
		'\xE6D', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE6D', '\xE6E', '\x3', 
		'\x2', '\x2', '\x2', '\xE6E', '\xE70', '\x3', '\x2', '\x2', '\x2', '\xE6F', 
		'\xE4B', '\x3', '\x2', '\x2', '\x2', '\xE6F', '\xE54', '\x3', '\x2', '\x2', 
		'\x2', '\xE6F', '\xE57', '\x3', '\x2', '\x2', '\x2', '\xE70', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xE71', '\xE72', '\a', '\xA4', '\x2', '\x2', 
		'\xE72', '\xE73', '\a', '\x14', '\x2', '\x2', '\xE73', '\xE7E', '\a', 
		'\x44C', '\x2', '\x2', '\xE74', '\xE76', '\a', 't', '\x2', '\x2', '\xE75', 
		'\xE74', '\x3', '\x2', '\x2', '\x2', '\xE75', '\xE76', '\x3', '\x2', '\x2', 
		'\x2', '\xE76', '\xE77', '\x3', '\x2', '\x2', '\x2', '\xE77', '\xE78', 
		'\a', '\x38', '\x2', '\x2', '\xE78', '\xE79', '\a', '\x14', '\x2', '\x2', 
		'\xE79', '\xE7E', '\a', '\x44C', '\x2', '\x2', '\xE7A', '\xE7B', '\a', 
		'\x39', '\x2', '\x2', '\xE7B', '\xE7C', '\a', '\x14', '\x2', '\x2', '\xE7C', 
		'\xE7E', '\a', '\x44C', '\x2', '\x2', '\xE7D', '\xE71', '\x3', '\x2', 
		'\x2', '\x2', '\xE7D', '\xE75', '\x3', '\x2', '\x2', '\x2', '\xE7D', '\xE7A', 
		'\x3', '\x2', '\x2', '\x2', '\xE7E', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7F', '\xE80', '\a', '\xA1', '\x2', '\x2', '\xE80', '\xE81', '\a', 
		'\x14', '\x2', '\x2', '\xE81', '\xE86', '\a', '\x44C', '\x2', '\x2', '\xE82', 
		'\xE83', '\a', '\xA4', '\x2', '\x2', '\xE83', '\xE84', '\a', '\x14', '\x2', 
		'\x2', '\xE84', '\xE86', '\a', '\x44C', '\x2', '\x2', '\xE85', '\xE7F', 
		'\x3', '\x2', '\x2', '\x2', '\xE85', '\xE82', '\x3', '\x2', '\x2', '\x2', 
		'\xE86', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xE87', '\xE88', '\a', '\x43', 
		'\x2', '\x2', '\xE88', '\xE8B', '\x5', '\xD6', 'l', '\x2', '\xE89', '\xE8A', 
		'\a', '\xB5', '\x2', '\x2', '\xE8A', '\xE8C', '\x5', '\x278', '\x13D', 
		'\x2', '\xE8B', '\xE89', '\x3', '\x2', '\x2', '\x2', '\xE8B', '\xE8C', 
		'\x3', '\x2', '\x2', '\x2', '\xE8C', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xE8D', '\xE8E', '\a', 'H', '\x2', '\x2', '\xE8E', '\xE8F', '\a', '\x14', 
		'\x2', '\x2', '\xE8F', '\xE94', '\x5', '\x102', '\x82', '\x2', '\xE90', 
		'\xE91', '\a', '\x43F', '\x2', '\x2', '\xE91', '\xE93', '\x5', '\x102', 
		'\x82', '\x2', '\xE92', '\xE90', '\x3', '\x2', '\x2', '\x2', '\xE93', 
		'\xE96', '\x3', '\x2', '\x2', '\x2', '\xE94', '\xE92', '\x3', '\x2', '\x2', 
		'\x2', '\xE94', '\xE95', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xE99', 
		'\x3', '\x2', '\x2', '\x2', '\xE96', '\xE94', '\x3', '\x2', '\x2', '\x2', 
		'\xE97', '\xE98', '\a', '\xB7', '\x2', '\x2', '\xE98', '\xE9A', '\a', 
		'\x236', '\x2', '\x2', '\xE99', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xE99', 
		'\xE9A', '\x3', '\x2', '\x2', '\x2', '\xE9A', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xE9B', '\xE9C', '\a', 'I', '\x2', '\x2', '\xE9C', '\xE9D', '\x5', 
		'\x278', '\x13D', '\x2', '\xE9D', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xE9E', '\xE9F', '\a', '\x282', '\x2', '\x2', '\xE9F', '\xEA0', '\x5', 
		'\x262', '\x132', '\x2', '\xEA0', '\xEA1', '\a', '\xE', '\x2', '\x2', 
		'\xEA1', '\xEA2', '\a', '\x43D', '\x2', '\x2', '\xEA2', '\xEA3', '\x5', 
		'\x260', '\x131', '\x2', '\xEA3', '\xEAD', '\a', '\x43E', '\x2', '\x2', 
		'\xEA4', '\xEA5', '\a', '\x43F', '\x2', '\x2', '\xEA5', '\xEA6', '\x5', 
		'\x262', '\x132', '\x2', '\xEA6', '\xEA7', '\a', '\xE', '\x2', '\x2', 
		'\xEA7', '\xEA8', '\a', '\x43D', '\x2', '\x2', '\xEA8', '\xEA9', '\x5', 
		'\x260', '\x131', '\x2', '\xEA9', '\xEAA', '\a', '\x43E', '\x2', '\x2', 
		'\xEAA', '\xEAC', '\x3', '\x2', '\x2', '\x2', '\xEAB', '\xEA4', '\x3', 
		'\x2', '\x2', '\x2', '\xEAC', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xEAD', 
		'\xEAB', '\x3', '\x2', '\x2', '\x2', '\xEAD', '\xEAE', '\x3', '\x2', '\x2', 
		'\x2', '\xEAE', '\x101', '\x3', '\x2', '\x2', '\x2', '\xEAF', '\xEAD', 
		'\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB2', '\x5', '\x278', '\x13D', 
		'\x2', '\xEB1', '\xEB3', '\t', '.', '\x2', '\x2', '\xEB2', '\xEB1', '\x3', 
		'\x2', '\x2', '\x2', '\xEB2', '\xEB3', '\x3', '\x2', '\x2', '\x2', '\xEB3', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xEB4', '\xEBF', '\a', '`', '\x2', 
		'\x2', '\xEB5', '\xEB6', '\x5', '\x106', '\x84', '\x2', '\xEB6', '\xEB7', 
		'\a', '\x43F', '\x2', '\x2', '\xEB7', '\xEB9', '\x3', '\x2', '\x2', '\x2', 
		'\xEB8', '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEB8', '\xEB9', '\x3', 
		'\x2', '\x2', '\x2', '\xEB9', '\xEBA', '\x3', '\x2', '\x2', '\x2', '\xEBA', 
		'\xEC0', '\x5', '\x106', '\x84', '\x2', '\xEBB', '\xEBC', '\x5', '\x106', 
		'\x84', '\x2', '\xEBC', '\xEBD', '\a', '\x1FA', '\x2', '\x2', '\xEBD', 
		'\xEBE', '\x5', '\x106', '\x84', '\x2', '\xEBE', '\xEC0', '\x3', '\x2', 
		'\x2', '\x2', '\xEBF', '\xEB8', '\x3', '\x2', '\x2', '\x2', '\xEBF', '\xEBB', 
		'\x3', '\x2', '\x2', '\x2', '\xEC0', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\xEC1', '\xEC5', '\x5', '\x21C', '\x10F', '\x2', '\xEC2', '\xEC5', '\x5', 
		'\x206', '\x104', '\x2', '\xEC3', '\xEC5', '\x5', '\x218', '\x10D', '\x2', 
		'\xEC4', '\xEC1', '\x3', '\x2', '\x2', '\x2', '\xEC4', '\xEC2', '\x3', 
		'\x2', '\x2', '\x2', '\xEC4', '\xEC3', '\x3', '\x2', '\x2', '\x2', '\xEC5', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\xEC6', '\xEC7', '\a', '\x253', 
		'\x2', '\x2', '\xEC7', '\xED0', '\a', '\x26B', '\x2', '\x2', '\xEC8', 
		'\xECD', '\x5', '\x11E', '\x90', '\x2', '\xEC9', '\xECA', '\a', '\x43F', 
		'\x2', '\x2', '\xECA', '\xECC', '\x5', '\x11E', '\x90', '\x2', '\xECB', 
		'\xEC9', '\x3', '\x2', '\x2', '\x2', '\xECC', '\xECF', '\x3', '\x2', '\x2', 
		'\x2', '\xECD', '\xECB', '\x3', '\x2', '\x2', '\x2', '\xECD', '\xECE', 
		'\x3', '\x2', '\x2', '\x2', '\xECE', '\xED1', '\x3', '\x2', '\x2', '\x2', 
		'\xECF', '\xECD', '\x3', '\x2', '\x2', '\x2', '\xED0', '\xEC8', '\x3', 
		'\x2', '\x2', '\x2', '\xED0', '\xED1', '\x3', '\x2', '\x2', '\x2', '\xED1', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\xED2', '\xED4', '\a', '\x14C', 
		'\x2', '\x2', '\xED3', '\xED5', '\a', '\x284', '\x2', '\x2', '\xED4', 
		'\xED3', '\x3', '\x2', '\x2', '\x2', '\xED4', '\xED5', '\x3', '\x2', '\x2', 
		'\x2', '\xED5', '\x10B', '\x3', '\x2', '\x2', '\x2', '\xED6', '\xED8', 
		'\a', '\x164', '\x2', '\x2', '\xED7', '\xED9', '\a', '\x284', '\x2', '\x2', 
		'\xED8', '\xED7', '\x3', '\x2', '\x2', '\x2', '\xED8', '\xED9', '\x3', 
		'\x2', '\x2', '\x2', '\xED9', '\xEDF', '\x3', '\x2', '\x2', '\x2', '\xEDA', 
		'\xEDC', '\a', '\f', '\x2', '\x2', '\xEDB', '\xEDD', '\a', '\x1F5', '\x2', 
		'\x2', '\xEDC', '\xEDB', '\x3', '\x2', '\x2', '\x2', '\xEDC', '\xEDD', 
		'\x3', '\x2', '\x2', '\x2', '\xEDD', '\xEDE', '\x3', '\x2', '\x2', '\x2', 
		'\xEDE', '\xEE0', '\a', '\x155', '\x2', '\x2', '\xEDF', '\xEDA', '\x3', 
		'\x2', '\x2', '\x2', '\xEDF', '\xEE0', '\x3', '\x2', '\x2', '\x2', '\xEE0', 
		'\xEE5', '\x3', '\x2', '\x2', '\x2', '\xEE1', '\xEE3', '\a', '\x1F5', 
		'\x2', '\x2', '\xEE2', '\xEE1', '\x3', '\x2', '\x2', '\x2', '\xEE2', '\xEE3', 
		'\x3', '\x2', '\x2', '\x2', '\xEE3', '\xEE4', '\x3', '\x2', '\x2', '\x2', 
		'\xEE4', '\xEE6', '\a', '\x84', '\x2', '\x2', '\xEE5', '\xEE2', '\x3', 
		'\x2', '\x2', '\x2', '\xEE5', '\xEE6', '\x3', '\x2', '\x2', '\x2', '\xEE6', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\xEE7', '\xEE9', '\a', '\x235', 
		'\x2', '\x2', '\xEE8', '\xEEA', '\a', '\x284', '\x2', '\x2', '\xEE9', 
		'\xEE8', '\x3', '\x2', '\x2', '\x2', '\xEE9', '\xEEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEEA', '\xEF0', '\x3', '\x2', '\x2', '\x2', '\xEEB', '\xEED', 
		'\a', '\f', '\x2', '\x2', '\xEEC', '\xEEE', '\a', '\x1F5', '\x2', '\x2', 
		'\xEED', '\xEEC', '\x3', '\x2', '\x2', '\x2', '\xEED', '\xEEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEEE', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEEF', 
		'\xEF1', '\a', '\x155', '\x2', '\x2', '\xEF0', '\xEEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEF0', '\xEF1', '\x3', '\x2', '\x2', '\x2', '\xEF1', '\xEF6', 
		'\x3', '\x2', '\x2', '\x2', '\xEF2', '\xEF4', '\a', '\x1F5', '\x2', '\x2', 
		'\xEF3', '\xEF2', '\x3', '\x2', '\x2', '\x2', '\xEF3', '\xEF4', '\x3', 
		'\x2', '\x2', '\x2', '\xEF4', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEF5', 
		'\xEF7', '\a', '\x84', '\x2', '\x2', '\xEF6', '\xEF3', '\x3', '\x2', '\x2', 
		'\x2', '\xEF6', '\xEF7', '\x3', '\x2', '\x2', '\x2', '\xEF7', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\xEF8', '\xEF9', '\a', '\x23B', '\x2', '\x2', 
		'\xEF9', '\xEFA', '\x5', '\x216', '\x10C', '\x2', '\xEFA', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\xEFB', '\xEFD', '\a', '\x235', '\x2', '\x2', '\xEFC', 
		'\xEFE', '\a', '\x284', '\x2', '\x2', '\xEFD', '\xEFC', '\x3', '\x2', 
		'\x2', '\x2', '\xEFD', '\xEFE', '\x3', '\x2', '\x2', '\x2', '\xEFE', '\xEFF', 
		'\x3', '\x2', '\x2', '\x2', '\xEFF', '\xF01', '\a', '\xA6', '\x2', '\x2', 
		'\xF00', '\xF02', '\a', '\x23B', '\x2', '\x2', '\xF01', '\xF00', '\x3', 
		'\x2', '\x2', '\x2', '\xF01', '\xF02', '\x3', '\x2', '\x2', '\x2', '\xF02', 
		'\xF03', '\x3', '\x2', '\x2', '\x2', '\xF03', '\xF04', '\x5', '\x216', 
		'\x10C', '\x2', '\xF04', '\x113', '\x3', '\x2', '\x2', '\x2', '\xF05', 
		'\xF06', '\a', '\x84', '\x2', '\x2', '\xF06', '\xF07', '\a', '\x23B', 
		'\x2', '\x2', '\xF07', '\xF08', '\x5', '\x216', '\x10C', '\x2', '\xF08', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\xF09', '\xF0A', '\a', '\x64', '\x2', 
		'\x2', '\xF0A', '\xF0B', '\a', '\x296', '\x2', '\x2', '\xF0B', '\xF10', 
		'\x5', '\x120', '\x91', '\x2', '\xF0C', '\xF0D', '\a', '\x43F', '\x2', 
		'\x2', '\xF0D', '\xF0F', '\x5', '\x120', '\x91', '\x2', '\xF0E', '\xF0C', 
		'\x3', '\x2', '\x2', '\x2', '\xF0F', '\xF12', '\x3', '\x2', '\x2', '\x2', 
		'\xF10', '\xF0E', '\x3', '\x2', '\x2', '\x2', '\xF10', '\xF11', '\x3', 
		'\x2', '\x2', '\x2', '\xF11', '\x117', '\x3', '\x2', '\x2', '\x2', '\xF12', 
		'\xF10', '\x3', '\x2', '\x2', '\x2', '\xF13', '\xF14', '\a', '\xAD', '\x2', 
		'\x2', '\xF14', '\xF15', '\a', '\x296', '\x2', '\x2', '\xF15', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\xF16', '\xF17', '\a', '\x93', '\x2', '\x2', 
		'\xF17', '\xF18', '\a', '\x148', '\x2', '\x2', '\xF18', '\xF19', '\a', 
		'\x434', '\x2', '\x2', '\xF19', '\xF1A', '\t', '\x18', '\x2', '\x2', '\xF1A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\xF1B', '\xF1D', '\a', '\x93', '\x2', 
		'\x2', '\xF1C', '\xF1E', '\t', '\x34', '\x2', '\x2', '\xF1D', '\xF1C', 
		'\x3', '\x2', '\x2', '\x2', '\xF1D', '\xF1E', '\x3', '\x2', '\x2', '\x2', 
		'\xF1E', '\xF1F', '\x3', '\x2', '\x2', '\x2', '\xF1F', '\xF20', '\a', 
		'\x26B', '\x2', '\x2', '\xF20', '\xF25', '\x5', '\x124', '\x93', '\x2', 
		'\xF21', '\xF22', '\a', '\x43F', '\x2', '\x2', '\xF22', '\xF24', '\x5', 
		'\x124', '\x93', '\x2', '\xF23', '\xF21', '\x3', '\x2', '\x2', '\x2', 
		'\xF24', '\xF27', '\x3', '\x2', '\x2', '\x2', '\xF25', '\xF23', '\x3', 
		'\x2', '\x2', '\x2', '\xF25', '\xF26', '\x3', '\x2', '\x2', '\x2', '\xF26', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\xF27', '\xF25', '\x3', '\x2', '\x2', 
		'\x2', '\xF28', '\xF29', '\a', '\xB7', '\x2', '\x2', '\xF29', '\xF2A', 
		'\a', '\x16C', '\x2', '\x2', '\xF2A', '\xF30', '\a', '\x246', '\x2', '\x2', 
		'\xF2B', '\xF2C', '\a', '\x80', '\x2', '\x2', '\xF2C', '\xF30', '\a', 
		'\xB8', '\x2', '\x2', '\xF2D', '\xF2E', '\a', '\x80', '\x2', '\x2', '\xF2E', 
		'\xF30', '\a', '\x200', '\x2', '\x2', '\xF2F', '\xF28', '\x3', '\x2', 
		'\x2', '\x2', '\xF2F', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF2D', 
		'\x3', '\x2', '\x2', '\x2', '\xF30', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\xF31', '\xF36', '\x5', '\x1FE', '\x100', '\x2', '\xF32', '\xF34', '\a', 
		'\xE', '\x2', '\x2', '\xF33', '\xF32', '\x3', '\x2', '\x2', '\x2', '\xF33', 
		'\xF34', '\x3', '\x2', '\x2', '\x2', '\xF34', '\xF35', '\x3', '\x2', '\x2', 
		'\x2', '\xF35', '\xF37', '\x5', '\x216', '\x10C', '\x2', '\xF36', '\xF33', 
		'\x3', '\x2', '\x2', '\x2', '\xF36', '\xF37', '\x3', '\x2', '\x2', '\x2', 
		'\xF37', '\xF38', '\x3', '\x2', '\x2', '\x2', '\xF38', '\xF39', '\x5', 
		'\x122', '\x92', '\x2', '\xF39', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\xF3A', '\xF3C', '\a', '\x80', '\x2', '\x2', '\xF3B', '\xF3D', '\a', 
		'\x1C6', '\x2', '\x2', '\xF3C', '\xF3B', '\x3', '\x2', '\x2', '\x2', '\xF3C', 
		'\xF3D', '\x3', '\x2', '\x2', '\x2', '\xF3D', '\xF43', '\x3', '\x2', '\x2', 
		'\x2', '\xF3E', '\xF40', '\a', '\x66', '\x2', '\x2', '\xF3F', '\xF3E', 
		'\x3', '\x2', '\x2', '\x2', '\xF3F', '\xF40', '\x3', '\x2', '\x2', '\x2', 
		'\xF40', '\xF41', '\x3', '\x2', '\x2', '\x2', '\xF41', '\xF43', '\a', 
		'\xB8', '\x2', '\x2', '\xF42', '\xF3A', '\x3', '\x2', '\x2', '\x2', '\xF42', 
		'\xF3F', '\x3', '\x2', '\x2', '\x2', '\xF43', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\xF44', '\xF45', '\a', '\x1BC', '\x2', '\x2', '\xF45', '\xF46', 
		'\a', '\x1C4', '\x2', '\x2', '\xF46', '\xF4C', '\x5', '\x126', '\x94', 
		'\x2', '\xF47', '\xF48', '\a', '\x80', '\x2', '\x2', '\xF48', '\xF4C', 
		'\a', '\xB8', '\x2', '\x2', '\xF49', '\xF4A', '\a', '\x80', '\x2', '\x2', 
		'\xF4A', '\xF4C', '\a', '\x200', '\x2', '\x2', '\xF4B', '\xF44', '\x3', 
		'\x2', '\x2', '\x2', '\xF4B', '\xF47', '\x3', '\x2', '\x2', '\x2', '\xF4B', 
		'\xF49', '\x3', '\x2', '\x2', '\x2', '\xF4C', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\xF4D', '\xF4E', '\a', '\x2F3', '\x2', '\x2', '\xF4E', '\xF55', 
		'\a', '\x80', '\x2', '\x2', '\xF4F', '\xF50', '\a', '\x80', '\x2', '\x2', 
		'\xF50', '\xF55', '\a', '\x2F4', '\x2', '\x2', '\xF51', '\xF52', '\a', 
		'\x80', '\x2', '\x2', '\xF52', '\xF55', '\a', '\x2F5', '\x2', '\x2', '\xF53', 
		'\xF55', '\a', '\x2F6', '\x2', '\x2', '\xF54', '\xF4D', '\x3', '\x2', 
		'\x2', '\x2', '\xF54', '\xF4F', '\x3', '\x2', '\x2', '\x2', '\xF54', '\xF51', 
		'\x3', '\x2', '\x2', '\x2', '\xF54', '\xF53', '\x3', '\x2', '\x2', '\x2', 
		'\xF55', '\x127', '\x3', '\x2', '\x2', '\x2', '\xF56', '\xF57', '\a', 
		'\x19', '\x2', '\x2', '\xF57', '\xF58', '\a', '\x1C9', '\x2', '\x2', '\xF58', 
		'\xF59', '\a', '\xA6', '\x2', '\x2', '\xF59', '\xF5E', '\x5', '\x13A', 
		'\x9E', '\x2', '\xF5A', '\xF5B', '\a', '\x43F', '\x2', '\x2', '\xF5B', 
		'\xF5D', '\x5', '\x13A', '\x9E', '\x2', '\xF5C', '\xF5A', '\x3', '\x2', 
		'\x2', '\x2', '\xF5D', '\xF60', '\x3', '\x2', '\x2', '\x2', '\xF5E', '\xF5C', 
		'\x3', '\x2', '\x2', '\x2', '\xF5E', '\xF5F', '\x3', '\x2', '\x2', '\x2', 
		'\xF5F', '\xF62', '\x3', '\x2', '\x2', '\x2', '\xF60', '\xF5E', '\x3', 
		'\x2', '\x2', '\x2', '\xF61', '\xF63', '\x5', '\x142', '\xA2', '\x2', 
		'\xF62', '\xF61', '\x3', '\x2', '\x2', '\x2', '\xF62', '\xF63', '\x3', 
		'\x2', '\x2', '\x2', '\xF63', '\x129', '\x3', '\x2', '\x2', '\x2', '\xF64', 
		'\xF65', '\a', '\x19', '\x2', '\x2', '\xF65', '\xF66', '\a', '\x22E', 
		'\x2', '\x2', '\xF66', '\xF67', '\a', '\x19C', '\x2', '\x2', '\xF67', 
		'\xF6C', '\x5', '\x144', '\xA3', '\x2', '\xF68', '\xF69', '\a', '\x43F', 
		'\x2', '\x2', '\xF69', '\xF6B', '\x5', '\x144', '\xA3', '\x2', '\xF6A', 
		'\xF68', '\x3', '\x2', '\x2', '\x2', '\xF6B', '\xF6E', '\x3', '\x2', '\x2', 
		'\x2', '\xF6C', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF6D', 
		'\x3', '\x2', '\x2', '\x2', '\xF6D', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\xF6E', '\xF6C', '\x3', '\x2', '\x2', '\x2', '\xF6F', '\xF70', '\a', 
		'~', '\x2', '\x2', '\xF70', '\xF71', '\t', '\x35', '\x2', '\x2', '\xF71', 
		'\xF76', '\a', '\x1C8', '\x2', '\x2', '\xF72', '\xF73', '\a', '\xA6', 
		'\x2', '\x2', '\xF73', '\xF77', '\a', '\x44C', '\x2', '\x2', '\xF74', 
		'\xF75', '\a', '\x10', '\x2', '\x2', '\xF75', '\xF77', '\a', '\x44C', 
		'\x2', '\x2', '\xF76', '\xF72', '\x3', '\x2', '\x2', '\x2', '\xF76', '\xF74', 
		'\x3', '\x2', '\x2', '\x2', '\xF77', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\xF78', '\xF79', '\a', '\x22F', '\x2', '\x2', '\xF79', '\xF7A', '\a', 
		'\x1C9', '\x2', '\x2', '\xF7A', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xF7B', 
		'\xF7C', '\a', '\x22F', '\x2', '\x2', '\xF7C', '\xF7E', '\a', '\x244', 
		'\x2', '\x2', '\xF7D', '\xF7F', '\a', '\b', '\x2', '\x2', '\xF7E', '\xF7D', 
		'\x3', '\x2', '\x2', '\x2', '\xF7E', '\xF7F', '\x3', '\x2', '\x2', '\x2', 
		'\xF7F', '\xF81', '\x3', '\x2', '\x2', '\x2', '\xF80', '\xF82', '\x5', 
		'\x142', '\xA2', '\x2', '\xF81', '\xF80', '\x3', '\x2', '\x2', '\x2', 
		'\xF81', '\xF82', '\x3', '\x2', '\x2', '\x2', '\xF82', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\xF83', '\xF84', '\a', '\x253', '\x2', '\x2', '\xF84', 
		'\xF8D', '\a', '\x244', '\x2', '\x2', '\xF85', '\xF8A', '\x5', '\x148', 
		'\xA5', '\x2', '\xF86', '\xF87', '\a', '\x43F', '\x2', '\x2', '\xF87', 
		'\xF89', '\x5', '\x148', '\xA5', '\x2', '\xF88', '\xF86', '\x3', '\x2', 
		'\x2', '\x2', '\xF89', '\xF8C', '\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF88', 
		'\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF8B', '\x3', '\x2', '\x2', '\x2', 
		'\xF8B', '\xF8E', '\x3', '\x2', '\x2', '\x2', '\xF8C', '\xF8A', '\x3', 
		'\x2', '\x2', '\x2', '\xF8D', '\xF85', '\x3', '\x2', '\x2', '\x2', '\xF8D', 
		'\xF8E', '\x3', '\x2', '\x2', '\x2', '\xF8E', '\xF91', '\x3', '\x2', '\x2', 
		'\x2', '\xF8F', '\xF90', '\a', '\x275', '\x2', '\x2', '\xF90', '\xF92', 
		'\x5', '\x14A', '\xA6', '\x2', '\xF91', '\xF8F', '\x3', '\x2', '\x2', 
		'\x2', '\xF91', '\xF92', '\x3', '\x2', '\x2', '\x2', '\xF92', '\xF96', 
		'\x3', '\x2', '\x2', '\x2', '\xF93', '\xF95', '\x5', '\x14C', '\xA7', 
		'\x2', '\xF94', '\xF93', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF98', 
		'\x3', '\x2', '\x2', '\x2', '\xF96', '\xF94', '\x3', '\x2', '\x2', '\x2', 
		'\xF96', '\xF97', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF9A', '\x3', 
		'\x2', '\x2', '\x2', '\xF98', '\xF96', '\x3', '\x2', '\x2', '\x2', '\xF99', 
		'\xF9B', '\x5', '\x142', '\xA2', '\x2', '\xF9A', '\xF99', '\x3', '\x2', 
		'\x2', '\x2', '\xF9A', '\xF9B', '\x3', '\x2', '\x2', '\x2', '\xF9B', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\xF9C', '\xF9D', '\a', '\x259', '\x2', '\x2', 
		'\xF9D', '\xFA6', '\a', '\x244', '\x2', '\x2', '\xF9E', '\xFA3', '\x5', 
		'\x148', '\xA5', '\x2', '\xF9F', '\xFA0', '\a', '\x43F', '\x2', '\x2', 
		'\xFA0', '\xFA2', '\x5', '\x148', '\xA5', '\x2', '\xFA1', '\xF9F', '\x3', 
		'\x2', '\x2', '\x2', '\xFA2', '\xFA5', '\x3', '\x2', '\x2', '\x2', '\xFA3', 
		'\xFA1', '\x3', '\x2', '\x2', '\x2', '\xFA3', '\xFA4', '\x3', '\x2', '\x2', 
		'\x2', '\xFA4', '\xFA7', '\x3', '\x2', '\x2', '\x2', '\xFA5', '\xFA3', 
		'\x3', '\x2', '\x2', '\x2', '\xFA6', '\xF9E', '\x3', '\x2', '\x2', '\x2', 
		'\xFA6', '\xFA7', '\x3', '\x2', '\x2', '\x2', '\xFA7', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\xFA8', '\xFA9', '\a', '\x253', '\x2', '\x2', '\xFA9', 
		'\xFAA', '\a', '\x1A8', '\x2', '\x2', '\xFAA', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '\xFAB', '\xFAC', '\a', '\x259', '\x2', '\x2', '\xFAC', 
		'\xFAD', '\a', '\x1A8', '\x2', '\x2', '\xFAD', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\xFAE', '\xFAF', '\x5', '\x13C', '\x9F', '\x2', '\xFAF', 
		'\xFB0', '\a', '\x434', '\x2', '\x2', '\xFB0', '\xFB1', '\a', '\x44C', 
		'\x2', '\x2', '\xFB1', '\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFB2', '\xFB3', 
		'\x5', '\x13E', '\xA0', '\x2', '\xFB3', '\xFB4', '\a', '\x434', '\x2', 
		'\x2', '\xFB4', '\xFB5', '\x5', '\x21C', '\x10F', '\x2', '\xFB5', '\xFCC', 
		'\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB7', '\x5', '\x140', '\xA1', 
		'\x2', '\xFB7', '\xFB8', '\a', '\x434', '\x2', '\x2', '\xFB8', '\xFB9', 
		'\t', '\x18', '\x2', '\x2', '\xFB9', '\xFCC', '\x3', '\x2', '\x2', '\x2', 
		'\xFBA', '\xFBB', '\a', '\x1CD', '\x2', '\x2', '\xFBB', '\xFBC', '\a', 
		'\x434', '\x2', '\x2', '\xFBC', '\xFCC', '\a', '\x44F', '\x2', '\x2', 
		'\xFBD', '\xFBE', '\a', '\x1AF', '\x2', '\x2', '\xFBE', '\xFBF', '\a', 
		'\x434', '\x2', '\x2', '\xFBF', '\xFC8', '\a', '\x43D', '\x2', '\x2', 
		'\xFC0', '\xFC5', '\x5', '\x216', '\x10C', '\x2', '\xFC1', '\xFC2', '\a', 
		'\x43F', '\x2', '\x2', '\xFC2', '\xFC4', '\x5', '\x216', '\x10C', '\x2', 
		'\xFC3', '\xFC1', '\x3', '\x2', '\x2', '\x2', '\xFC4', '\xFC7', '\x3', 
		'\x2', '\x2', '\x2', '\xFC5', '\xFC3', '\x3', '\x2', '\x2', '\x2', '\xFC5', 
		'\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFC6', '\xFC9', '\x3', '\x2', '\x2', 
		'\x2', '\xFC7', '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFC0', 
		'\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFC9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC9', '\xFCA', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFCC', '\a', 
		'\x43E', '\x2', '\x2', '\xFCB', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFCB', 
		'\xFB2', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\xFB6', '\x3', '\x2', '\x2', 
		'\x2', '\xFCB', '\xFBA', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\xFBD', 
		'\x3', '\x2', '\x2', '\x2', '\xFCC', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\xFCD', '\xFCE', '\t', '\x36', '\x2', '\x2', '\xFCE', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\xFCF', '\xFD0', '\t', '\x37', '\x2', '\x2', '\xFD0', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\xFD1', '\xFD2', '\t', '\x38', '\x2', 
		'\x2', '\xFD2', '\x141', '\x3', '\x2', '\x2', '\x2', '\xFD3', '\xFD4', 
		'\a', '@', '\x2', '\x2', '\xFD4', '\xFD5', '\a', '\x157', '\x2', '\x2', 
		'\xFD5', '\xFD6', '\a', '\x44C', '\x2', '\x2', '\xFD6', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\xFD7', '\xFD8', '\a', '\x227', '\x2', '\x2', '\xFD8', 
		'\xFD9', '\a', '\x434', '\x2', '\x2', '\xFD9', '\xFDA', '\a', '\x43D', 
		'\x2', '\x2', '\xFDA', '\xFDB', '\x5', '\x236', '\x11C', '\x2', '\xFDB', 
		'\xFDC', '\a', '\x43E', '\x2', '\x2', '\xFDC', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFDD', '\xFDE', '\a', '\x229', '\x2', '\x2', '\xFDE', 
		'\xFDF', '\a', '\x434', '\x2', '\x2', '\xFDF', '\xFE0', '\a', '\x43D', 
		'\x2', '\x2', '\xFE0', '\xFE1', '\x5', '\x236', '\x11C', '\x2', '\xFE1', 
		'\xFE2', '\a', '\x43E', '\x2', '\x2', '\xFE2', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFE3', '\xFE4', '\a', '\x228', '\x2', '\x2', '\xFE4', 
		'\xFE5', '\a', '\x434', '\x2', '\x2', '\xFE5', '\xFE6', '\a', '\x43D', 
		'\x2', '\x2', '\xFE6', '\xFE7', '\x5', '\x238', '\x11D', '\x2', '\xFE7', 
		'\xFE8', '\a', '\x43E', '\x2', '\x2', '\xFE8', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFE9', '\xFEA', '\a', '\x22A', '\x2', '\x2', '\xFEA', 
		'\xFEB', '\a', '\x434', '\x2', '\x2', '\xFEB', '\xFEC', '\a', '\x43D', 
		'\x2', '\x2', '\xFEC', '\xFED', '\x5', '\x238', '\x11D', '\x2', '\xFED', 
		'\xFEE', '\a', '\x43E', '\x2', '\x2', '\xFEE', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFEF', '\xFF0', '\a', '\x22C', '\x2', '\x2', '\xFF0', 
		'\xFF1', '\a', '\x434', '\x2', '\x2', '\xFF1', '\xFF2', '\a', '\x43D', 
		'\x2', '\x2', '\xFF2', '\xFF3', '\x5', '\x242', '\x122', '\x2', '\xFF3', 
		'\xFF4', '\a', '\x43E', '\x2', '\x2', '\xFF4', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFF5', '\xFF6', '\a', '\x22D', '\x2', '\x2', '\xFF6', 
		'\xFF7', '\a', '\x434', '\x2', '\x2', '\xFF7', '\xFF8', '\a', '\x43D', 
		'\x2', '\x2', '\xFF8', '\xFF9', '\x5', '\x242', '\x122', '\x2', '\xFF9', 
		'\xFFA', '\a', '\x43E', '\x2', '\x2', '\xFFA', '\x1009', '\x3', '\x2', 
		'\x2', '\x2', '\xFFB', '\xFFC', '\a', '\x22B', '\x2', '\x2', '\xFFC', 
		'\xFFD', '\a', '\x434', '\x2', '\x2', '\xFFD', '\xFFE', '\a', '\x43D', 
		'\x2', '\x2', '\xFFE', '\x1003', '\x5', '\x146', '\xA4', '\x2', '\xFFF', 
		'\x1000', '\a', '\x43F', '\x2', '\x2', '\x1000', '\x1002', '\x5', '\x146', 
		'\xA4', '\x2', '\x1001', '\xFFF', '\x3', '\x2', '\x2', '\x2', '\x1002', 
		'\x1005', '\x3', '\x2', '\x2', '\x2', '\x1003', '\x1001', '\x3', '\x2', 
		'\x2', '\x2', '\x1003', '\x1004', '\x3', '\x2', '\x2', '\x2', '\x1004', 
		'\x1006', '\x3', '\x2', '\x2', '\x2', '\x1005', '\x1003', '\x3', '\x2', 
		'\x2', '\x2', '\x1006', '\x1007', '\a', '\x43E', '\x2', '\x2', '\x1007', 
		'\x1009', '\x3', '\x2', '\x2', '\x2', '\x1008', '\xFD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1008', '\xFDD', '\x3', '\x2', '\x2', '\x2', '\x1008', 
		'\xFE3', '\x3', '\x2', '\x2', '\x2', '\x1008', '\xFE9', '\x3', '\x2', 
		'\x2', '\x2', '\x1008', '\xFEF', '\x3', '\x2', '\x2', '\x2', '\x1008', 
		'\xFF5', '\x3', '\x2', '\x2', '\x2', '\x1008', '\xFFB', '\x3', '\x2', 
		'\x2', '\x2', '\x1009', '\x145', '\x3', '\x2', '\x2', '\x2', '\x100A', 
		'\x100B', '\a', '\x43D', '\x2', '\x2', '\x100B', '\x100C', '\x5', '\x1FE', 
		'\x100', '\x2', '\x100C', '\x100D', '\a', '\x43F', '\x2', '\x2', '\x100D', 
		'\x100E', '\x5', '\x1FE', '\x100', '\x2', '\x100E', '\x100F', '\a', '\x43E', 
		'\x2', '\x2', '\x100F', '\x147', '\x3', '\x2', '\x2', '\x2', '\x1010', 
		'\x1011', '\t', '\x39', '\x2', '\x2', '\x1011', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '\x1012', '\x1013', '\t', ':', '\x2', '\x2', '\x1013', '\x1014', 
		'\a', '\x434', '\x2', '\x2', '\x1014', '\x1025', '\x5', '\x14E', '\xA8', 
		'\x2', '\x1015', '\x1016', '\a', '\x1CF', '\x2', '\x2', '\x1016', '\x1017', 
		'\a', '\x434', '\x2', '\x2', '\x1017', '\x1018', '\a', '\x44C', '\x2', 
		'\x2', '\x1018', '\x1019', '\a', '\x43F', '\x2', '\x2', '\x1019', '\x101A', 
		'\a', '\x1D0', '\x2', '\x2', '\x101A', '\x101B', '\a', '\x434', '\x2', 
		'\x2', '\x101B', '\x1025', '\x5', '\x21C', '\x10F', '\x2', '\x101C', '\x101D', 
		'\a', '\x221', '\x2', '\x2', '\x101D', '\x101E', '\a', '\x434', '\x2', 
		'\x2', '\x101E', '\x101F', '\a', '\x44C', '\x2', '\x2', '\x101F', '\x1020', 
		'\a', '\x43F', '\x2', '\x2', '\x1020', '\x1021', '\a', '\x222', '\x2', 
		'\x2', '\x1021', '\x1022', '\a', '\x434', '\x2', '\x2', '\x1022', '\x1025', 
		'\x5', '\x21C', '\x10F', '\x2', '\x1023', '\x1025', '\a', '\x24D', '\x2', 
		'\x2', '\x1024', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x1024', '\x1015', 
		'\x3', '\x2', '\x2', '\x2', '\x1024', '\x101C', '\x3', '\x2', '\x2', '\x2', 
		'\x1024', '\x1023', '\x3', '\x2', '\x2', '\x2', '\x1025', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x1026', '\x1027', '\a', '\x277', '\x2', '\x2', 
		'\x1027', '\x1028', '\a', '\x434', '\x2', '\x2', '\x1028', '\x1033', '\a', 
		'\x44C', '\x2', '\x2', '\x1029', '\x102A', '\a', '\x20B', '\x2', '\x2', 
		'\x102A', '\x102B', '\a', '\x434', '\x2', '\x2', '\x102B', '\x1033', '\a', 
		'\x44C', '\x2', '\x2', '\x102C', '\x102D', '\a', '\x179', '\x2', '\x2', 
		'\x102D', '\x102E', '\a', '\x434', '\x2', '\x2', '\x102E', '\x1033', '\a', 
		'\x44C', '\x2', '\x2', '\x102F', '\x1030', '\a', '\x20E', '\x2', '\x2', 
		'\x1030', '\x1031', '\a', '\x434', '\x2', '\x2', '\x1031', '\x1033', '\a', 
		'\x44C', '\x2', '\x2', '\x1032', '\x1026', '\x3', '\x2', '\x2', '\x2', 
		'\x1032', '\x1029', '\x3', '\x2', '\x2', '\x2', '\x1032', '\x102C', '\x3', 
		'\x2', '\x2', '\x2', '\x1032', '\x102F', '\x3', '\x2', '\x2', '\x2', '\x1033', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x1034', '\x1039', '\x5', '\x20E', 
		'\x108', '\x2', '\x1035', '\x1036', '\a', '\x43F', '\x2', '\x2', '\x1036', 
		'\x1038', '\x5', '\x20E', '\x108', '\x2', '\x1037', '\x1035', '\x3', '\x2', 
		'\x2', '\x2', '\x1038', '\x103B', '\x3', '\x2', '\x2', '\x2', '\x1039', 
		'\x1037', '\x3', '\x2', '\x2', '\x2', '\x1039', '\x103A', '\x3', '\x2', 
		'\x2', '\x2', '\x103A', '\x103E', '\x3', '\x2', '\x2', '\x2', '\x103B', 
		'\x1039', '\x3', '\x2', '\x2', '\x2', '\x103C', '\x103E', '\a', '\x44C', 
		'\x2', '\x2', '\x103D', '\x1034', '\x3', '\x2', '\x2', '\x2', '\x103D', 
		'\x103C', '\x3', '\x2', '\x2', '\x2', '\x103E', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x103F', '\x1040', '\a', '\x287', '\x2', '\x2', '\x1040', 
		'\x1041', '\t', ';', '\x2', '\x2', '\x1041', '\x1043', '\x5', '\x210', 
		'\x109', '\x2', '\x1042', '\x1044', '\t', '<', '\x2', '\x2', '\x1043', 
		'\x1042', '\x3', '\x2', '\x2', '\x2', '\x1043', '\x1044', '\x3', '\x2', 
		'\x2', '\x2', '\x1044', '\x151', '\x3', '\x2', '\x2', '\x2', '\x1045', 
		'\x1046', '\a', '\x287', '\x2', '\x2', '\x1046', '\x1047', '\a', '\x187', 
		'\x2', '\x2', '\x1047', '\x104D', '\x5', '\x210', '\x109', '\x2', '\x1048', 
		'\x104B', '\a', '\x261', '\x2', '\x2', '\x1049', '\x104A', '\a', '@', 
		'\x2', '\x2', '\x104A', '\x104C', '\a', '\x1E9', '\x2', '\x2', '\x104B', 
		'\x1049', '\x3', '\x2', '\x2', '\x2', '\x104B', '\x104C', '\x3', '\x2', 
		'\x2', '\x2', '\x104C', '\x104E', '\x3', '\x2', '\x2', '\x2', '\x104D', 
		'\x1048', '\x3', '\x2', '\x2', '\x2', '\x104D', '\x104E', '\x3', '\x2', 
		'\x2', '\x2', '\x104E', '\x153', '\x3', '\x2', '\x2', '\x2', '\x104F', 
		'\x1050', '\a', '\x287', '\x2', '\x2', '\x1050', '\x1051', '\a', '\x213', 
		'\x2', '\x2', '\x1051', '\x1052', '\x5', '\x210', '\x109', '\x2', '\x1052', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x1053', '\x1054', '\a', '\x287', 
		'\x2', '\x2', '\x1054', '\x1055', '\a', '\x164', '\x2', '\x2', '\x1055', 
		'\x1058', '\x5', '\x210', '\x109', '\x2', '\x1056', '\x1057', '\a', '\x1FE', 
		'\x2', '\x2', '\x1057', '\x1059', '\a', '\x20C', '\x2', '\x2', '\x1058', 
		'\x1056', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x1059', '\x3', '\x2', 
		'\x2', '\x2', '\x1059', '\x157', '\x3', '\x2', '\x2', '\x2', '\x105A', 
		'\x105B', '\a', '\x287', '\x2', '\x2', '\x105B', '\x105C', '\a', '\x235', 
		'\x2', '\x2', '\x105C', '\x105D', '\x5', '\x210', '\x109', '\x2', '\x105D', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x105E', '\x105F', '\a', '\x287', 
		'\x2', '\x2', '\x105F', '\x1062', '\a', '\x21D', '\x2', '\x2', '\x1060', 
		'\x1061', '\a', '!', '\x2', '\x2', '\x1061', '\x1063', '\x5', '\x210', 
		'\x109', '\x2', '\x1062', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1062', 
		'\x1063', '\x3', '\x2', '\x2', '\x2', '\x1063', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x1064', '\x1065', '\a', '\x213', '\x2', '\x2', '\x1065', 
		'\x1066', '\x5', '\x216', '\x10C', '\x2', '\x1066', '\x1069', '\a', '\x43', 
		'\x2', '\x2', '\x1067', '\x106A', '\a', '\x44C', '\x2', '\x2', '\x1068', 
		'\x106A', '\a', '\x458', '\x2', '\x2', '\x1069', '\x1067', '\x3', '\x2', 
		'\x2', '\x2', '\x1069', '\x1068', '\x3', '\x2', '\x2', '\x2', '\x106A', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x106B', '\x106C', '\a', '\x298', 
		'\x2', '\x2', '\x106C', '\x106F', '\x5', '\x216', '\x10C', '\x2', '\x106D', 
		'\x106E', '\a', '\xB2', '\x2', '\x2', '\x106E', '\x1070', '\x5', '\x244', 
		'\x123', '\x2', '\x106F', '\x106D', '\x3', '\x2', '\x2', '\x2', '\x106F', 
		'\x1070', '\x3', '\x2', '\x2', '\x2', '\x1070', '\x15F', '\x3', '\x2', 
		'\x2', '\x2', '\x1071', '\x1072', '\t', '=', '\x2', '\x2', '\x1072', '\x1073', 
		'\a', '\x213', '\x2', '\x2', '\x1073', '\x1074', '\x5', '\x216', '\x10C', 
		'\x2', '\x1074', '\x161', '\x3', '\x2', '\x2', '\x2', '\x1075', '\x1078', 
		'\x5', '\x164', '\xB3', '\x2', '\x1076', '\x1078', '\x5', '\x6', '\x4', 
		'\x2', '\x1077', '\x1075', '\x3', '\x2', '\x2', '\x2', '\x1077', '\x1076', 
		'\x3', '\x2', '\x2', '\x2', '\x1078', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x1079', '\x107A', '\x5', '\x216', '\x10C', '\x2', '\x107A', '\x107B', 
		'\a', '\x448', '\x2', '\x2', '\x107B', '\x107D', '\x3', '\x2', '\x2', 
		'\x2', '\x107C', '\x1079', '\x3', '\x2', '\x2', '\x2', '\x107C', '\x107D', 
		'\x3', '\x2', '\x2', '\x2', '\x107D', '\x107E', '\x3', '\x2', '\x2', '\x2', 
		'\x107E', '\x10A5', '\a', '\x14C', '\x2', '\x2', '\x107F', '\x1080', '\x5', 
		'\x178', '\xBD', '\x2', '\x1080', '\x1081', '\a', '\x440', '\x2', '\x2', 
		'\x1081', '\x1083', '\x3', '\x2', '\x2', '\x2', '\x1082', '\x107F', '\x3', 
		'\x2', '\x2', '\x2', '\x1083', '\x1086', '\x3', '\x2', '\x2', '\x2', '\x1084', 
		'\x1082', '\x3', '\x2', '\x2', '\x2', '\x1084', '\x1085', '\x3', '\x2', 
		'\x2', '\x2', '\x1085', '\x108C', '\x3', '\x2', '\x2', '\x2', '\x1086', 
		'\x1084', '\x3', '\x2', '\x2', '\x2', '\x1087', '\x1088', '\x5', '\x17A', 
		'\xBE', '\x2', '\x1088', '\x1089', '\a', '\x440', '\x2', '\x2', '\x1089', 
		'\x108B', '\x3', '\x2', '\x2', '\x2', '\x108A', '\x1087', '\x3', '\x2', 
		'\x2', '\x2', '\x108B', '\x108E', '\x3', '\x2', '\x2', '\x2', '\x108C', 
		'\x108A', '\x3', '\x2', '\x2', '\x2', '\x108C', '\x108D', '\x3', '\x2', 
		'\x2', '\x2', '\x108D', '\x1094', '\x3', '\x2', '\x2', '\x2', '\x108E', 
		'\x108C', '\x3', '\x2', '\x2', '\x2', '\x108F', '\x1090', '\x5', '\x17C', 
		'\xBF', '\x2', '\x1090', '\x1091', '\a', '\x440', '\x2', '\x2', '\x1091', 
		'\x1093', '\x3', '\x2', '\x2', '\x2', '\x1092', '\x108F', '\x3', '\x2', 
		'\x2', '\x2', '\x1093', '\x1096', '\x3', '\x2', '\x2', '\x2', '\x1094', 
		'\x1092', '\x3', '\x2', '\x2', '\x2', '\x1094', '\x1095', '\x3', '\x2', 
		'\x2', '\x2', '\x1095', '\x109C', '\x3', '\x2', '\x2', '\x2', '\x1096', 
		'\x1094', '\x3', '\x2', '\x2', '\x2', '\x1097', '\x1098', '\x5', '\x17E', 
		'\xC0', '\x2', '\x1098', '\x1099', '\a', '\x440', '\x2', '\x2', '\x1099', 
		'\x109B', '\x3', '\x2', '\x2', '\x2', '\x109A', '\x1097', '\x3', '\x2', 
		'\x2', '\x2', '\x109B', '\x109E', '\x3', '\x2', '\x2', '\x2', '\x109C', 
		'\x109A', '\x3', '\x2', '\x2', '\x2', '\x109C', '\x109D', '\x3', '\x2', 
		'\x2', '\x2', '\x109D', '\x10A2', '\x3', '\x2', '\x2', '\x2', '\x109E', 
		'\x109C', '\x3', '\x2', '\x2', '\x2', '\x109F', '\x10A1', '\x5', '\x182', 
		'\xC2', '\x2', '\x10A0', '\x109F', '\x3', '\x2', '\x2', '\x2', '\x10A1', 
		'\x10A4', '\x3', '\x2', '\x2', '\x2', '\x10A2', '\x10A0', '\x3', '\x2', 
		'\x2', '\x2', '\x10A2', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10A3', 
		'\x10A6', '\x3', '\x2', '\x2', '\x2', '\x10A4', '\x10A2', '\x3', '\x2', 
		'\x2', '\x2', '\x10A5', '\x1084', '\x3', '\x2', '\x2', '\x2', '\x10A5', 
		'\x10A6', '\x3', '\x2', '\x2', '\x2', '\x10A6', '\x10A7', '\x3', '\x2', 
		'\x2', '\x2', '\x10A7', '\x10A9', '\a', '\x187', '\x2', '\x2', '\x10A8', 
		'\x10AA', '\x5', '\x216', '\x10C', '\x2', '\x10A9', '\x10A8', '\x3', '\x2', 
		'\x2', '\x2', '\x10A9', '\x10AA', '\x3', '\x2', '\x2', '\x2', '\x10AA', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x10AB', '\x10AE', '\a', '\x17', 
		'\x2', '\x2', '\x10AC', '\x10AF', '\x5', '\x216', '\x10C', '\x2', '\x10AD', 
		'\x10AF', '\x5', '\x278', '\x13D', '\x2', '\x10AE', '\x10AC', '\x3', '\x2', 
		'\x2', '\x2', '\x10AE', '\x10AD', '\x3', '\x2', '\x2', '\x2', '\x10AE', 
		'\x10AF', '\x3', '\x2', '\x2', '\x2', '\x10AF', '\x10B1', '\x3', '\x2', 
		'\x2', '\x2', '\x10B0', '\x10B2', '\x5', '\x184', '\xC3', '\x2', '\x10B1', 
		'\x10B0', '\x3', '\x2', '\x2', '\x2', '\x10B2', '\x10B3', '\x3', '\x2', 
		'\x2', '\x2', '\x10B3', '\x10B1', '\x3', '\x2', '\x2', '\x2', '\x10B3', 
		'\x10B4', '\x3', '\x2', '\x2', '\x2', '\x10B4', '\x10BB', '\x3', '\x2', 
		'\x2', '\x2', '\x10B5', '\x10B7', '\a', '\x35', '\x2', '\x2', '\x10B6', 
		'\x10B8', '\x5', '\x182', '\xC2', '\x2', '\x10B7', '\x10B6', '\x3', '\x2', 
		'\x2', '\x2', '\x10B8', '\x10B9', '\x3', '\x2', '\x2', '\x2', '\x10B9', 
		'\x10B7', '\x3', '\x2', '\x2', '\x2', '\x10B9', '\x10BA', '\x3', '\x2', 
		'\x2', '\x2', '\x10BA', '\x10BC', '\x3', '\x2', '\x2', '\x2', '\x10BB', 
		'\x10B5', '\x3', '\x2', '\x2', '\x2', '\x10BB', '\x10BC', '\x3', '\x2', 
		'\x2', '\x2', '\x10BC', '\x10BD', '\x3', '\x2', '\x2', '\x2', '\x10BD', 
		'\x10BE', '\a', '\x187', '\x2', '\x2', '\x10BE', '\x10BF', '\a', '\x17', 
		'\x2', '\x2', '\x10BF', '\x167', '\x3', '\x2', '\x2', '\x2', '\x10C0', 
		'\x10C1', '\a', 'L', '\x2', '\x2', '\x10C1', '\x10C2', '\x5', '\x278', 
		'\x13D', '\x2', '\x10C2', '\x10C4', '\a', '\xA5', '\x2', '\x2', '\x10C3', 
		'\x10C5', '\x5', '\x182', '\xC2', '\x2', '\x10C4', '\x10C3', '\x3', '\x2', 
		'\x2', '\x2', '\x10C5', '\x10C6', '\x3', '\x2', '\x2', '\x2', '\x10C6', 
		'\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C6', '\x10C7', '\x3', '\x2', 
		'\x2', '\x2', '\x10C7', '\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10C8', 
		'\x10CA', '\x5', '\x186', '\xC4', '\x2', '\x10C9', '\x10C8', '\x3', '\x2', 
		'\x2', '\x2', '\x10CA', '\x10CD', '\x3', '\x2', '\x2', '\x2', '\x10CB', 
		'\x10C9', '\x3', '\x2', '\x2', '\x2', '\x10CB', '\x10CC', '\x3', '\x2', 
		'\x2', '\x2', '\x10CC', '\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10CD', 
		'\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10D0', '\a', '\x35', 
		'\x2', '\x2', '\x10CF', '\x10D1', '\x5', '\x182', '\xC2', '\x2', '\x10D0', 
		'\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10D1', '\x10D2', '\x3', '\x2', 
		'\x2', '\x2', '\x10D2', '\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10D2', 
		'\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D3', '\x10D5', '\x3', '\x2', 
		'\x2', '\x2', '\x10D4', '\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10D4', 
		'\x10D5', '\x3', '\x2', '\x2', '\x2', '\x10D5', '\x10D6', '\x3', '\x2', 
		'\x2', '\x2', '\x10D6', '\x10D7', '\a', '\x187', '\x2', '\x2', '\x10D7', 
		'\x10D8', '\a', 'L', '\x2', '\x2', '\x10D8', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x10D9', '\x10DA', '\a', 'W', '\x2', '\x2', '\x10DA', '\x10DB', 
		'\x5', '\x216', '\x10C', '\x2', '\x10DB', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x10DC', '\x10DD', '\a', ']', '\x2', '\x2', '\x10DD', '\x10DE', 
		'\x5', '\x216', '\x10C', '\x2', '\x10DE', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x10DF', '\x10E0', '\x5', '\x216', '\x10C', '\x2', '\x10E0', '\x10E1', 
		'\a', '\x448', '\x2', '\x2', '\x10E1', '\x10E3', '\x3', '\x2', '\x2', 
		'\x2', '\x10E2', '\x10DF', '\x3', '\x2', '\x2', '\x2', '\x10E2', '\x10E3', 
		'\x3', '\x2', '\x2', '\x2', '\x10E3', '\x10E4', '\x3', '\x2', '\x2', '\x2', 
		'\x10E4', '\x10E6', '\a', '\x65', '\x2', '\x2', '\x10E5', '\x10E7', '\x5', 
		'\x182', '\xC2', '\x2', '\x10E6', '\x10E5', '\x3', '\x2', '\x2', '\x2', 
		'\x10E7', '\x10E8', '\x3', '\x2', '\x2', '\x2', '\x10E8', '\x10E6', '\x3', 
		'\x2', '\x2', '\x2', '\x10E8', '\x10E9', '\x3', '\x2', '\x2', '\x2', '\x10E9', 
		'\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10EA', '\x10EB', '\a', '\x187', 
		'\x2', '\x2', '\x10EB', '\x10ED', '\a', '\x65', '\x2', '\x2', '\x10EC', 
		'\x10EE', '\x5', '\x216', '\x10C', '\x2', '\x10ED', '\x10EC', '\x3', '\x2', 
		'\x2', '\x2', '\x10ED', '\x10EE', '\x3', '\x2', '\x2', '\x2', '\x10EE', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x10EF', '\x10F0', '\x5', '\x216', 
		'\x10C', '\x2', '\x10F0', '\x10F1', '\a', '\x448', '\x2', '\x2', '\x10F1', 
		'\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F2', '\x10EF', '\x3', '\x2', 
		'\x2', '\x2', '\x10F2', '\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F3', 
		'\x10F4', '\x3', '\x2', '\x2', '\x2', '\x10F4', '\x10F6', '\a', '\x86', 
		'\x2', '\x2', '\x10F5', '\x10F7', '\x5', '\x182', '\xC2', '\x2', '\x10F6', 
		'\x10F5', '\x3', '\x2', '\x2', '\x2', '\x10F7', '\x10F8', '\x3', '\x2', 
		'\x2', '\x2', '\x10F8', '\x10F6', '\x3', '\x2', '\x2', '\x2', '\x10F8', 
		'\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10F9', '\x10FA', '\x3', '\x2', 
		'\x2', '\x2', '\x10FA', '\x10FB', '\a', '\x275', '\x2', '\x2', '\x10FB', 
		'\x10FC', '\x5', '\x278', '\x13D', '\x2', '\x10FC', '\x10FD', '\a', '\x187', 
		'\x2', '\x2', '\x10FD', '\x10FF', '\a', '\x86', '\x2', '\x2', '\x10FE', 
		'\x1100', '\x5', '\x216', '\x10C', '\x2', '\x10FF', '\x10FE', '\x3', '\x2', 
		'\x2', '\x2', '\x10FF', '\x1100', '\x3', '\x2', '\x2', '\x2', '\x1100', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x1101', '\x1102', '\a', '\x8C', 
		'\x2', '\x2', '\x1102', '\x1103', '\x5', '\x278', '\x13D', '\x2', '\x1103', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x1104', '\x1105', '\x5', '\x216', 
		'\x10C', '\x2', '\x1105', '\x1106', '\a', '\x448', '\x2', '\x2', '\x1106', 
		'\x1108', '\x3', '\x2', '\x2', '\x2', '\x1107', '\x1104', '\x3', '\x2', 
		'\x2', '\x2', '\x1107', '\x1108', '\x3', '\x2', '\x2', '\x2', '\x1108', 
		'\x1109', '\x3', '\x2', '\x2', '\x2', '\x1109', '\x110A', '\a', '\xB6', 
		'\x2', '\x2', '\x110A', '\x110B', '\x5', '\x278', '\x13D', '\x2', '\x110B', 
		'\x110D', '\a', '\x181', '\x2', '\x2', '\x110C', '\x110E', '\x5', '\x182', 
		'\xC2', '\x2', '\x110D', '\x110C', '\x3', '\x2', '\x2', '\x2', '\x110E', 
		'\x110F', '\x3', '\x2', '\x2', '\x2', '\x110F', '\x110D', '\x3', '\x2', 
		'\x2', '\x2', '\x110F', '\x1110', '\x3', '\x2', '\x2', '\x2', '\x1110', 
		'\x1111', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x1112', '\a', '\x187', 
		'\x2', '\x2', '\x1112', '\x1114', '\a', '\xB6', '\x2', '\x2', '\x1113', 
		'\x1115', '\x5', '\x216', '\x10C', '\x2', '\x1114', '\x1113', '\x3', '\x2', 
		'\x2', '\x2', '\x1114', '\x1115', '\x3', '\x2', '\x2', '\x2', '\x1115', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x1116', '\x1117', '\a', '\x15D', 
		'\x2', '\x2', '\x1117', '\x1126', '\x5', '\x216', '\x10C', '\x2', '\x1118', 
		'\x111D', '\a', '?', '\x2', '\x2', '\x1119', '\x111B', '\a', '\x1F4', 
		'\x2', '\x2', '\x111A', '\x1119', '\x3', '\x2', '\x2', '\x2', '\x111A', 
		'\x111B', '\x3', '\x2', '\x2', '\x2', '\x111B', '\x111C', '\x3', '\x2', 
		'\x2', '\x2', '\x111C', '\x111E', '\a', '\x43', '\x2', '\x2', '\x111D', 
		'\x111A', '\x3', '\x2', '\x2', '\x2', '\x111D', '\x111E', '\x3', '\x2', 
		'\x2', '\x2', '\x111E', '\x111F', '\x3', '\x2', '\x2', '\x2', '\x111F', 
		'\x1120', '\x5', '\x216', '\x10C', '\x2', '\x1120', '\x1121', '\a', 'U', 
		'\x2', '\x2', '\x1121', '\x1122', '\x5', '\x236', '\x11C', '\x2', '\x1122', 
		'\x1126', '\x3', '\x2', '\x2', '\x2', '\x1123', '\x1124', '\a', '\x201', 
		'\x2', '\x2', '\x1124', '\x1126', '\x5', '\x216', '\x10C', '\x2', '\x1125', 
		'\x1116', '\x3', '\x2', '\x2', '\x2', '\x1125', '\x1118', '\x3', '\x2', 
		'\x2', '\x2', '\x1125', '\x1123', '\x3', '\x2', '\x2', '\x2', '\x1126', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x1127', '\x1128', '\a', ')', '\x2', 
		'\x2', '\x1128', '\x1129', '\x5', '\x236', '\x11C', '\x2', '\x1129', '\x112C', 
		'\x5', '\x22A', '\x116', '\x2', '\x112A', '\x112B', '\a', '*', '\x2', 
		'\x2', '\x112B', '\x112D', '\x5', '\x278', '\x13D', '\x2', '\x112C', '\x112A', 
		'\x3', '\x2', '\x2', '\x2', '\x112C', '\x112D', '\x3', '\x2', '\x2', '\x2', 
		'\x112D', '\x179', '\x3', '\x2', '\x2', '\x2', '\x112E', '\x112F', '\a', 
		')', '\x2', '\x2', '\x112F', '\x1130', '\x5', '\x216', '\x10C', '\x2', 
		'\x1130', '\x1131', '\a', '\x1E', '\x2', '\x2', '\x1131', '\x1138', '\a', 
		'@', '\x2', '\x2', '\x1132', '\x1139', '\x5', '\x21C', '\x10F', '\x2', 
		'\x1133', '\x1135', '\a', '\x9A', '\x2', '\x2', '\x1134', '\x1136', '\a', 
		'\x27B', '\x2', '\x2', '\x1135', '\x1134', '\x3', '\x2', '\x2', '\x2', 
		'\x1135', '\x1136', '\x3', '\x2', '\x2', '\x2', '\x1136', '\x1137', '\x3', 
		'\x2', '\x2', '\x2', '\x1137', '\x1139', '\a', '\x44C', '\x2', '\x2', 
		'\x1138', '\x1132', '\x3', '\x2', '\x2', '\x2', '\x1138', '\x1133', '\x3', 
		'\x2', '\x2', '\x2', '\x1139', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x113A', 
		'\x113B', '\a', ')', '\x2', '\x2', '\x113B', '\x113C', '\x5', '\x216', 
		'\x10C', '\x2', '\x113C', '\x113D', '\a', '&', '\x2', '\x2', '\x113D', 
		'\x113E', '\a', '@', '\x2', '\x2', '\x113E', '\x113F', '\x5', '\xB6', 
		'\\', '\x2', '\x113F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x1140', 
		'\x1141', '\a', ')', '\x2', '\x2', '\x1141', '\x1142', '\t', '>', '\x2', 
		'\x2', '\x1142', '\x1143', '\a', '\x1A9', '\x2', '\x2', '\x1143', '\x1144', 
		'\a', '@', '\x2', '\x2', '\x1144', '\x1149', '\x5', '\x180', '\xC1', '\x2', 
		'\x1145', '\x1146', '\a', '\x43F', '\x2', '\x2', '\x1146', '\x1148', '\x5', 
		'\x180', '\xC1', '\x2', '\x1147', '\x1145', '\x3', '\x2', '\x2', '\x2', 
		'\x1148', '\x114B', '\x3', '\x2', '\x2', '\x2', '\x1149', '\x1147', '\x3', 
		'\x2', '\x2', '\x2', '\x1149', '\x114A', '\x3', '\x2', '\x2', '\x2', '\x114A', 
		'\x114C', '\x3', '\x2', '\x2', '\x2', '\x114B', '\x1149', '\x3', '\x2', 
		'\x2', '\x2', '\x114C', '\x114D', '\x5', '\x162', '\xB2', '\x2', '\x114D', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x114E', '\x115A', '\x5', '\x21C', 
		'\x10F', '\x2', '\x114F', '\x1151', '\a', '\x9A', '\x2', '\x2', '\x1150', 
		'\x1152', '\a', '\x27B', '\x2', '\x2', '\x1151', '\x1150', '\x3', '\x2', 
		'\x2', '\x2', '\x1151', '\x1152', '\x3', '\x2', '\x2', '\x2', '\x1152', 
		'\x1153', '\x3', '\x2', '\x2', '\x2', '\x1153', '\x115A', '\a', '\x44C', 
		'\x2', '\x2', '\x1154', '\x115A', '\x5', '\x216', '\x10C', '\x2', '\x1155', 
		'\x115A', '\a', '\x9B', '\x2', '\x2', '\x1156', '\x1157', '\a', 'm', '\x2', 
		'\x2', '\x1157', '\x115A', '\a', '\x1A2', '\x2', '\x2', '\x1158', '\x115A', 
		'\a', '\x99', '\x2', '\x2', '\x1159', '\x114E', '\x3', '\x2', '\x2', '\x2', 
		'\x1159', '\x114F', '\x3', '\x2', '\x2', '\x2', '\x1159', '\x1154', '\x3', 
		'\x2', '\x2', '\x2', '\x1159', '\x1155', '\x3', '\x2', '\x2', '\x2', '\x1159', 
		'\x1156', '\x3', '\x2', '\x2', '\x2', '\x1159', '\x1158', '\x3', '\x2', 
		'\x2', '\x2', '\x115A', '\x181', '\x3', '\x2', '\x2', '\x2', '\x115B', 
		'\x115E', '\x5', '\x14', '\v', '\x2', '\x115C', '\x115E', '\x5', '\x6', 
		'\x4', '\x2', '\x115D', '\x115B', '\x3', '\x2', '\x2', '\x2', '\x115D', 
		'\x115C', '\x3', '\x2', '\x2', '\x2', '\x115E', '\x115F', '\x3', '\x2', 
		'\x2', '\x2', '\x115F', '\x1160', '\a', '\x440', '\x2', '\x2', '\x1160', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1164', '\a', '\xB4', 
		'\x2', '\x2', '\x1162', '\x1165', '\x5', '\x228', '\x115', '\x2', '\x1163', 
		'\x1165', '\x5', '\x278', '\x13D', '\x2', '\x1164', '\x1162', '\x3', '\x2', 
		'\x2', '\x2', '\x1164', '\x1163', '\x3', '\x2', '\x2', '\x2', '\x1165', 
		'\x1166', '\x3', '\x2', '\x2', '\x2', '\x1166', '\x1168', '\a', '\xA5', 
		'\x2', '\x2', '\x1167', '\x1169', '\x5', '\x182', '\xC2', '\x2', '\x1168', 
		'\x1167', '\x3', '\x2', '\x2', '\x2', '\x1169', '\x116A', '\x3', '\x2', 
		'\x2', '\x2', '\x116A', '\x1168', '\x3', '\x2', '\x2', '\x2', '\x116A', 
		'\x116B', '\x3', '\x2', '\x2', '\x2', '\x116B', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '\x116C', '\x116D', '\a', '\x36', '\x2', '\x2', '\x116D', 
		'\x116E', '\x5', '\x278', '\x13D', '\x2', '\x116E', '\x1170', '\a', '\xA5', 
		'\x2', '\x2', '\x116F', '\x1171', '\x5', '\x182', '\xC2', '\x2', '\x1170', 
		'\x116F', '\x3', '\x2', '\x2', '\x2', '\x1171', '\x1172', '\x3', '\x2', 
		'\x2', '\x2', '\x1172', '\x1170', '\x3', '\x2', '\x2', '\x2', '\x1172', 
		'\x1173', '\x3', '\x2', '\x2', '\x2', '\x1173', '\x187', '\x3', '\x2', 
		'\x2', '\x2', '\x1174', '\x1175', '\a', '\t', '\x2', '\x2', '\x1175', 
		'\x1176', '\a', '\x277', '\x2', '\x2', '\x1176', '\x117B', '\x5', '\x19C', 
		'\xCF', '\x2', '\x1177', '\x1178', '\a', '\x43F', '\x2', '\x2', '\x1178', 
		'\x117A', '\x5', '\x19C', '\xCF', '\x2', '\x1179', '\x1177', '\x3', '\x2', 
		'\x2', '\x2', '\x117A', '\x117D', '\x3', '\x2', '\x2', '\x2', '\x117B', 
		'\x1179', '\x3', '\x2', '\x2', '\x2', '\x117B', '\x117C', '\x3', '\x2', 
		'\x2', '\x2', '\x117C', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x117D', 
		'\x117B', '\x3', '\x2', '\x2', '\x2', '\x117E', '\x117F', '\a', '\t', 
		'\x2', '\x2', '\x117F', '\x1181', '\a', '\x277', '\x2', '\x2', '\x1180', 
		'\x1182', '\x5', '\x24C', '\x127', '\x2', '\x1181', '\x1180', '\x3', '\x2', 
		'\x2', '\x2', '\x1181', '\x1182', '\x3', '\x2', '\x2', '\x2', '\x1182', 
		'\x1183', '\x3', '\x2', '\x2', '\x2', '\x1183', '\x1188', '\x5', '\x19E', 
		'\xD0', '\x2', '\x1184', '\x1185', '\a', '\x43F', '\x2', '\x2', '\x1185', 
		'\x1187', '\x5', '\x19E', '\xD0', '\x2', '\x1186', '\x1184', '\x3', '\x2', 
		'\x2', '\x2', '\x1187', '\x118A', '\x3', '\x2', '\x2', '\x2', '\x1188', 
		'\x1186', '\x3', '\x2', '\x2', '\x2', '\x1188', '\x1189', '\x3', '\x2', 
		'\x2', '\x2', '\x1189', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x118A', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x118B', '\x1197', '\a', '\x88', 
		'\x2', '\x2', '\x118C', '\x1198', '\a', '\x1F7', '\x2', '\x2', '\x118D', 
		'\x1194', '\x5', '\x1A0', '\xD1', '\x2', '\x118E', '\x1190', '\a', '\f', 
		'\x2', '\x2', '\x118F', '\x118E', '\x3', '\x2', '\x2', '\x2', '\x118F', 
		'\x1190', '\x3', '\x2', '\x2', '\x2', '\x1190', '\x1191', '\x3', '\x2', 
		'\x2', '\x2', '\x1191', '\x1193', '\x5', '\x1A0', '\xD1', '\x2', '\x1192', 
		'\x118F', '\x3', '\x2', '\x2', '\x2', '\x1193', '\x1196', '\x3', '\x2', 
		'\x2', '\x2', '\x1194', '\x1192', '\x3', '\x2', '\x2', '\x2', '\x1194', 
		'\x1195', '\x3', '\x2', '\x2', '\x2', '\x1195', '\x1198', '\x3', '\x2', 
		'\x2', '\x2', '\x1196', '\x1194', '\x3', '\x2', '\x2', '\x2', '\x1197', 
		'\x118C', '\x3', '\x2', '\x2', '\x2', '\x1197', '\x118D', '\x3', '\x2', 
		'\x2', '\x2', '\x1198', '\x119A', '\x3', '\x2', '\x2', '\x2', '\x1199', 
		'\x118B', '\x3', '\x2', '\x2', '\x2', '\x1199', '\x119A', '\x3', '\x2', 
		'\x2', '\x2', '\x119A', '\x11A1', '\x3', '\x2', '\x2', '\x2', '\x119B', 
		'\x119D', '\a', '\xB7', '\x2', '\x2', '\x119C', '\x119E', '\x5', '\x1A2', 
		'\xD2', '\x2', '\x119D', '\x119C', '\x3', '\x2', '\x2', '\x2', '\x119E', 
		'\x119F', '\x3', '\x2', '\x2', '\x2', '\x119F', '\x119D', '\x3', '\x2', 
		'\x2', '\x2', '\x119F', '\x11A0', '\x3', '\x2', '\x2', '\x2', '\x11A0', 
		'\x11A2', '\x3', '\x2', '\x2', '\x2', '\x11A1', '\x119B', '\x3', '\x2', 
		'\x2', '\x2', '\x11A1', '\x11A2', '\x3', '\x2', '\x2', '\x2', '\x11A2', 
		'\x11A7', '\x3', '\x2', '\x2', '\x2', '\x11A3', '\x11A6', '\x5', '\x1A4', 
		'\xD3', '\x2', '\x11A4', '\x11A6', '\x5', '\x1A6', '\xD4', '\x2', '\x11A5', 
		'\x11A3', '\x3', '\x2', '\x2', '\x2', '\x11A5', '\x11A4', '\x3', '\x2', 
		'\x2', '\x2', '\x11A6', '\x11A9', '\x3', '\x2', '\x2', '\x2', '\x11A7', 
		'\x11A5', '\x3', '\x2', '\x2', '\x2', '\x11A7', '\x11A8', '\x3', '\x2', 
		'\x2', '\x2', '\x11A8', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x11A9', 
		'\x11A7', '\x3', '\x2', '\x2', '\x2', '\x11AA', '\x1174', '\x3', '\x2', 
		'\x2', '\x2', '\x11AA', '\x117E', '\x3', '\x2', '\x2', '\x2', '\x11AB', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x11AC', '\x11AD', '\a', '\"', '\x2', 
		'\x2', '\x11AD', '\x11AE', '\a', '\x277', '\x2', '\x2', '\x11AE', '\x11B3', 
		'\x5', '\x19E', '\xD0', '\x2', '\x11AF', '\x11B0', '\a', '\x43F', '\x2', 
		'\x2', '\x11B0', '\x11B2', '\x5', '\x19E', '\xD0', '\x2', '\x11B1', '\x11AF', 
		'\x3', '\x2', '\x2', '\x2', '\x11B2', '\x11B5', '\x3', '\x2', '\x2', '\x2', 
		'\x11B3', '\x11B1', '\x3', '\x2', '\x2', '\x2', '\x11B3', '\x11B4', '\x3', 
		'\x2', '\x2', '\x2', '\x11B4', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11B5', 
		'\x11B3', '\x3', '\x2', '\x2', '\x2', '\x11B6', '\x11B7', '\a', '\"', 
		'\x2', '\x2', '\x11B7', '\x11B9', '\a', '\x277', '\x2', '\x2', '\x11B8', 
		'\x11BA', '\x5', '\x24E', '\x128', '\x2', '\x11B9', '\x11B8', '\x3', '\x2', 
		'\x2', '\x2', '\x11B9', '\x11BA', '\x3', '\x2', '\x2', '\x2', '\x11BA', 
		'\x11BB', '\x3', '\x2', '\x2', '\x2', '\x11BB', '\x11C0', '\x5', '\x19E', 
		'\xD0', '\x2', '\x11BC', '\x11BD', '\a', '\x43F', '\x2', '\x2', '\x11BD', 
		'\x11BF', '\x5', '\x19E', '\xD0', '\x2', '\x11BE', '\x11BC', '\x3', '\x2', 
		'\x2', '\x2', '\x11BF', '\x11C2', '\x3', '\x2', '\x2', '\x2', '\x11C0', 
		'\x11BE', '\x3', '\x2', '\x2', '\x2', '\x11C0', '\x11C1', '\x3', '\x2', 
		'\x2', '\x2', '\x11C1', '\x11D1', '\x3', '\x2', '\x2', '\x2', '\x11C2', 
		'\x11C0', '\x3', '\x2', '\x2', '\x2', '\x11C3', '\x11CF', '\a', '\x88', 
		'\x2', '\x2', '\x11C4', '\x11D0', '\a', '\x1F7', '\x2', '\x2', '\x11C5', 
		'\x11CC', '\x5', '\x1A0', '\xD1', '\x2', '\x11C6', '\x11C8', '\a', '\f', 
		'\x2', '\x2', '\x11C7', '\x11C6', '\x3', '\x2', '\x2', '\x2', '\x11C7', 
		'\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11C8', '\x11C9', '\x3', '\x2', 
		'\x2', '\x2', '\x11C9', '\x11CB', '\x5', '\x1A0', '\xD1', '\x2', '\x11CA', 
		'\x11C7', '\x3', '\x2', '\x2', '\x2', '\x11CB', '\x11CE', '\x3', '\x2', 
		'\x2', '\x2', '\x11CC', '\x11CA', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x11CD', '\x3', '\x2', '\x2', '\x2', '\x11CD', '\x11D0', '\x3', '\x2', 
		'\x2', '\x2', '\x11CE', '\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11CF', 
		'\x11C4', '\x3', '\x2', '\x2', '\x2', '\x11CF', '\x11C5', '\x3', '\x2', 
		'\x2', '\x2', '\x11D0', '\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D1', 
		'\x11C3', '\x3', '\x2', '\x2', '\x2', '\x11D1', '\x11D2', '\x3', '\x2', 
		'\x2', '\x2', '\x11D2', '\x11D9', '\x3', '\x2', '\x2', '\x2', '\x11D3', 
		'\x11D5', '\a', '\xB7', '\x2', '\x2', '\x11D4', '\x11D6', '\x5', '\x1A2', 
		'\xD2', '\x2', '\x11D5', '\x11D4', '\x3', '\x2', '\x2', '\x2', '\x11D6', 
		'\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11D7', '\x11D5', '\x3', '\x2', 
		'\x2', '\x2', '\x11D7', '\x11D8', '\x3', '\x2', '\x2', '\x2', '\x11D8', 
		'\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11D9', '\x11D3', '\x3', '\x2', 
		'\x2', '\x2', '\x11D9', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11DA', 
		'\x11DF', '\x3', '\x2', '\x2', '\x2', '\x11DB', '\x11DE', '\x5', '\x1A4', 
		'\xD3', '\x2', '\x11DC', '\x11DE', '\x5', '\x1A6', '\xD4', '\x2', '\x11DD', 
		'\x11DB', '\x3', '\x2', '\x2', '\x2', '\x11DD', '\x11DC', '\x3', '\x2', 
		'\x2', '\x2', '\x11DE', '\x11E1', '\x3', '\x2', '\x2', '\x2', '\x11DF', 
		'\x11DD', '\x3', '\x2', '\x2', '\x2', '\x11DF', '\x11E0', '\x3', '\x2', 
		'\x2', '\x2', '\x11E0', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11E1', 
		'\x11DF', '\x3', '\x2', '\x2', '\x2', '\x11E2', '\x11AC', '\x3', '\x2', 
		'\x2', '\x2', '\x11E2', '\x11B6', '\x3', '\x2', '\x2', '\x2', '\x11E3', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x11E4', '\x11E5', '\a', '\x33', 
		'\x2', '\x2', '\x11E5', '\x11E7', '\a', '\x277', '\x2', '\x2', '\x11E6', 
		'\x11E8', '\x5', '\x24C', '\x127', '\x2', '\x11E7', '\x11E6', '\x3', '\x2', 
		'\x2', '\x2', '\x11E7', '\x11E8', '\x3', '\x2', '\x2', '\x2', '\x11E8', 
		'\x11E9', '\x3', '\x2', '\x2', '\x2', '\x11E9', '\x11EE', '\x5', '\x204', 
		'\x103', '\x2', '\x11EA', '\x11EB', '\a', '\x43F', '\x2', '\x2', '\x11EB', 
		'\x11ED', '\x5', '\x204', '\x103', '\x2', '\x11EC', '\x11EA', '\x3', '\x2', 
		'\x2', '\x2', '\x11ED', '\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11EC', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11EF', '\x3', '\x2', 
		'\x2', '\x2', '\x11EF', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x11F0', 
		'\x11EE', '\x3', '\x2', '\x2', '\x2', '\x11F1', '\x11F2', '\a', 'G', '\x2', 
		'\x2', '\x11F2', '\x11F7', '\x5', '\x1A8', '\xD5', '\x2', '\x11F3', '\x11F4', 
		'\a', '\x43F', '\x2', '\x2', '\x11F4', '\x11F6', '\x5', '\x1A8', '\xD5', 
		'\x2', '\x11F5', '\x11F3', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11F9', 
		'\x3', '\x2', '\x2', '\x2', '\x11F7', '\x11F5', '\x3', '\x2', '\x2', '\x2', 
		'\x11F7', '\x11F8', '\x3', '\x2', '\x2', '\x2', '\x11F8', '\x11FA', '\x3', 
		'\x2', '\x2', '\x2', '\x11F9', '\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11FA', 
		'\x11FC', '\a', 'q', '\x2', '\x2', '\x11FB', '\x11FD', '\t', '?', '\x2', 
		'\x2', '\x11FC', '\x11FB', '\x3', '\x2', '\x2', '\x2', '\x11FC', '\x11FD', 
		'\x3', '\x2', '\x2', '\x2', '\x11FD', '\x11FE', '\x3', '\x2', '\x2', '\x2', 
		'\x11FE', '\x11FF', '\x5', '\x1AC', '\xD7', '\x2', '\x11FF', '\x1200', 
		'\a', '\xA6', '\x2', '\x2', '\x1200', '\x1205', '\x5', '\x19E', '\xD0', 
		'\x2', '\x1201', '\x1202', '\a', '\x43F', '\x2', '\x2', '\x1202', '\x1204', 
		'\x5', '\x19E', '\xD0', '\x2', '\x1203', '\x1201', '\x3', '\x2', '\x2', 
		'\x2', '\x1204', '\x1207', '\x3', '\x2', '\x2', '\x2', '\x1205', '\x1203', 
		'\x3', '\x2', '\x2', '\x2', '\x1205', '\x1206', '\x3', '\x2', '\x2', '\x2', 
		'\x1206', '\x1216', '\x3', '\x2', '\x2', '\x2', '\x1207', '\x1205', '\x3', 
		'\x2', '\x2', '\x2', '\x1208', '\x1214', '\a', '\x88', '\x2', '\x2', '\x1209', 
		'\x1215', '\a', '\x1F7', '\x2', '\x2', '\x120A', '\x1211', '\x5', '\x1A0', 
		'\xD1', '\x2', '\x120B', '\x120D', '\a', '\f', '\x2', '\x2', '\x120C', 
		'\x120B', '\x3', '\x2', '\x2', '\x2', '\x120C', '\x120D', '\x3', '\x2', 
		'\x2', '\x2', '\x120D', '\x120E', '\x3', '\x2', '\x2', '\x2', '\x120E', 
		'\x1210', '\x5', '\x1A0', '\xD1', '\x2', '\x120F', '\x120C', '\x3', '\x2', 
		'\x2', '\x2', '\x1210', '\x1213', '\x3', '\x2', '\x2', '\x2', '\x1211', 
		'\x120F', '\x3', '\x2', '\x2', '\x2', '\x1211', '\x1212', '\x3', '\x2', 
		'\x2', '\x2', '\x1212', '\x1215', '\x3', '\x2', '\x2', '\x2', '\x1213', 
		'\x1211', '\x3', '\x2', '\x2', '\x2', '\x1214', '\x1209', '\x3', '\x2', 
		'\x2', '\x2', '\x1214', '\x120A', '\x3', '\x2', '\x2', '\x2', '\x1215', 
		'\x1217', '\x3', '\x2', '\x2', '\x2', '\x1216', '\x1208', '\x3', '\x2', 
		'\x2', '\x2', '\x1216', '\x1217', '\x3', '\x2', '\x2', '\x2', '\x1217', 
		'\x1221', '\x3', '\x2', '\x2', '\x2', '\x1218', '\x121E', '\a', '\xB7', 
		'\x2', '\x2', '\x1219', '\x121A', '\a', 'G', '\x2', '\x2', '\x121A', '\x121D', 
		'\a', 's', '\x2', '\x2', '\x121B', '\x121D', '\x5', '\x1A2', '\xD2', '\x2', 
		'\x121C', '\x1219', '\x3', '\x2', '\x2', '\x2', '\x121C', '\x121B', '\x3', 
		'\x2', '\x2', '\x2', '\x121D', '\x1220', '\x3', '\x2', '\x2', '\x2', '\x121E', 
		'\x121C', '\x3', '\x2', '\x2', '\x2', '\x121E', '\x121F', '\x3', '\x2', 
		'\x2', '\x2', '\x121F', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1220', 
		'\x121E', '\x3', '\x2', '\x2', '\x2', '\x1221', '\x1218', '\x3', '\x2', 
		'\x2', '\x2', '\x1221', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1222', 
		'\x1229', '\x3', '\x2', '\x2', '\x2', '\x1223', '\x1224', '\a', '\xE', 
		'\x2', '\x2', '\x1224', '\x1225', '\x5', '\x204', '\x103', '\x2', '\x1225', 
		'\x1226', '\a', '\xB7', '\x2', '\x2', '\x1226', '\x1227', '\a', '\x234', 
		'\x2', '\x2', '\x1227', '\x1228', '\x5', '\x190', '\xC9', '\x2', '\x1228', 
		'\x122A', '\x3', '\x2', '\x2', '\x2', '\x1229', '\x1223', '\x3', '\x2', 
		'\x2', '\x2', '\x1229', '\x122A', '\x3', '\x2', '\x2', '\x2', '\x122A', 
		'\x1249', '\x3', '\x2', '\x2', '\x2', '\x122B', '\x122C', '\a', 'G', '\x2', 
		'\x2', '\x122C', '\x1231', '\x5', '\x216', '\x10C', '\x2', '\x122D', '\x122E', 
		'\a', '\x43F', '\x2', '\x2', '\x122E', '\x1230', '\x5', '\x216', '\x10C', 
		'\x2', '\x122F', '\x122D', '\x3', '\x2', '\x2', '\x2', '\x1230', '\x1233', 
		'\x3', '\x2', '\x2', '\x2', '\x1231', '\x122F', '\x3', '\x2', '\x2', '\x2', 
		'\x1231', '\x1232', '\x3', '\x2', '\x2', '\x2', '\x1232', '\x1234', '\x3', 
		'\x2', '\x2', '\x2', '\x1233', '\x1231', '\x3', '\x2', '\x2', '\x2', '\x1234', 
		'\x1237', '\a', '\xA6', '\x2', '\x2', '\x1235', '\x1238', '\x5', '\x204', 
		'\x103', '\x2', '\x1236', '\x1238', '\x5', '\x216', '\x10C', '\x2', '\x1237', 
		'\x1235', '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1236', '\x3', '\x2', 
		'\x2', '\x2', '\x1238', '\x1240', '\x3', '\x2', '\x2', '\x2', '\x1239', 
		'\x123C', '\a', '\x43F', '\x2', '\x2', '\x123A', '\x123D', '\x5', '\x204', 
		'\x103', '\x2', '\x123B', '\x123D', '\x5', '\x216', '\x10C', '\x2', '\x123C', 
		'\x123A', '\x3', '\x2', '\x2', '\x2', '\x123C', '\x123B', '\x3', '\x2', 
		'\x2', '\x2', '\x123D', '\x123F', '\x3', '\x2', '\x2', '\x2', '\x123E', 
		'\x1239', '\x3', '\x2', '\x2', '\x2', '\x123F', '\x1242', '\x3', '\x2', 
		'\x2', '\x2', '\x1240', '\x123E', '\x3', '\x2', '\x2', '\x2', '\x1240', 
		'\x1241', '\x3', '\x2', '\x2', '\x2', '\x1241', '\x1246', '\x3', '\x2', 
		'\x2', '\x2', '\x1242', '\x1240', '\x3', '\x2', '\x2', '\x2', '\x1243', 
		'\x1244', '\a', '\xB7', '\x2', '\x2', '\x1244', '\x1245', '\a', '\x45B', 
		'\x2', '\x2', '\x1245', '\x1247', '\a', 's', '\x2', '\x2', '\x1246', '\x1243', 
		'\x3', '\x2', '\x2', '\x2', '\x1246', '\x1247', '\x3', '\x2', '\x2', '\x2', 
		'\x1247', '\x1249', '\x3', '\x2', '\x2', '\x2', '\x1248', '\x11F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1248', '\x122B', '\x3', '\x2', '\x2', '\x2', '\x1249', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x124A', '\x1261', '\a', '*', '\x2', 
		'\x2', '\x124B', '\x1261', '\a', '\x1F7', '\x2', '\x2', '\x124C', '\x1256', 
		'\a', '\b', '\x2', '\x2', '\x124D', '\x124E', '\a', ':', '\x2', '\x2', 
		'\x124E', '\x1253', '\x5', '\x204', '\x103', '\x2', '\x124F', '\x1250', 
		'\a', '\x43F', '\x2', '\x2', '\x1250', '\x1252', '\x5', '\x204', '\x103', 
		'\x2', '\x1251', '\x124F', '\x3', '\x2', '\x2', '\x2', '\x1252', '\x1255', 
		'\x3', '\x2', '\x2', '\x2', '\x1253', '\x1251', '\x3', '\x2', '\x2', '\x2', 
		'\x1253', '\x1254', '\x3', '\x2', '\x2', '\x2', '\x1254', '\x1257', '\x3', 
		'\x2', '\x2', '\x2', '\x1255', '\x1253', '\x3', '\x2', '\x2', '\x2', '\x1256', 
		'\x124D', '\x3', '\x2', '\x2', '\x2', '\x1256', '\x1257', '\x3', '\x2', 
		'\x2', '\x2', '\x1257', '\x1261', '\x3', '\x2', '\x2', '\x2', '\x1258', 
		'\x125D', '\x5', '\x204', '\x103', '\x2', '\x1259', '\x125A', '\a', '\x43F', 
		'\x2', '\x2', '\x125A', '\x125C', '\x5', '\x204', '\x103', '\x2', '\x125B', 
		'\x1259', '\x3', '\x2', '\x2', '\x2', '\x125C', '\x125F', '\x3', '\x2', 
		'\x2', '\x2', '\x125D', '\x125B', '\x3', '\x2', '\x2', '\x2', '\x125D', 
		'\x125E', '\x3', '\x2', '\x2', '\x2', '\x125E', '\x1261', '\x3', '\x2', 
		'\x2', '\x2', '\x125F', '\x125D', '\x3', '\x2', '\x2', '\x2', '\x1260', 
		'\x124A', '\x3', '\x2', '\x2', '\x2', '\x1260', '\x124B', '\x3', '\x2', 
		'\x2', '\x2', '\x1260', '\x124C', '\x3', '\x2', '\x2', '\x2', '\x1260', 
		'\x1258', '\x3', '\x2', '\x2', '\x2', '\x1261', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x1262', '\x1263', '\a', 'G', '\x2', '\x2', '\x1263', '\x1264', 
		'\a', '\x219', '\x2', '\x2', '\x1264', '\x1265', '\a', 'q', '\x2', '\x2', 
		'\x1265', '\x1266', '\x5', '\x204', '\x103', '\x2', '\x1266', '\x1267', 
		'\a', '\xA6', '\x2', '\x2', '\x1267', '\x126C', '\x5', '\x204', '\x103', 
		'\x2', '\x1268', '\x1269', '\a', '\x43F', '\x2', '\x2', '\x1269', '\x126B', 
		'\x5', '\x204', '\x103', '\x2', '\x126A', '\x1268', '\x3', '\x2', '\x2', 
		'\x2', '\x126B', '\x126E', '\x3', '\x2', '\x2', '\x2', '\x126C', '\x126A', 
		'\x3', '\x2', '\x2', '\x2', '\x126C', '\x126D', '\x3', '\x2', '\x2', '\x2', 
		'\x126D', '\x1272', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x126C', '\x3', 
		'\x2', '\x2', '\x2', '\x126F', '\x1270', '\a', '\xB7', '\x2', '\x2', '\x1270', 
		'\x1271', '\a', 'G', '\x2', '\x2', '\x1271', '\x1273', '\a', 's', '\x2', 
		'\x2', '\x1272', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x1272', '\x1273', 
		'\x3', '\x2', '\x2', '\x2', '\x1273', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x1274', '\x1275', '\a', '\x85', '\x2', '\x2', '\x1275', '\x1276', '\a', 
		'\x277', '\x2', '\x2', '\x1276', '\x127B', '\x5', '\x1AE', '\xD8', '\x2', 
		'\x1277', '\x1278', '\a', '\x43F', '\x2', '\x2', '\x1278', '\x127A', '\x5', 
		'\x1AE', '\xD8', '\x2', '\x1279', '\x1277', '\x3', '\x2', '\x2', '\x2', 
		'\x127A', '\x127D', '\x3', '\x2', '\x2', '\x2', '\x127B', '\x1279', '\x3', 
		'\x2', '\x2', '\x2', '\x127B', '\x127C', '\x3', '\x2', '\x2', '\x2', '\x127C', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x127D', '\x127B', '\x3', '\x2', 
		'\x2', '\x2', '\x127E', '\x127F', '\a', '\x8D', '\x2', '\x2', '\x127F', 
		'\x1284', '\x5', '\x1A8', '\xD5', '\x2', '\x1280', '\x1281', '\a', '\x43F', 
		'\x2', '\x2', '\x1281', '\x1283', '\x5', '\x1A8', '\xD5', '\x2', '\x1282', 
		'\x1280', '\x3', '\x2', '\x2', '\x2', '\x1283', '\x1286', '\x3', '\x2', 
		'\x2', '\x2', '\x1284', '\x1282', '\x3', '\x2', '\x2', '\x2', '\x1284', 
		'\x1285', '\x3', '\x2', '\x2', '\x2', '\x1285', '\x1287', '\x3', '\x2', 
		'\x2', '\x2', '\x1286', '\x1284', '\x3', '\x2', '\x2', '\x2', '\x1287', 
		'\x1289', '\a', 'q', '\x2', '\x2', '\x1288', '\x128A', '\t', '?', '\x2', 
		'\x2', '\x1289', '\x1288', '\x3', '\x2', '\x2', '\x2', '\x1289', '\x128A', 
		'\x3', '\x2', '\x2', '\x2', '\x128A', '\x128B', '\x3', '\x2', '\x2', '\x2', 
		'\x128B', '\x128C', '\x5', '\x1AC', '\xD7', '\x2', '\x128C', '\x128D', 
		'\a', '\x43', '\x2', '\x2', '\x128D', '\x1292', '\x5', '\x204', '\x103', 
		'\x2', '\x128E', '\x128F', '\a', '\x43F', '\x2', '\x2', '\x128F', '\x1291', 
		'\x5', '\x204', '\x103', '\x2', '\x1290', '\x128E', '\x3', '\x2', '\x2', 
		'\x2', '\x1291', '\x1294', '\x3', '\x2', '\x2', '\x2', '\x1292', '\x1290', 
		'\x3', '\x2', '\x2', '\x2', '\x1292', '\x1293', '\x3', '\x2', '\x2', '\x2', 
		'\x1293', '\x12BF', '\x3', '\x2', '\x2', '\x2', '\x1294', '\x1292', '\x3', 
		'\x2', '\x2', '\x2', '\x1295', '\x1296', '\a', '\x8D', '\x2', '\x2', '\x1296', 
		'\x1298', '\a', '\b', '\x2', '\x2', '\x1297', '\x1299', '\a', '\x29E', 
		'\x2', '\x2', '\x1298', '\x1297', '\x3', '\x2', '\x2', '\x2', '\x1298', 
		'\x1299', '\x3', '\x2', '\x2', '\x2', '\x1299', '\x129A', '\x3', '\x2', 
		'\x2', '\x2', '\x129A', '\x129B', '\a', '\x43F', '\x2', '\x2', '\x129B', 
		'\x129C', '\a', 'G', '\x2', '\x2', '\x129C', '\x129D', '\a', 's', '\x2', 
		'\x2', '\x129D', '\x129E', '\a', '\x43', '\x2', '\x2', '\x129E', '\x12A3', 
		'\x5', '\x204', '\x103', '\x2', '\x129F', '\x12A0', '\a', '\x43F', '\x2', 
		'\x2', '\x12A0', '\x12A2', '\x5', '\x204', '\x103', '\x2', '\x12A1', '\x129F', 
		'\x3', '\x2', '\x2', '\x2', '\x12A2', '\x12A5', '\x3', '\x2', '\x2', '\x2', 
		'\x12A3', '\x12A1', '\x3', '\x2', '\x2', '\x2', '\x12A3', '\x12A4', '\x3', 
		'\x2', '\x2', '\x2', '\x12A4', '\x12BF', '\x3', '\x2', '\x2', '\x2', '\x12A5', 
		'\x12A3', '\x3', '\x2', '\x2', '\x2', '\x12A6', '\x12A7', '\a', '\x8D', 
		'\x2', '\x2', '\x12A7', '\x12AC', '\x5', '\x216', '\x10C', '\x2', '\x12A8', 
		'\x12A9', '\a', '\x43F', '\x2', '\x2', '\x12A9', '\x12AB', '\x5', '\x216', 
		'\x10C', '\x2', '\x12AA', '\x12A8', '\x3', '\x2', '\x2', '\x2', '\x12AB', 
		'\x12AE', '\x3', '\x2', '\x2', '\x2', '\x12AC', '\x12AA', '\x3', '\x2', 
		'\x2', '\x2', '\x12AC', '\x12AD', '\x3', '\x2', '\x2', '\x2', '\x12AD', 
		'\x12AF', '\x3', '\x2', '\x2', '\x2', '\x12AE', '\x12AC', '\x3', '\x2', 
		'\x2', '\x2', '\x12AF', '\x12B2', '\a', '\x43', '\x2', '\x2', '\x12B0', 
		'\x12B3', '\x5', '\x204', '\x103', '\x2', '\x12B1', '\x12B3', '\x5', '\x216', 
		'\x10C', '\x2', '\x12B2', '\x12B0', '\x3', '\x2', '\x2', '\x2', '\x12B2', 
		'\x12B1', '\x3', '\x2', '\x2', '\x2', '\x12B3', '\x12BB', '\x3', '\x2', 
		'\x2', '\x2', '\x12B4', '\x12B7', '\a', '\x43F', '\x2', '\x2', '\x12B5', 
		'\x12B8', '\x5', '\x204', '\x103', '\x2', '\x12B6', '\x12B8', '\x5', '\x216', 
		'\x10C', '\x2', '\x12B7', '\x12B5', '\x3', '\x2', '\x2', '\x2', '\x12B7', 
		'\x12B6', '\x3', '\x2', '\x2', '\x2', '\x12B8', '\x12BA', '\x3', '\x2', 
		'\x2', '\x2', '\x12B9', '\x12B4', '\x3', '\x2', '\x2', '\x2', '\x12BA', 
		'\x12BD', '\x3', '\x2', '\x2', '\x2', '\x12BB', '\x12B9', '\x3', '\x2', 
		'\x2', '\x2', '\x12BB', '\x12BC', '\x3', '\x2', '\x2', '\x2', '\x12BC', 
		'\x12BF', '\x3', '\x2', '\x2', '\x2', '\x12BD', '\x12BB', '\x3', '\x2', 
		'\x2', '\x2', '\x12BE', '\x127E', '\x3', '\x2', '\x2', '\x2', '\x12BE', 
		'\x1295', '\x3', '\x2', '\x2', '\x2', '\x12BE', '\x12A6', '\x3', '\x2', 
		'\x2', '\x2', '\x12BF', '\x197', '\x3', '\x2', '\x2', '\x2', '\x12C0', 
		'\x12C1', '\a', '\x8D', '\x2', '\x2', '\x12C1', '\x12C2', '\a', '\x219', 
		'\x2', '\x2', '\x12C2', '\x12C3', '\a', 'q', '\x2', '\x2', '\x12C3', '\x12C4', 
		'\x5', '\x204', '\x103', '\x2', '\x12C4', '\x12C5', '\a', '\x43', '\x2', 
		'\x2', '\x12C5', '\x12CA', '\x5', '\x204', '\x103', '\x2', '\x12C6', '\x12C7', 
		'\a', '\x43F', '\x2', '\x2', '\x12C7', '\x12C9', '\x5', '\x204', '\x103', 
		'\x2', '\x12C8', '\x12C6', '\x3', '\x2', '\x2', '\x2', '\x12C9', '\x12CC', 
		'\x3', '\x2', '\x2', '\x2', '\x12CA', '\x12C8', '\x3', '\x2', '\x2', '\x2', 
		'\x12CA', '\x12CB', '\x3', '\x2', '\x2', '\x2', '\x12CB', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x12CC', '\x12CA', '\x3', '\x2', '\x2', '\x2', '\x12CD', 
		'\x12CE', '\a', '\x93', '\x2', '\x2', '\x12CE', '\x12D1', '\a', '\x20B', 
		'\x2', '\x2', '\x12CF', '\x12D0', '\a', '@', '\x2', '\x2', '\x12D0', '\x12D2', 
		'\x5', '\x204', '\x103', '\x2', '\x12D1', '\x12CF', '\x3', '\x2', '\x2', 
		'\x2', '\x12D1', '\x12D2', '\x3', '\x2', '\x2', '\x2', '\x12D2', '\x12D3', 
		'\x3', '\x2', '\x2', '\x2', '\x12D3', '\x12D6', '\a', '\x434', '\x2', 
		'\x2', '\x12D4', '\x12D7', '\x5', '\x272', '\x13A', '\x2', '\x12D5', '\x12D7', 
		'\a', '\x44C', '\x2', '\x2', '\x12D6', '\x12D4', '\x3', '\x2', '\x2', 
		'\x2', '\x12D6', '\x12D5', '\x3', '\x2', '\x2', '\x2', '\x12D7', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D8', '\x12D9', '\x5', '\x204', '\x103', 
		'\x2', '\x12D9', '\x12DA', '\x5', '\x1A4', '\xD3', '\x2', '\x12DA', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x12DB', '\x12DC', '\x5', '\x204', '\x103', 
		'\x2', '\x12DC', '\x12DD', '\a', '\x1AE', '\x2', '\x2', '\x12DD', '\x12DE', 
		'\a', '\x14', '\x2', '\x2', '\x12DE', '\x12DF', '\a', '\x20B', '\x2', 
		'\x2', '\x12DF', '\x12E0', '\a', '\x44C', '\x2', '\x2', '\x12E0', '\x12F8', 
		'\x3', '\x2', '\x2', '\x2', '\x12E1', '\x12E2', '\x5', '\x204', '\x103', 
		'\x2', '\x12E2', '\x12E5', '\a', '\x1AE', '\x2', '\x2', '\x12E3', '\x12E4', 
		'\a', '\xB7', '\x2', '\x2', '\x12E4', '\x12E6', '\x5', '\x214', '\x10B', 
		'\x2', '\x12E5', '\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12E5', '\x12E6', 
		'\x3', '\x2', '\x2', '\x2', '\x12E6', '\x12E7', '\x3', '\x2', '\x2', '\x2', 
		'\x12E7', '\x12E8', '\a', '\x14', '\x2', '\x2', '\x12E8', '\x12EC', '\a', 
		'\x44C', '\x2', '\x2', '\x12E9', '\x12EA', '\a', '\x8B', '\x2', '\x2', 
		'\x12EA', '\x12EB', '\a', '$', '\x2', '\x2', '\x12EB', '\x12ED', '\a', 
		'\x20B', '\x2', '\x2', '\x12EC', '\x12E9', '\x3', '\x2', '\x2', '\x2', 
		'\x12EC', '\x12ED', '\x3', '\x2', '\x2', '\x2', '\x12ED', '\x12F8', '\x3', 
		'\x2', '\x2', '\x2', '\x12EE', '\x12EF', '\x5', '\x204', '\x103', '\x2', 
		'\x12EF', '\x12F0', '\a', '\x1AE', '\x2', '\x2', '\x12F0', '\x12F1', '\a', 
		'\xB7', '\x2', '\x2', '\x12F1', '\x12F4', '\x5', '\x214', '\x10B', '\x2', 
		'\x12F2', '\x12F3', '\a', '\xE', '\x2', '\x2', '\x12F3', '\x12F5', '\a', 
		'\x44C', '\x2', '\x2', '\x12F4', '\x12F2', '\x3', '\x2', '\x2', '\x2', 
		'\x12F4', '\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F5', '\x12F8', '\x3', 
		'\x2', '\x2', '\x2', '\x12F6', '\x12F8', '\x5', '\x204', '\x103', '\x2', 
		'\x12F7', '\x12DB', '\x3', '\x2', '\x2', '\x2', '\x12F7', '\x12E1', '\x3', 
		'\x2', '\x2', '\x2', '\x12F7', '\x12EE', '\x3', '\x2', '\x2', '\x2', '\x12F7', 
		'\x12F6', '\x3', '\x2', '\x2', '\x2', '\x12F8', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '\x12F9', '\x1302', '\a', '\x9F', '\x2', '\x2', '\x12FA', 
		'\x1302', '\a', '\x286', '\x2', '\x2', '\x12FB', '\x12FC', '\a', '\x15A', 
		'\x2', '\x2', '\x12FC', '\x1302', '\a', '\x44C', '\x2', '\x2', '\x12FD', 
		'\x12FE', '\a', '\x1BD', '\x2', '\x2', '\x12FE', '\x1302', '\a', '\x44C', 
		'\x2', '\x2', '\x12FF', '\x1300', '\a', '\x25E', '\x2', '\x2', '\x1300', 
		'\x1302', '\a', '\x44C', '\x2', '\x2', '\x1301', '\x12F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1301', '\x12FA', '\x3', '\x2', '\x2', '\x2', '\x1301', 
		'\x12FB', '\x3', '\x2', '\x2', '\x2', '\x1301', '\x12FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1301', '\x12FF', '\x3', '\x2', '\x2', '\x2', '\x1302', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1303', '\x1304', '\a', '\x1DF', 
		'\x2', '\x2', '\x1304', '\x130C', '\x5', '\x21C', '\x10F', '\x2', '\x1305', 
		'\x1306', '\a', '\x1E2', '\x2', '\x2', '\x1306', '\x130C', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1307', '\x1308', '\a', '\x1DE', '\x2', '\x2', '\x1308', 
		'\x130C', '\x5', '\x21C', '\x10F', '\x2', '\x1309', '\x130A', '\a', '\x1E3', 
		'\x2', '\x2', '\x130A', '\x130C', '\x5', '\x21C', '\x10F', '\x2', '\x130B', 
		'\x1303', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x1305', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x1307', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x1309', '\x3', '\x2', '\x2', '\x2', '\x130C', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '\x130D', '\x130E', '\a', '\x20B', '\x2', '\x2', '\x130E', 
		'\x1315', '\a', '\x194', '\x2', '\x2', '\x130F', '\x1316', '\a', '*', 
		'\x2', '\x2', '\x1310', '\x1316', '\a', '\x1F3', '\x2', '\x2', '\x1311', 
		'\x1312', '\a', 'T', '\x2', '\x2', '\x1312', '\x1313', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1313', '\x1314', '\a', '\x290', '\x2', '\x2', '\x1314', 
		'\x1316', '\x3', '\x2', '\x2', '\x2', '\x1315', '\x130F', '\x3', '\x2', 
		'\x2', '\x2', '\x1315', '\x1310', '\x3', '\x2', '\x2', '\x2', '\x1315', 
		'\x1311', '\x3', '\x2', '\x2', '\x2', '\x1315', '\x1316', '\x3', '\x2', 
		'\x2', '\x2', '\x1316', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1317', 
		'\x1318', '\a', '\x140', '\x2', '\x2', '\x1318', '\x1319', '\t', '@', 
		'\x2', '\x2', '\x1319', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x131A', 
		'\x131F', '\x5', '\x1AA', '\xD6', '\x2', '\x131B', '\x131C', '\a', '\x43D', 
		'\x2', '\x2', '\x131C', '\x131D', '\x5', '\x236', '\x11C', '\x2', '\x131D', 
		'\x131E', '\a', '\x43E', '\x2', '\x2', '\x131E', '\x1320', '\x3', '\x2', 
		'\x2', '\x2', '\x131F', '\x131B', '\x3', '\x2', '\x2', '\x2', '\x131F', 
		'\x1320', '\x3', '\x2', '\x2', '\x2', '\x1320', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1321', '\x1323', '\a', '\b', '\x2', '\x2', '\x1322', 
		'\x1324', '\a', '\x29E', '\x2', '\x2', '\x1323', '\x1322', '\x3', '\x2', 
		'\x2', '\x2', '\x1323', '\x1324', '\x3', '\x2', '\x2', '\x2', '\x1324', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x1325', '\x1327', '\a', '\t', 
		'\x2', '\x2', '\x1326', '\x1328', '\a', '\x297', '\x2', '\x2', '\x1327', 
		'\x1326', '\x3', '\x2', '\x2', '\x2', '\x1327', '\x1328', '\x3', '\x2', 
		'\x2', '\x2', '\x1328', '\x1371', '\x3', '\x2', '\x2', '\x2', '\x1329', 
		'\x1331', '\a', '\"', '\x2', '\x2', '\x132A', '\x132B', '\a', '\x267', 
		'\x2', '\x2', '\x132B', '\x1332', '\a', '\x296', '\x2', '\x2', '\x132C', 
		'\x1332', '\a', '\x297', '\x2', '\x2', '\x132D', '\x1332', '\a', '\x27D', 
		'\x2', '\x2', '\x132E', '\x1332', '\a', '\x277', '\x2', '\x2', '\x132F', 
		'\x1332', '\a', '\x265', '\x2', '\x2', '\x1330', '\x1332', '\a', '\x234', 
		'\x2', '\x2', '\x1331', '\x132A', '\x3', '\x2', '\x2', '\x2', '\x1331', 
		'\x132C', '\x3', '\x2', '\x2', '\x2', '\x1331', '\x132D', '\x3', '\x2', 
		'\x2', '\x2', '\x1331', '\x132E', '\x3', '\x2', '\x2', '\x2', '\x1331', 
		'\x132F', '\x3', '\x2', '\x2', '\x2', '\x1331', '\x1330', '\x3', '\x2', 
		'\x2', '\x2', '\x1331', '\x1332', '\x3', '\x2', '\x2', '\x2', '\x1332', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x1333', '\x1371', '\a', ',', '\x2', 
		'\x2', '\x1334', '\x1336', '\a', '\x33', '\x2', '\x2', '\x1335', '\x1337', 
		'\a', '\x234', '\x2', '\x2', '\x1336', '\x1335', '\x3', '\x2', '\x2', 
		'\x2', '\x1336', '\x1337', '\x3', '\x2', '\x2', '\x2', '\x1337', '\x1371', 
		'\x3', '\x2', '\x2', '\x2', '\x1338', '\x1371', '\a', '\x18F', '\x2', 
		'\x2', '\x1339', '\x1371', '\a', '\x298', '\x2', '\x2', '\x133A', '\x1371', 
		'\a', '\x299', '\x2', '\x2', '\x133B', '\x133C', '\a', 'G', '\x2', '\x2', 
		'\x133C', '\x1371', '\a', 's', '\x2', '\x2', '\x133D', '\x1371', '\a', 
		'O', '\x2', '\x2', '\x133E', '\x1371', '\a', 'S', '\x2', '\x2', '\x133F', 
		'\x1340', '\a', '\x64', '\x2', '\x2', '\x1340', '\x1371', '\a', '\x296', 
		'\x2', '\x2', '\x1341', '\x1371', '\a', '\x29A', '\x2', '\x2', '\x1342', 
		'\x1371', '\a', '\x219', '\x2', '\x2', '\x1343', '\x1371', '\a', '\x82', 
		'\x2', '\x2', '\x1344', '\x1371', '\a', '\x29B', '\x2', '\x2', '\x1345', 
		'\x1346', '\a', '\x22E', '\x2', '\x2', '\x1346', '\x1371', '\t', '\x41', 
		'\x2', '\x2', '\x1347', '\x1371', '\a', '\x92', '\x2', '\x2', '\x1348', 
		'\x1349', '\a', '\x95', '\x2', '\x2', '\x1349', '\x1371', '\t', '\x42', 
		'\x2', '\x2', '\x134A', '\x1371', '\a', '\x29C', '\x2', '\x2', '\x134B', 
		'\x1371', '\a', '\x29D', '\x2', '\x2', '\x134C', '\x1371', '\a', '\xA8', 
		'\x2', '\x2', '\x134D', '\x1371', '\a', '\xAF', '\x2', '\x2', '\x134E', 
		'\x1371', '\a', '\xB0', '\x2', '\x2', '\x134F', '\x1371', '\a', '\x29F', 
		'\x2', '\x2', '\x1350', '\x1371', '\a', '\x2A0', '\x2', '\x2', '\x1351', 
		'\x1371', '\a', '\x2A1', '\x2', '\x2', '\x1352', '\x1371', '\a', '\x2A2', 
		'\x2', '\x2', '\x1353', '\x1371', '\a', '\x2A3', '\x2', '\x2', '\x1354', 
		'\x1371', '\a', '\x2A4', '\x2', '\x2', '\x1355', '\x1371', '\a', '\x2A5', 
		'\x2', '\x2', '\x1356', '\x1371', '\a', '\x2A6', '\x2', '\x2', '\x1357', 
		'\x1371', '\a', '\x2A7', '\x2', '\x2', '\x1358', '\x1371', '\a', '\x2A8', 
		'\x2', '\x2', '\x1359', '\x1371', '\a', '\x2A9', '\x2', '\x2', '\x135A', 
		'\x1371', '\a', '\x2AA', '\x2', '\x2', '\x135B', '\x1371', '\a', '\x2AB', 
		'\x2', '\x2', '\x135C', '\x1371', '\a', '\x2AC', '\x2', '\x2', '\x135D', 
		'\x1371', '\a', '\x2AD', '\x2', '\x2', '\x135E', '\x1371', '\a', '\x2AE', 
		'\x2', '\x2', '\x135F', '\x1371', '\a', '\x2AF', '\x2', '\x2', '\x1360', 
		'\x1371', '\a', '\x2B0', '\x2', '\x2', '\x1361', '\x1371', '\a', '\x2B1', 
		'\x2', '\x2', '\x1362', '\x1371', '\a', '\x2B2', '\x2', '\x2', '\x1363', 
		'\x1371', '\a', '\x2B3', '\x2', '\x2', '\x1364', '\x1371', '\a', '\x2B4', 
		'\x2', '\x2', '\x1365', '\x1371', '\a', '\x2B5', '\x2', '\x2', '\x1366', 
		'\x1371', '\a', '\x2B6', '\x2', '\x2', '\x1367', '\x1371', '\a', '\x2B7', 
		'\x2', '\x2', '\x1368', '\x1371', '\a', '\x2B8', '\x2', '\x2', '\x1369', 
		'\x1371', '\a', '\x2B9', '\x2', '\x2', '\x136A', '\x1371', '\a', '\x2BA', 
		'\x2', '\x2', '\x136B', '\x1371', '\a', '\x406', '\x2', '\x2', '\x136C', 
		'\x1371', '\a', '\x2BB', '\x2', '\x2', '\x136D', '\x1371', '\a', '\x2BC', 
		'\x2', '\x2', '\x136E', '\x1371', '\a', '\x2BD', '\x2', '\x2', '\x136F', 
		'\x1371', '\a', '\x2BE', '\x2', '\x2', '\x1370', '\x1321', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1325', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1329', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1333', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1334', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1338', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1339', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x133A', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x133B', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x133D', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x133E', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x133F', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1341', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1342', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1343', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1344', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1345', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1347', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1348', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x134A', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x134B', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x134C', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x134D', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x134E', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x134F', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1350', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1351', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1352', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1353', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1354', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1355', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1356', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1357', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1358', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1359', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x135A', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x135B', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x135C', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x135D', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x135E', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x135F', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1360', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1361', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1362', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1363', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1364', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1365', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1366', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1367', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x1368', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1369', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x136A', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x136B', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x136C', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x136D', '\x3', '\x2', 
		'\x2', '\x2', '\x1370', '\x136E', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x136F', '\x3', '\x2', '\x2', '\x2', '\x1371', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1372', '\x1383', '\a', '\x42D', '\x2', '\x2', '\x1373', 
		'\x1374', '\a', '\x42D', '\x2', '\x2', '\x1374', '\x1375', '\a', '\x43C', 
		'\x2', '\x2', '\x1375', '\x1383', '\a', '\x42D', '\x2', '\x2', '\x1376', 
		'\x1377', '\x5', '\x216', '\x10C', '\x2', '\x1377', '\x1378', '\a', '\x43C', 
		'\x2', '\x2', '\x1378', '\x1379', '\a', '\x42D', '\x2', '\x2', '\x1379', 
		'\x1383', '\x3', '\x2', '\x2', '\x2', '\x137A', '\x137B', '\x5', '\x216', 
		'\x10C', '\x2', '\x137B', '\x137C', '\a', '\x43C', '\x2', '\x2', '\x137C', 
		'\x137D', '\x5', '\x216', '\x10C', '\x2', '\x137D', '\x1383', '\x3', '\x2', 
		'\x2', '\x2', '\x137E', '\x137F', '\x5', '\x216', '\x10C', '\x2', '\x137F', 
		'\x1380', '\x5', '\x21A', '\x10E', '\x2', '\x1380', '\x1383', '\x3', '\x2', 
		'\x2', '\x2', '\x1381', '\x1383', '\x5', '\x216', '\x10C', '\x2', '\x1382', 
		'\x1372', '\x3', '\x2', '\x2', '\x2', '\x1382', '\x1373', '\x3', '\x2', 
		'\x2', '\x2', '\x1382', '\x1376', '\x3', '\x2', '\x2', '\x2', '\x1382', 
		'\x137A', '\x3', '\x2', '\x2', '\x2', '\x1382', '\x137E', '\x3', '\x2', 
		'\x2', '\x2', '\x1382', '\x1381', '\x3', '\x2', '\x2', '\x2', '\x1383', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1384', '\x1385', '\x5', '\x204', 
		'\x103', '\x2', '\x1385', '\x1386', '\a', '\xA6', '\x2', '\x2', '\x1386', 
		'\x1387', '\x5', '\x204', '\x103', '\x2', '\x1387', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\x1388', '\x138A', '\a', '\v', '\x2', '\x2', '\x1389', 
		'\x138B', '\t', '\x43', '\x2', '\x2', '\x138A', '\x1389', '\x3', '\x2', 
		'\x2', '\x2', '\x138A', '\x138B', '\x3', '\x2', '\x2', '\x2', '\x138B', 
		'\x138C', '\x3', '\x2', '\x2', '\x2', '\x138C', '\x138D', '\a', '\xA3', 
		'\x2', '\x2', '\x138D', '\x139F', '\x5', '\x238', '\x11D', '\x2', '\x138E', 
		'\x138F', '\a', '\xAF', '\x2', '\x2', '\x138F', '\x1390', '\a', 'K', '\x2', 
		'\x2', '\x1390', '\x1391', '\a', 'q', '\x2', '\x2', '\x1391', '\x1396', 
		'\x5', '\x200', '\x101', '\x2', '\x1392', '\x1393', '\a', '\x43F', '\x2', 
		'\x2', '\x1393', '\x1395', '\x5', '\x200', '\x101', '\x2', '\x1394', '\x1392', 
		'\x3', '\x2', '\x2', '\x2', '\x1395', '\x1398', '\x3', '\x2', '\x2', '\x2', 
		'\x1396', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1396', '\x1397', '\x3', 
		'\x2', '\x2', '\x2', '\x1397', '\x139D', '\x3', '\x2', '\x2', '\x2', '\x1398', 
		'\x1396', '\x3', '\x2', '\x2', '\x2', '\x1399', '\x139A', '\a', '\xB7', 
		'\x2', '\x2', '\x139A', '\x139B', '\x5', '\x21C', '\x10F', '\x2', '\x139B', 
		'\x139C', '\a', '\x13', '\x2', '\x2', '\x139C', '\x139E', '\x3', '\x2', 
		'\x2', '\x2', '\x139D', '\x1399', '\x3', '\x2', '\x2', '\x2', '\x139D', 
		'\x139E', '\x3', '\x2', '\x2', '\x2', '\x139E', '\x13A0', '\x3', '\x2', 
		'\x2', '\x2', '\x139F', '\x138E', '\x3', '\x2', '\x2', '\x2', '\x139F', 
		'\x13A0', '\x3', '\x2', '\x2', '\x2', '\x13A0', '\x13AC', '\x3', '\x2', 
		'\x2', '\x2', '\x13A1', '\x13A2', '\a', '\x33', '\x2', '\x2', '\x13A2', 
		'\x13A3', '\a', 'K', '\x2', '\x2', '\x13A3', '\x13A4', '\a', 'q', '\x2', 
		'\x2', '\x13A4', '\x13A9', '\x5', '\x200', '\x101', '\x2', '\x13A5', '\x13A6', 
		'\a', '\x43F', '\x2', '\x2', '\x13A6', '\x13A8', '\x5', '\x200', '\x101', 
		'\x2', '\x13A7', '\x13A5', '\x3', '\x2', '\x2', '\x2', '\x13A8', '\x13AB', 
		'\x3', '\x2', '\x2', '\x2', '\x13A9', '\x13A7', '\x3', '\x2', '\x2', '\x2', 
		'\x13A9', '\x13AA', '\x3', '\x2', '\x2', '\x2', '\x13AA', '\x13AD', '\x3', 
		'\x2', '\x2', '\x2', '\x13AB', '\x13A9', '\x3', '\x2', '\x2', '\x2', '\x13AC', 
		'\x13A1', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x13AD', '\x3', '\x2', 
		'\x2', '\x2', '\x13AD', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x13AE', 
		'\x13AF', '\a', '\x1B', '\x2', '\x2', '\x13AF', '\x13B0', '\a', '\xA3', 
		'\x2', '\x2', '\x13B0', '\x13B4', '\x5', '\x238', '\x11D', '\x2', '\x13B1', 
		'\x13B3', '\x5', '\x1BA', '\xDE', '\x2', '\x13B2', '\x13B1', '\x3', '\x2', 
		'\x2', '\x2', '\x13B3', '\x13B6', '\x3', '\x2', '\x2', '\x2', '\x13B4', 
		'\x13B2', '\x3', '\x2', '\x2', '\x2', '\x13B4', '\x13B5', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x13B6', 
		'\x13B4', '\x3', '\x2', '\x2', '\x2', '\x13B7', '\x13B8', '\a', '\x158', 
		'\x2', '\x2', '\x13B8', '\x13B9', '\a', '\xA3', '\x2', '\x2', '\x13B9', 
		'\x13BB', '\x5', '\x238', '\x11D', '\x2', '\x13BA', '\x13BC', '\t', '\x44', 
		'\x2', '\x2', '\x13BB', '\x13BA', '\x3', '\x2', '\x2', '\x2', '\x13BB', 
		'\x13BC', '\x3', '\x2', '\x2', '\x2', '\x13BC', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', '\x13BD', '\x13BF', '\a', 'r', '\x2', '\x2', '\x13BE', '\x13C0', 
		'\t', '\x43', '\x2', '\x2', '\x13BF', '\x13BE', '\x3', '\x2', '\x2', '\x2', 
		'\x13BF', '\x13C0', '\x3', '\x2', '\x2', '\x2', '\x13C0', '\x13C1', '\x3', 
		'\x2', '\x2', '\x2', '\x13C1', '\x13C2', '\t', '\x45', '\x2', '\x2', '\x13C2', 
		'\x13C3', '\x5', '\x238', '\x11D', '\x2', '\x13C3', '\x1B7', '\x3', '\x2', 
		'\x2', '\x2', '\x13C4', '\x13C6', '\a', '\x226', '\x2', '\x2', '\x13C5', 
		'\x13C7', '\t', '\x43', '\x2', '\x2', '\x13C6', '\x13C5', '\x3', '\x2', 
		'\x2', '\x2', '\x13C6', '\x13C7', '\x3', '\x2', '\x2', '\x2', '\x13C7', 
		'\x13C8', '\x3', '\x2', '\x2', '\x2', '\x13C8', '\x13C9', '\a', '\xA3', 
		'\x2', '\x2', '\x13C9', '\x13CB', '\x5', '\x238', '\x11D', '\x2', '\x13CA', 
		'\x13CC', '\a', '\x21B', '\x2', '\x2', '\x13CB', '\x13CA', '\x3', '\x2', 
		'\x2', '\x2', '\x13CB', '\x13CC', '\x3', '\x2', '\x2', '\x2', '\x13CC', 
		'\x13CE', '\x3', '\x2', '\x2', '\x2', '\x13CD', '\x13CF', '\a', '\x196', 
		'\x2', '\x2', '\x13CE', '\x13CD', '\x3', '\x2', '\x2', '\x2', '\x13CE', 
		'\x13CF', '\x3', '\x2', '\x2', '\x2', '\x13CF', '\x13D1', '\x3', '\x2', 
		'\x2', '\x2', '\x13D0', '\x13D2', '\a', '\x278', '\x2', '\x2', '\x13D1', 
		'\x13D0', '\x3', '\x2', '\x2', '\x2', '\x13D1', '\x13D2', '\x3', '\x2', 
		'\x2', '\x2', '\x13D2', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x13D3', 
		'\x13D4', '\a', '@', '\x2', '\x2', '\x13D4', '\x13DB', '\a', '\x276', 
		'\x2', '\x2', '\x13D5', '\x13DB', '\a', '\x21B', '\x2', '\x2', '\x13D6', 
		'\x13DB', '\a', '\x198', '\x2', '\x2', '\x13D7', '\x13DB', '\a', '\x1E4', 
		'\x2', '\x2', '\x13D8', '\x13DB', '\a', '\x196', '\x2', '\x2', '\x13D9', 
		'\x13DB', '\a', '\x156', '\x2', '\x2', '\x13DA', '\x13D3', '\x3', '\x2', 
		'\x2', '\x2', '\x13DA', '\x13D5', '\x3', '\x2', '\x2', '\x2', '\x13DA', 
		'\x13D6', '\x3', '\x2', '\x2', '\x2', '\x13DA', '\x13D7', '\x3', '\x2', 
		'\x2', '\x2', '\x13DA', '\x13D8', '\x3', '\x2', '\x2', '\x2', '\x13DA', 
		'\x13D9', '\x3', '\x2', '\x2', '\x2', '\x13DB', '\x1BB', '\x3', '\x2', 
		'\x2', '\x2', '\x13DC', '\x13DE', '\a', '\"', '\x2', '\x2', '\x13DD', 
		'\x13DF', '\a', '\x143', '\x2', '\x2', '\x13DE', '\x13DD', '\x3', '\x2', 
		'\x2', '\x2', '\x13DE', '\x13DF', '\x3', '\x2', '\x2', '\x2', '\x13DF', 
		'\x13E0', '\x3', '\x2', '\x2', '\x2', '\x13E0', '\x13E1', '\a', '\x1A4', 
		'\x2', '\x2', '\x13E1', '\x13E2', '\x5', '\x216', '\x10C', '\x2', '\x13E2', 
		'\x13E3', '\a', '\x233', '\x2', '\x2', '\x13E3', '\x13E4', '\t', '\x46', 
		'\x2', '\x2', '\x13E4', '\x13E5', '\a', '\x249', '\x2', '\x2', '\x13E5', 
		'\x13E6', '\a', '\x44C', '\x2', '\x2', '\x13E6', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x13E7', '\x13E8', '\a', '\x1B5', '\x2', '\x2', '\x13E8', 
		'\x13E9', '\a', '\x20D', '\x2', '\x2', '\x13E9', '\x13EA', '\x5', '\x216', 
		'\x10C', '\x2', '\x13EA', '\x13EB', '\a', '\x249', '\x2', '\x2', '\x13EB', 
		'\x13EC', '\a', '\x44C', '\x2', '\x2', '\x13EC', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', '\x13ED', '\x13EE', '\a', '\x273', '\x2', '\x2', '\x13EE', 
		'\x13EF', '\a', '\x20D', '\x2', '\x2', '\x13EF', '\x13F0', '\x5', '\x216', 
		'\x10C', '\x2', '\x13F0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x13F1', 
		'\x13F2', '\a', '\x93', '\x2', '\x2', '\x13F2', '\x13F3', '\x5', '\x1C6', 
		'\xE4', '\x2', '\x13F3', '\x13F4', '\t', 'G', '\x2', '\x2', '\x13F4', 
		'\x13FC', '\x5', '\x278', '\x13D', '\x2', '\x13F5', '\x13F6', '\a', '\x43F', 
		'\x2', '\x2', '\x13F6', '\x13F7', '\x5', '\x1C6', '\xE4', '\x2', '\x13F7', 
		'\x13F8', '\t', 'G', '\x2', '\x2', '\x13F8', '\x13F9', '\x5', '\x278', 
		'\x13D', '\x2', '\x13F9', '\x13FB', '\x3', '\x2', '\x2', '\x2', '\x13FA', 
		'\x13F5', '\x3', '\x2', '\x2', '\x2', '\x13FB', '\x13FE', '\x3', '\x2', 
		'\x2', '\x2', '\x13FC', '\x13FA', '\x3', '\x2', '\x2', '\x2', '\x13FC', 
		'\x13FD', '\x3', '\x2', '\x2', '\x2', '\x13FD', '\x1425', '\x3', '\x2', 
		'\x2', '\x2', '\x13FE', '\x13FC', '\x3', '\x2', '\x2', '\x2', '\x13FF', 
		'\x1403', '\a', '\x93', '\x2', '\x2', '\x1400', '\x1401', '\a', '\x1A', 
		'\x2', '\x2', '\x1401', '\x1404', '\a', '\x93', '\x2', '\x2', '\x1402', 
		'\x1404', '\a', '\x31D', '\x2', '\x2', '\x1403', '\x1400', '\x3', '\x2', 
		'\x2', '\x2', '\x1403', '\x1402', '\x3', '\x2', '\x2', '\x2', '\x1404', 
		'\x1407', '\x3', '\x2', '\x2', '\x2', '\x1405', '\x1408', '\x5', '\x208', 
		'\x105', '\x2', '\x1406', '\x1408', '\a', '*', '\x2', '\x2', '\x1407', 
		'\x1405', '\x3', '\x2', '\x2', '\x2', '\x1407', '\x1406', '\x3', '\x2', 
		'\x2', '\x2', '\x1408', '\x1425', '\x3', '\x2', '\x2', '\x2', '\x1409', 
		'\x140A', '\a', '\x93', '\x2', '\x2', '\x140A', '\x1411', '\a', '\x1F1', 
		'\x2', '\x2', '\x140B', '\x140E', '\x5', '\x208', '\x105', '\x2', '\x140C', 
		'\x140D', '\a', '\x1C', '\x2', '\x2', '\x140D', '\x140F', '\x5', '\x20A', 
		'\x106', '\x2', '\x140E', '\x140C', '\x3', '\x2', '\x2', '\x2', '\x140E', 
		'\x140F', '\x3', '\x2', '\x2', '\x2', '\x140F', '\x1412', '\x3', '\x2', 
		'\x2', '\x2', '\x1410', '\x1412', '\a', '*', '\x2', '\x2', '\x1411', '\x140B', 
		'\x3', '\x2', '\x2', '\x2', '\x1411', '\x1410', '\x3', '\x2', '\x2', '\x2', 
		'\x1412', '\x1425', '\x3', '\x2', '\x2', '\x2', '\x1413', '\x1425', '\x5', 
		'\x19A', '\xCE', '\x2', '\x1414', '\x1425', '\x5', '\x11C', '\x8F', '\x2', 
		'\x1415', '\x1425', '\x5', '\x11A', '\x8E', '\x2', '\x1416', '\x1417', 
		'\a', '\x93', '\x2', '\x2', '\x1417', '\x1418', '\x5', '\x1FC', '\xFF', 
		'\x2', '\x1418', '\x1419', '\t', 'G', '\x2', '\x2', '\x1419', '\x1421', 
		'\x5', '\x278', '\x13D', '\x2', '\x141A', '\x141B', '\a', '\x43F', '\x2', 
		'\x2', '\x141B', '\x141C', '\x5', '\x1FC', '\xFF', '\x2', '\x141C', '\x141D', 
		'\t', 'G', '\x2', '\x2', '\x141D', '\x141E', '\x5', '\x278', '\x13D', 
		'\x2', '\x141E', '\x1420', '\x3', '\x2', '\x2', '\x2', '\x141F', '\x141A', 
		'\x3', '\x2', '\x2', '\x2', '\x1420', '\x1423', '\x3', '\x2', '\x2', '\x2', 
		'\x1421', '\x141F', '\x3', '\x2', '\x2', '\x2', '\x1421', '\x1422', '\x3', 
		'\x2', '\x2', '\x2', '\x1422', '\x1425', '\x3', '\x2', '\x2', '\x2', '\x1423', 
		'\x1421', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x13F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1424', '\x13FF', '\x3', '\x2', '\x2', '\x2', '\x1424', 
		'\x1409', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x1413', '\x3', '\x2', 
		'\x2', '\x2', '\x1424', '\x1414', '\x3', '\x2', '\x2', '\x2', '\x1424', 
		'\x1415', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x1416', '\x3', '\x2', 
		'\x2', '\x2', '\x1425', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1426', 
		'\x1427', '\a', '\x95', '\x2', '\x2', '\x1427', '\x1428', '\t', '\x35', 
		'\x2', '\x2', '\x1428', '\x14BE', '\a', '\x1C8', '\x2', '\x2', '\x1429', 
		'\x142A', '\a', '\x95', '\x2', '\x2', '\x142A', '\x142B', '\t', 'H', '\x2', 
		'\x2', '\x142B', '\x142E', '\a', '\x190', '\x2', '\x2', '\x142C', '\x142D', 
		'\a', 'N', '\x2', '\x2', '\x142D', '\x142F', '\a', '\x44C', '\x2', '\x2', 
		'\x142E', '\x142C', '\x3', '\x2', '\x2', '\x2', '\x142E', '\x142F', '\x3', 
		'\x2', '\x2', '\x2', '\x142F', '\x1432', '\x3', '\x2', '\x2', '\x2', '\x1430', 
		'\x1431', '\a', '\x43', '\x2', '\x2', '\x1431', '\x1433', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1432', '\x1430', '\x3', '\x2', '\x2', '\x2', '\x1432', 
		'\x1433', '\x3', '\x2', '\x2', '\x2', '\x1433', '\x143B', '\x3', '\x2', 
		'\x2', '\x2', '\x1434', '\x1438', '\a', '`', '\x2', '\x2', '\x1435', '\x1436', 
		'\x5', '\x21C', '\x10F', '\x2', '\x1436', '\x1437', '\a', '\x43F', '\x2', 
		'\x2', '\x1437', '\x1439', '\x3', '\x2', '\x2', '\x2', '\x1438', '\x1435', 
		'\x3', '\x2', '\x2', '\x2', '\x1438', '\x1439', '\x3', '\x2', '\x2', '\x2', 
		'\x1439', '\x143A', '\x3', '\x2', '\x2', '\x2', '\x143A', '\x143C', '\x5', 
		'\x21C', '\x10F', '\x2', '\x143B', '\x1434', '\x3', '\x2', '\x2', '\x2', 
		'\x143B', '\x143C', '\x3', '\x2', '\x2', '\x2', '\x143C', '\x14BE', '\x3', 
		'\x2', '\x2', '\x2', '\x143D', '\x143E', '\a', '\x95', '\x2', '\x2', '\x143E', 
		'\x1440', '\x5', '\x1C8', '\xE5', '\x2', '\x143F', '\x1441', '\x5', '\x1CA', 
		'\xE6', '\x2', '\x1440', '\x143F', '\x3', '\x2', '\x2', '\x2', '\x1440', 
		'\x1441', '\x3', '\x2', '\x2', '\x2', '\x1441', '\x14BE', '\x3', '\x2', 
		'\x2', '\x2', '\x1442', '\x1444', '\a', '\x95', '\x2', '\x2', '\x1443', 
		'\x1445', '\a', '\x1A3', '\x2', '\x2', '\x1444', '\x1443', '\x3', '\x2', 
		'\x2', '\x2', '\x1444', '\x1445', '\x3', '\x2', '\x2', '\x2', '\x1445', 
		'\x1446', '\x3', '\x2', '\x2', '\x2', '\x1446', '\x1447', '\t', '\'', 
		'\x2', '\x2', '\x1447', '\x1448', '\t', 'I', '\x2', '\x2', '\x1448', '\x144B', 
		'\x5', '\x1FE', '\x100', '\x2', '\x1449', '\x144A', '\t', 'I', '\x2', 
		'\x2', '\x144A', '\x144C', '\x5', '\x216', '\x10C', '\x2', '\x144B', '\x1449', 
		'\x3', '\x2', '\x2', '\x2', '\x144B', '\x144C', '\x3', '\x2', '\x2', '\x2', 
		'\x144C', '\x144E', '\x3', '\x2', '\x2', '\x2', '\x144D', '\x144F', '\x5', 
		'\x1CA', '\xE6', '\x2', '\x144E', '\x144D', '\x3', '\x2', '\x2', '\x2', 
		'\x144E', '\x144F', '\x3', '\x2', '\x2', '\x2', '\x144F', '\x14BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1450', '\x1451', '\a', '\x95', '\x2', '\x2', '\x1451', 
		'\x1452', '\a', '\"', '\x2', '\x2', '\x1452', '\x1454', '\t', '\x2', '\x2', 
		'\x2', '\x1453', '\x1455', '\x5', '\x24E', '\x128', '\x2', '\x1454', '\x1453', 
		'\x3', '\x2', '\x2', '\x2', '\x1454', '\x1455', '\x3', '\x2', '\x2', '\x2', 
		'\x1455', '\x1456', '\x3', '\x2', '\x2', '\x2', '\x1456', '\x14BE', '\x5', 
		'\x216', '\x10C', '\x2', '\x1457', '\x1458', '\a', '\x95', '\x2', '\x2', 
		'\x1458', '\x1459', '\a', '\"', '\x2', '\x2', '\x1459', '\x145A', '\t', 
		'J', '\x2', '\x2', '\x145A', '\x14BE', '\x5', '\x1FC', '\xFF', '\x2', 
		'\x145B', '\x145C', '\a', '\x95', '\x2', '\x2', '\x145C', '\x145D', '\a', 
		'\"', '\x2', '\x2', '\x145D', '\x145E', '\a', '\x277', '\x2', '\x2', '\x145E', 
		'\x14BE', '\x5', '\x204', '\x103', '\x2', '\x145F', '\x1460', '\a', '\x95', 
		'\x2', '\x2', '\x1460', '\x1461', '\a', '\x189', '\x2', '\x2', '\x1461', 
		'\x1462', '\x5', '\x20C', '\x107', '\x2', '\x1462', '\x1463', '\t', 'K', 
		'\x2', '\x2', '\x1463', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x1464', 
		'\x1465', '\a', '\x95', '\x2', '\x2', '\x1465', '\x14BE', '\x5', '\x1CC', 
		'\xE7', '\x2', '\x1466', '\x1467', '\a', '\x95', '\x2', '\x2', '\x1467', 
		'\x1468', '\t', 'L', '\x2', '\x2', '\x1468', '\x146C', '\a', '`', '\x2', 
		'\x2', '\x1469', '\x146A', '\x5', '\x21C', '\x10F', '\x2', '\x146A', '\x146B', 
		'\a', '\x43F', '\x2', '\x2', '\x146B', '\x146D', '\x3', '\x2', '\x2', 
		'\x2', '\x146C', '\x1469', '\x3', '\x2', '\x2', '\x2', '\x146C', '\x146D', 
		'\x3', '\x2', '\x2', '\x2', '\x146D', '\x146E', '\x3', '\x2', '\x2', '\x2', 
		'\x146E', '\x14BE', '\x5', '\x21C', '\x10F', '\x2', '\x146F', '\x1470', 
		'\a', '\x95', '\x2', '\x2', '\x1470', '\x1471', '\a', '\x116', '\x2', 
		'\x2', '\x1471', '\x1472', '\a', '\x43D', '\x2', '\x2', '\x1472', '\x1473', 
		'\a', '\x42D', '\x2', '\x2', '\x1473', '\x1474', '\a', '\x43E', '\x2', 
		'\x2', '\x1474', '\x14BE', '\t', 'L', '\x2', '\x2', '\x1475', '\x1476', 
		'\a', '\x95', '\x2', '\x2', '\x1476', '\x1479', '\x5', '\x1CE', '\xE8', 
		'\x2', '\x1477', '\x1478', '\t', 'I', '\x2', '\x2', '\x1478', '\x147A', 
		'\x5', '\x216', '\x10C', '\x2', '\x1479', '\x1477', '\x3', '\x2', '\x2', 
		'\x2', '\x1479', '\x147A', '\x3', '\x2', '\x2', '\x2', '\x147A', '\x147C', 
		'\x3', '\x2', '\x2', '\x2', '\x147B', '\x147D', '\x5', '\x1CA', '\xE6', 
		'\x2', '\x147C', '\x147B', '\x3', '\x2', '\x2', '\x2', '\x147C', '\x147D', 
		'\x3', '\x2', '\x2', '\x2', '\x147D', '\x14BE', '\x3', '\x2', '\x2', '\x2', 
		'\x147E', '\x147F', '\a', '\x95', '\x2', '\x2', '\x147F', '\x1480', '\t', 
		'M', '\x2', '\x2', '\x1480', '\x1481', '\a', '\x15F', '\x2', '\x2', '\x1481', 
		'\x14BE', '\x5', '\x1FC', '\xFF', '\x2', '\x1482', '\x1483', '\a', '\x95', 
		'\x2', '\x2', '\x1483', '\x1486', '\a', '\x1A7', '\x2', '\x2', '\x1484', 
		'\x1485', '\a', '@', '\x2', '\x2', '\x1485', '\x1487', '\x5', '\x204', 
		'\x103', '\x2', '\x1486', '\x1484', '\x3', '\x2', '\x2', '\x2', '\x1486', 
		'\x1487', '\x3', '\x2', '\x2', '\x2', '\x1487', '\x14BE', '\x3', '\x2', 
		'\x2', '\x2', '\x1488', '\x1489', '\a', '\x95', '\x2', '\x2', '\x1489', 
		'\x148A', '\t', 'N', '\x2', '\x2', '\x148A', '\x148B', '\t', 'I', '\x2', 
		'\x2', '\x148B', '\x148E', '\x5', '\x1FE', '\x100', '\x2', '\x148C', '\x148D', 
		'\t', 'I', '\x2', '\x2', '\x148D', '\x148F', '\x5', '\x216', '\x10C', 
		'\x2', '\x148E', '\x148C', '\x3', '\x2', '\x2', '\x2', '\x148E', '\x148F', 
		'\x3', '\x2', '\x2', '\x2', '\x148F', '\x1492', '\x3', '\x2', '\x2', '\x2', 
		'\x1490', '\x1491', '\a', '\xB5', '\x2', '\x2', '\x1491', '\x1493', '\x5', 
		'\x278', '\x13D', '\x2', '\x1492', '\x1490', '\x3', '\x2', '\x2', '\x2', 
		'\x1492', '\x1493', '\x3', '\x2', '\x2', '\x2', '\x1493', '\x14BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1494', '\x1495', '\a', '\x95', '\x2', '\x2', '\x1495', 
		'\x1496', '\a', '\x201', '\x2', '\x2', '\x1496', '\x1499', '\a', '\x296', 
		'\x2', '\x2', '\x1497', '\x1498', '\t', 'I', '\x2', '\x2', '\x1498', '\x149A', 
		'\x5', '\x216', '\x10C', '\x2', '\x1499', '\x1497', '\x3', '\x2', '\x2', 
		'\x2', '\x1499', '\x149A', '\x3', '\x2', '\x2', '\x2', '\x149A', '\x149C', 
		'\x3', '\x2', '\x2', '\x2', '\x149B', '\x149D', '\x5', '\x1CA', '\xE6', 
		'\x2', '\x149C', '\x149B', '\x3', '\x2', '\x2', '\x2', '\x149C', '\x149D', 
		'\x3', '\x2', '\x2', '\x2', '\x149D', '\x14BE', '\x3', '\x2', '\x2', '\x2', 
		'\x149E', '\x149F', '\a', '\x95', '\x2', '\x2', '\x149F', '\x14A0', '\a', 
		'\x217', '\x2', '\x2', '\x14A0', '\x14A5', '\x5', '\x1D0', '\xE9', '\x2', 
		'\x14A1', '\x14A2', '\a', '\x43F', '\x2', '\x2', '\x14A2', '\x14A4', '\x5', 
		'\x1D0', '\xE9', '\x2', '\x14A3', '\x14A1', '\x3', '\x2', '\x2', '\x2', 
		'\x14A4', '\x14A7', '\x3', '\x2', '\x2', '\x2', '\x14A5', '\x14A3', '\x3', 
		'\x2', '\x2', '\x2', '\x14A5', '\x14A6', '\x3', '\x2', '\x2', '\x2', '\x14A6', 
		'\x14AB', '\x3', '\x2', '\x2', '\x2', '\x14A7', '\x14A5', '\x3', '\x2', 
		'\x2', '\x2', '\x14A8', '\x14A9', '\a', '@', '\x2', '\x2', '\x14A9', '\x14AA', 
		'\a', '\x21A', '\x2', '\x2', '\x14AA', '\x14AC', '\x5', '\x21C', '\x10F', 
		'\x2', '\x14AB', '\x14A8', '\x3', '\x2', '\x2', '\x2', '\x14AB', '\x14AC', 
		'\x3', '\x2', '\x2', '\x2', '\x14AC', '\x14AD', '\x3', '\x2', '\x2', '\x2', 
		'\x14AD', '\x14B1', '\a', '`', '\x2', '\x2', '\x14AE', '\x14AF', '\x5', 
		'\x21C', '\x10F', '\x2', '\x14AF', '\x14B0', '\a', '\x43F', '\x2', '\x2', 
		'\x14B0', '\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B1', '\x14AE', '\x3', 
		'\x2', '\x2', '\x2', '\x14B1', '\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B2', 
		'\x14B3', '\x3', '\x2', '\x2', '\x2', '\x14B3', '\x14B4', '\x5', '\x21C', 
		'\x10F', '\x2', '\x14B4', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14B5', 
		'\x14B6', '\a', '\x95', '\x2', '\x2', '\x14B6', '\x14B7', '\a', '\x244', 
		'\x2', '\x2', '\x14B7', '\x14BB', '\a', '\x258', '\x2', '\x2', '\x14B8', 
		'\x14B9', '\a', '@', '\x2', '\x2', '\x14B9', '\x14BA', '\a', '\x157', 
		'\x2', '\x2', '\x14BA', '\x14BC', '\a', '\x44C', '\x2', '\x2', '\x14BB', 
		'\x14B8', '\x3', '\x2', '\x2', '\x2', '\x14BB', '\x14BC', '\x3', '\x2', 
		'\x2', '\x2', '\x14BC', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x1429', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x143D', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x1442', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x1450', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x1457', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x145B', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x145F', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x1464', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x1466', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x146F', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x1475', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x147E', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x1482', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x1488', '\x3', '\x2', '\x2', '\x2', '\x14BD', 
		'\x1494', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x149E', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x14B5', '\x3', '\x2', '\x2', '\x2', '\x14BE', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x14BF', '\x14CA', '\a', '\x458', 
		'\x2', '\x2', '\x14C0', '\x14CA', '\a', '\x459', '\x2', '\x2', '\x14C1', 
		'\x14C2', '\a', '\x441', '\x2', '\x2', '\x14C2', '\x14C4', '\a', '\x441', 
		'\x2', '\x2', '\x14C3', '\x14C1', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x14C5', '\x3', '\x2', 
		'\x2', '\x2', '\x14C5', '\x14C7', '\t', 'O', '\x2', '\x2', '\x14C6', '\x14C3', 
		'\x3', '\x2', '\x2', '\x2', '\x14C6', '\x14C7', '\x3', '\x2', '\x2', '\x2', 
		'\x14C7', '\x14C8', '\x3', '\x2', '\x2', '\x2', '\x14C8', '\x14CA', '\x5', 
		'\x216', '\x10C', '\x2', '\x14C9', '\x14BF', '\x3', '\x2', '\x2', '\x2', 
		'\x14C9', '\x14C0', '\x3', '\x2', '\x2', '\x2', '\x14C9', '\x14C6', '\x3', 
		'\x2', '\x2', '\x2', '\x14CA', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x14CB', 
		'\x14CC', '\a', '\x1A', '\x2', '\x2', '\x14CC', '\x14D9', '\a', '\x93', 
		'\x2', '\x2', '\x14CD', '\x14D9', '\a', '\x320', '\x2', '\x2', '\x14CE', 
		'\x14D9', '\a', '(', '\x2', '\x2', '\x14CF', '\x14D9', '\a', '\x91', '\x2', 
		'\x2', '\x14D0', '\x14D1', '\a', '\x1A4', '\x2', '\x2', '\x14D1', '\x14D9', 
		'\a', '\x258', '\x2', '\x2', '\x14D2', '\x14D3', '\a', '}', '\x2', '\x2', 
		'\x14D3', '\x14D9', '\a', '\x258', '\x2', '\x2', '\x14D4', '\x14D6', '\t', 
		'\x34', '\x2', '\x2', '\x14D5', '\x14D4', '\x3', '\x2', '\x2', '\x2', 
		'\x14D5', '\x14D6', '\x3', '\x2', '\x2', '\x2', '\x14D6', '\x14D7', '\x3', 
		'\x2', '\x2', '\x2', '\x14D7', '\x14D9', '\t', 'P', '\x2', '\x2', '\x14D8', 
		'\x14CB', '\x3', '\x2', '\x2', '\x2', '\x14D8', '\x14CD', '\x3', '\x2', 
		'\x2', '\x2', '\x14D8', '\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14D8', 
		'\x14CF', '\x3', '\x2', '\x2', '\x2', '\x14D8', '\x14D0', '\x3', '\x2', 
		'\x2', '\x2', '\x14D8', '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14D8', 
		'\x14D5', '\x3', '\x2', '\x2', '\x2', '\x14D9', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', '\x14DA', '\x14DB', '\a', '_', '\x2', '\x2', '\x14DB', '\x14DF', 
		'\a', '\x44C', '\x2', '\x2', '\x14DC', '\x14DD', '\a', '\xB5', '\x2', 
		'\x2', '\x14DD', '\x14DF', '\x5', '\x278', '\x13D', '\x2', '\x14DE', '\x14DA', 
		'\x3', '\x2', '\x2', '\x2', '\x14DE', '\x14DC', '\x3', '\x2', '\x2', '\x2', 
		'\x14DF', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x14E0', '\x14E2', '\a', 
		'\x25A', '\x2', '\x2', '\x14E1', '\x14E0', '\x3', '\x2', '\x2', '\x2', 
		'\x14E1', '\x14E2', '\x3', '\x2', '\x2', '\x2', '\x14E2', '\x14E3', '\x3', 
		'\x2', '\x2', '\x2', '\x14E3', '\x14F2', '\a', '\x18A', '\x2', '\x2', 
		'\x14E4', '\x14E5', '\a', '\x1C9', '\x2', '\x2', '\x14E5', '\x14F2', '\a', 
		'\x258', '\x2', '\x2', '\x14E6', '\x14F2', '\a', '\x20F', '\x2', '\x2', 
		'\x14E7', '\x14F2', '\a', '\x29E', '\x2', '\x2', '\x14E8', '\x14EA', '\a', 
		'\x1A3', '\x2', '\x2', '\x14E9', '\x14E8', '\x3', '\x2', '\x2', '\x2', 
		'\x14E9', '\x14EA', '\x3', '\x2', '\x2', '\x2', '\x14EA', '\x14EB', '\x3', 
		'\x2', '\x2', '\x2', '\x14EB', '\x14F2', '\a', '\x216', '\x2', '\x2', 
		'\x14EC', '\x14F2', '\a', '\x218', '\x2', '\x2', '\x14ED', '\x14EE', '\a', 
		'\x244', '\x2', '\x2', '\x14EE', '\x14F2', '\a', '\x1AD', '\x2', '\x2', 
		'\x14EF', '\x14F2', '\a', '\x147', '\x2', '\x2', '\x14F0', '\x14F2', '\a', 
		'\x172', '\x2', '\x2', '\x14F1', '\x14E1', '\x3', '\x2', '\x2', '\x2', 
		'\x14F1', '\x14E4', '\x3', '\x2', '\x2', '\x2', '\x14F1', '\x14E6', '\x3', 
		'\x2', '\x2', '\x2', '\x14F1', '\x14E7', '\x3', '\x2', '\x2', '\x2', '\x14F1', 
		'\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14F1', '\x14EC', '\x3', '\x2', 
		'\x2', '\x2', '\x14F1', '\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14F1', 
		'\x14EF', '\x3', '\x2', '\x2', '\x2', '\x14F1', '\x14F0', '\x3', '\x2', 
		'\x2', '\x2', '\x14F2', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x14F3', 
		'\x14FC', '\a', '\x190', '\x2', '\x2', '\x14F4', '\x14F5', '\a', '\xA3', 
		'\x2', '\x2', '\x14F5', '\x14FC', '\a', '\x258', '\x2', '\x2', '\x14F6', 
		'\x14F8', '\a', '\x1A3', '\x2', '\x2', '\x14F7', '\x14F6', '\x3', '\x2', 
		'\x2', '\x2', '\x14F7', '\x14F8', '\x3', '\x2', '\x2', '\x2', '\x14F8', 
		'\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14F9', '\x14FC', '\a', '\x296', 
		'\x2', '\x2', '\x14FA', '\x14FC', '\a', '\x26D', '\x2', '\x2', '\x14FB', 
		'\x14F3', '\x3', '\x2', '\x2', '\x2', '\x14FB', '\x14F4', '\x3', '\x2', 
		'\x2', '\x2', '\x14FB', '\x14F7', '\x3', '\x2', '\x2', '\x2', '\x14FB', 
		'\x14FA', '\x3', '\x2', '\x2', '\x2', '\x14FC', '\x1CF', '\x3', '\x2', 
		'\x2', '\x2', '\x14FD', '\x150A', '\a', '\b', '\x2', '\x2', '\x14FE', 
		'\x14FF', '\a', '\x14F', '\x2', '\x2', '\x14FF', '\x150A', '\a', '\x1B9', 
		'\x2', '\x2', '\x1500', '\x1501', '\a', '\x171', '\x2', '\x2', '\x1501', 
		'\x150A', '\a', '\x263', '\x2', '\x2', '\x1502', '\x150A', '\a', '\x174', 
		'\x2', '\x2', '\x1503', '\x150A', '\a', '\x1BB', '\x2', '\x2', '\x1504', 
		'\x150A', '\a', '\x2EC', '\x2', '\x2', '\x1505', '\x1506', '\a', '\x206', 
		'\x2', '\x2', '\x1506', '\x150A', '\a', '\x199', '\x2', '\x2', '\x1507', 
		'\x150A', '\a', '\x24B', '\x2', '\x2', '\x1508', '\x150A', '\a', '\x262', 
		'\x2', '\x2', '\x1509', '\x14FD', '\x3', '\x2', '\x2', '\x2', '\x1509', 
		'\x14FE', '\x3', '\x2', '\x2', '\x2', '\x1509', '\x1500', '\x3', '\x2', 
		'\x2', '\x2', '\x1509', '\x1502', '\x3', '\x2', '\x2', '\x2', '\x1509', 
		'\x1503', '\x3', '\x2', '\x2', '\x2', '\x1509', '\x1504', '\x3', '\x2', 
		'\x2', '\x2', '\x1509', '\x1505', '\x3', '\x2', '\x2', '\x2', '\x1509', 
		'\x1507', '\x3', '\x2', '\x2', '\x2', '\x1509', '\x1508', '\x3', '\x2', 
		'\x2', '\x2', '\x150A', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x150B', 
		'\x150C', '\a', '\x14D', '\x2', '\x2', '\x150C', '\x150D', '\a', '\x44C', 
		'\x2', '\x2', '\x150D', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x150E', 
		'\x150F', '\a', '\x153', '\x2', '\x2', '\x150F', '\x1510', '\a', 'O', 
		'\x2', '\x2', '\x1510', '\x1515', '\x5', '\x1E0', '\xF1', '\x2', '\x1511', 
		'\x1512', '\a', '\x43F', '\x2', '\x2', '\x1512', '\x1514', '\x5', '\x1E0', 
		'\xF1', '\x2', '\x1513', '\x1511', '\x3', '\x2', '\x2', '\x2', '\x1514', 
		'\x1517', '\x3', '\x2', '\x2', '\x2', '\x1515', '\x1513', '\x3', '\x2', 
		'\x2', '\x2', '\x1515', '\x1516', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x151F', '\x3', '\x2', '\x2', '\x2', '\x1517', '\x1515', '\x3', '\x2', 
		'\x2', '\x2', '\x1518', '\x1519', '\a', '{', '\x2', '\x2', '\x1519', '\x151C', 
		'\a', '\x43D', '\x2', '\x2', '\x151A', '\x151D', '\x5', '\x236', '\x11C', 
		'\x2', '\x151B', '\x151D', '\a', '\b', '\x2', '\x2', '\x151C', '\x151A', 
		'\x3', '\x2', '\x2', '\x2', '\x151C', '\x151B', '\x3', '\x2', '\x2', '\x2', 
		'\x151D', '\x151E', '\x3', '\x2', '\x2', '\x2', '\x151E', '\x1520', '\a', 
		'\x43E', '\x2', '\x2', '\x151F', '\x1518', '\x3', '\x2', '\x2', '\x2', 
		'\x151F', '\x1520', '\x3', '\x2', '\x2', '\x2', '\x1520', '\x1521', '\x3', 
		'\x2', '\x2', '\x2', '\x1521', '\x1522', '\a', 'N', '\x2', '\x2', '\x1522', 
		'\x1523', '\x5', '\x216', '\x10C', '\x2', '\x1523', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1524', '\x1526', '\a', '\x19F', '\x2', '\x2', '\x1525', 
		'\x1527', '\t', '\x43', '\x2', '\x2', '\x1526', '\x1525', '\x3', '\x2', 
		'\x2', '\x2', '\x1526', '\x1527', '\x3', '\x2', '\x2', '\x2', '\x1527', 
		'\x1528', '\x3', '\x2', '\x2', '\x2', '\x1528', '\x152D', '\x5', '\x1E2', 
		'\xF2', '\x2', '\x1529', '\x152A', '\a', '\x43F', '\x2', '\x2', '\x152A', 
		'\x152C', '\x5', '\x1E2', '\xF2', '\x2', '\x152B', '\x1529', '\x3', '\x2', 
		'\x2', '\x2', '\x152C', '\x152F', '\x3', '\x2', '\x2', '\x2', '\x152D', 
		'\x152B', '\x3', '\x2', '\x2', '\x2', '\x152D', '\x152E', '\x3', '\x2', 
		'\x2', '\x2', '\x152E', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x152F', 
		'\x152D', '\x3', '\x2', '\x2', '\x2', '\x1530', '\x1532', '\a', '[', '\x2', 
		'\x2', '\x1531', '\x1533', '\t', 'Q', '\x2', '\x2', '\x1532', '\x1531', 
		'\x3', '\x2', '\x2', '\x2', '\x1532', '\x1533', '\x3', '\x2', '\x2', '\x2', 
		'\x1533', '\x1535', '\x3', '\x2', '\x2', '\x2', '\x1534', '\x1536', '\x5', 
		'\x21C', '\x10F', '\x2', '\x1535', '\x1534', '\x3', '\x2', '\x2', '\x2', 
		'\x1536', '\x1537', '\x3', '\x2', '\x2', '\x2', '\x1537', '\x1535', '\x3', 
		'\x2', '\x2', '\x2', '\x1537', '\x1538', '\x3', '\x2', '\x2', '\x2', '\x1538', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1539', '\x153A', '\a', '\x63', 
		'\x2', '\x2', '\x153A', '\x153B', '\a', 'O', '\x2', '\x2', '\x153B', '\x153C', 
		'\a', 'U', '\x2', '\x2', '\x153C', '\x153D', '\a', '\x153', '\x2', '\x2', 
		'\x153D', '\x1542', '\x5', '\x1E6', '\xF4', '\x2', '\x153E', '\x153F', 
		'\a', '\x43F', '\x2', '\x2', '\x153F', '\x1541', '\x5', '\x1E6', '\xF4', 
		'\x2', '\x1540', '\x153E', '\x3', '\x2', '\x2', '\x2', '\x1541', '\x1544', 
		'\x3', '\x2', '\x2', '\x2', '\x1542', '\x1540', '\x3', '\x2', '\x2', '\x2', 
		'\x1542', '\x1543', '\x3', '\x2', '\x2', '\x2', '\x1543', '\x1DB', '\x3', 
		'\x2', '\x2', '\x2', '\x1544', '\x1542', '\x3', '\x2', '\x2', '\x2', '\x1545', 
		'\x1546', '\a', '\x22F', '\x2', '\x2', '\x1546', '\x1547', '\a', '\x21A', 
		'\x2', '\x2', '\x1547', '\x1548', '\a', '\x153', '\x2', '\x2', '\x1548', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1549', '\x154A', '\a', '\x29C', 
		'\x2', '\x2', '\x154A', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x154B', 
		'\x1553', '\x5', '\x1FE', '\x100', '\x2', '\x154C', '\x154E', '\t', '\x14', 
		'\x2', '\x2', '\x154D', '\x154C', '\x3', '\x2', '\x2', '\x2', '\x154D', 
		'\x154E', '\x3', '\x2', '\x2', '\x2', '\x154E', '\x154F', '\x3', '\x2', 
		'\x2', '\x2', '\x154F', '\x1550', '\a', '\x43D', '\x2', '\x2', '\x1550', 
		'\x1551', '\x5', '\x236', '\x11C', '\x2', '\x1551', '\x1552', '\a', '\x43E', 
		'\x2', '\x2', '\x1552', '\x1554', '\x3', '\x2', '\x2', '\x2', '\x1553', 
		'\x154D', '\x3', '\x2', '\x2', '\x2', '\x1553', '\x1554', '\x3', '\x2', 
		'\x2', '\x2', '\x1554', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1555', 
		'\x1568', '\a', '\x17C', '\x2', '\x2', '\x1556', '\x1568', '\a', '\x1AD', 
		'\x2', '\x2', '\x1557', '\x1559', '\t', 'R', '\x2', '\x2', '\x1558', '\x1557', 
		'\x3', '\x2', '\x2', '\x2', '\x1558', '\x1559', '\x3', '\x2', '\x2', '\x2', 
		'\x1559', '\x155A', '\x3', '\x2', '\x2', '\x2', '\x155A', '\x1568', '\a', 
		'\x1C8', '\x2', '\x2', '\x155B', '\x1568', '\a', '\x202', '\x2', '\x2', 
		'\x155C', '\x1568', '\a', '\x29E', '\x2', '\x2', '\x155D', '\x155E', '\a', 
		'\x21A', '\x2', '\x2', '\x155E', '\x1568', '\a', '\x153', '\x2', '\x2', 
		'\x155F', '\x1568', '\a', '\x258', '\x2', '\x2', '\x1560', '\x1568', '\a', 
		'\x279', '\x2', '\x2', '\x1561', '\x1565', '\a', '\x296', '\x2', '\x2', 
		'\x1562', '\x1563', '\a', '\xB7', '\x2', '\x2', '\x1563', '\x1564', '\a', 
		'\x80', '\x2', '\x2', '\x1564', '\x1566', '\a', '\x64', '\x2', '\x2', 
		'\x1565', '\x1562', '\x3', '\x2', '\x2', '\x2', '\x1565', '\x1566', '\x3', 
		'\x2', '\x2', '\x2', '\x1566', '\x1568', '\x3', '\x2', '\x2', '\x2', '\x1567', 
		'\x1555', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x1556', '\x3', '\x2', 
		'\x2', '\x2', '\x1567', '\x1558', '\x3', '\x2', '\x2', '\x2', '\x1567', 
		'\x155B', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x155C', '\x3', '\x2', 
		'\x2', '\x2', '\x1567', '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1567', 
		'\x155F', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x1560', '\x3', '\x2', 
		'\x2', '\x2', '\x1567', '\x1561', '\x3', '\x2', '\x2', '\x2', '\x1568', 
		'\x1574', '\x3', '\x2', '\x2', '\x2', '\x1569', '\x156A', '\a', '\x220', 
		'\x2', '\x2', '\x156A', '\x156C', '\a', '\x1C8', '\x2', '\x2', '\x156B', 
		'\x156D', '\x5', '\x142', '\xA2', '\x2', '\x156C', '\x156B', '\x3', '\x2', 
		'\x2', '\x2', '\x156C', '\x156D', '\x3', '\x2', '\x2', '\x2', '\x156D', 
		'\x1574', '\x3', '\x2', '\x2', '\x2', '\x156E', '\x156F', '\a', '\x296', 
		'\x2', '\x2', '\x156F', '\x1571', '\x5', '\x238', '\x11D', '\x2', '\x1570', 
		'\x1572', '\x5', '\x1E4', '\xF3', '\x2', '\x1571', '\x1570', '\x3', '\x2', 
		'\x2', '\x2', '\x1571', '\x1572', '\x3', '\x2', '\x2', '\x2', '\x1572', 
		'\x1574', '\x3', '\x2', '\x2', '\x2', '\x1573', '\x1567', '\x3', '\x2', 
		'\x2', '\x2', '\x1573', '\x1569', '\x3', '\x2', '\x2', '\x2', '\x1573', 
		'\x156E', '\x3', '\x2', '\x2', '\x2', '\x1574', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\x1575', '\x1576', '\a', '\xB7', '\x2', '\x2', '\x1576', 
		'\x1577', '\a', '\x80', '\x2', '\x2', '\x1577', '\x157B', '\a', '\x64', 
		'\x2', '\x2', '\x1578', '\x1579', '\a', '@', '\x2', '\x2', '\x1579', '\x157B', 
		'\a', '\x195', '\x2', '\x2', '\x157A', '\x1575', '\x3', '\x2', '\x2', 
		'\x2', '\x157A', '\x1578', '\x3', '\x2', '\x2', '\x2', '\x157B', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x157C', '\x1584', '\x5', '\x1FE', '\x100', 
		'\x2', '\x157D', '\x157E', '\a', '{', '\x2', '\x2', '\x157E', '\x1581', 
		'\a', '\x43D', '\x2', '\x2', '\x157F', '\x1582', '\x5', '\x236', '\x11C', 
		'\x2', '\x1580', '\x1582', '\a', '\b', '\x2', '\x2', '\x1581', '\x157F', 
		'\x3', '\x2', '\x2', '\x2', '\x1581', '\x1580', '\x3', '\x2', '\x2', '\x2', 
		'\x1582', '\x1583', '\x3', '\x2', '\x2', '\x2', '\x1583', '\x1585', '\a', 
		'\x43E', '\x2', '\x2', '\x1584', '\x157D', '\x3', '\x2', '\x2', '\x2', 
		'\x1584', '\x1585', '\x3', '\x2', '\x2', '\x2', '\x1585', '\x158D', '\x3', 
		'\x2', '\x2', '\x2', '\x1586', '\x1588', '\t', '\x14', '\x2', '\x2', '\x1587', 
		'\x1586', '\x3', '\x2', '\x2', '\x2', '\x1587', '\x1588', '\x3', '\x2', 
		'\x2', '\x2', '\x1588', '\x1589', '\x3', '\x2', '\x2', '\x2', '\x1589', 
		'\x158A', '\a', '\x43D', '\x2', '\x2', '\x158A', '\x158B', '\x5', '\x236', 
		'\x11C', '\x2', '\x158B', '\x158C', '\a', '\x43E', '\x2', '\x2', '\x158C', 
		'\x158E', '\x3', '\x2', '\x2', '\x2', '\x158D', '\x1587', '\x3', '\x2', 
		'\x2', '\x2', '\x158D', '\x158E', '\x3', '\x2', '\x2', '\x2', '\x158E', 
		'\x1591', '\x3', '\x2', '\x2', '\x2', '\x158F', '\x1590', '\a', 'M', '\x2', 
		'\x2', '\x1590', '\x1592', '\a', '\x1C2', '\x2', '\x2', '\x1591', '\x158F', 
		'\x3', '\x2', '\x2', '\x2', '\x1591', '\x1592', '\x3', '\x2', '\x2', '\x2', 
		'\x1592', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1593', '\x1594', '\t', 
		'S', '\x2', '\x2', '\x1594', '\x1597', '\x5', '\x1FE', '\x100', '\x2', 
		'\x1595', '\x1598', '\x5', '\x216', '\x10C', '\x2', '\x1596', '\x1598', 
		'\a', '\x44C', '\x2', '\x2', '\x1597', '\x1595', '\x3', '\x2', '\x2', 
		'\x2', '\x1597', '\x1596', '\x3', '\x2', '\x2', '\x2', '\x1597', '\x1598', 
		'\x3', '\x2', '\x2', '\x2', '\x1598', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1599', '\x159D', '\t', 'S', '\x2', '\x2', '\x159A', '\x159B', '\t', 
		'T', '\x2', '\x2', '\x159B', '\x159C', '\a', '\x434', '\x2', '\x2', '\x159C', 
		'\x159E', '\t', 'U', '\x2', '\x2', '\x159D', '\x159A', '\x3', '\x2', '\x2', 
		'\x2', '\x159D', '\x159E', '\x3', '\x2', '\x2', '\x2', '\x159E', '\x159F', 
		'\x3', '\x2', '\x2', '\x2', '\x159F', '\x15A0', '\x5', '\x1FA', '\xFE', 
		'\x2', '\x15A0', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x15A1', '\x15A2', 
		'\a', '\x1AB', '\x2', '\x2', '\x15A2', '\x15A3', '\a', '\x44C', '\x2', 
		'\x2', '\x15A3', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x15A4', '\x15A5', 
		'\a', '\xB1', '\x2', '\x2', '\x15A5', '\x15A6', '\x5', '\x216', '\x10C', 
		'\x2', '\x15A6', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x15A7', '\x15AF', 
		'\a', '\x96', '\x2', '\x2', '\x15A8', '\x15AA', '\a', '\x9A', '\x2', '\x2', 
		'\x15A9', '\x15AB', '\a', '\x27B', '\x2', '\x2', '\x15AA', '\x15A9', '\x3', 
		'\x2', '\x2', '\x2', '\x15AA', '\x15AB', '\x3', '\x2', '\x2', '\x2', '\x15AB', 
		'\x15AC', '\x3', '\x2', '\x2', '\x2', '\x15AC', '\x15B0', '\x5', '\x220', 
		'\x111', '\x2', '\x15AD', '\x15B0', '\a', '\x454', '\x2', '\x2', '\x15AE', 
		'\x15B0', '\a', '\x455', '\x2', '\x2', '\x15AF', '\x15A8', '\x3', '\x2', 
		'\x2', '\x2', '\x15AF', '\x15AD', '\x3', '\x2', '\x2', '\x2', '\x15AF', 
		'\x15AE', '\x3', '\x2', '\x2', '\x2', '\x15B0', '\x15BA', '\x3', '\x2', 
		'\x2', '\x2', '\x15B1', '\x15B2', '\a', '\x93', '\x2', '\x2', '\x15B2', 
		'\x15B7', '\x5', '\x1F4', '\xFB', '\x2', '\x15B3', '\x15B4', '\a', '\x43F', 
		'\x2', '\x2', '\x15B4', '\x15B6', '\x5', '\x1F4', '\xFB', '\x2', '\x15B5', 
		'\x15B3', '\x3', '\x2', '\x2', '\x2', '\x15B6', '\x15B9', '\x3', '\x2', 
		'\x2', '\x2', '\x15B7', '\x15B5', '\x3', '\x2', '\x2', '\x2', '\x15B7', 
		'\x15B8', '\x3', '\x2', '\x2', '\x2', '\x15B8', '\x15BB', '\x3', '\x2', 
		'\x2', '\x2', '\x15B9', '\x15B7', '\x3', '\x2', '\x2', '\x2', '\x15BA', 
		'\x15B1', '\x3', '\x2', '\x2', '\x2', '\x15BA', '\x15BB', '\x3', '\x2', 
		'\x2', '\x2', '\x15BB', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x15BC', 
		'\x15C4', '\a', '\x89', '\x2', '\x2', '\x15BD', '\x15BF', '\a', '\x9A', 
		'\x2', '\x2', '\x15BE', '\x15C0', '\a', '\x27B', '\x2', '\x2', '\x15BF', 
		'\x15BE', '\x3', '\x2', '\x2', '\x2', '\x15BF', '\x15C0', '\x3', '\x2', 
		'\x2', '\x2', '\x15C0', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15C1', 
		'\x15C5', '\x5', '\x220', '\x111', '\x2', '\x15C2', '\x15C5', '\a', '\x454', 
		'\x2', '\x2', '\x15C3', '\x15C5', '\a', '\x455', '\x2', '\x2', '\x15C4', 
		'\x15BD', '\x3', '\x2', '\x2', '\x2', '\x15C4', '\x15C2', '\x3', '\x2', 
		'\x2', '\x2', '\x15C4', '\x15C3', '\x3', '\x2', '\x2', '\x2', '\x15C4', 
		'\x15C5', '\x3', '\x2', '\x2', '\x2', '\x15C5', '\x15CF', '\x3', '\x2', 
		'\x2', '\x2', '\x15C6', '\x15C7', '\a', '\x93', '\x2', '\x2', '\x15C7', 
		'\x15CC', '\x5', '\x1F4', '\xFB', '\x2', '\x15C8', '\x15C9', '\a', '\x43F', 
		'\x2', '\x2', '\x15C9', '\x15CB', '\x5', '\x1F4', '\xFB', '\x2', '\x15CA', 
		'\x15C8', '\x3', '\x2', '\x2', '\x2', '\x15CB', '\x15CE', '\x3', '\x2', 
		'\x2', '\x2', '\x15CC', '\x15CA', '\x3', '\x2', '\x2', '\x2', '\x15CC', 
		'\x15CD', '\x3', '\x2', '\x2', '\x2', '\x15CD', '\x15D0', '\x3', '\x2', 
		'\x2', '\x2', '\x15CE', '\x15CC', '\x3', '\x2', '\x2', '\x2', '\x15CF', 
		'\x15C6', '\x3', '\x2', '\x2', '\x2', '\x15CF', '\x15D0', '\x3', '\x2', 
		'\x2', '\x2', '\x15D0', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x15D1', 
		'\x15D2', '\t', 'V', '\x2', '\x2', '\x15D2', '\x15D7', '\a', '\x434', 
		'\x2', '\x2', '\x15D3', '\x15D8', '\x5', '\x220', '\x111', '\x2', '\x15D4', 
		'\x15D8', '\a', '\x44D', '\x2', '\x2', '\x15D5', '\x15D8', '\x5', '\x206', 
		'\x104', '\x2', '\x15D6', '\x15D8', '\x5', '\x218', '\x10D', '\x2', '\x15D7', 
		'\x15D3', '\x3', '\x2', '\x2', '\x2', '\x15D7', '\x15D4', '\x3', '\x2', 
		'\x2', '\x2', '\x15D7', '\x15D5', '\x3', '\x2', '\x2', '\x2', '\x15D7', 
		'\x15D6', '\x3', '\x2', '\x2', '\x2', '\x15D8', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', '\x15D9', '\x15DB', '\a', '\x46', '\x2', '\x2', '\x15DA', 
		'\x15DC', '\t', 'W', '\x2', '\x2', '\x15DB', '\x15DA', '\x3', '\x2', '\x2', 
		'\x2', '\x15DB', '\x15DC', '\x3', '\x2', '\x2', '\x2', '\x15DC', '\x15DD', 
		'\x3', '\x2', '\x2', '\x2', '\x15DD', '\x15FD', '\a', '\x30', '\x2', '\x2', 
		'\x15DE', '\x15DF', '\x5', '\x1C6', '\xE4', '\x2', '\x15DF', '\x15E0', 
		'\a', '\x434', '\x2', '\x2', '\x15E0', '\x15E8', '\t', 'X', '\x2', '\x2', 
		'\x15E1', '\x15E2', '\a', '\x43F', '\x2', '\x2', '\x15E2', '\x15E3', '\x5', 
		'\x1C6', '\xE4', '\x2', '\x15E3', '\x15E4', '\a', '\x434', '\x2', '\x2', 
		'\x15E4', '\x15E5', '\t', 'X', '\x2', '\x2', '\x15E5', '\x15E7', '\x3', 
		'\x2', '\x2', '\x2', '\x15E6', '\x15E1', '\x3', '\x2', '\x2', '\x2', '\x15E7', 
		'\x15EA', '\x3', '\x2', '\x2', '\x2', '\x15E8', '\x15E6', '\x3', '\x2', 
		'\x2', '\x2', '\x15E8', '\x15E9', '\x3', '\x2', '\x2', '\x2', '\x15E9', 
		'\x15FE', '\x3', '\x2', '\x2', '\x2', '\x15EA', '\x15E8', '\x3', '\x2', 
		'\x2', '\x2', '\x15EB', '\x15EE', '\a', '\x1E', '\x2', '\x2', '\x15EC', 
		'\x15EF', '\x5', '\x21C', '\x10F', '\x2', '\x15ED', '\x15EF', '\x5', '\x1C6', 
		'\xE4', '\x2', '\x15EE', '\x15EC', '\x3', '\x2', '\x2', '\x2', '\x15EE', 
		'\x15ED', '\x3', '\x2', '\x2', '\x2', '\x15EF', '\x15F0', '\x3', '\x2', 
		'\x2', '\x2', '\x15F0', '\x15F1', '\x5', '\x1C6', '\xE4', '\x2', '\x15F1', 
		'\x15F2', '\a', '\x434', '\x2', '\x2', '\x15F2', '\x15FA', '\x5', '\x1F8', 
		'\xFD', '\x2', '\x15F3', '\x15F4', '\a', '\x43F', '\x2', '\x2', '\x15F4', 
		'\x15F5', '\x5', '\x1C6', '\xE4', '\x2', '\x15F5', '\x15F6', '\a', '\x434', 
		'\x2', '\x2', '\x15F6', '\x15F7', '\x5', '\x1F8', '\xFD', '\x2', '\x15F7', 
		'\x15F9', '\x3', '\x2', '\x2', '\x2', '\x15F8', '\x15F3', '\x3', '\x2', 
		'\x2', '\x2', '\x15F9', '\x15FC', '\x3', '\x2', '\x2', '\x2', '\x15FA', 
		'\x15F8', '\x3', '\x2', '\x2', '\x2', '\x15FA', '\x15FB', '\x3', '\x2', 
		'\x2', '\x2', '\x15FB', '\x15FE', '\x3', '\x2', '\x2', '\x2', '\x15FC', 
		'\x15FA', '\x3', '\x2', '\x2', '\x2', '\x15FD', '\x15DE', '\x3', '\x2', 
		'\x2', '\x2', '\x15FD', '\x15EB', '\x3', '\x2', '\x2', '\x2', '\x15FE', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x15FF', '\x1600', '\t', 'Y', '\x2', 
		'\x2', '\x1600', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1601', '\x1607', 
		'\x5', '\xB6', '\\', '\x2', '\x1602', '\x1607', '\x5', '\xA8', 'U', '\x2', 
		'\x1603', '\x1607', '\x5', '\xAE', 'X', '\x2', '\x1604', '\x1607', '\x5', 
		'\xB4', '[', '\x2', '\x1605', '\x1607', '\x5', '\xB8', ']', '\x2', '\x1606', 
		'\x1601', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x1602', '\x3', '\x2', 
		'\x2', '\x2', '\x1606', '\x1603', '\x3', '\x2', '\x2', '\x2', '\x1606', 
		'\x1604', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x1605', '\x3', '\x2', 
		'\x2', '\x2', '\x1607', '\x160C', '\x3', '\x2', '\x2', '\x2', '\x1608', 
		'\x1609', '\a', '@', '\x2', '\x2', '\x1609', '\x160A', '\a', '\x16B', 
		'\x2', '\x2', '\x160A', '\x160C', '\x5', '\x216', '\x10C', '\x2', '\x160B', 
		'\x1606', '\x3', '\x2', '\x2', '\x2', '\x160B', '\x1608', '\x3', '\x2', 
		'\x2', '\x2', '\x160C', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x160D', 
		'\x1611', '\x5', '\x216', '\x10C', '\x2', '\x160E', '\x1612', '\a', '\x453', 
		'\x2', '\x2', '\x160F', '\x1610', '\a', '\x43C', '\x2', '\x2', '\x1610', 
		'\x1612', '\x5', '\x216', '\x10C', '\x2', '\x1611', '\x160E', '\x3', '\x2', 
		'\x2', '\x2', '\x1611', '\x160F', '\x3', '\x2', '\x2', '\x2', '\x1611', 
		'\x1612', '\x3', '\x2', '\x2', '\x2', '\x1612', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1613', '\x1614', '\x5', '\x1FC', '\xFF', '\x2', '\x1614', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1615', '\x161A', '\x5', '\x216', 
		'\x10C', '\x2', '\x1616', '\x1618', '\x5', '\x21A', '\x10E', '\x2', '\x1617', 
		'\x1619', '\x5', '\x21A', '\x10E', '\x2', '\x1618', '\x1617', '\x3', '\x2', 
		'\x2', '\x2', '\x1618', '\x1619', '\x3', '\x2', '\x2', '\x2', '\x1619', 
		'\x161B', '\x3', '\x2', '\x2', '\x2', '\x161A', '\x1616', '\x3', '\x2', 
		'\x2', '\x2', '\x161A', '\x161B', '\x3', '\x2', '\x2', '\x2', '\x161B', 
		'\x1622', '\x3', '\x2', '\x2', '\x2', '\x161C', '\x161D', '\v', '\x2', 
		'\x2', '\x2', '\x161D', '\x161F', '\x5', '\x21A', '\x10E', '\x2', '\x161E', 
		'\x1620', '\x5', '\x21A', '\x10E', '\x2', '\x161F', '\x161E', '\x3', '\x2', 
		'\x2', '\x2', '\x161F', '\x1620', '\x3', '\x2', '\x2', '\x2', '\x1620', 
		'\x1622', '\x3', '\x2', '\x2', '\x2', '\x1621', '\x1615', '\x3', '\x2', 
		'\x2', '\x2', '\x1621', '\x161C', '\x3', '\x2', '\x2', '\x2', '\x1622', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x1623', '\x1626', '\x5', '\x216', 
		'\x10C', '\x2', '\x1624', '\x1626', '\a', '\x44C', '\x2', '\x2', '\x1625', 
		'\x1623', '\x3', '\x2', '\x2', '\x2', '\x1625', '\x1624', '\x3', '\x2', 
		'\x2', '\x2', '\x1626', '\x162B', '\x3', '\x2', '\x2', '\x2', '\x1627', 
		'\x1628', '\a', '\x43D', '\x2', '\x2', '\x1628', '\x1629', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1629', '\x162A', '\a', '\x43E', '\x2', '\x2', '\x162A', 
		'\x162C', '\x3', '\x2', '\x2', '\x2', '\x162B', '\x1627', '\x3', '\x2', 
		'\x2', '\x2', '\x162B', '\x162C', '\x3', '\x2', '\x2', '\x2', '\x162C', 
		'\x162F', '\x3', '\x2', '\x2', '\x2', '\x162D', '\x162F', '\x5', '\x278', 
		'\x13D', '\x2', '\x162E', '\x1625', '\x3', '\x2', '\x2', '\x2', '\x162E', 
		'\x162D', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x1631', '\x3', '\x2', 
		'\x2', '\x2', '\x1630', '\x1632', '\t', '.', '\x2', '\x2', '\x1631', '\x1630', 
		'\x3', '\x2', '\x2', '\x2', '\x1631', '\x1632', '\x3', '\x2', '\x2', '\x2', 
		'\x1632', '\x203', '\x3', '\x2', '\x2', '\x2', '\x1633', '\x1634', '\t', 
		'Z', '\x2', '\x2', '\x1634', '\x205', '\x3', '\x2', '\x2', '\x2', '\x1635', 
		'\x1636', '\t', '[', '\x2', '\x2', '\x1636', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x1637', '\x163C', '\a', '\xD9', '\x2', '\x2', '\x1638', '\x163C', 
		'\x5', '\x28A', '\x146', '\x2', '\x1639', '\x163C', '\a', '\x44C', '\x2', 
		'\x2', '\x163A', '\x163C', '\a', '\x449', '\x2', '\x2', '\x163B', '\x1637', 
		'\x3', '\x2', '\x2', '\x2', '\x163B', '\x1638', '\x3', '\x2', '\x2', '\x2', 
		'\x163B', '\x1639', '\x3', '\x2', '\x2', '\x2', '\x163B', '\x163A', '\x3', 
		'\x2', '\x2', '\x2', '\x163C', '\x209', '\x3', '\x2', '\x2', '\x2', '\x163D', 
		'\x1640', '\x5', '\x216', '\x10C', '\x2', '\x163E', '\x1640', '\a', '\x44C', 
		'\x2', '\x2', '\x163F', '\x163D', '\x3', '\x2', '\x2', '\x2', '\x163F', 
		'\x163E', '\x3', '\x2', '\x2', '\x2', '\x1640', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', '\x1641', '\x1642', '\t', '\\', '\x2', '\x2', '\x1642', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x1643', '\x1644', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1644', '\x1645', '\a', '\x431', '\x2', '\x2', '\x1645', 
		'\x1646', '\x5', '\x21C', '\x10F', '\x2', '\x1646', '\x1647', '\a', '\x431', 
		'\x2', '\x2', '\x1647', '\x1648', '\x5', '\x21C', '\x10F', '\x2', '\x1648', 
		'\x1649', '\a', '\x431', '\x2', '\x2', '\x1649', '\x164A', '\x5', '\x21C', 
		'\x10F', '\x2', '\x164A', '\x164B', '\a', '\x431', '\x2', '\x2', '\x164B', 
		'\x1651', '\x5', '\x21C', '\x10F', '\x2', '\x164C', '\x164D', '\a', '\x448', 
		'\x2', '\x2', '\x164D', '\x164E', '\x5', '\x21C', '\x10F', '\x2', '\x164E', 
		'\x164F', '\a', '\x431', '\x2', '\x2', '\x164F', '\x1650', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1650', '\x1652', '\x3', '\x2', '\x2', '\x2', '\x1651', 
		'\x164C', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x1653', '\x3', '\x2', 
		'\x2', '\x2', '\x1653', '\x1651', '\x3', '\x2', '\x2', '\x2', '\x1653', 
		'\x1654', '\x3', '\x2', '\x2', '\x2', '\x1654', '\x20F', '\x3', '\x2', 
		'\x2', '\x2', '\x1655', '\x165C', '\x5', '\x212', '\x10A', '\x2', '\x1656', 
		'\x1657', '\a', '\x43F', '\x2', '\x2', '\x1657', '\x165A', '\x5', '\x212', 
		'\x10A', '\x2', '\x1658', '\x1659', '\a', '\x43F', '\x2', '\x2', '\x1659', 
		'\x165B', '\x5', '\x21C', '\x10F', '\x2', '\x165A', '\x1658', '\x3', '\x2', 
		'\x2', '\x2', '\x165A', '\x165B', '\x3', '\x2', '\x2', '\x2', '\x165B', 
		'\x165D', '\x3', '\x2', '\x2', '\x2', '\x165C', '\x1656', '\x3', '\x2', 
		'\x2', '\x2', '\x165C', '\x165D', '\x3', '\x2', '\x2', '\x2', '\x165D', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x165E', '\x1666', '\a', '\x44C', 
		'\x2', '\x2', '\x165F', '\x1666', '\a', '\x451', '\x2', '\x2', '\x1660', 
		'\x1662', '\a', '\x44E', '\x2', '\x2', '\x1661', '\x1660', '\x3', '\x2', 
		'\x2', '\x2', '\x1662', '\x1663', '\x3', '\x2', '\x2', '\x2', '\x1663', 
		'\x1661', '\x3', '\x2', '\x2', '\x2', '\x1663', '\x1664', '\x3', '\x2', 
		'\x2', '\x2', '\x1664', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x165E', '\x3', '\x2', '\x2', '\x2', '\x1665', '\x165F', '\x3', '\x2', 
		'\x2', '\x2', '\x1665', '\x1661', '\x3', '\x2', '\x2', '\x2', '\x1666', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x1667', '\x166A', '\x5', '\x216', 
		'\x10C', '\x2', '\x1668', '\x166A', '\a', '\x44C', '\x2', '\x2', '\x1669', 
		'\x1667', '\x3', '\x2', '\x2', '\x2', '\x1669', '\x1668', '\x3', '\x2', 
		'\x2', '\x2', '\x166A', '\x215', '\x3', '\x2', '\x2', '\x2', '\x166B', 
		'\x166F', '\x5', '\x218', '\x10D', '\x2', '\x166C', '\x166F', '\a', '\x455', 
		'\x2', '\x2', '\x166D', '\x166F', '\a', '\x449', '\x2', '\x2', '\x166E', 
		'\x166B', '\x3', '\x2', '\x2', '\x2', '\x166E', '\x166C', '\x3', '\x2', 
		'\x2', '\x2', '\x166E', '\x166D', '\x3', '\x2', '\x2', '\x2', '\x166F', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1670', '\x167A', '\a', '\x454', 
		'\x2', '\x2', '\x1671', '\x167A', '\x5', '\x28A', '\x146', '\x2', '\x1672', 
		'\x167A', '\x5', '\x28C', '\x147', '\x2', '\x1673', '\x167A', '\x5', '\x20C', 
		'\x107', '\x2', '\x1674', '\x167A', '\x5', '\x28E', '\x148', '\x2', '\x1675', 
		'\x167A', '\x5', '\x290', '\x149', '\x2', '\x1676', '\x167A', '\x5', '\x292', 
		'\x14A', '\x2', '\x1677', '\x167A', '\x5', '\x294', '\x14B', '\x2', '\x1678', 
		'\x167A', '\x5', '\x296', '\x14C', '\x2', '\x1679', '\x1670', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x1671', '\x3', '\x2', '\x2', '\x2', '\x1679', 
		'\x1672', '\x3', '\x2', '\x2', '\x2', '\x1679', '\x1673', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x1674', '\x3', '\x2', '\x2', '\x2', '\x1679', 
		'\x1675', '\x3', '\x2', '\x2', '\x2', '\x1679', '\x1676', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x1677', '\x3', '\x2', '\x2', '\x2', '\x1679', 
		'\x1678', '\x3', '\x2', '\x2', '\x2', '\x167A', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x167B', '\x167F', '\a', '\x453', '\x2', '\x2', '\x167C', 
		'\x167D', '\a', '\x43C', '\x2', '\x2', '\x167D', '\x167F', '\x5', '\x216', 
		'\x10C', '\x2', '\x167E', '\x167B', '\x3', '\x2', '\x2', '\x2', '\x167E', 
		'\x167C', '\x3', '\x2', '\x2', '\x2', '\x167F', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x1680', '\x1681', '\t', ']', '\x2', '\x2', '\x1681', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x1682', '\x1685', '\a', '\x44A', '\x2', 
		'\x2', '\x1683', '\x1685', '\x5', '\x21C', '\x10F', '\x2', '\x1684', '\x1682', 
		'\x3', '\x2', '\x2', '\x2', '\x1684', '\x1683', '\x3', '\x2', '\x2', '\x2', 
		'\x1685', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x1686', '\x1688', '\a', 
		'\x452', '\x2', '\x2', '\x1687', '\x1686', '\x3', '\x2', '\x2', '\x2', 
		'\x1687', '\x1688', '\x3', '\x2', '\x2', '\x2', '\x1688', '\x1689', '\x3', 
		'\x2', '\x2', '\x2', '\x1689', '\x168C', '\a', '\x44C', '\x2', '\x2', 
		'\x168A', '\x168C', '\a', '\x44B', '\x2', '\x2', '\x168B', '\x1687', '\x3', 
		'\x2', '\x2', '\x2', '\x168B', '\x168A', '\x3', '\x2', '\x2', '\x2', '\x168C', 
		'\x168E', '\x3', '\x2', '\x2', '\x2', '\x168D', '\x168F', '\a', '\x44C', 
		'\x2', '\x2', '\x168E', '\x168D', '\x3', '\x2', '\x2', '\x2', '\x168F', 
		'\x1690', '\x3', '\x2', '\x2', '\x2', '\x1690', '\x168E', '\x3', '\x2', 
		'\x2', '\x2', '\x1690', '\x1691', '\x3', '\x2', '\x2', '\x2', '\x1691', 
		'\x169E', '\x3', '\x2', '\x2', '\x2', '\x1692', '\x1694', '\a', '\x452', 
		'\x2', '\x2', '\x1693', '\x1692', '\x3', '\x2', '\x2', '\x2', '\x1693', 
		'\x1694', '\x3', '\x2', '\x2', '\x2', '\x1694', '\x1695', '\x3', '\x2', 
		'\x2', '\x2', '\x1695', '\x1698', '\a', '\x44C', '\x2', '\x2', '\x1696', 
		'\x1698', '\a', '\x44B', '\x2', '\x2', '\x1697', '\x1693', '\x3', '\x2', 
		'\x2', '\x2', '\x1697', '\x1696', '\x3', '\x2', '\x2', '\x2', '\x1698', 
		'\x169B', '\x3', '\x2', '\x2', '\x2', '\x1699', '\x169A', '\a', '\x1C', 
		'\x2', '\x2', '\x169A', '\x169C', '\x5', '\x20A', '\x106', '\x2', '\x169B', 
		'\x1699', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x169C', '\x3', '\x2', 
		'\x2', '\x2', '\x169C', '\x169E', '\x3', '\x2', '\x2', '\x2', '\x169D', 
		'\x168B', '\x3', '\x2', '\x2', '\x2', '\x169D', '\x1697', '\x3', '\x2', 
		'\x2', '\x2', '\x169E', '\x221', '\x3', '\x2', '\x2', '\x2', '\x169F', 
		'\x16A0', '\t', '^', '\x2', '\x2', '\x16A0', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x16A1', '\x16A3', '\a', '\x452', '\x2', '\x2', '\x16A2', '\x16A1', 
		'\x3', '\x2', '\x2', '\x2', '\x16A2', '\x16A3', '\x3', '\x2', '\x2', '\x2', 
		'\x16A3', '\x16A4', '\x3', '\x2', '\x2', '\x2', '\x16A4', '\x16A5', '\a', 
		'\x44E', '\x2', '\x2', '\x16A5', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x16A6', '\x16A8', '\a', 'm', '\x2', '\x2', '\x16A7', '\x16A6', '\x3', 
		'\x2', '\x2', '\x2', '\x16A7', '\x16A8', '\x3', '\x2', '\x2', '\x2', '\x16A8', 
		'\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16A9', '\x16AA', '\t', '_', '\x2', 
		'\x2', '\x16AA', '\x227', '\x3', '\x2', '\x2', '\x2', '\x16AB', '\x16B8', 
		'\x5', '\x220', '\x111', '\x2', '\x16AC', '\x16B8', '\x5', '\x21C', '\x10F', 
		'\x2', '\x16AD', '\x16AE', '\a', '\x431', '\x2', '\x2', '\x16AE', '\x16B8', 
		'\x5', '\x21C', '\x10F', '\x2', '\x16AF', '\x16B8', '\x5', '\x224', '\x113', 
		'\x2', '\x16B0', '\x16B8', '\x5', '\x222', '\x112', '\x2', '\x16B1', '\x16B8', 
		'\a', '\x44F', '\x2', '\x2', '\x16B2', '\x16B8', '\a', '\x451', '\x2', 
		'\x2', '\x16B3', '\x16B5', '\a', 'm', '\x2', '\x2', '\x16B4', '\x16B3', 
		'\x3', '\x2', '\x2', '\x2', '\x16B4', '\x16B5', '\x3', '\x2', '\x2', '\x2', 
		'\x16B5', '\x16B6', '\x3', '\x2', '\x2', '\x2', '\x16B6', '\x16B8', '\t', 
		'_', '\x2', '\x2', '\x16B7', '\x16AB', '\x3', '\x2', '\x2', '\x2', '\x16B7', 
		'\x16AC', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16AD', '\x3', '\x2', 
		'\x2', '\x2', '\x16B7', '\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16B7', 
		'\x16B0', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16B1', '\x3', '\x2', 
		'\x2', '\x2', '\x16B7', '\x16B2', '\x3', '\x2', '\x2', '\x2', '\x16B7', 
		'\x16B4', '\x3', '\x2', '\x2', '\x2', '\x16B8', '\x229', '\x3', '\x2', 
		'\x2', '\x2', '\x16B9', '\x16BB', '\t', '`', '\x2', '\x2', '\x16BA', '\x16BC', 
		'\a', '\xE5', '\x2', '\x2', '\x16BB', '\x16BA', '\x3', '\x2', '\x2', '\x2', 
		'\x16BB', '\x16BC', '\x3', '\x2', '\x2', '\x2', '\x16BC', '\x16BE', '\x3', 
		'\x2', '\x2', '\x2', '\x16BD', '\x16BF', '\x5', '\x230', '\x119', '\x2', 
		'\x16BE', '\x16BD', '\x3', '\x2', '\x2', '\x2', '\x16BE', '\x16BF', '\x3', 
		'\x2', '\x2', '\x2', '\x16BF', '\x16C1', '\x3', '\x2', '\x2', '\x2', '\x16C0', 
		'\x16C2', '\a', '\xD9', '\x2', '\x2', '\x16C1', '\x16C0', '\x3', '\x2', 
		'\x2', '\x2', '\x16C1', '\x16C2', '\x3', '\x2', '\x2', '\x2', '\x16C2', 
		'\x16C9', '\x3', '\x2', '\x2', '\x2', '\x16C3', '\x16C4', '\a', '\x1A', 
		'\x2', '\x2', '\x16C4', '\x16C7', '\a', '\x93', '\x2', '\x2', '\x16C5', 
		'\x16C7', '\a', '\x31D', '\x2', '\x2', '\x16C6', '\x16C3', '\x3', '\x2', 
		'\x2', '\x2', '\x16C6', '\x16C5', '\x3', '\x2', '\x2', '\x2', '\x16C7', 
		'\x16C8', '\x3', '\x2', '\x2', '\x2', '\x16C8', '\x16CA', '\x5', '\x208', 
		'\x105', '\x2', '\x16C9', '\x16C6', '\x3', '\x2', '\x2', '\x2', '\x16C9', 
		'\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16CA', '\x16CE', '\x3', '\x2', 
		'\x2', '\x2', '\x16CB', '\x16CC', '\a', '\x1C', '\x2', '\x2', '\x16CC', 
		'\x16CF', '\x5', '\x20A', '\x106', '\x2', '\x16CD', '\x16CF', '\a', '\xD9', 
		'\x2', '\x2', '\x16CE', '\x16CB', '\x3', '\x2', '\x2', '\x2', '\x16CE', 
		'\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16CE', '\x16CF', '\x3', '\x2', 
		'\x2', '\x2', '\x16CF', '\x173D', '\x3', '\x2', '\x2', '\x2', '\x16D0', 
		'\x16D1', '\a', '\xD8', '\x2', '\x2', '\x16D1', '\x16D3', '\t', '\x61', 
		'\x2', '\x2', '\x16D2', '\x16D4', '\x5', '\x230', '\x119', '\x2', '\x16D3', 
		'\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16D3', '\x16D4', '\x3', '\x2', 
		'\x2', '\x2', '\x16D4', '\x16D6', '\x3', '\x2', '\x2', '\x2', '\x16D5', 
		'\x16D7', '\a', '\xD9', '\x2', '\x2', '\x16D6', '\x16D5', '\x3', '\x2', 
		'\x2', '\x2', '\x16D6', '\x16D7', '\x3', '\x2', '\x2', '\x2', '\x16D7', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x16D8', '\x16D9', '\a', '\x1F2', 
		'\x2', '\x2', '\x16D9', '\x16DB', '\a', '\xD6', '\x2', '\x2', '\x16DA', 
		'\x16DC', '\x5', '\x230', '\x119', '\x2', '\x16DB', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16DB', '\x16DC', '\x3', '\x2', '\x2', '\x2', '\x16DC', 
		'\x16DE', '\x3', '\x2', '\x2', '\x2', '\x16DD', '\x16DF', '\a', '\xD9', 
		'\x2', '\x2', '\x16DE', '\x16DD', '\x3', '\x2', '\x2', '\x2', '\x16DE', 
		'\x16DF', '\x3', '\x2', '\x2', '\x2', '\x16DF', '\x173D', '\x3', '\x2', 
		'\x2', '\x2', '\x16E0', '\x16E1', '\a', '\xD8', '\x2', '\x2', '\x16E1', 
		'\x16E2', '\t', '\x62', '\x2', '\x2', '\x16E2', '\x16E4', '\a', '\xE5', 
		'\x2', '\x2', '\x16E3', '\x16E5', '\x5', '\x230', '\x119', '\x2', '\x16E4', 
		'\x16E3', '\x3', '\x2', '\x2', '\x2', '\x16E4', '\x16E5', '\x3', '\x2', 
		'\x2', '\x2', '\x16E5', '\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16E6', 
		'\x16E8', '\a', '\xD9', '\x2', '\x2', '\x16E7', '\x16E6', '\x3', '\x2', 
		'\x2', '\x2', '\x16E7', '\x16E8', '\x3', '\x2', '\x2', '\x2', '\x16E8', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x16E9', '\x16EB', '\t', '\x63', 
		'\x2', '\x2', '\x16EA', '\x16EC', '\x5', '\x230', '\x119', '\x2', '\x16EB', 
		'\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16EB', '\x16EC', '\x3', '\x2', 
		'\x2', '\x2', '\x16EC', '\x16EE', '\x3', '\x2', '\x2', '\x2', '\x16ED', 
		'\x16EF', '\t', '\x64', '\x2', '\x2', '\x16EE', '\x16ED', '\x3', '\x2', 
		'\x2', '\x2', '\x16EE', '\x16EF', '\x3', '\x2', '\x2', '\x2', '\x16EF', 
		'\x16F1', '\x3', '\x2', '\x2', '\x2', '\x16F0', '\x16F2', '\a', '\xBA', 
		'\x2', '\x2', '\x16F1', '\x16F0', '\x3', '\x2', '\x2', '\x2', '\x16F1', 
		'\x16F2', '\x3', '\x2', '\x2', '\x2', '\x16F2', '\x173D', '\x3', '\x2', 
		'\x2', '\x2', '\x16F3', '\x16F5', '\a', '\xC7', '\x2', '\x2', '\x16F4', 
		'\x16F6', '\x5', '\x232', '\x11A', '\x2', '\x16F5', '\x16F4', '\x3', '\x2', 
		'\x2', '\x2', '\x16F5', '\x16F6', '\x3', '\x2', '\x2', '\x2', '\x16F6', 
		'\x16F8', '\x3', '\x2', '\x2', '\x2', '\x16F7', '\x16F9', '\t', '\x64', 
		'\x2', '\x2', '\x16F8', '\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16F8', 
		'\x16F9', '\x3', '\x2', '\x2', '\x2', '\x16F9', '\x16FB', '\x3', '\x2', 
		'\x2', '\x2', '\x16FA', '\x16FC', '\a', '\xBA', '\x2', '\x2', '\x16FB', 
		'\x16FA', '\x3', '\x2', '\x2', '\x2', '\x16FB', '\x16FC', '\x3', '\x2', 
		'\x2', '\x2', '\x16FC', '\x173D', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x16FF', '\a', '\xC8', '\x2', '\x2', '\x16FE', '\x1700', '\a', '\xC9', 
		'\x2', '\x2', '\x16FF', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16FF', 
		'\x1700', '\x3', '\x2', '\x2', '\x2', '\x1700', '\x1702', '\x3', '\x2', 
		'\x2', '\x2', '\x1701', '\x1703', '\x5', '\x232', '\x11A', '\x2', '\x1702', 
		'\x1701', '\x3', '\x2', '\x2', '\x2', '\x1702', '\x1703', '\x3', '\x2', 
		'\x2', '\x2', '\x1703', '\x1705', '\x3', '\x2', '\x2', '\x2', '\x1704', 
		'\x1706', '\t', '\x64', '\x2', '\x2', '\x1705', '\x1704', '\x3', '\x2', 
		'\x2', '\x2', '\x1705', '\x1706', '\x3', '\x2', '\x2', '\x2', '\x1706', 
		'\x1708', '\x3', '\x2', '\x2', '\x2', '\x1707', '\x1709', '\a', '\xBA', 
		'\x2', '\x2', '\x1708', '\x1707', '\x3', '\x2', '\x2', '\x2', '\x1708', 
		'\x1709', '\x3', '\x2', '\x2', '\x2', '\x1709', '\x173D', '\x3', '\x2', 
		'\x2', '\x2', '\x170A', '\x170C', '\t', '\x65', '\x2', '\x2', '\x170B', 
		'\x170D', '\x5', '\x234', '\x11B', '\x2', '\x170C', '\x170B', '\x3', '\x2', 
		'\x2', '\x2', '\x170C', '\x170D', '\x3', '\x2', '\x2', '\x2', '\x170D', 
		'\x170F', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x1710', '\t', '\x64', 
		'\x2', '\x2', '\x170F', '\x170E', '\x3', '\x2', '\x2', '\x2', '\x170F', 
		'\x1710', '\x3', '\x2', '\x2', '\x2', '\x1710', '\x1712', '\x3', '\x2', 
		'\x2', '\x2', '\x1711', '\x1713', '\a', '\xBA', '\x2', '\x2', '\x1712', 
		'\x1711', '\x3', '\x2', '\x2', '\x2', '\x1712', '\x1713', '\x3', '\x2', 
		'\x2', '\x2', '\x1713', '\x173D', '\x3', '\x2', '\x2', '\x2', '\x1714', 
		'\x173D', '\t', '\x66', '\x2', '\x2', '\x1715', '\x1717', '\t', 'g', '\x2', 
		'\x2', '\x1716', '\x1718', '\x5', '\x230', '\x119', '\x2', '\x1717', '\x1716', 
		'\x3', '\x2', '\x2', '\x2', '\x1717', '\x1718', '\x3', '\x2', '\x2', '\x2', 
		'\x1718', '\x173D', '\x3', '\x2', '\x2', '\x2', '\x1719', '\x171A', '\t', 
		'h', '\x2', '\x2', '\x171A', '\x171C', '\x5', '\x22C', '\x117', '\x2', 
		'\x171B', '\x171D', '\a', '\xD9', '\x2', '\x2', '\x171C', '\x171B', '\x3', 
		'\x2', '\x2', '\x2', '\x171C', '\x171D', '\x3', '\x2', '\x2', '\x2', '\x171D', 
		'\x1724', '\x3', '\x2', '\x2', '\x2', '\x171E', '\x171F', '\a', '\x1A', 
		'\x2', '\x2', '\x171F', '\x1722', '\a', '\x93', '\x2', '\x2', '\x1720', 
		'\x1722', '\a', '\x31D', '\x2', '\x2', '\x1721', '\x171E', '\x3', '\x2', 
		'\x2', '\x2', '\x1721', '\x1720', '\x3', '\x2', '\x2', '\x2', '\x1722', 
		'\x1723', '\x3', '\x2', '\x2', '\x2', '\x1723', '\x1725', '\x5', '\x208', 
		'\x105', '\x2', '\x1724', '\x1721', '\x3', '\x2', '\x2', '\x2', '\x1724', 
		'\x1725', '\x3', '\x2', '\x2', '\x2', '\x1725', '\x173D', '\x3', '\x2', 
		'\x2', '\x2', '\x1726', '\x173D', '\t', 'i', '\x2', '\x2', '\x1727', '\x1729', 
		'\a', '\xDE', '\x2', '\x2', '\x1728', '\x172A', '\a', '\xD6', '\x2', '\x2', 
		'\x1729', '\x1728', '\x3', '\x2', '\x2', '\x2', '\x1729', '\x172A', '\x3', 
		'\x2', '\x2', '\x2', '\x172A', '\x172C', '\x3', '\x2', '\x2', '\x2', '\x172B', 
		'\x172D', '\a', '\xD9', '\x2', '\x2', '\x172C', '\x172B', '\x3', '\x2', 
		'\x2', '\x2', '\x172C', '\x172D', '\x3', '\x2', '\x2', '\x2', '\x172D', 
		'\x1734', '\x3', '\x2', '\x2', '\x2', '\x172E', '\x172F', '\a', '\x1A', 
		'\x2', '\x2', '\x172F', '\x1732', '\a', '\x93', '\x2', '\x2', '\x1730', 
		'\x1732', '\a', '\x31D', '\x2', '\x2', '\x1731', '\x172E', '\x3', '\x2', 
		'\x2', '\x2', '\x1731', '\x1730', '\x3', '\x2', '\x2', '\x2', '\x1732', 
		'\x1733', '\x3', '\x2', '\x2', '\x2', '\x1733', '\x1735', '\x5', '\x208', 
		'\x105', '\x2', '\x1734', '\x1731', '\x3', '\x2', '\x2', '\x2', '\x1734', 
		'\x1735', '\x3', '\x2', '\x2', '\x2', '\x1735', '\x1738', '\x3', '\x2', 
		'\x2', '\x2', '\x1736', '\x1737', '\a', '\x1C', '\x2', '\x2', '\x1737', 
		'\x1739', '\x5', '\x20A', '\x106', '\x2', '\x1738', '\x1736', '\x3', '\x2', 
		'\x2', '\x2', '\x1738', '\x1739', '\x3', '\x2', '\x2', '\x2', '\x1739', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x173A', '\x173B', '\a', '\xDE', 
		'\x2', '\x2', '\x173B', '\x173D', '\a', '\xDA', '\x2', '\x2', '\x173C', 
		'\x16B9', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x16D0', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x16D8', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x16E0', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x16E9', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x16F3', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x16FD', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x170A', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x1714', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x1715', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x1719', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x1726', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x1727', '\x3', '\x2', '\x2', '\x2', '\x173C', '\x173A', '\x3', '\x2', 
		'\x2', '\x2', '\x173D', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x173E', 
		'\x173F', '\a', '\x43D', '\x2', '\x2', '\x173F', '\x1744', '\a', '\x44C', 
		'\x2', '\x2', '\x1740', '\x1741', '\a', '\x43F', '\x2', '\x2', '\x1741', 
		'\x1743', '\a', '\x44C', '\x2', '\x2', '\x1742', '\x1740', '\x3', '\x2', 
		'\x2', '\x2', '\x1743', '\x1746', '\x3', '\x2', '\x2', '\x2', '\x1744', 
		'\x1742', '\x3', '\x2', '\x2', '\x2', '\x1744', '\x1745', '\x3', '\x2', 
		'\x2', '\x2', '\x1745', '\x1747', '\x3', '\x2', '\x2', '\x2', '\x1746', 
		'\x1744', '\x3', '\x2', '\x2', '\x2', '\x1747', '\x1748', '\a', '\x43E', 
		'\x2', '\x2', '\x1748', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1749', 
		'\x174B', '\t', 'j', '\x2', '\x2', '\x174A', '\x174C', '\x5', '\x230', 
		'\x119', '\x2', '\x174B', '\x174A', '\x3', '\x2', '\x2', '\x2', '\x174B', 
		'\x174C', '\x3', '\x2', '\x2', '\x2', '\x174C', '\x1765', '\x3', '\x2', 
		'\x2', '\x2', '\x174D', '\x174F', '\a', '\xD5', '\x2', '\x2', '\x174E', 
		'\x1750', '\x5', '\x230', '\x119', '\x2', '\x174F', '\x174E', '\x3', '\x2', 
		'\x2', '\x2', '\x174F', '\x1750', '\x3', '\x2', '\x2', '\x2', '\x1750', 
		'\x1757', '\x3', '\x2', '\x2', '\x2', '\x1751', '\x1752', '\a', '\x1A', 
		'\x2', '\x2', '\x1752', '\x1755', '\a', '\x93', '\x2', '\x2', '\x1753', 
		'\x1755', '\a', '\x31D', '\x2', '\x2', '\x1754', '\x1751', '\x3', '\x2', 
		'\x2', '\x2', '\x1754', '\x1753', '\x3', '\x2', '\x2', '\x2', '\x1755', 
		'\x1756', '\x3', '\x2', '\x2', '\x2', '\x1756', '\x1758', '\x5', '\x208', 
		'\x105', '\x2', '\x1757', '\x1754', '\x3', '\x2', '\x2', '\x2', '\x1757', 
		'\x1758', '\x3', '\x2', '\x2', '\x2', '\x1758', '\x1765', '\x3', '\x2', 
		'\x2', '\x2', '\x1759', '\x1765', '\t', 'k', '\x2', '\x2', '\x175A', '\x175C', 
		'\a', '\xCD', '\x2', '\x2', '\x175B', '\x175D', '\x5', '\x232', '\x11A', 
		'\x2', '\x175C', '\x175B', '\x3', '\x2', '\x2', '\x2', '\x175C', '\x175D', 
		'\x3', '\x2', '\x2', '\x2', '\x175D', '\x1765', '\x3', '\x2', '\x2', '\x2', 
		'\x175E', '\x1760', '\t', '\x64', '\x2', '\x2', '\x175F', '\x1761', '\a', 
		'\xC5', '\x2', '\x2', '\x1760', '\x175F', '\x3', '\x2', '\x2', '\x2', 
		'\x1760', '\x1761', '\x3', '\x2', '\x2', '\x2', '\x1761', '\x1765', '\x3', 
		'\x2', '\x2', '\x2', '\x1762', '\x1763', '\a', '\xAE', '\x2', '\x2', '\x1763', 
		'\x1765', '\a', '\r', '\x2', '\x2', '\x1764', '\x1749', '\x3', '\x2', 
		'\x2', '\x2', '\x1764', '\x174D', '\x3', '\x2', '\x2', '\x2', '\x1764', 
		'\x1759', '\x3', '\x2', '\x2', '\x2', '\x1764', '\x175A', '\x3', '\x2', 
		'\x2', '\x2', '\x1764', '\x175E', '\x3', '\x2', '\x2', '\x2', '\x1764', 
		'\x1762', '\x3', '\x2', '\x2', '\x2', '\x1765', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x1766', '\x1767', '\a', '\x43D', '\x2', '\x2', '\x1767', 
		'\x1768', '\x5', '\x21C', '\x10F', '\x2', '\x1768', '\x1769', '\a', '\x43E', 
		'\x2', '\x2', '\x1769', '\x231', '\x3', '\x2', '\x2', '\x2', '\x176A', 
		'\x176B', '\a', '\x43D', '\x2', '\x2', '\x176B', '\x176C', '\x5', '\x21C', 
		'\x10F', '\x2', '\x176C', '\x176D', '\a', '\x43F', '\x2', '\x2', '\x176D', 
		'\x176E', '\x5', '\x21C', '\x10F', '\x2', '\x176E', '\x176F', '\a', '\x43E', 
		'\x2', '\x2', '\x176F', '\x233', '\x3', '\x2', '\x2', '\x2', '\x1770', 
		'\x1771', '\a', '\x43D', '\x2', '\x2', '\x1771', '\x1774', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1772', '\x1773', '\a', '\x43F', '\x2', '\x2', '\x1773', 
		'\x1775', '\x5', '\x21C', '\x10F', '\x2', '\x1774', '\x1772', '\x3', '\x2', 
		'\x2', '\x2', '\x1774', '\x1775', '\x3', '\x2', '\x2', '\x2', '\x1775', 
		'\x1776', '\x3', '\x2', '\x2', '\x2', '\x1776', '\x1777', '\a', '\x43E', 
		'\x2', '\x2', '\x1777', '\x235', '\x3', '\x2', '\x2', '\x2', '\x1778', 
		'\x177D', '\x5', '\x216', '\x10C', '\x2', '\x1779', '\x177A', '\a', '\x43F', 
		'\x2', '\x2', '\x177A', '\x177C', '\x5', '\x216', '\x10C', '\x2', '\x177B', 
		'\x1779', '\x3', '\x2', '\x2', '\x2', '\x177C', '\x177F', '\x3', '\x2', 
		'\x2', '\x2', '\x177D', '\x177B', '\x3', '\x2', '\x2', '\x2', '\x177D', 
		'\x177E', '\x3', '\x2', '\x2', '\x2', '\x177E', '\x237', '\x3', '\x2', 
		'\x2', '\x2', '\x177F', '\x177D', '\x3', '\x2', '\x2', '\x2', '\x1780', 
		'\x1785', '\x5', '\x1FE', '\x100', '\x2', '\x1781', '\x1782', '\a', '\x43F', 
		'\x2', '\x2', '\x1782', '\x1784', '\x5', '\x1FE', '\x100', '\x2', '\x1783', 
		'\x1781', '\x3', '\x2', '\x2', '\x2', '\x1784', '\x1787', '\x3', '\x2', 
		'\x2', '\x2', '\x1785', '\x1783', '\x3', '\x2', '\x2', '\x2', '\x1785', 
		'\x1786', '\x3', '\x2', '\x2', '\x2', '\x1786', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x1787', '\x1785', '\x3', '\x2', '\x2', '\x2', '\x1788', 
		'\x1789', '\a', '\x43D', '\x2', '\x2', '\x1789', '\x178E', '\x5', '\x202', 
		'\x102', '\x2', '\x178A', '\x178B', '\a', '\x43F', '\x2', '\x2', '\x178B', 
		'\x178D', '\x5', '\x202', '\x102', '\x2', '\x178C', '\x178A', '\x3', '\x2', 
		'\x2', '\x2', '\x178D', '\x1790', '\x3', '\x2', '\x2', '\x2', '\x178E', 
		'\x178C', '\x3', '\x2', '\x2', '\x2', '\x178E', '\x178F', '\x3', '\x2', 
		'\x2', '\x2', '\x178F', '\x1791', '\x3', '\x2', '\x2', '\x2', '\x1790', 
		'\x178E', '\x3', '\x2', '\x2', '\x2', '\x1791', '\x1792', '\a', '\x43E', 
		'\x2', '\x2', '\x1792', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x1793', 
		'\x1798', '\x5', '\x278', '\x13D', '\x2', '\x1794', '\x1795', '\a', '\x43F', 
		'\x2', '\x2', '\x1795', '\x1797', '\x5', '\x278', '\x13D', '\x2', '\x1796', 
		'\x1794', '\x3', '\x2', '\x2', '\x2', '\x1797', '\x179A', '\x3', '\x2', 
		'\x2', '\x2', '\x1798', '\x1796', '\x3', '\x2', '\x2', '\x2', '\x1798', 
		'\x1799', '\x3', '\x2', '\x2', '\x2', '\x1799', '\x23D', '\x3', '\x2', 
		'\x2', '\x2', '\x179A', '\x1798', '\x3', '\x2', '\x2', '\x2', '\x179B', 
		'\x17A0', '\x5', '\x24A', '\x126', '\x2', '\x179C', '\x179D', '\a', '\x43F', 
		'\x2', '\x2', '\x179D', '\x179F', '\x5', '\x24A', '\x126', '\x2', '\x179E', 
		'\x179C', '\x3', '\x2', '\x2', '\x2', '\x179F', '\x17A2', '\x3', '\x2', 
		'\x2', '\x2', '\x17A0', '\x179E', '\x3', '\x2', '\x2', '\x2', '\x17A0', 
		'\x17A1', '\x3', '\x2', '\x2', '\x2', '\x17A1', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', '\x17A2', '\x17A0', '\x3', '\x2', '\x2', '\x2', '\x17A3', 
		'\x17A8', '\x5', '\x228', '\x115', '\x2', '\x17A4', '\x17A5', '\a', '\x43F', 
		'\x2', '\x2', '\x17A5', '\x17A7', '\x5', '\x228', '\x115', '\x2', '\x17A6', 
		'\x17A4', '\x3', '\x2', '\x2', '\x2', '\x17A7', '\x17AA', '\x3', '\x2', 
		'\x2', '\x2', '\x17A8', '\x17A6', '\x3', '\x2', '\x2', '\x2', '\x17A8', 
		'\x17A9', '\x3', '\x2', '\x2', '\x2', '\x17A9', '\x241', '\x3', '\x2', 
		'\x2', '\x2', '\x17AA', '\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17AB', 
		'\x17B0', '\a', '\x44C', '\x2', '\x2', '\x17AC', '\x17AD', '\a', '\x43F', 
		'\x2', '\x2', '\x17AD', '\x17AF', '\a', '\x44C', '\x2', '\x2', '\x17AE', 
		'\x17AC', '\x3', '\x2', '\x2', '\x2', '\x17AF', '\x17B2', '\x3', '\x2', 
		'\x2', '\x2', '\x17B0', '\x17AE', '\x3', '\x2', '\x2', '\x2', '\x17B0', 
		'\x17B1', '\x3', '\x2', '\x2', '\x2', '\x17B1', '\x243', '\x3', '\x2', 
		'\x2', '\x2', '\x17B2', '\x17B0', '\x3', '\x2', '\x2', '\x2', '\x17B3', 
		'\x17B8', '\a', '\x458', '\x2', '\x2', '\x17B4', '\x17B5', '\a', '\x43F', 
		'\x2', '\x2', '\x17B5', '\x17B7', '\a', '\x458', '\x2', '\x2', '\x17B6', 
		'\x17B4', '\x3', '\x2', '\x2', '\x2', '\x17B7', '\x17BA', '\x3', '\x2', 
		'\x2', '\x2', '\x17B8', '\x17B6', '\x3', '\x2', '\x2', '\x2', '\x17B8', 
		'\x17B9', '\x3', '\x2', '\x2', '\x2', '\x17B9', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x17BA', '\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17BB', 
		'\x17C6', '\a', 'o', '\x2', '\x2', '\x17BC', '\x17BE', '\x5', '\x27E', 
		'\x140', '\x2', '\x17BD', '\x17BC', '\x3', '\x2', '\x2', '\x2', '\x17BD', 
		'\x17BE', '\x3', '\x2', '\x2', '\x2', '\x17BE', '\x17BF', '\x3', '\x2', 
		'\x2', '\x2', '\x17BF', '\x17C6', '\x5', '\x228', '\x115', '\x2', '\x17C0', 
		'\x17C6', '\x5', '\x248', '\x125', '\x2', '\x17C1', '\x17C2', '\a', '\x43D', 
		'\x2', '\x2', '\x17C2', '\x17C3', '\x5', '\x278', '\x13D', '\x2', '\x17C3', 
		'\x17C4', '\a', '\x43E', '\x2', '\x2', '\x17C4', '\x17C6', '\x3', '\x2', 
		'\x2', '\x2', '\x17C5', '\x17BB', '\x3', '\x2', '\x2', '\x2', '\x17C5', 
		'\x17BD', '\x3', '\x2', '\x2', '\x2', '\x17C5', '\x17C0', '\x3', '\x2', 
		'\x2', '\x2', '\x17C5', '\x17C1', '\x3', '\x2', '\x2', '\x2', '\x17C6', 
		'\x17CA', '\x3', '\x2', '\x2', '\x2', '\x17C7', '\x17C8', '\a', 'q', '\x2', 
		'\x2', '\x17C8', '\x17C9', '\a', '\xAF', '\x2', '\x2', '\x17C9', '\x17CB', 
		'\x5', '\x248', '\x125', '\x2', '\x17CA', '\x17C7', '\x3', '\x2', '\x2', 
		'\x2', '\x17CA', '\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17CB', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x17CC', '\x17D2', '\t', 'l', '\x2', '\x2', 
		'\x17CD', '\x17CF', '\a', '\x43D', '\x2', '\x2', '\x17CE', '\x17D0', '\x5', 
		'\x21C', '\x10F', '\x2', '\x17CF', '\x17CE', '\x3', '\x2', '\x2', '\x2', 
		'\x17CF', '\x17D0', '\x3', '\x2', '\x2', '\x2', '\x17D0', '\x17D1', '\x3', 
		'\x2', '\x2', '\x2', '\x17D1', '\x17D3', '\a', '\x43E', '\x2', '\x2', 
		'\x17D2', '\x17CD', '\x3', '\x2', '\x2', '\x2', '\x17D2', '\x17D3', '\x3', 
		'\x2', '\x2', '\x2', '\x17D3', '\x17DB', '\x3', '\x2', '\x2', '\x2', '\x17D4', 
		'\x17D5', '\a', '\x137', '\x2', '\x2', '\x17D5', '\x17D7', '\a', '\x43D', 
		'\x2', '\x2', '\x17D6', '\x17D8', '\x5', '\x21C', '\x10F', '\x2', '\x17D7', 
		'\x17D6', '\x3', '\x2', '\x2', '\x2', '\x17D7', '\x17D8', '\x3', '\x2', 
		'\x2', '\x2', '\x17D8', '\x17D9', '\x3', '\x2', '\x2', '\x2', '\x17D9', 
		'\x17DB', '\a', '\x43E', '\x2', '\x2', '\x17DA', '\x17CC', '\x3', '\x2', 
		'\x2', '\x2', '\x17DA', '\x17D4', '\x3', '\x2', '\x2', '\x2', '\x17DB', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x17DC', '\x17DF', '\x5', '\x278', 
		'\x13D', '\x2', '\x17DD', '\x17DF', '\a', '*', '\x2', '\x2', '\x17DE', 
		'\x17DC', '\x3', '\x2', '\x2', '\x2', '\x17DE', '\x17DD', '\x3', '\x2', 
		'\x2', '\x2', '\x17DF', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x17E0', 
		'\x17E1', '\a', 'L', '\x2', '\x2', '\x17E1', '\x17E2', '\a', ';', '\x2', 
		'\x2', '\x17E2', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x17E3', '\x17E4', 
		'\a', 'L', '\x2', '\x2', '\x17E4', '\x17E5', '\a', 'm', '\x2', '\x2', 
		'\x17E5', '\x17E6', '\a', ';', '\x2', '\x2', '\x17E6', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x17E7', '\x17FA', '\x5', '\x252', '\x12A', '\x2', 
		'\x17E8', '\x17FA', '\x5', '\x25A', '\x12E', '\x2', '\x17E9', '\x17FA', 
		'\x5', '\x25C', '\x12F', '\x2', '\x17EA', '\x17EB', '\x5', '\x270', '\x139', 
		'\x2', '\x17EB', '\x17ED', '\a', '\x43D', '\x2', '\x2', '\x17EC', '\x17EE', 
		'\x5', '\x274', '\x13B', '\x2', '\x17ED', '\x17EC', '\x3', '\x2', '\x2', 
		'\x2', '\x17ED', '\x17EE', '\x3', '\x2', '\x2', '\x2', '\x17EE', '\x17EF', 
		'\x3', '\x2', '\x2', '\x2', '\x17EF', '\x17F0', '\a', '\x43E', '\x2', 
		'\x2', '\x17F0', '\x17FA', '\x3', '\x2', '\x2', '\x2', '\x17F1', '\x17F2', 
		'\x5', '\x1FC', '\xFF', '\x2', '\x17F2', '\x17F4', '\a', '\x43D', '\x2', 
		'\x2', '\x17F3', '\x17F5', '\x5', '\x274', '\x13B', '\x2', '\x17F4', '\x17F3', 
		'\x3', '\x2', '\x2', '\x2', '\x17F4', '\x17F5', '\x3', '\x2', '\x2', '\x2', 
		'\x17F5', '\x17F6', '\x3', '\x2', '\x2', '\x2', '\x17F6', '\x17F7', '\a', 
		'\x43E', '\x2', '\x2', '\x17F7', '\x17FA', '\x3', '\x2', '\x2', '\x2', 
		'\x17F8', '\x17FA', '\x5', '\x272', '\x13A', '\x2', '\x17F9', '\x17E7', 
		'\x3', '\x2', '\x2', '\x2', '\x17F9', '\x17E8', '\x3', '\x2', '\x2', '\x2', 
		'\x17F9', '\x17E9', '\x3', '\x2', '\x2', '\x2', '\x17F9', '\x17EA', '\x3', 
		'\x2', '\x2', '\x2', '\x17F9', '\x17F1', '\x3', '\x2', '\x2', '\x2', '\x17F9', 
		'\x17F8', '\x3', '\x2', '\x2', '\x2', '\x17FA', '\x251', '\x3', '\x2', 
		'\x2', '\x2', '\x17FB', '\x17FE', '\t', 'm', '\x2', '\x2', '\x17FC', '\x17FD', 
		'\a', '\x43D', '\x2', '\x2', '\x17FD', '\x17FF', '\a', '\x43E', '\x2', 
		'\x2', '\x17FE', '\x17FC', '\x3', '\x2', '\x2', '\x2', '\x17FE', '\x17FF', 
		'\x3', '\x2', '\x2', '\x2', '\x17FF', '\x18BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1800', '\x1801', '\a', '!', '\x2', '\x2', '\x1801', '\x1802', '\a', 
		'\x43D', '\x2', '\x2', '\x1802', '\x1803', '\x5', '\x278', '\x13D', '\x2', 
		'\x1803', '\x1804', '\a', '\x43F', '\x2', '\x2', '\x1804', '\x1805', '\x5', 
		'\x22E', '\x118', '\x2', '\x1805', '\x1806', '\a', '\x43E', '\x2', '\x2', 
		'\x1806', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x1807', '\x1808', '\a', 
		'!', '\x2', '\x2', '\x1808', '\x1809', '\a', '\x43D', '\x2', '\x2', '\x1809', 
		'\x180A', '\x5', '\x278', '\x13D', '\x2', '\x180A', '\x180B', '\a', '\xB2', 
		'\x2', '\x2', '\x180B', '\x180C', '\x5', '\x208', '\x105', '\x2', '\x180C', 
		'\x180D', '\a', '\x43E', '\x2', '\x2', '\x180D', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x180E', '\x180F', '\a', '\x18', '\x2', '\x2', '\x180F', 
		'\x1810', '\a', '\x43D', '\x2', '\x2', '\x1810', '\x1811', '\x5', '\x278', 
		'\x13D', '\x2', '\x1811', '\x1812', '\a', '\xE', '\x2', '\x2', '\x1812', 
		'\x1813', '\x5', '\x22E', '\x118', '\x2', '\x1813', '\x1814', '\a', '\x43E', 
		'\x2', '\x2', '\x1814', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x1815', 
		'\x1816', '\a', '\xB3', '\x2', '\x2', '\x1816', '\x1817', '\a', '\x43D', 
		'\x2', '\x2', '\x1817', '\x1818', '\x5', '\x200', '\x101', '\x2', '\x1818', 
		'\x1819', '\a', '\x43E', '\x2', '\x2', '\x1819', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x181A', '\x181B', '\a', '\x17', '\x2', '\x2', '\x181B', 
		'\x181D', '\x5', '\x278', '\x13D', '\x2', '\x181C', '\x181E', '\x5', '\x254', 
		'\x12B', '\x2', '\x181D', '\x181C', '\x3', '\x2', '\x2', '\x2', '\x181E', 
		'\x181F', '\x3', '\x2', '\x2', '\x2', '\x181F', '\x181D', '\x3', '\x2', 
		'\x2', '\x2', '\x181F', '\x1820', '\x3', '\x2', '\x2', '\x2', '\x1820', 
		'\x1823', '\x3', '\x2', '\x2', '\x2', '\x1821', '\x1822', '\a', '\x35', 
		'\x2', '\x2', '\x1822', '\x1824', '\x5', '\x276', '\x13C', '\x2', '\x1823', 
		'\x1821', '\x3', '\x2', '\x2', '\x2', '\x1823', '\x1824', '\x3', '\x2', 
		'\x2', '\x2', '\x1824', '\x1825', '\x3', '\x2', '\x2', '\x2', '\x1825', 
		'\x1826', '\a', '\x187', '\x2', '\x2', '\x1826', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x1827', '\x1829', '\a', '\x17', '\x2', '\x2', '\x1828', 
		'\x182A', '\x5', '\x254', '\x12B', '\x2', '\x1829', '\x1828', '\x3', '\x2', 
		'\x2', '\x2', '\x182A', '\x182B', '\x3', '\x2', '\x2', '\x2', '\x182B', 
		'\x1829', '\x3', '\x2', '\x2', '\x2', '\x182B', '\x182C', '\x3', '\x2', 
		'\x2', '\x2', '\x182C', '\x182F', '\x3', '\x2', '\x2', '\x2', '\x182D', 
		'\x182E', '\a', '\x35', '\x2', '\x2', '\x182E', '\x1830', '\x5', '\x276', 
		'\x13C', '\x2', '\x182F', '\x182D', '\x3', '\x2', '\x2', '\x2', '\x182F', 
		'\x1830', '\x3', '\x2', '\x2', '\x2', '\x1830', '\x1831', '\x3', '\x2', 
		'\x2', '\x2', '\x1831', '\x1832', '\a', '\x187', '\x2', '\x2', '\x1832', 
		'\x18BC', '\x3', '\x2', '\x2', '\x2', '\x1833', '\x1834', '\a', '\xD5', 
		'\x2', '\x2', '\x1834', '\x1835', '\a', '\x43D', '\x2', '\x2', '\x1835', 
		'\x1838', '\x5', '\x274', '\x13B', '\x2', '\x1836', '\x1837', '\a', '\xB2', 
		'\x2', '\x2', '\x1837', '\x1839', '\x5', '\x208', '\x105', '\x2', '\x1838', 
		'\x1836', '\x3', '\x2', '\x2', '\x2', '\x1838', '\x1839', '\x3', '\x2', 
		'\x2', '\x2', '\x1839', '\x183A', '\x3', '\x2', '\x2', '\x2', '\x183A', 
		'\x183B', '\a', '\x43E', '\x2', '\x2', '\x183B', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x183C', '\x183D', '\a', '\x138', '\x2', '\x2', '\x183D', 
		'\x1840', '\a', '\x43D', '\x2', '\x2', '\x183E', '\x1841', '\x5', '\x220', 
		'\x111', '\x2', '\x183F', '\x1841', '\x5', '\x278', '\x13D', '\x2', '\x1840', 
		'\x183E', '\x3', '\x2', '\x2', '\x2', '\x1840', '\x183F', '\x3', '\x2', 
		'\x2', '\x2', '\x1841', '\x1842', '\x3', '\x2', '\x2', '\x2', '\x1842', 
		'\x1845', '\a', 'N', '\x2', '\x2', '\x1843', '\x1846', '\x5', '\x220', 
		'\x111', '\x2', '\x1844', '\x1846', '\x5', '\x278', '\x13D', '\x2', '\x1845', 
		'\x1843', '\x3', '\x2', '\x2', '\x2', '\x1845', '\x1844', '\x3', '\x2', 
		'\x2', '\x2', '\x1846', '\x1847', '\x3', '\x2', '\x2', '\x2', '\x1847', 
		'\x1848', '\a', '\x43E', '\x2', '\x2', '\x1848', '\x18BC', '\x3', '\x2', 
		'\x2', '\x2', '\x1849', '\x184A', '\t', 'n', '\x2', '\x2', '\x184A', '\x184D', 
		'\a', '\x43D', '\x2', '\x2', '\x184B', '\x184E', '\x5', '\x220', '\x111', 
		'\x2', '\x184C', '\x184E', '\x5', '\x278', '\x13D', '\x2', '\x184D', '\x184B', 
		'\x3', '\x2', '\x2', '\x2', '\x184D', '\x184C', '\x3', '\x2', '\x2', '\x2', 
		'\x184E', '\x184F', '\x3', '\x2', '\x2', '\x2', '\x184F', '\x1852', '\a', 
		'\x43', '\x2', '\x2', '\x1850', '\x1853', '\x5', '\x21C', '\x10F', '\x2', 
		'\x1851', '\x1853', '\x5', '\x278', '\x13D', '\x2', '\x1852', '\x1850', 
		'\x3', '\x2', '\x2', '\x2', '\x1852', '\x1851', '\x3', '\x2', '\x2', '\x2', 
		'\x1853', '\x1859', '\x3', '\x2', '\x2', '\x2', '\x1854', '\x1857', '\a', 
		'@', '\x2', '\x2', '\x1855', '\x1858', '\x5', '\x21C', '\x10F', '\x2', 
		'\x1856', '\x1858', '\x5', '\x278', '\x13D', '\x2', '\x1857', '\x1855', 
		'\x3', '\x2', '\x2', '\x2', '\x1857', '\x1856', '\x3', '\x2', '\x2', '\x2', 
		'\x1858', '\x185A', '\x3', '\x2', '\x2', '\x2', '\x1859', '\x1854', '\x3', 
		'\x2', '\x2', '\x2', '\x1859', '\x185A', '\x3', '\x2', '\x2', '\x2', '\x185A', 
		'\x185B', '\x3', '\x2', '\x2', '\x2', '\x185B', '\x185C', '\a', '\x43E', 
		'\x2', '\x2', '\x185C', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x185D', 
		'\x185E', '\a', '\x13C', '\x2', '\x2', '\x185E', '\x185F', '\a', '\x43D', 
		'\x2', '\x2', '\x185F', '\x1862', '\t', 'o', '\x2', '\x2', '\x1860', '\x1863', 
		'\x5', '\x220', '\x111', '\x2', '\x1861', '\x1863', '\x5', '\x278', '\x13D', 
		'\x2', '\x1862', '\x1860', '\x3', '\x2', '\x2', '\x2', '\x1862', '\x1861', 
		'\x3', '\x2', '\x2', '\x2', '\x1862', '\x1863', '\x3', '\x2', '\x2', '\x2', 
		'\x1863', '\x1864', '\x3', '\x2', '\x2', '\x2', '\x1864', '\x1867', '\a', 
		'\x43', '\x2', '\x2', '\x1865', '\x1868', '\x5', '\x220', '\x111', '\x2', 
		'\x1866', '\x1868', '\x5', '\x278', '\x13D', '\x2', '\x1867', '\x1865', 
		'\x3', '\x2', '\x2', '\x2', '\x1867', '\x1866', '\x3', '\x2', '\x2', '\x2', 
		'\x1868', '\x1869', '\x3', '\x2', '\x2', '\x2', '\x1869', '\x186A', '\a', 
		'\x43E', '\x2', '\x2', '\x186A', '\x18BC', '\x3', '\x2', '\x2', '\x2', 
		'\x186B', '\x186C', '\a', '\x13C', '\x2', '\x2', '\x186C', '\x186F', '\a', 
		'\x43D', '\x2', '\x2', '\x186D', '\x1870', '\x5', '\x220', '\x111', '\x2', 
		'\x186E', '\x1870', '\x5', '\x278', '\x13D', '\x2', '\x186F', '\x186D', 
		'\x3', '\x2', '\x2', '\x2', '\x186F', '\x186E', '\x3', '\x2', '\x2', '\x2', 
		'\x1870', '\x1871', '\x3', '\x2', '\x2', '\x2', '\x1871', '\x1874', '\a', 
		'\x43', '\x2', '\x2', '\x1872', '\x1875', '\x5', '\x220', '\x111', '\x2', 
		'\x1873', '\x1875', '\x5', '\x278', '\x13D', '\x2', '\x1874', '\x1872', 
		'\x3', '\x2', '\x2', '\x2', '\x1874', '\x1873', '\x3', '\x2', '\x2', '\x2', 
		'\x1875', '\x1876', '\x3', '\x2', '\x2', '\x2', '\x1876', '\x1877', '\a', 
		'\x43E', '\x2', '\x2', '\x1877', '\x18BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1878', '\x1879', '\a', '\x41F', '\x2', '\x2', '\x1879', '\x187C', '\a', 
		'\x43D', '\x2', '\x2', '\x187A', '\x187D', '\x5', '\x220', '\x111', '\x2', 
		'\x187B', '\x187D', '\x5', '\x278', '\x13D', '\x2', '\x187C', '\x187A', 
		'\x3', '\x2', '\x2', '\x2', '\x187C', '\x187B', '\x3', '\x2', '\x2', '\x2', 
		'\x187D', '\x1884', '\x3', '\x2', '\x2', '\x2', '\x187E', '\x187F', '\a', 
		'\xE', '\x2', '\x2', '\x187F', '\x1880', '\t', 'p', '\x2', '\x2', '\x1880', 
		'\x1881', '\a', '\x43D', '\x2', '\x2', '\x1881', '\x1882', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1882', '\x1883', '\a', '\x43E', '\x2', '\x2', '\x1883', 
		'\x1885', '\x3', '\x2', '\x2', '\x2', '\x1884', '\x187E', '\x3', '\x2', 
		'\x2', '\x2', '\x1884', '\x1885', '\x3', '\x2', '\x2', '\x2', '\x1885', 
		'\x1887', '\x3', '\x2', '\x2', '\x2', '\x1886', '\x1888', '\x5', '\x256', 
		'\x12C', '\x2', '\x1887', '\x1886', '\x3', '\x2', '\x2', '\x2', '\x1887', 
		'\x1888', '\x3', '\x2', '\x2', '\x2', '\x1888', '\x1889', '\x3', '\x2', 
		'\x2', '\x2', '\x1889', '\x188A', '\a', '\x43E', '\x2', '\x2', '\x188A', 
		'\x18BC', '\x3', '\x2', '\x2', '\x2', '\x188B', '\x188C', '\a', '\x135', 
		'\x2', '\x2', '\x188C', '\x188D', '\a', '\x43D', '\x2', '\x2', '\x188D', 
		'\x188E', '\x5', '<', '\x1F', '\x2', '\x188E', '\x1891', '\a', '\x43', 
		'\x2', '\x2', '\x188F', '\x1892', '\x5', '\x220', '\x111', '\x2', '\x1890', 
		'\x1892', '\x5', '\x278', '\x13D', '\x2', '\x1891', '\x188F', '\x3', '\x2', 
		'\x2', '\x2', '\x1891', '\x1890', '\x3', '\x2', '\x2', '\x2', '\x1892', 
		'\x1893', '\x3', '\x2', '\x2', '\x2', '\x1893', '\x1894', '\a', '\x43E', 
		'\x2', '\x2', '\x1894', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x1895', 
		'\x1896', '\a', '\x357', '\x2', '\x2', '\x1896', '\x1897', '\a', '\x43D', 
		'\x2', '\x2', '\x1897', '\x1898', '\t', 'q', '\x2', '\x2', '\x1898', '\x1899', 
		'\a', '\x43F', '\x2', '\x2', '\x1899', '\x189A', '\x5', '\x220', '\x111', 
		'\x2', '\x189A', '\x189B', '\a', '\x43E', '\x2', '\x2', '\x189B', '\x18BC', 
		'\x3', '\x2', '\x2', '\x2', '\x189C', '\x189D', '\a', '\xFB', '\x2', '\x2', 
		'\x189D', '\x189E', '\a', '\x43D', '\x2', '\x2', '\x189E', '\x189F', '\x5', 
		'\x278', '\x13D', '\x2', '\x189F', '\x18A0', '\a', '\x43F', '\x2', '\x2', 
		'\x18A0', '\x18A3', '\x5', '\x278', '\x13D', '\x2', '\x18A1', '\x18A2', 
		'\a', '\x232', '\x2', '\x2', '\x18A2', '\x18A4', '\x5', '\x22E', '\x118', 
		'\x2', '\x18A3', '\x18A1', '\x3', '\x2', '\x2', '\x2', '\x18A3', '\x18A4', 
		'\x3', '\x2', '\x2', '\x2', '\x18A4', '\x18AD', '\x3', '\x2', '\x2', '\x2', 
		'\x18A5', '\x18AA', '\a', 'o', '\x2', '\x2', '\x18A6', '\x18AA', '\a', 
		'\x18B', '\x2', '\x2', '\x18A7', '\x18A8', '\a', '*', '\x2', '\x2', '\x18A8', 
		'\x18AA', '\x5', '\x246', '\x124', '\x2', '\x18A9', '\x18A5', '\x3', '\x2', 
		'\x2', '\x2', '\x18A9', '\x18A6', '\x3', '\x2', '\x2', '\x2', '\x18A9', 
		'\x18A7', '\x3', '\x2', '\x2', '\x2', '\x18AA', '\x18AB', '\x3', '\x2', 
		'\x2', '\x2', '\x18AB', '\x18AC', '\a', 'q', '\x2', '\x2', '\x18AC', '\x18AE', 
		'\a', '\x37', '\x2', '\x2', '\x18AD', '\x18A9', '\x3', '\x2', '\x2', '\x2', 
		'\x18AD', '\x18AE', '\x3', '\x2', '\x2', '\x2', '\x18AE', '\x18B7', '\x3', 
		'\x2', '\x2', '\x2', '\x18AF', '\x18B4', '\a', 'o', '\x2', '\x2', '\x18B0', 
		'\x18B4', '\a', '\x18B', '\x2', '\x2', '\x18B1', '\x18B2', '\a', '*', 
		'\x2', '\x2', '\x18B2', '\x18B4', '\x5', '\x246', '\x124', '\x2', '\x18B3', 
		'\x18AF', '\x3', '\x2', '\x2', '\x2', '\x18B3', '\x18B0', '\x3', '\x2', 
		'\x2', '\x2', '\x18B3', '\x18B1', '\x3', '\x2', '\x2', '\x2', '\x18B4', 
		'\x18B5', '\x3', '\x2', '\x2', '\x2', '\x18B5', '\x18B6', '\a', 'q', '\x2', 
		'\x2', '\x18B6', '\x18B8', '\a', '\x18B', '\x2', '\x2', '\x18B7', '\x18B3', 
		'\x3', '\x2', '\x2', '\x2', '\x18B7', '\x18B8', '\x3', '\x2', '\x2', '\x2', 
		'\x18B8', '\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18B9', '\x18BA', '\a', 
		'\x43E', '\x2', '\x2', '\x18BA', '\x18BC', '\x3', '\x2', '\x2', '\x2', 
		'\x18BB', '\x17FB', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x1800', '\x3', 
		'\x2', '\x2', '\x2', '\x18BB', '\x1807', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x180E', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x1815', '\x3', '\x2', 
		'\x2', '\x2', '\x18BB', '\x181A', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x1827', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x1833', '\x3', '\x2', 
		'\x2', '\x2', '\x18BB', '\x183C', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x1849', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x185D', '\x3', '\x2', 
		'\x2', '\x2', '\x18BB', '\x186B', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x1878', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x188B', '\x3', '\x2', 
		'\x2', '\x2', '\x18BB', '\x1895', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x189C', '\x3', '\x2', '\x2', '\x2', '\x18BC', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x18BD', '\x18BE', '\a', '\xB4', '\x2', '\x2', '\x18BE', 
		'\x18BF', '\x5', '\x276', '\x13C', '\x2', '\x18BF', '\x18C0', '\a', '\xA5', 
		'\x2', '\x2', '\x18C0', '\x18C1', '\x5', '\x276', '\x13C', '\x2', '\x18C1', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x18C2', '\x18C3', '\a', '\x1C4', 
		'\x2', '\x2', '\x18C3', '\x18C8', '\x5', '\x258', '\x12D', '\x2', '\x18C4', 
		'\x18C5', '\a', '\x43F', '\x2', '\x2', '\x18C5', '\x18C7', '\x5', '\x258', 
		'\x12D', '\x2', '\x18C6', '\x18C4', '\x3', '\x2', '\x2', '\x2', '\x18C7', 
		'\x18CA', '\x3', '\x2', '\x2', '\x2', '\x18C8', '\x18C6', '\x3', '\x2', 
		'\x2', '\x2', '\x18C8', '\x18C9', '\x3', '\x2', '\x2', '\x2', '\x18C9', 
		'\x18D1', '\x3', '\x2', '\x2', '\x2', '\x18CA', '\x18C8', '\x3', '\x2', 
		'\x2', '\x2', '\x18CB', '\x18CC', '\a', '\x1C4', '\x2', '\x2', '\x18CC', 
		'\x18CD', '\x5', '\x21C', '\x10F', '\x2', '\x18CD', '\x18CE', '\a', '\x431', 
		'\x2', '\x2', '\x18CE', '\x18CF', '\x5', '\x21C', '\x10F', '\x2', '\x18CF', 
		'\x18D1', '\x3', '\x2', '\x2', '\x2', '\x18D0', '\x18C2', '\x3', '\x2', 
		'\x2', '\x2', '\x18D0', '\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18D1', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x18D2', '\x18D4', '\x5', '\x21C', 
		'\x10F', '\x2', '\x18D3', '\x18D5', '\t', 'r', '\x2', '\x2', '\x18D4', 
		'\x18D3', '\x3', '\x2', '\x2', '\x2', '\x18D4', '\x18D5', '\x3', '\x2', 
		'\x2', '\x2', '\x18D5', '\x259', '\x3', '\x2', '\x2', '\x2', '\x18D6', 
		'\x18D7', '\t', 's', '\x2', '\x2', '\x18D7', '\x18D9', '\a', '\x43D', 
		'\x2', '\x2', '\x18D8', '\x18DA', '\t', '*', '\x2', '\x2', '\x18D9', '\x18D8', 
		'\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18DA', '\x3', '\x2', '\x2', '\x2', 
		'\x18DA', '\x18DB', '\x3', '\x2', '\x2', '\x2', '\x18DB', '\x18DC', '\x5', 
		'\x276', '\x13C', '\x2', '\x18DC', '\x18DE', '\a', '\x43E', '\x2', '\x2', 
		'\x18DD', '\x18DF', '\x5', '\x25E', '\x130', '\x2', '\x18DE', '\x18DD', 
		'\x3', '\x2', '\x2', '\x2', '\x18DE', '\x18DF', '\x3', '\x2', '\x2', '\x2', 
		'\x18DF', '\x1912', '\x3', '\x2', '\x2', '\x2', '\x18E0', '\x18E1', '\a', 
		'\x116', '\x2', '\x2', '\x18E1', '\x18E9', '\a', '\x43D', '\x2', '\x2', 
		'\x18E2', '\x18EA', '\a', '\x42D', '\x2', '\x2', '\x18E3', '\x18E5', '\a', 
		'\b', '\x2', '\x2', '\x18E4', '\x18E3', '\x3', '\x2', '\x2', '\x2', '\x18E4', 
		'\x18E5', '\x3', '\x2', '\x2', '\x2', '\x18E5', '\x18E6', '\x3', '\x2', 
		'\x2', '\x2', '\x18E6', '\x18EA', '\x5', '\x276', '\x13C', '\x2', '\x18E7', 
		'\x18E8', '\a', '\x31', '\x2', '\x2', '\x18E8', '\x18EA', '\x5', '\x274', 
		'\x13B', '\x2', '\x18E9', '\x18E2', '\x3', '\x2', '\x2', '\x2', '\x18E9', 
		'\x18E4', '\x3', '\x2', '\x2', '\x2', '\x18E9', '\x18E7', '\x3', '\x2', 
		'\x2', '\x2', '\x18EA', '\x18EB', '\x3', '\x2', '\x2', '\x2', '\x18EB', 
		'\x18ED', '\a', '\x43E', '\x2', '\x2', '\x18EC', '\x18EE', '\x5', '\x25E', 
		'\x130', '\x2', '\x18ED', '\x18EC', '\x3', '\x2', '\x2', '\x2', '\x18ED', 
		'\x18EE', '\x3', '\x2', '\x2', '\x2', '\x18EE', '\x1912', '\x3', '\x2', 
		'\x2', '\x2', '\x18EF', '\x18F0', '\t', 't', '\x2', '\x2', '\x18F0', '\x18F2', 
		'\a', '\x43D', '\x2', '\x2', '\x18F1', '\x18F3', '\a', '\b', '\x2', '\x2', 
		'\x18F2', '\x18F1', '\x3', '\x2', '\x2', '\x2', '\x18F2', '\x18F3', '\x3', 
		'\x2', '\x2', '\x2', '\x18F3', '\x18F4', '\x3', '\x2', '\x2', '\x2', '\x18F4', 
		'\x18F5', '\x5', '\x276', '\x13C', '\x2', '\x18F5', '\x18F7', '\a', '\x43E', 
		'\x2', '\x2', '\x18F6', '\x18F8', '\x5', '\x25E', '\x130', '\x2', '\x18F7', 
		'\x18F6', '\x3', '\x2', '\x2', '\x2', '\x18F7', '\x18F8', '\x3', '\x2', 
		'\x2', '\x2', '\x18F8', '\x1912', '\x3', '\x2', '\x2', '\x2', '\x18F9', 
		'\x18FA', '\a', '\x11A', '\x2', '\x2', '\x18FA', '\x18FC', '\a', '\x43D', 
		'\x2', '\x2', '\x18FB', '\x18FD', '\a', '\x31', '\x2', '\x2', '\x18FC', 
		'\x18FB', '\x3', '\x2', '\x2', '\x2', '\x18FC', '\x18FD', '\x3', '\x2', 
		'\x2', '\x2', '\x18FD', '\x18FE', '\x3', '\x2', '\x2', '\x2', '\x18FE', 
		'\x1909', '\x5', '\x274', '\x13B', '\x2', '\x18FF', '\x1900', '\a', 'v', 
		'\x2', '\x2', '\x1900', '\x1901', '\a', '\x14', '\x2', '\x2', '\x1901', 
		'\x1906', '\x5', '\xD4', 'k', '\x2', '\x1902', '\x1903', '\a', '\x43F', 
		'\x2', '\x2', '\x1903', '\x1905', '\x5', '\xD4', 'k', '\x2', '\x1904', 
		'\x1902', '\x3', '\x2', '\x2', '\x2', '\x1905', '\x1908', '\x3', '\x2', 
		'\x2', '\x2', '\x1906', '\x1904', '\x3', '\x2', '\x2', '\x2', '\x1906', 
		'\x1907', '\x3', '\x2', '\x2', '\x2', '\x1907', '\x190A', '\x3', '\x2', 
		'\x2', '\x2', '\x1908', '\x1906', '\x3', '\x2', '\x2', '\x2', '\x1909', 
		'\x18FF', '\x3', '\x2', '\x2', '\x2', '\x1909', '\x190A', '\x3', '\x2', 
		'\x2', '\x2', '\x190A', '\x190D', '\x3', '\x2', '\x2', '\x2', '\x190B', 
		'\x190C', '\a', '\x94', '\x2', '\x2', '\x190C', '\x190E', '\a', '\x44C', 
		'\x2', '\x2', '\x190D', '\x190B', '\x3', '\x2', '\x2', '\x2', '\x190D', 
		'\x190E', '\x3', '\x2', '\x2', '\x2', '\x190E', '\x190F', '\x3', '\x2', 
		'\x2', '\x2', '\x190F', '\x1910', '\a', '\x43E', '\x2', '\x2', '\x1910', 
		'\x1912', '\x3', '\x2', '\x2', '\x2', '\x1911', '\x18D6', '\x3', '\x2', 
		'\x2', '\x2', '\x1911', '\x18E0', '\x3', '\x2', '\x2', '\x2', '\x1911', 
		'\x18EF', '\x3', '\x2', '\x2', '\x2', '\x1911', '\x18F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1912', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x1913', 
		'\x1914', '\t', 'u', '\x2', '\x2', '\x1914', '\x1915', '\a', '\x43D', 
		'\x2', '\x2', '\x1915', '\x1918', '\x5', '\x278', '\x13D', '\x2', '\x1916', 
		'\x1917', '\a', '\x43F', '\x2', '\x2', '\x1917', '\x1919', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1918', '\x1916', '\x3', '\x2', '\x2', '\x2', '\x1918', 
		'\x1919', '\x3', '\x2', '\x2', '\x2', '\x1919', '\x191C', '\x3', '\x2', 
		'\x2', '\x2', '\x191A', '\x191B', '\a', '\x43F', '\x2', '\x2', '\x191B', 
		'\x191D', '\x5', '\x21C', '\x10F', '\x2', '\x191C', '\x191A', '\x3', '\x2', 
		'\x2', '\x2', '\x191C', '\x191D', '\x3', '\x2', '\x2', '\x2', '\x191D', 
		'\x191E', '\x3', '\x2', '\x2', '\x2', '\x191E', '\x191F', '\a', '\x43E', 
		'\x2', '\x2', '\x191F', '\x1920', '\x5', '\x25E', '\x130', '\x2', '\x1920', 
		'\x193A', '\x3', '\x2', '\x2', '\x2', '\x1921', '\x1922', '\t', 'v', '\x2', 
		'\x2', '\x1922', '\x1923', '\a', '\x43D', '\x2', '\x2', '\x1923', '\x1924', 
		'\x5', '\x278', '\x13D', '\x2', '\x1924', '\x1925', '\a', '\x43E', '\x2', 
		'\x2', '\x1925', '\x1926', '\x5', '\x25E', '\x130', '\x2', '\x1926', '\x193A', 
		'\x3', '\x2', '\x2', '\x2', '\x1927', '\x1928', '\t', 'w', '\x2', '\x2', 
		'\x1928', '\x1929', '\a', '\x43D', '\x2', '\x2', '\x1929', '\x192A', '\a', 
		'\x43E', '\x2', '\x2', '\x192A', '\x193A', '\x5', '\x25E', '\x130', '\x2', 
		'\x192B', '\x192C', '\a', '\x121', '\x2', '\x2', '\x192C', '\x192D', '\a', 
		'\x43D', '\x2', '\x2', '\x192D', '\x192E', '\x5', '\x278', '\x13D', '\x2', 
		'\x192E', '\x192F', '\a', '\x43F', '\x2', '\x2', '\x192F', '\x1930', '\x5', 
		'\x21C', '\x10F', '\x2', '\x1930', '\x1931', '\a', '\x43E', '\x2', '\x2', 
		'\x1931', '\x1932', '\x5', '\x25E', '\x130', '\x2', '\x1932', '\x193A', 
		'\x3', '\x2', '\x2', '\x2', '\x1933', '\x1934', '\a', '\x120', '\x2', 
		'\x2', '\x1934', '\x1935', '\a', '\x43D', '\x2', '\x2', '\x1935', '\x1936', 
		'\x5', '\x21C', '\x10F', '\x2', '\x1936', '\x1937', '\a', '\x43E', '\x2', 
		'\x2', '\x1937', '\x1938', '\x5', '\x25E', '\x130', '\x2', '\x1938', '\x193A', 
		'\x3', '\x2', '\x2', '\x2', '\x1939', '\x1913', '\x3', '\x2', '\x2', '\x2', 
		'\x1939', '\x1921', '\x3', '\x2', '\x2', '\x2', '\x1939', '\x1927', '\x3', 
		'\x2', '\x2', '\x2', '\x1939', '\x192B', '\x3', '\x2', '\x2', '\x2', '\x1939', 
		'\x1933', '\x3', '\x2', '\x2', '\x2', '\x193A', '\x25D', '\x3', '\x2', 
		'\x2', '\x2', '\x193B', '\x1942', '\a', 'x', '\x2', '\x2', '\x193C', '\x193E', 
		'\a', '\x43D', '\x2', '\x2', '\x193D', '\x193F', '\x5', '\x260', '\x131', 
		'\x2', '\x193E', '\x193D', '\x3', '\x2', '\x2', '\x2', '\x193E', '\x193F', 
		'\x3', '\x2', '\x2', '\x2', '\x193F', '\x1940', '\x3', '\x2', '\x2', '\x2', 
		'\x1940', '\x1943', '\a', '\x43E', '\x2', '\x2', '\x1941', '\x1943', '\x5', 
		'\x262', '\x132', '\x2', '\x1942', '\x193C', '\x3', '\x2', '\x2', '\x2', 
		'\x1942', '\x1941', '\x3', '\x2', '\x2', '\x2', '\x1943', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x1944', '\x1946', '\x5', '\x262', '\x132', '\x2', 
		'\x1945', '\x1944', '\x3', '\x2', '\x2', '\x2', '\x1945', '\x1946', '\x3', 
		'\x2', '\x2', '\x2', '\x1946', '\x1948', '\x3', '\x2', '\x2', '\x2', '\x1947', 
		'\x1949', '\x5', '\x26E', '\x138', '\x2', '\x1948', '\x1947', '\x3', '\x2', 
		'\x2', '\x2', '\x1948', '\x1949', '\x3', '\x2', '\x2', '\x2', '\x1949', 
		'\x194B', '\x3', '\x2', '\x2', '\x2', '\x194A', '\x194C', '\x5', '\xD2', 
		'j', '\x2', '\x194B', '\x194A', '\x3', '\x2', '\x2', '\x2', '\x194B', 
		'\x194C', '\x3', '\x2', '\x2', '\x2', '\x194C', '\x194E', '\x3', '\x2', 
		'\x2', '\x2', '\x194D', '\x194F', '\x5', '\x264', '\x133', '\x2', '\x194E', 
		'\x194D', '\x3', '\x2', '\x2', '\x2', '\x194E', '\x194F', '\x3', '\x2', 
		'\x2', '\x2', '\x194F', '\x261', '\x3', '\x2', '\x2', '\x2', '\x1950', 
		'\x1951', '\x5', '\x216', '\x10C', '\x2', '\x1951', '\x263', '\x3', '\x2', 
		'\x2', '\x2', '\x1952', '\x1953', '\x5', '\x266', '\x134', '\x2', '\x1953', 
		'\x1954', '\x5', '\x268', '\x135', '\x2', '\x1954', '\x265', '\x3', '\x2', 
		'\x2', '\x2', '\x1955', '\x1956', '\t', 'x', '\x2', '\x2', '\x1956', '\x267', 
		'\x3', '\x2', '\x2', '\x2', '\x1957', '\x195A', '\x5', '\x26C', '\x137', 
		'\x2', '\x1958', '\x195A', '\x5', '\x26A', '\x136', '\x2', '\x1959', '\x1957', 
		'\x3', '\x2', '\x2', '\x2', '\x1959', '\x1958', '\x3', '\x2', '\x2', '\x2', 
		'\x195A', '\x269', '\x3', '\x2', '\x2', '\x2', '\x195B', '\x195C', '\a', 
		'\x11', '\x2', '\x2', '\x195C', '\x195D', '\x5', '\x26C', '\x137', '\x2', 
		'\x195D', '\x195E', '\a', '\f', '\x2', '\x2', '\x195E', '\x195F', '\x5', 
		'\x26C', '\x137', '\x2', '\x195F', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x1960', '\x1961', '\a', '$', '\x2', '\x2', '\x1961', '\x1968', '\a', 
		'\x238', '\x2', '\x2', '\x1962', '\x1963', '\a', '\x26F', '\x2', '\x2', 
		'\x1963', '\x1968', '\t', 'y', '\x2', '\x2', '\x1964', '\x1965', '\x5', 
		'\x278', '\x13D', '\x2', '\x1965', '\x1966', '\t', 'y', '\x2', '\x2', 
		'\x1966', '\x1968', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1960', '\x3', 
		'\x2', '\x2', '\x2', '\x1967', '\x1962', '\x3', '\x2', '\x2', '\x2', '\x1967', 
		'\x1964', '\x3', '\x2', '\x2', '\x2', '\x1968', '\x26D', '\x3', '\x2', 
		'\x2', '\x2', '\x1969', '\x196A', '\a', '{', '\x2', '\x2', '\x196A', '\x196B', 
		'\a', '\x14', '\x2', '\x2', '\x196B', '\x1970', '\x5', '\x278', '\x13D', 
		'\x2', '\x196C', '\x196D', '\a', '\x43F', '\x2', '\x2', '\x196D', '\x196F', 
		'\x5', '\x278', '\x13D', '\x2', '\x196E', '\x196C', '\x3', '\x2', '\x2', 
		'\x2', '\x196F', '\x1972', '\x3', '\x2', '\x2', '\x2', '\x1970', '\x196E', 
		'\x3', '\x2', '\x2', '\x2', '\x1970', '\x1971', '\x3', '\x2', '\x2', '\x2', 
		'\x1971', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x1972', '\x1970', '\x3', 
		'\x2', '\x2', '\x2', '\x1973', '\x198B', '\x5', '\x296', '\x14C', '\x2', 
		'\x1974', '\x198B', '\a', '\x2C0', '\x2', '\x2', '\x1975', '\x198B', '\a', 
		'\x131', '\x2', '\x2', '\x1976', '\x198B', '\a', '\x12D', '\x2', '\x2', 
		'\x1977', '\x198B', '\a', '\x12E', '\x2', '\x2', '\x1978', '\x198B', '\a', 
		'\x12F', '\x2', '\x2', '\x1979', '\x198B', '\a', '\x132', '\x2', '\x2', 
		'\x197A', '\x198B', '\a', '\x133', '\x2', '\x2', '\x197B', '\x198B', '\a', 
		'\x134', '\x2', '\x2', '\x197C', '\x198B', '\a', 'L', '\x2', '\x2', '\x197D', 
		'\x198B', '\a', 'S', '\x2', '\x2', '\x197E', '\x198B', '\a', '\x130', 
		'\x2', '\x2', '\x197F', '\x198B', '\a', '\x136', '\x2', '\x2', '\x1980', 
		'\x198B', '\a', '\x1E8', '\x2', '\x2', '\x1981', '\x198B', '\a', '\x137', 
		'\x2', '\x2', '\x1982', '\x198B', '\a', '\x87', '\x2', '\x2', '\x1983', 
		'\x198B', '\a', '\x139', '\x2', '\x2', '\x1984', '\x198B', '\a', '\x13A', 
		'\x2', '\x2', '\x1985', '\x198B', '\a', '\x13B', '\x2', '\x2', '\x1986', 
		'\x198B', '\a', '\x13C', '\x2', '\x2', '\x1987', '\x198B', '\a', '\x13D', 
		'\x2', '\x2', '\x1988', '\x198B', '\a', '\x13E', '\x2', '\x2', '\x1989', 
		'\x198B', '\a', '\x13F', '\x2', '\x2', '\x198A', '\x1973', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1974', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x1975', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x1976', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1977', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x1978', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x1979', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x197A', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x197B', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x197C', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x197D', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x197E', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x197F', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1980', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x1981', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x1982', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1983', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x1984', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x1985', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1986', '\x3', '\x2', '\x2', '\x2', '\x198A', 
		'\x1987', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x1988', '\x3', '\x2', 
		'\x2', '\x2', '\x198A', '\x1989', '\x3', '\x2', '\x2', '\x2', '\x198B', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x198C', '\x198D', '\t', 'z', '\x2', 
		'\x2', '\x198D', '\x198E', '\a', '\x43D', '\x2', '\x2', '\x198E', '\x198F', 
		'\x5', '\x276', '\x13C', '\x2', '\x198F', '\x1990', '\a', '\x43E', '\x2', 
		'\x2', '\x1990', '\x273', '\x3', '\x2', '\x2', '\x2', '\x1991', '\x1996', 
		'\x5', '\x228', '\x115', '\x2', '\x1992', '\x1996', '\x5', '\x200', '\x101', 
		'\x2', '\x1993', '\x1996', '\x5', '\x250', '\x129', '\x2', '\x1994', '\x1996', 
		'\x5', '\x278', '\x13D', '\x2', '\x1995', '\x1991', '\x3', '\x2', '\x2', 
		'\x2', '\x1995', '\x1992', '\x3', '\x2', '\x2', '\x2', '\x1995', '\x1993', 
		'\x3', '\x2', '\x2', '\x2', '\x1995', '\x1994', '\x3', '\x2', '\x2', '\x2', 
		'\x1996', '\x19A0', '\x3', '\x2', '\x2', '\x2', '\x1997', '\x199C', '\a', 
		'\x43F', '\x2', '\x2', '\x1998', '\x199D', '\x5', '\x228', '\x115', '\x2', 
		'\x1999', '\x199D', '\x5', '\x200', '\x101', '\x2', '\x199A', '\x199D', 
		'\x5', '\x250', '\x129', '\x2', '\x199B', '\x199D', '\x5', '\x278', '\x13D', 
		'\x2', '\x199C', '\x1998', '\x3', '\x2', '\x2', '\x2', '\x199C', '\x1999', 
		'\x3', '\x2', '\x2', '\x2', '\x199C', '\x199A', '\x3', '\x2', '\x2', '\x2', 
		'\x199C', '\x199B', '\x3', '\x2', '\x2', '\x2', '\x199D', '\x199F', '\x3', 
		'\x2', '\x2', '\x2', '\x199E', '\x1997', '\x3', '\x2', '\x2', '\x2', '\x199F', 
		'\x19A2', '\x3', '\x2', '\x2', '\x2', '\x19A0', '\x199E', '\x3', '\x2', 
		'\x2', '\x2', '\x19A0', '\x19A1', '\x3', '\x2', '\x2', '\x2', '\x19A1', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x19A2', '\x19A0', '\x3', '\x2', 
		'\x2', '\x2', '\x19A3', '\x19A8', '\x5', '\x228', '\x115', '\x2', '\x19A4', 
		'\x19A8', '\x5', '\x200', '\x101', '\x2', '\x19A5', '\x19A8', '\x5', '\x250', 
		'\x129', '\x2', '\x19A6', '\x19A8', '\x5', '\x278', '\x13D', '\x2', '\x19A7', 
		'\x19A3', '\x3', '\x2', '\x2', '\x2', '\x19A7', '\x19A4', '\x3', '\x2', 
		'\x2', '\x2', '\x19A7', '\x19A5', '\x3', '\x2', '\x2', '\x2', '\x19A7', 
		'\x19A6', '\x3', '\x2', '\x2', '\x2', '\x19A8', '\x277', '\x3', '\x2', 
		'\x2', '\x2', '\x19A9', '\x19AA', '\b', '\x13D', '\x1', '\x2', '\x19AA', 
		'\x19AB', '\t', '{', '\x2', '\x2', '\x19AB', '\x19B5', '\x5', '\x278', 
		'\x13D', '\x6', '\x19AC', '\x19AD', '\x5', '\x27A', '\x13E', '\x2', '\x19AD', 
		'\x19AF', '\a', 'V', '\x2', '\x2', '\x19AE', '\x19B0', '\a', 'm', '\x2', 
		'\x2', '\x19AF', '\x19AE', '\x3', '\x2', '\x2', '\x2', '\x19AF', '\x19B0', 
		'\x3', '\x2', '\x2', '\x2', '\x19B0', '\x19B1', '\x3', '\x2', '\x2', '\x2', 
		'\x19B1', '\x19B2', '\t', '|', '\x2', '\x2', '\x19B2', '\x19B5', '\x3', 
		'\x2', '\x2', '\x2', '\x19B3', '\x19B5', '\x5', '\x27A', '\x13E', '\x2', 
		'\x19B4', '\x19A9', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19AC', '\x3', 
		'\x2', '\x2', '\x2', '\x19B4', '\x19B3', '\x3', '\x2', '\x2', '\x2', '\x19B5', 
		'\x19BC', '\x3', '\x2', '\x2', '\x2', '\x19B6', '\x19B7', '\f', '\x5', 
		'\x2', '\x2', '\x19B7', '\x19B8', '\x5', '\x282', '\x142', '\x2', '\x19B8', 
		'\x19B9', '\x5', '\x278', '\x13D', '\x6', '\x19B9', '\x19BB', '\x3', '\x2', 
		'\x2', '\x2', '\x19BA', '\x19B6', '\x3', '\x2', '\x2', '\x2', '\x19BB', 
		'\x19BE', '\x3', '\x2', '\x2', '\x2', '\x19BC', '\x19BA', '\x3', '\x2', 
		'\x2', '\x2', '\x19BC', '\x19BD', '\x3', '\x2', '\x2', '\x2', '\x19BD', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x19BE', '\x19BC', '\x3', '\x2', 
		'\x2', '\x2', '\x19BF', '\x19C2', '\b', '\x13E', '\x1', '\x2', '\x19C0', 
		'\x19C1', '\a', '\x458', '\x2', '\x2', '\x19C1', '\x19C3', '\a', '\x424', 
		'\x2', '\x2', '\x19C2', '\x19C0', '\x3', '\x2', '\x2', '\x2', '\x19C2', 
		'\x19C3', '\x3', '\x2', '\x2', '\x2', '\x19C3', '\x19C4', '\x3', '\x2', 
		'\x2', '\x2', '\x19C4', '\x19C5', '\x5', '\x27C', '\x13F', '\x2', '\x19C5', 
		'\x1A06', '\x3', '\x2', '\x2', '\x2', '\x19C6', '\x19C7', '\f', '\n', 
		'\x2', '\x2', '\x19C7', '\x19C8', '\x5', '\x280', '\x141', '\x2', '\x19C8', 
		'\x19C9', '\x5', '\x27A', '\x13E', '\v', '\x19C9', '\x1A05', '\x3', '\x2', 
		'\x2', '\x2', '\x19CA', '\x19CC', '\f', '\b', '\x2', '\x2', '\x19CB', 
		'\x19CD', '\a', 'm', '\x2', '\x2', '\x19CC', '\x19CB', '\x3', '\x2', '\x2', 
		'\x2', '\x19CC', '\x19CD', '\x3', '\x2', '\x2', '\x2', '\x19CD', '\x19CE', 
		'\x3', '\x2', '\x2', '\x2', '\x19CE', '\x19CF', '\a', '\x11', '\x2', '\x2', 
		'\x19CF', '\x19D0', '\x5', '\x27A', '\x13E', '\x2', '\x19D0', '\x19D1', 
		'\a', '\f', '\x2', '\x2', '\x19D1', '\x19D2', '\x5', '\x27A', '\x13E', 
		'\t', '\x19D2', '\x1A05', '\x3', '\x2', '\x2', '\x2', '\x19D3', '\x19D4', 
		'\f', '\a', '\x2', '\x2', '\x19D4', '\x19D5', '\a', '\x24A', '\x2', '\x2', 
		'\x19D5', '\x19D6', '\a', '_', '\x2', '\x2', '\x19D6', '\x1A05', '\x5', 
		'\x27A', '\x13E', '\b', '\x19D7', '\x19D9', '\f', '\x5', '\x2', '\x2', 
		'\x19D8', '\x19DA', '\a', 'm', '\x2', '\x2', '\x19D9', '\x19D8', '\x3', 
		'\x2', '\x2', '\x2', '\x19D9', '\x19DA', '\x3', '\x2', '\x2', '\x2', '\x19DA', 
		'\x19DB', '\x3', '\x2', '\x2', '\x2', '\x19DB', '\x19DC', '\t', '}', '\x2', 
		'\x2', '\x19DC', '\x1A05', '\x5', '\x27A', '\x13E', '\x6', '\x19DD', '\x19DF', 
		'\f', '\f', '\x2', '\x2', '\x19DE', '\x19E0', '\a', 'm', '\x2', '\x2', 
		'\x19DF', '\x19DE', '\x3', '\x2', '\x2', '\x2', '\x19DF', '\x19E0', '\x3', 
		'\x2', '\x2', '\x2', '\x19E0', '\x19E1', '\x3', '\x2', '\x2', '\x2', '\x19E1', 
		'\x19E2', '\a', 'N', '\x2', '\x2', '\x19E2', '\x19E5', '\a', '\x43D', 
		'\x2', '\x2', '\x19E3', '\x19E6', '\x5', '\xB6', '\\', '\x2', '\x19E4', 
		'\x19E6', '\x5', '\x23C', '\x11F', '\x2', '\x19E5', '\x19E3', '\x3', '\x2', 
		'\x2', '\x2', '\x19E5', '\x19E4', '\x3', '\x2', '\x2', '\x2', '\x19E6', 
		'\x19E7', '\x3', '\x2', '\x2', '\x2', '\x19E7', '\x19E8', '\a', '\x43E', 
		'\x2', '\x2', '\x19E8', '\x1A05', '\x3', '\x2', '\x2', '\x2', '\x19E9', 
		'\x19EA', '\f', '\v', '\x2', '\x2', '\x19EA', '\x19EB', '\a', 'V', '\x2', 
		'\x2', '\x19EB', '\x1A05', '\x5', '\x226', '\x114', '\x2', '\x19EC', '\x19ED', 
		'\f', '\t', '\x2', '\x2', '\x19ED', '\x19EE', '\x5', '\x280', '\x141', 
		'\x2', '\x19EE', '\x19EF', '\t', '~', '\x2', '\x2', '\x19EF', '\x19F0', 
		'\a', '\x43D', '\x2', '\x2', '\x19F0', '\x19F1', '\x5', '\xB6', '\\', 
		'\x2', '\x19F1', '\x19F2', '\a', '\x43E', '\x2', '\x2', '\x19F2', '\x1A05', 
		'\x3', '\x2', '\x2', '\x2', '\x19F3', '\x19F5', '\f', '\x6', '\x2', '\x2', 
		'\x19F4', '\x19F6', '\a', 'm', '\x2', '\x2', '\x19F5', '\x19F4', '\x3', 
		'\x2', '\x2', '\x2', '\x19F5', '\x19F6', '\x3', '\x2', '\x2', '\x2', '\x19F6', 
		'\x19F7', '\x3', '\x2', '\x2', '\x2', '\x19F7', '\x19F8', '\a', '_', '\x2', 
		'\x2', '\x19F8', '\x19FB', '\x5', '\x27A', '\x13E', '\x2', '\x19F9', '\x19FA', 
		'\a', '\x18D', '\x2', '\x2', '\x19FA', '\x19FC', '\a', '\x44C', '\x2', 
		'\x2', '\x19FB', '\x19F9', '\x3', '\x2', '\x2', '\x2', '\x19FB', '\x19FC', 
		'\x3', '\x2', '\x2', '\x2', '\x19FC', '\x1A05', '\x3', '\x2', '\x2', '\x2', 
		'\x19FD', '\x19FE', '\f', '\x3', '\x2', '\x2', '\x19FE', '\x19FF', '\a', 
		'\x1E5', '\x2', '\x2', '\x19FF', '\x1A00', '\a', '\x1FB', '\x2', '\x2', 
		'\x1A00', '\x1A01', '\a', '\x43D', '\x2', '\x2', '\x1A01', '\x1A02', '\x5', 
		'\x27A', '\x13E', '\x2', '\x1A02', '\x1A03', '\a', '\x43E', '\x2', '\x2', 
		'\x1A03', '\x1A05', '\x3', '\x2', '\x2', '\x2', '\x1A04', '\x19C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A04', '\x19CA', '\x3', '\x2', '\x2', '\x2', '\x1A04', 
		'\x19D3', '\x3', '\x2', '\x2', '\x2', '\x1A04', '\x19D7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A04', '\x19DD', '\x3', '\x2', '\x2', '\x2', '\x1A04', 
		'\x19E9', '\x3', '\x2', '\x2', '\x2', '\x1A04', '\x19EC', '\x3', '\x2', 
		'\x2', '\x2', '\x1A04', '\x19F3', '\x3', '\x2', '\x2', '\x2', '\x1A04', 
		'\x19FD', '\x3', '\x2', '\x2', '\x2', '\x1A05', '\x1A08', '\x3', '\x2', 
		'\x2', '\x2', '\x1A06', '\x1A04', '\x3', '\x2', '\x2', '\x2', '\x1A06', 
		'\x1A07', '\x3', '\x2', '\x2', '\x2', '\x1A07', '\x27B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A08', '\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1A09', 
		'\x1A0A', '\b', '\x13F', '\x1', '\x2', '\x1A0A', '\x1A37', '\x5', '\x228', 
		'\x115', '\x2', '\x1A0B', '\x1A37', '\x5', '\x200', '\x101', '\x2', '\x1A0C', 
		'\x1A37', '\x5', '\x250', '\x129', '\x2', '\x1A0D', '\x1A37', '\x5', '\x206', 
		'\x104', '\x2', '\x1A0E', '\x1A0F', '\x5', '\x27E', '\x140', '\x2', '\x1A0F', 
		'\x1A10', '\x5', '\x27C', '\x13F', '\f', '\x1A10', '\x1A37', '\x3', '\x2', 
		'\x2', '\x2', '\x1A11', '\x1A12', '\a', '\xD9', '\x2', '\x2', '\x1A12', 
		'\x1A37', '\x5', '\x27C', '\x13F', '\v', '\x1A13', '\x1A14', '\a', '\x43D', 
		'\x2', '\x2', '\x1A14', '\x1A19', '\x5', '\x278', '\x13D', '\x2', '\x1A15', 
		'\x1A16', '\a', '\x43F', '\x2', '\x2', '\x1A16', '\x1A18', '\x5', '\x278', 
		'\x13D', '\x2', '\x1A17', '\x1A15', '\x3', '\x2', '\x2', '\x2', '\x1A18', 
		'\x1A1B', '\x3', '\x2', '\x2', '\x2', '\x1A19', '\x1A17', '\x3', '\x2', 
		'\x2', '\x2', '\x1A19', '\x1A1A', '\x3', '\x2', '\x2', '\x2', '\x1A1A', 
		'\x1A1C', '\x3', '\x2', '\x2', '\x2', '\x1A1B', '\x1A19', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1C', '\x1A1D', '\a', '\x43E', '\x2', '\x2', '\x1A1D', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A1E', '\x1A1F', '\a', '\x238', 
		'\x2', '\x2', '\x1A1F', '\x1A20', '\a', '\x43D', '\x2', '\x2', '\x1A20', 
		'\x1A23', '\x5', '\x278', '\x13D', '\x2', '\x1A21', '\x1A22', '\a', '\x43F', 
		'\x2', '\x2', '\x1A22', '\x1A24', '\x5', '\x278', '\x13D', '\x2', '\x1A23', 
		'\x1A21', '\x3', '\x2', '\x2', '\x2', '\x1A24', '\x1A25', '\x3', '\x2', 
		'\x2', '\x2', '\x1A25', '\x1A23', '\x3', '\x2', '\x2', '\x2', '\x1A25', 
		'\x1A26', '\x3', '\x2', '\x2', '\x2', '\x1A26', '\x1A27', '\x3', '\x2', 
		'\x2', '\x2', '\x1A27', '\x1A28', '\a', '\x43E', '\x2', '\x2', '\x1A28', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A29', '\x1A2A', '\a', ';', '\x2', 
		'\x2', '\x1A2A', '\x1A2B', '\a', '\x43D', '\x2', '\x2', '\x1A2B', '\x1A2C', 
		'\x5', '\xB6', '\\', '\x2', '\x1A2C', '\x1A2D', '\a', '\x43E', '\x2', 
		'\x2', '\x1A2D', '\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A2E', '\x1A2F', 
		'\a', '\x43D', '\x2', '\x2', '\x1A2F', '\x1A30', '\x5', '\xB6', '\\', 
		'\x2', '\x1A30', '\x1A31', '\a', '\x43E', '\x2', '\x2', '\x1A31', '\x1A37', 
		'\x3', '\x2', '\x2', '\x2', '\x1A32', '\x1A33', '\a', 'T', '\x2', '\x2', 
		'\x1A33', '\x1A34', '\x5', '\x278', '\x13D', '\x2', '\x1A34', '\x1A35', 
		'\x5', '<', '\x1F', '\x2', '\x1A35', '\x1A37', '\x3', '\x2', '\x2', '\x2', 
		'\x1A36', '\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1A36', '\x1A0B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A36', '\x1A0C', '\x3', '\x2', '\x2', '\x2', '\x1A36', 
		'\x1A0D', '\x3', '\x2', '\x2', '\x2', '\x1A36', '\x1A0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A36', '\x1A11', '\x3', '\x2', '\x2', '\x2', '\x1A36', 
		'\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1A36', '\x1A1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A36', '\x1A29', '\x3', '\x2', '\x2', '\x2', '\x1A36', 
		'\x1A2E', '\x3', '\x2', '\x2', '\x2', '\x1A36', '\x1A32', '\x3', '\x2', 
		'\x2', '\x2', '\x1A37', '\x1A49', '\x3', '\x2', '\x2', '\x2', '\x1A38', 
		'\x1A39', '\f', '\x5', '\x2', '\x2', '\x1A39', '\x1A3A', '\x5', '\x284', 
		'\x143', '\x2', '\x1A3A', '\x1A3B', '\x5', '\x27C', '\x13F', '\x6', '\x1A3B', 
		'\x1A48', '\x3', '\x2', '\x2', '\x2', '\x1A3C', '\x1A3D', '\f', '\x4', 
		'\x2', '\x2', '\x1A3D', '\x1A3E', '\x5', '\x286', '\x144', '\x2', '\x1A3E', 
		'\x1A3F', '\x5', '\x27C', '\x13F', '\x5', '\x1A3F', '\x1A48', '\x3', '\x2', 
		'\x2', '\x2', '\x1A40', '\x1A41', '\f', '\x3', '\x2', '\x2', '\x1A41', 
		'\x1A42', '\x5', '\x288', '\x145', '\x2', '\x1A42', '\x1A43', '\x5', '\x27C', 
		'\x13F', '\x4', '\x1A43', '\x1A48', '\x3', '\x2', '\x2', '\x2', '\x1A44', 
		'\x1A45', '\f', '\xE', '\x2', '\x2', '\x1A45', '\x1A46', '\a', '\x1C', 
		'\x2', '\x2', '\x1A46', '\x1A48', '\x5', '\x20A', '\x106', '\x2', '\x1A47', 
		'\x1A38', '\x3', '\x2', '\x2', '\x2', '\x1A47', '\x1A3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A47', '\x1A40', '\x3', '\x2', '\x2', '\x2', '\x1A47', 
		'\x1A44', '\x3', '\x2', '\x2', '\x2', '\x1A48', '\x1A4B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A49', '\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A49', 
		'\x1A4A', '\x3', '\x2', '\x2', '\x2', '\x1A4A', '\x27D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4B', '\x1A49', '\x3', '\x2', '\x2', '\x2', '\x1A4C', 
		'\x1A4D', '\t', '\x7F', '\x2', '\x2', '\x1A4D', '\x27F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4E', '\x1A5D', '\a', '\x434', '\x2', '\x2', '\x1A4F', 
		'\x1A5D', '\a', '\x435', '\x2', '\x2', '\x1A50', '\x1A5D', '\a', '\x436', 
		'\x2', '\x2', '\x1A51', '\x1A52', '\a', '\x436', '\x2', '\x2', '\x1A52', 
		'\x1A5D', '\a', '\x434', '\x2', '\x2', '\x1A53', '\x1A54', '\a', '\x435', 
		'\x2', '\x2', '\x1A54', '\x1A5D', '\a', '\x434', '\x2', '\x2', '\x1A55', 
		'\x1A56', '\a', '\x436', '\x2', '\x2', '\x1A56', '\x1A5D', '\a', '\x435', 
		'\x2', '\x2', '\x1A57', '\x1A58', '\a', '\x437', '\x2', '\x2', '\x1A58', 
		'\x1A5D', '\a', '\x434', '\x2', '\x2', '\x1A59', '\x1A5A', '\a', '\x436', 
		'\x2', '\x2', '\x1A5A', '\x1A5B', '\a', '\x434', '\x2', '\x2', '\x1A5B', 
		'\x1A5D', '\a', '\x435', '\x2', '\x2', '\x1A5C', '\x1A4E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A5C', '\x1A4F', '\x3', '\x2', '\x2', '\x2', '\x1A5C', 
		'\x1A50', '\x3', '\x2', '\x2', '\x2', '\x1A5C', '\x1A51', '\x3', '\x2', 
		'\x2', '\x2', '\x1A5C', '\x1A53', '\x3', '\x2', '\x2', '\x2', '\x1A5C', 
		'\x1A55', '\x3', '\x2', '\x2', '\x2', '\x1A5C', '\x1A57', '\x3', '\x2', 
		'\x2', '\x2', '\x1A5C', '\x1A59', '\x3', '\x2', '\x2', '\x2', '\x1A5D', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x1A5E', '\x1A66', '\a', '\f', '\x2', 
		'\x2', '\x1A5F', '\x1A60', '\a', '\x43A', '\x2', '\x2', '\x1A60', '\x1A66', 
		'\a', '\x43A', '\x2', '\x2', '\x1A61', '\x1A66', '\a', '\xB9', '\x2', 
		'\x2', '\x1A62', '\x1A66', '\a', 'u', '\x2', '\x2', '\x1A63', '\x1A64', 
		'\a', '\x439', '\x2', '\x2', '\x1A64', '\x1A66', '\a', '\x439', '\x2', 
		'\x2', '\x1A65', '\x1A5E', '\x3', '\x2', '\x2', '\x2', '\x1A65', '\x1A5F', 
		'\x3', '\x2', '\x2', '\x2', '\x1A65', '\x1A61', '\x3', '\x2', '\x2', '\x2', 
		'\x1A65', '\x1A62', '\x3', '\x2', '\x2', '\x2', '\x1A65', '\x1A63', '\x3', 
		'\x2', '\x2', '\x2', '\x1A66', '\x283', '\x3', '\x2', '\x2', '\x2', '\x1A67', 
		'\x1A68', '\a', '\x436', '\x2', '\x2', '\x1A68', '\x1A6F', '\a', '\x436', 
		'\x2', '\x2', '\x1A69', '\x1A6A', '\a', '\x435', '\x2', '\x2', '\x1A6A', 
		'\x1A6F', '\a', '\x435', '\x2', '\x2', '\x1A6B', '\x1A6F', '\a', '\x43A', 
		'\x2', '\x2', '\x1A6C', '\x1A6F', '\a', '\x43B', '\x2', '\x2', '\x1A6D', 
		'\x1A6F', '\a', '\x439', '\x2', '\x2', '\x1A6E', '\x1A67', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6E', '\x1A69', '\x3', '\x2', '\x2', '\x2', '\x1A6E', 
		'\x1A6B', '\x3', '\x2', '\x2', '\x2', '\x1A6E', '\x1A6C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6E', '\x1A6D', '\x3', '\x2', '\x2', '\x2', '\x1A6F', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x1A70', '\x1A71', '\t', '\x80', 
		'\x2', '\x2', '\x1A71', '\x287', '\x3', '\x2', '\x2', '\x2', '\x1A72', 
		'\x1A73', '\a', '\x431', '\x2', '\x2', '\x1A73', '\x1A78', '\a', '\x435', 
		'\x2', '\x2', '\x1A74', '\x1A75', '\a', '\x431', '\x2', '\x2', '\x1A75', 
		'\x1A76', '\a', '\x435', '\x2', '\x2', '\x1A76', '\x1A78', '\a', '\x435', 
		'\x2', '\x2', '\x1A77', '\x1A72', '\x3', '\x2', '\x2', '\x2', '\x1A77', 
		'\x1A74', '\x3', '\x2', '\x2', '\x2', '\x1A78', '\x289', '\x3', '\x2', 
		'\x2', '\x2', '\x1A79', '\x1A7A', '\t', '\x81', '\x2', '\x2', '\x1A7A', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x1A7B', '\x1A7C', '\t', '\x82', 
		'\x2', '\x2', '\x1A7C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x1A7D', 
		'\x1A7E', '\t', '\x83', '\x2', '\x2', '\x1A7E', '\x28F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7F', '\x1A80', '\t', '\x84', '\x2', '\x2', '\x1A80', 
		'\x291', '\x3', '\x2', '\x2', '\x2', '\x1A81', '\x1A82', '\t', '\x85', 
		'\x2', '\x2', '\x1A82', '\x293', '\x3', '\x2', '\x2', '\x2', '\x1A83', 
		'\x1A84', '\t', '\x86', '\x2', '\x2', '\x1A84', '\x295', '\x3', '\x2', 
		'\x2', '\x2', '\x1A85', '\x1A86', '\t', '\x87', '\x2', '\x2', '\x1A86', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x299', '\x29D', '\x2A4', 
		'\x2A7', '\x2AA', '\x2AC', '\x2B2', '\x2B5', '\x2B8', '\x2C1', '\x2E8', 
		'\x2F4', '\x2FF', '\x310', '\x315', '\x321', '\x33C', '\x345', '\x34A', 
		'\x350', '\x355', '\x359', '\x362', '\x365', '\x368', '\x36C', '\x373', 
		'\x376', '\x37B', '\x383', '\x388', '\x38D', '\x390', '\x392', '\x39E', 
		'\x3A1', '\x3A5', '\x3A8', '\x3AC', '\x3AF', '\x3B3', '\x3B6', '\x3B9', 
		'\x3BD', '\x3C0', '\x3C4', '\x3CA', '\x3D0', '\x3D6', '\x3DD', '\x3E4', 
		'\x3EA', '\x3F0', '\x3F9', '\x3FE', '\x40E', '\x415', '\x419', '\x423', 
		'\x427', '\x42B', '\x42F', '\x433', '\x438', '\x43B', '\x43E', '\x441', 
		'\x444', '\x44A', '\x44E', '\x454', '\x459', '\x45C', '\x45F', '\x461', 
		'\x46C', '\x470', '\x473', '\x481', '\x484', '\x488', '\x48B', '\x48F', 
		'\x492', '\x496', '\x499', '\x49D', '\x4A0', '\x4A3', '\x4A7', '\x4AA', 
		'\x4AE', '\x4B4', '\x4C1', '\x4C8', '\x4CD', '\x4D0', '\x4D5', '\x4DD', 
		'\x4E3', '\x4E7', '\x4EA', '\x4EF', '\x4F2', '\x4F6', '\x4F9', '\x4FD', 
		'\x500', '\x508', '\x50A', '\x511', '\x517', '\x51F', '\x522', '\x529', 
		'\x52C', '\x52E', '\x534', '\x53A', '\x54B', '\x552', '\x559', '\x564', 
		'\x567', '\x574', '\x581', '\x586', '\x596', '\x59E', '\x5A8', '\x5AE', 
		'\x5BA', '\x5BD', '\x5C2', '\x5CF', '\x5D6', '\x5DD', '\x5DF', '\x5E6', 
		'\x5EA', '\x5EC', '\x5F1', '\x5F4', '\x5FA', '\x5FF', '\x601', '\x605', 
		'\x608', '\x60B', '\x611', '\x616', '\x618', '\x61D', '\x624', '\x626', 
		'\x62D', '\x632', '\x636', '\x639', '\x641', '\x649', '\x64B', '\x653', 
		'\x657', '\x65A', '\x660', '\x665', '\x668', '\x66E', '\x671', '\x675', 
		'\x678', '\x67C', '\x681', '\x685', '\x68A', '\x68D', '\x691', '\x695', 
		'\x699', '\x69D', '\x6A2', '\x6A7', '\x6AC', '\x6B2', '\x6B7', '\x6BC', 
		'\x6C2', '\x6C7', '\x6CC', '\x6D1', '\x6D6', '\x6DB', '\x6E0', '\x6E5', 
		'\x6EA', '\x6EF', '\x6F4', '\x6FA', '\x702', '\x708', '\x714', '\x71B', 
		'\x71D', '\x725', '\x72A', '\x72D', '\x735', '\x73B', '\x74B', '\x757', 
		'\x759', '\x75C', '\x764', '\x76A', '\x770', '\x77D', '\x784', '\x78D', 
		'\x792', '\x79D', '\x7A6', '\x7AB', '\x7B7', '\x7BE', '\x7C7', '\x7CC', 
		'\x7D8', '\x7DF', '\x7E8', '\x7ED', '\x7F4', '\x7FD', '\x802', '\x804', 
		'\x809', '\x811', '\x81A', '\x81E', '\x821', '\x825', '\x82A', '\x830', 
		'\x836', '\x83B', '\x840', '\x845', '\x84A', '\x84D', '\x852', '\x857', 
		'\x861', '\x865', '\x86C', '\x871', '\x874', '\x879', '\x87C', '\x880', 
		'\x884', '\x88C', '\x89F', '\x8A2', '\x8A5', '\x8A9', '\x8B3', '\x8C0', 
		'\x8C7', '\x8CA', '\x8D3', '\x8D6', '\x8D9', '\x8E4', '\x8E7', '\x8EB', 
		'\x8F3', '\x8F6', '\x8FB', '\x903', '\x909', '\x90D', '\x911', '\x916', 
		'\x91B', '\x922', '\x926', '\x931', '\x939', '\x93C', '\x942', '\x948', 
		'\x94A', '\x94F', '\x952', '\x958', '\x95E', '\x960', '\x964', '\x967', 
		'\x96A', '\x970', '\x976', '\x979', '\x97F', '\x985', '\x987', '\x98C', 
		'\x994', '\x996', '\x99F', '\x9A4', '\x9AC', '\x9B0', '\x9B8', '\x9C2', 
		'\x9C7', '\x9CE', '\x9D2', '\x9D6', '\x9F6', '\x9FA', '\xA06', '\xA09', 
		'\xA12', '\xA23', '\xA2F', '\xA36', '\xA3D', '\xA4C', '\xA59', '\xA5F', 
		'\xA65', '\xA6B', '\xA71', '\xA77', '\xA7D', '\xA82', '\xA89', '\xA90', 
		'\xA97', '\xA9C', '\xA9F', '\xAA1', '\xAAF', '\xAB6', '\xABD', '\xAC3', 
		'\xAC7', '\xACB', '\xAD2', '\xAD5', '\xADA', '\xAE1', '\xAE8', '\xAEC', 
		'\xAF5', '\xAFE', '\xB07', '\xB0A', '\xB0E', '\xB17', '\xB1B', '\xB1E', 
		'\xB21', '\xB27', '\xB2A', '\xB30', '\xB39', '\xB3C', '\xB47', '\xB4A', 
		'\xB4F', '\xB52', '\xB57', '\xB61', '\xB66', '\xB6C', '\xB6E', '\xB74', 
		'\xB76', '\xB7C', '\xB84', '\xB89', '\xB91', '\xB94', '\xB99', '\xB9C', 
		'\xBA1', '\xBA9', '\xBB1', '\xBB7', '\xBBF', '\xBC4', '\xBCC', '\xBCF', 
		'\xBD3', '\xBD6', '\xBDE', '\xBE4', '\xBED', '\xBF0', '\xBF4', '\xBF8', 
		'\xBFE', '\xC02', '\xC06', '\xC08', '\xC0B', '\xC0E', '\xC11', '\xC17', 
		'\xC1B', '\xC1E', '\xC21', '\xC24', '\xC27', '\xC29', '\xC2D', '\xC33', 
		'\xC39', '\xC3E', '\xC41', '\xC47', '\xC4B', '\xC53', '\xC57', '\xC5A', 
		'\xC5D', '\xC66', '\xC6A', '\xC6D', '\xC71', '\xC75', '\xC78', '\xC7B', 
		'\xC80', '\xC86', '\xC8A', '\xC94', '\xC9A', '\xC9E', '\xCA4', '\xCA8', 
		'\xCAE', '\xCB1', '\xCBD', '\xCC1', '\xCC5', '\xCCD', '\xCD1', '\xCD9', 
		'\xCDC', '\xCE0', '\xCE3', '\xCEB', '\xCF0', '\xCF3', '\xCF6', '\xCFA', 
		'\xCFD', '\xD06', '\xD0B', '\xD14', '\xD19', '\xD20', '\xD27', '\xD2F', 
		'\xD34', '\xD3C', '\xD3F', '\xD42', '\xD49', '\xD4C', '\xD53', '\xD56', 
		'\xD5E', '\xD64', '\xD6F', '\xD72', '\xD7D', '\xD83', '\xD87', '\xD92', 
		'\xD97', '\xD99', '\xD9D', '\xDA7', '\xDB1', '\xDB7', '\xDBC', '\xDBF', 
		'\xDC2', '\xDC5', '\xDC8', '\xDCB', '\xDCE', '\xDD4', '\xDD9', '\xDDC', 
		'\xDDF', '\xDE2', '\xDE5', '\xDE8', '\xDEB', '\xDED', '\xDF3', '\xDF8', 
		'\xDFB', '\xDFE', '\xE01', '\xE04', '\xE07', '\xE0B', '\xE11', '\xE15', 
		'\xE1F', '\xE23', '\xE29', '\xE32', '\xE35', '\xE39', '\xE3C', '\xE40', 
		'\xE44', '\xE47', '\xE49', '\xE51', '\xE5D', '\xE63', '\xE65', '\xE6B', 
		'\xE6D', '\xE6F', '\xE75', '\xE7D', '\xE85', '\xE8B', '\xE94', '\xE99', 
		'\xEAD', '\xEB2', '\xEB8', '\xEBF', '\xEC4', '\xECD', '\xED0', '\xED4', 
		'\xED8', '\xEDC', '\xEDF', '\xEE2', '\xEE5', '\xEE9', '\xEED', '\xEF0', 
		'\xEF3', '\xEF6', '\xEFD', '\xF01', '\xF10', '\xF1D', '\xF25', '\xF2F', 
		'\xF33', '\xF36', '\xF3C', '\xF3F', '\xF42', '\xF4B', '\xF54', '\xF5E', 
		'\xF62', '\xF6C', '\xF76', '\xF7E', '\xF81', '\xF8A', '\xF8D', '\xF91', 
		'\xF96', '\xF9A', '\xFA3', '\xFA6', '\xFC5', '\xFC8', '\xFCB', '\x1003', 
		'\x1008', '\x1024', '\x1032', '\x1039', '\x103D', '\x1043', '\x104B', 
		'\x104D', '\x1058', '\x1062', '\x1069', '\x106F', '\x1077', '\x107C', 
		'\x1084', '\x108C', '\x1094', '\x109C', '\x10A2', '\x10A5', '\x10A9', 
		'\x10AE', '\x10B3', '\x10B9', '\x10BB', '\x10C6', '\x10CB', '\x10D2', 
		'\x10D4', '\x10E2', '\x10E8', '\x10ED', '\x10F2', '\x10F8', '\x10FF', 
		'\x1107', '\x110F', '\x1114', '\x111A', '\x111D', '\x1125', '\x112C', 
		'\x1135', '\x1138', '\x1149', '\x1151', '\x1159', '\x115D', '\x1164', 
		'\x116A', '\x1172', '\x117B', '\x1181', '\x1188', '\x118F', '\x1194', 
		'\x1197', '\x1199', '\x119F', '\x11A1', '\x11A5', '\x11A7', '\x11AA', 
		'\x11B3', '\x11B9', '\x11C0', '\x11C7', '\x11CC', '\x11CF', '\x11D1', 
		'\x11D7', '\x11D9', '\x11DD', '\x11DF', '\x11E2', '\x11E7', '\x11EE', 
		'\x11F7', '\x11FC', '\x1205', '\x120C', '\x1211', '\x1214', '\x1216', 
		'\x121C', '\x121E', '\x1221', '\x1229', '\x1231', '\x1237', '\x123C', 
		'\x1240', '\x1246', '\x1248', '\x1253', '\x1256', '\x125D', '\x1260', 
		'\x126C', '\x1272', '\x127B', '\x1284', '\x1289', '\x1292', '\x1298', 
		'\x12A3', '\x12AC', '\x12B2', '\x12B7', '\x12BB', '\x12BE', '\x12CA', 
		'\x12D1', '\x12D6', '\x12E5', '\x12EC', '\x12F4', '\x12F7', '\x1301', 
		'\x130B', '\x1315', '\x131F', '\x1323', '\x1327', '\x1331', '\x1336', 
		'\x1370', '\x1382', '\x138A', '\x1396', '\x139D', '\x139F', '\x13A9', 
		'\x13AC', '\x13B4', '\x13BB', '\x13BF', '\x13C6', '\x13CB', '\x13CE', 
		'\x13D1', '\x13DA', '\x13DE', '\x13FC', '\x1403', '\x1407', '\x140E', 
		'\x1411', '\x1421', '\x1424', '\x142E', '\x1432', '\x1438', '\x143B', 
		'\x1440', '\x1444', '\x144B', '\x144E', '\x1454', '\x146C', '\x1479', 
		'\x147C', '\x1486', '\x148E', '\x1492', '\x1499', '\x149C', '\x14A5', 
		'\x14AB', '\x14B1', '\x14BB', '\x14BD', '\x14C3', '\x14C6', '\x14C9', 
		'\x14D5', '\x14D8', '\x14DE', '\x14E1', '\x14E9', '\x14F1', '\x14F7', 
		'\x14FB', '\x1509', '\x1515', '\x151C', '\x151F', '\x1526', '\x152D', 
		'\x1532', '\x1537', '\x1542', '\x154D', '\x1553', '\x1558', '\x1565', 
		'\x1567', '\x156C', '\x1571', '\x1573', '\x157A', '\x1581', '\x1584', 
		'\x1587', '\x158D', '\x1591', '\x1597', '\x159D', '\x15AA', '\x15AF', 
		'\x15B7', '\x15BA', '\x15BF', '\x15C4', '\x15CC', '\x15CF', '\x15D7', 
		'\x15DB', '\x15E8', '\x15EE', '\x15FA', '\x15FD', '\x1606', '\x160B', 
		'\x1611', '\x1618', '\x161A', '\x161F', '\x1621', '\x1625', '\x162B', 
		'\x162E', '\x1631', '\x163B', '\x163F', '\x1653', '\x165A', '\x165C', 
		'\x1663', '\x1665', '\x1669', '\x166E', '\x1679', '\x167E', '\x1684', 
		'\x1687', '\x168B', '\x1690', '\x1693', '\x1697', '\x169B', '\x169D', 
		'\x16A2', '\x16A7', '\x16B4', '\x16B7', '\x16BB', '\x16BE', '\x16C1', 
		'\x16C6', '\x16C9', '\x16CE', '\x16D3', '\x16D6', '\x16DB', '\x16DE', 
		'\x16E4', '\x16E7', '\x16EB', '\x16EE', '\x16F1', '\x16F5', '\x16F8', 
		'\x16FB', '\x16FF', '\x1702', '\x1705', '\x1708', '\x170C', '\x170F', 
		'\x1712', '\x1717', '\x171C', '\x1721', '\x1724', '\x1729', '\x172C', 
		'\x1731', '\x1734', '\x1738', '\x173C', '\x1744', '\x174B', '\x174F', 
		'\x1754', '\x1757', '\x175C', '\x1760', '\x1764', '\x1774', '\x177D', 
		'\x1785', '\x178E', '\x1798', '\x17A0', '\x17A8', '\x17B0', '\x17B8', 
		'\x17BD', '\x17C5', '\x17CA', '\x17CF', '\x17D2', '\x17D7', '\x17DA', 
		'\x17DE', '\x17ED', '\x17F4', '\x17F9', '\x17FE', '\x181F', '\x1823', 
		'\x182B', '\x182F', '\x1838', '\x1840', '\x1845', '\x184D', '\x1852', 
		'\x1857', '\x1859', '\x1862', '\x1867', '\x186F', '\x1874', '\x187C', 
		'\x1884', '\x1887', '\x1891', '\x18A3', '\x18A9', '\x18AD', '\x18B3', 
		'\x18B7', '\x18BB', '\x18C8', '\x18D0', '\x18D4', '\x18D9', '\x18DE', 
		'\x18E4', '\x18E9', '\x18ED', '\x18F2', '\x18F7', '\x18FC', '\x1906', 
		'\x1909', '\x190D', '\x1911', '\x1918', '\x191C', '\x1939', '\x193E', 
		'\x1942', '\x1945', '\x1948', '\x194B', '\x194E', '\x1959', '\x1967', 
		'\x1970', '\x198A', '\x1995', '\x199C', '\x19A0', '\x19A7', '\x19AF', 
		'\x19B4', '\x19BC', '\x19C2', '\x19CC', '\x19D9', '\x19DF', '\x19E5', 
		'\x19F5', '\x19FB', '\x1A04', '\x1A06', '\x1A19', '\x1A25', '\x1A36', 
		'\x1A47', '\x1A49', '\x1A5C', '\x1A65', '\x1A6E', '\x1A77',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TestAntlr.Parser
