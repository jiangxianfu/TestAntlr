//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySqlParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestAntlr.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MySqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IGNORED=76, IN=77, INDEX=78, INFILE=79, 
		INNER=80, INOUT=81, INSERT=82, INTERVAL=83, INTO=84, IS=85, ITERATE=86, 
		JOIN=87, KEY=88, KEYS=89, KILL=90, LEADING=91, LEAVE=92, LEFT=93, LIKE=94, 
		LIMIT=95, LINEAR=96, LINES=97, LOAD=98, LOCK=99, LOOP=100, LOW_PRIORITY=101, 
		MASTER_BIND=102, MASTER_SSL_VERIFY_SERVER_CERT=103, MATCH=104, MAXVALUE=105, 
		MODIFIES=106, NATURAL=107, NOT=108, NO_WRITE_TO_BINLOG=109, NULL_LITERAL=110, 
		NUMBER=111, ON=112, OPTIMIZE=113, OPTION=114, OPTIONAL=115, OPTIONALLY=116, 
		OR=117, ORDER=118, OUT=119, OVER=120, OUTER=121, OUTFILE=122, PARTITION=123, 
		PRIMARY=124, PROCEDURE=125, PURGE=126, RANGE=127, READ=128, READS=129, 
		REFERENCES=130, REGEXP=131, RELEASE=132, RENAME=133, REPEAT=134, REPLACE=135, 
		REQUIRE=136, RESIGNAL=137, RESTRICT=138, RETAIN=139, RETURN=140, REVOKE=141, 
		RIGHT=142, RLIKE=143, SCHEMA=144, SCHEMAS=145, SELECT=146, SET=147, SEPARATOR=148, 
		SHOW=149, SIGNAL=150, SPATIAL=151, SQL=152, SQLEXCEPTION=153, SQLSTATE=154, 
		SQLWARNING=155, SQL_BIG_RESULT=156, SQL_CALC_FOUND_ROWS=157, SQL_SMALL_RESULT=158, 
		SSL=159, STACKED=160, STARTING=161, STRAIGHT_JOIN=162, TABLE=163, TERMINATED=164, 
		THEN=165, TO=166, TRAILING=167, TRIGGER=168, TRUE=169, UNDO=170, UNION=171, 
		UNIQUE=172, UNLOCK=173, UNSIGNED=174, UPDATE=175, USAGE=176, USE=177, 
		USING=178, VALUES=179, WHEN=180, WHERE=181, WHILE=182, WITH=183, WRITE=184, 
		XOR=185, ZEROFILL=186, TINYINT=187, SMALLINT=188, MEDIUMINT=189, MIDDLEINT=190, 
		INT=191, INT1=192, INT2=193, INT3=194, INT4=195, INT8=196, INTEGER=197, 
		BIGINT=198, REAL=199, DOUBLE=200, PRECISION=201, FLOAT=202, FLOAT4=203, 
		FLOAT8=204, DECIMAL=205, DEC=206, NUMERIC=207, DATE=208, TIME=209, TIMESTAMP=210, 
		DATETIME=211, YEAR=212, CHAR=213, VARCHAR=214, NVARCHAR=215, NATIONAL=216, 
		BINARY=217, VARBINARY=218, TINYBLOB=219, BLOB=220, MEDIUMBLOB=221, LONG=222, 
		LONGBLOB=223, TINYTEXT=224, TEXT=225, MEDIUMTEXT=226, LONGTEXT=227, ENUM=228, 
		VARYING=229, SERIAL=230, YEAR_MONTH=231, DAY_HOUR=232, DAY_MINUTE=233, 
		DAY_SECOND=234, HOUR_MINUTE=235, HOUR_SECOND=236, MINUTE_SECOND=237, SECOND_MICROSECOND=238, 
		MINUTE_MICROSECOND=239, HOUR_MICROSECOND=240, DAY_MICROSECOND=241, JSON_ARRAY=242, 
		JSON_OBJECT=243, JSON_QUOTE=244, JSON_CONTAINS=245, JSON_CONTAINS_PATH=246, 
		JSON_EXTRACT=247, JSON_KEYS=248, JSON_OVERLAPS=249, JSON_SEARCH=250, JSON_VALUE=251, 
		JSON_ARRAY_APPEND=252, JSON_ARRAY_INSERT=253, JSON_INSERT=254, JSON_MERGE=255, 
		JSON_MERGE_PATCH=256, JSON_MERGE_PRESERVE=257, JSON_REMOVE=258, JSON_REPLACE=259, 
		JSON_SET=260, JSON_UNQUOTE=261, JSON_DEPTH=262, JSON_LENGTH=263, JSON_TYPE=264, 
		JSON_VALID=265, JSON_TABLE=266, JSON_SCHEMA_VALID=267, JSON_SCHEMA_VALIDATION_REPORT=268, 
		JSON_PRETTY=269, JSON_STORAGE_FREE=270, JSON_STORAGE_SIZE=271, JSON_ARRAYAGG=272, 
		JSON_OBJECTAGG=273, AVG=274, BIT_AND=275, BIT_OR=276, BIT_XOR=277, COUNT=278, 
		CUME_DIST=279, DENSE_RANK=280, FIRST_VALUE=281, GROUP_CONCAT=282, LAG=283, 
		LAST_VALUE=284, LEAD=285, MAX=286, MIN=287, NTILE=288, NTH_VALUE=289, 
		PERCENT_RANK=290, RANK=291, ROW_NUMBER=292, STD=293, STDDEV=294, STDDEV_POP=295, 
		STDDEV_SAMP=296, SUM=297, VAR_POP=298, VAR_SAMP=299, VARIANCE=300, CURRENT_DATE=301, 
		CURRENT_TIME=302, CURRENT_TIMESTAMP=303, LOCALTIME=304, CURDATE=305, CURTIME=306, 
		DATE_ADD=307, DATE_SUB=308, EXTRACT=309, LOCALTIMESTAMP=310, NOW=311, 
		POSITION=312, SUBSTR=313, SUBSTRING=314, SYSDATE=315, TRIM=316, UTC_DATE=317, 
		UTC_TIME=318, UTC_TIMESTAMP=319, ACCOUNT=320, ACTION=321, AFTER=322, AGGREGATE=323, 
		ALGORITHM=324, ANY=325, AT=326, AUTHORS=327, AUTOCOMMIT=328, AUTOEXTEND_SIZE=329, 
		AUTO_INCREMENT=330, AVG_ROW_LENGTH=331, BEGIN=332, BINLOG=333, BIT=334, 
		BLOCK=335, BOOL=336, BOOLEAN=337, BTREE=338, CACHE=339, CASCADED=340, 
		CHAIN=341, CHANGED=342, CHANNEL=343, CHECKSUM=344, PAGE_CHECKSUM=345, 
		CIPHER=346, CLASS_ORIGIN=347, CLIENT=348, CLOSE=349, CLUSTERING=350, COALESCE=351, 
		CODE=352, COLUMNS=353, COLUMN_FORMAT=354, COLUMN_NAME=355, COMMENT=356, 
		COMMIT=357, COMPACT=358, COMPLETION=359, COMPRESSED=360, COMPRESSION=361, 
		CONCURRENT=362, CONNECT=363, CONNECTION=364, CONSISTENT=365, CONSTRAINT_CATALOG=366, 
		CONSTRAINT_SCHEMA=367, CONSTRAINT_NAME=368, CONTAINS=369, CONTEXT=370, 
		CONTRIBUTORS=371, COPY=372, CPU=373, CURSOR_NAME=374, DATA=375, DATAFILE=376, 
		DEALLOCATE=377, DEFAULT_AUTH=378, DEFINER=379, DELAY_KEY_WRITE=380, DES_KEY_FILE=381, 
		DIRECTORY=382, DISABLE=383, DISCARD=384, DISK=385, DO=386, DUMPFILE=387, 
		DUPLICATE=388, DYNAMIC=389, ENABLE=390, ENCRYPTION=391, END=392, ENDS=393, 
		ENGINE=394, ENGINES=395, ERROR=396, ERRORS=397, ESCAPE=398, EVEN=399, 
		EVENT=400, EVENTS=401, EVERY=402, EXCHANGE=403, EXCLUSIVE=404, EXPIRE=405, 
		EXPORT=406, EXTENDED=407, EXTENT_SIZE=408, FAST=409, FAULTS=410, FIELDS=411, 
		FILE_BLOCK_SIZE=412, FILTER=413, FIRST=414, FIXED=415, FLUSH=416, FOLLOWING=417, 
		FOLLOWS=418, FOUND=419, FULL=420, FUNCTION=421, GENERAL=422, GLOBAL=423, 
		GRANTS=424, GROUP_REPLICATION=425, HANDLER=426, HASH=427, HELP=428, HOST=429, 
		HOSTS=430, IDENTIFIED=431, IGNORE_SERVER_IDS=432, IMPORT=433, INDEXES=434, 
		INITIAL_SIZE=435, INPLACE=436, INSERT_METHOD=437, INSTALL=438, INSTANCE=439, 
		INSTANT=440, INVISIBLE=441, INVOKER=442, IO=443, IO_THREAD=444, IPC=445, 
		ISOLATION=446, ISSUER=447, JSON=448, KEY_BLOCK_SIZE=449, LANGUAGE=450, 
		LAST=451, LEAVES=452, LESS=453, LEVEL=454, LIST=455, LOCAL=456, LOGFILE=457, 
		LOGS=458, MASTER=459, MASTER_AUTO_POSITION=460, MASTER_CONNECT_RETRY=461, 
		MASTER_DELAY=462, MASTER_HEARTBEAT_PERIOD=463, MASTER_HOST=464, MASTER_LOG_FILE=465, 
		MASTER_LOG_POS=466, MASTER_PASSWORD=467, MASTER_PORT=468, MASTER_RETRY_COUNT=469, 
		MASTER_SSL=470, MASTER_SSL_CA=471, MASTER_SSL_CAPATH=472, MASTER_SSL_CERT=473, 
		MASTER_SSL_CIPHER=474, MASTER_SSL_CRL=475, MASTER_SSL_CRLPATH=476, MASTER_SSL_KEY=477, 
		MASTER_TLS_VERSION=478, MASTER_USER=479, MAX_CONNECTIONS_PER_HOUR=480, 
		MAX_QUERIES_PER_HOUR=481, MAX_ROWS=482, MAX_SIZE=483, MAX_UPDATES_PER_HOUR=484, 
		MAX_USER_CONNECTIONS=485, MEDIUM=486, MEMBER=487, MERGE=488, MESSAGE_TEXT=489, 
		MID=490, MIGRATE=491, MIN_ROWS=492, MODE=493, MODIFY=494, MUTEX=495, MYSQL=496, 
		MYSQL_ERRNO=497, NAME=498, NAMES=499, NCHAR=500, NEVER=501, NEXT=502, 
		NO=503, NOCOPY=504, NOWAIT=505, NODEGROUP=506, NONE=507, ODBC=508, OFFLINE=509, 
		OFFSET=510, OF=511, OJ=512, OLD_PASSWORD=513, ONE=514, ONLINE=515, ONLY=516, 
		OPEN=517, OPTIMIZER_COSTS=518, OPTIONS=519, OWNER=520, PACK_KEYS=521, 
		PAGE=522, PARSER=523, PARTIAL=524, PARTITIONING=525, PARTITIONS=526, PASSWORD=527, 
		PHASE=528, PLUGIN=529, PLUGIN_DIR=530, PLUGINS=531, PORT=532, PRECEDES=533, 
		PRECEDING=534, PREPARE=535, PRESERVE=536, PREV=537, PROCESSLIST=538, PROFILE=539, 
		PROFILES=540, PROXY=541, QUERY=542, QUICK=543, REBUILD=544, RECOVER=545, 
		RECURSIVE=546, REDO_BUFFER_SIZE=547, REDUNDANT=548, RELAY=549, RELAY_LOG_FILE=550, 
		RELAY_LOG_POS=551, RELAYLOG=552, REMOVE=553, REORGANIZE=554, REPAIR=555, 
		REPLICATE_DO_DB=556, REPLICATE_DO_TABLE=557, REPLICATE_IGNORE_DB=558, 
		REPLICATE_IGNORE_TABLE=559, REPLICATE_REWRITE_DB=560, REPLICATE_WILD_DO_TABLE=561, 
		REPLICATE_WILD_IGNORE_TABLE=562, REPLICATION=563, RESET=564, RESUME=565, 
		RETURNED_SQLSTATE=566, RETURNING=567, RETURNS=568, ROLE=569, ROLLBACK=570, 
		ROLLUP=571, ROTATE=572, ROW=573, ROWS=574, ROW_FORMAT=575, RTREE=576, 
		SAVEPOINT=577, SCHEDULE=578, SECURITY=579, SERVER=580, SESSION=581, SHARE=582, 
		SHARED=583, SIGNED=584, SIMPLE=585, SLAVE=586, SLOW=587, SNAPSHOT=588, 
		SOCKET=589, SOME=590, SONAME=591, SOUNDS=592, SOURCE=593, SQL_AFTER_GTIDS=594, 
		SQL_AFTER_MTS_GAPS=595, SQL_BEFORE_GTIDS=596, SQL_BUFFER_RESULT=597, SQL_CACHE=598, 
		SQL_NO_CACHE=599, SQL_THREAD=600, START=601, STARTS=602, STATS_AUTO_RECALC=603, 
		STATS_PERSISTENT=604, STATS_SAMPLE_PAGES=605, STATUS=606, STOP=607, STORAGE=608, 
		STORED=609, STRING=610, SUBCLASS_ORIGIN=611, SUBJECT=612, SUBPARTITION=613, 
		SUBPARTITIONS=614, SUSPEND=615, SWAPS=616, SWITCHES=617, TABLE_NAME=618, 
		TABLESPACE=619, TABLE_TYPE=620, TEMPORARY=621, TEMPTABLE=622, THAN=623, 
		TRADITIONAL=624, TRANSACTION=625, TRANSACTIONAL=626, TRIGGERS=627, TRUNCATE=628, 
		UNBOUNDED=629, UNDEFINED=630, UNDOFILE=631, UNDO_BUFFER_SIZE=632, UNINSTALL=633, 
		UNKNOWN=634, UNTIL=635, UPGRADE=636, USER=637, USE_FRM=638, USER_RESOURCES=639, 
		VALIDATION=640, VALUE=641, VARIABLES=642, VIEW=643, VIRTUAL=644, VISIBLE=645, 
		WAIT=646, WARNINGS=647, WINDOW=648, WITHOUT=649, WORK=650, WRAPPER=651, 
		X509=652, XA=653, XML=654, YES=655, EUR=656, USA=657, JIS=658, ISO=659, 
		INTERNAL=660, QUARTER=661, MONTH=662, DAY=663, HOUR=664, MINUTE=665, WEEK=666, 
		SECOND=667, MICROSECOND=668, TABLES=669, ROUTINE=670, EXECUTE=671, FILE=672, 
		PROCESS=673, RELOAD=674, SHUTDOWN=675, SUPER=676, PRIVILEGES=677, APPLICATION_PASSWORD_ADMIN=678, 
		AUDIT_ADMIN=679, BACKUP_ADMIN=680, BINLOG_ADMIN=681, BINLOG_ENCRYPTION_ADMIN=682, 
		CLONE_ADMIN=683, CONNECTION_ADMIN=684, ENCRYPTION_KEY_ADMIN=685, FIREWALL_ADMIN=686, 
		FIREWALL_USER=687, FLUSH_OPTIMIZER_COSTS=688, FLUSH_STATUS=689, FLUSH_TABLES=690, 
		FLUSH_USER_RESOURCES=691, ADMIN=692, GROUP_REPLICATION_ADMIN=693, INNODB_REDO_LOG_ARCHIVE=694, 
		INNODB_REDO_LOG_ENABLE=695, NDB_STORED_USER=696, PERSIST_RO_VARIABLES_ADMIN=697, 
		REPLICATION_APPLIER=698, REPLICATION_SLAVE_ADMIN=699, RESOURCE_GROUP_ADMIN=700, 
		RESOURCE_GROUP_USER=701, ROLE_ADMIN=702, SERVICE_CONNECTION_ADMIN=703, 
		SESSION_VARIABLES_ADMIN=704, SET_USER_ID=705, SHOW_ROUTINE=706, SYSTEM_VARIABLES_ADMIN=707, 
		TABLE_ENCRYPTION_ADMIN=708, VERSION_TOKEN_ADMIN=709, XA_RECOVER_ADMIN=710, 
		ARMSCII8=711, ASCII=712, BIG5=713, CP1250=714, CP1251=715, CP1256=716, 
		CP1257=717, CP850=718, CP852=719, CP866=720, CP932=721, DEC8=722, EUCJPMS=723, 
		EUCKR=724, GB18030=725, GB2312=726, GBK=727, GEOSTD8=728, GREEK=729, HEBREW=730, 
		HP8=731, KEYBCS2=732, KOI8R=733, KOI8U=734, LATIN1=735, LATIN2=736, LATIN5=737, 
		LATIN7=738, MACCE=739, MACROMAN=740, SJIS=741, SWE7=742, TIS620=743, UCS2=744, 
		UJIS=745, UTF16=746, UTF16LE=747, UTF32=748, UTF8=749, UTF8MB3=750, UTF8MB4=751, 
		ARCHIVE=752, BLACKHOLE=753, CSV=754, FEDERATED=755, INNODB=756, MEMORY=757, 
		MRG_MYISAM=758, MYISAM=759, NDB=760, NDBCLUSTER=761, PERFORMANCE_SCHEMA=762, 
		TOKUDB=763, REPEATABLE=764, COMMITTED=765, UNCOMMITTED=766, SERIALIZABLE=767, 
		GEOMETRYCOLLECTION=768, GEOMCOLLECTION=769, GEOMETRY=770, LINESTRING=771, 
		MULTILINESTRING=772, MULTIPOINT=773, MULTIPOLYGON=774, POINT=775, POLYGON=776, 
		ABS=777, ACOS=778, ADDDATE=779, ADDTIME=780, AES_DECRYPT=781, AES_ENCRYPT=782, 
		AREA=783, ASBINARY=784, ASIN=785, ASTEXT=786, ASWKB=787, ASWKT=788, ASYMMETRIC_DECRYPT=789, 
		ASYMMETRIC_DERIVE=790, ASYMMETRIC_ENCRYPT=791, ASYMMETRIC_SIGN=792, ASYMMETRIC_VERIFY=793, 
		ATAN=794, ATAN2=795, BENCHMARK=796, BIN=797, BIT_COUNT=798, BIT_LENGTH=799, 
		BUFFER=800, CATALOG_NAME=801, CEIL=802, CEILING=803, CENTROID=804, CHARACTER_LENGTH=805, 
		CHARSET=806, CHAR_LENGTH=807, COERCIBILITY=808, COLLATION=809, COMPRESS=810, 
		CONCAT=811, CONCAT_WS=812, CONNECTION_ID=813, CONV=814, CONVERT_TZ=815, 
		COS=816, COT=817, CRC32=818, CREATE_ASYMMETRIC_PRIV_KEY=819, CREATE_ASYMMETRIC_PUB_KEY=820, 
		CREATE_DH_PARAMETERS=821, CREATE_DIGEST=822, CROSSES=823, DATEDIFF=824, 
		DATE_FORMAT=825, DAYNAME=826, DAYOFMONTH=827, DAYOFWEEK=828, DAYOFYEAR=829, 
		DECODE=830, DEGREES=831, DES_DECRYPT=832, DES_ENCRYPT=833, DIMENSION=834, 
		DISJOINT=835, ELT=836, ENCODE=837, ENCRYPT=838, ENDPOINT=839, ENGINE_ATTRIBUTE=840, 
		ENVELOPE=841, EQUALS=842, EXP=843, EXPORT_SET=844, EXTERIORRING=845, EXTRACTVALUE=846, 
		FIELD=847, FIND_IN_SET=848, FLOOR=849, FORMAT=850, FOUND_ROWS=851, FROM_BASE64=852, 
		FROM_DAYS=853, FROM_UNIXTIME=854, GEOMCOLLFROMTEXT=855, GEOMCOLLFROMWKB=856, 
		GEOMETRYCOLLECTIONFROMTEXT=857, GEOMETRYCOLLECTIONFROMWKB=858, GEOMETRYFROMTEXT=859, 
		GEOMETRYFROMWKB=860, GEOMETRYN=861, GEOMETRYTYPE=862, GEOMFROMTEXT=863, 
		GEOMFROMWKB=864, GET_FORMAT=865, GET_LOCK=866, GLENGTH=867, GREATEST=868, 
		GTID_SUBSET=869, GTID_SUBTRACT=870, HEX=871, IFNULL=872, INET6_ATON=873, 
		INET6_NTOA=874, INET_ATON=875, INET_NTOA=876, INSTR=877, INTERIORRINGN=878, 
		INTERSECTS=879, ISCLOSED=880, ISEMPTY=881, ISNULL=882, ISSIMPLE=883, IS_FREE_LOCK=884, 
		IS_IPV4=885, IS_IPV4_COMPAT=886, IS_IPV4_MAPPED=887, IS_IPV6=888, IS_USED_LOCK=889, 
		LAST_INSERT_ID=890, LCASE=891, LEAST=892, LENGTH=893, LINEFROMTEXT=894, 
		LINEFROMWKB=895, LINESTRINGFROMTEXT=896, LINESTRINGFROMWKB=897, LN=898, 
		LOAD_FILE=899, LOCATE=900, LOG=901, LOG10=902, LOG2=903, LOWER=904, LPAD=905, 
		LTRIM=906, MAKEDATE=907, MAKETIME=908, MAKE_SET=909, MASTER_POS_WAIT=910, 
		MBRCONTAINS=911, MBRDISJOINT=912, MBREQUAL=913, MBRINTERSECTS=914, MBROVERLAPS=915, 
		MBRTOUCHES=916, MBRWITHIN=917, MD5=918, MLINEFROMTEXT=919, MLINEFROMWKB=920, 
		MONTHNAME=921, MPOINTFROMTEXT=922, MPOINTFROMWKB=923, MPOLYFROMTEXT=924, 
		MPOLYFROMWKB=925, MULTILINESTRINGFROMTEXT=926, MULTILINESTRINGFROMWKB=927, 
		MULTIPOINTFROMTEXT=928, MULTIPOINTFROMWKB=929, MULTIPOLYGONFROMTEXT=930, 
		MULTIPOLYGONFROMWKB=931, NAME_CONST=932, NULLIF=933, NUMGEOMETRIES=934, 
		NUMINTERIORRINGS=935, NUMPOINTS=936, OCT=937, OCTET_LENGTH=938, ORD=939, 
		OVERLAPS=940, PERIOD_ADD=941, PERIOD_DIFF=942, PI=943, POINTFROMTEXT=944, 
		POINTFROMWKB=945, POINTN=946, POLYFROMTEXT=947, POLYFROMWKB=948, POLYGONFROMTEXT=949, 
		POLYGONFROMWKB=950, POW=951, POWER=952, QUOTE=953, RADIANS=954, RAND=955, 
		RANDOM_BYTES=956, RELEASE_LOCK=957, REVERSE=958, ROUND=959, ROW_COUNT=960, 
		RPAD=961, RTRIM=962, SEC_TO_TIME=963, SECONDARY_ENGINE_ATTRIBUTE=964, 
		SESSION_USER=965, SHA=966, SHA1=967, SHA2=968, SCHEMA_NAME=969, SIGN=970, 
		SIN=971, SLEEP=972, SOUNDEX=973, SQL_THREAD_WAIT_AFTER_GTIDS=974, SQRT=975, 
		SRID=976, STARTPOINT=977, STRCMP=978, STR_TO_DATE=979, ST_AREA=980, ST_ASBINARY=981, 
		ST_ASTEXT=982, ST_ASWKB=983, ST_ASWKT=984, ST_BUFFER=985, ST_CENTROID=986, 
		ST_CONTAINS=987, ST_CROSSES=988, ST_DIFFERENCE=989, ST_DIMENSION=990, 
		ST_DISJOINT=991, ST_DISTANCE=992, ST_ENDPOINT=993, ST_ENVELOPE=994, ST_EQUALS=995, 
		ST_EXTERIORRING=996, ST_GEOMCOLLFROMTEXT=997, ST_GEOMCOLLFROMTXT=998, 
		ST_GEOMCOLLFROMWKB=999, ST_GEOMETRYCOLLECTIONFROMTEXT=1000, ST_GEOMETRYCOLLECTIONFROMWKB=1001, 
		ST_GEOMETRYFROMTEXT=1002, ST_GEOMETRYFROMWKB=1003, ST_GEOMETRYN=1004, 
		ST_GEOMETRYTYPE=1005, ST_GEOMFROMTEXT=1006, ST_GEOMFROMWKB=1007, ST_INTERIORRINGN=1008, 
		ST_INTERSECTION=1009, ST_INTERSECTS=1010, ST_ISCLOSED=1011, ST_ISEMPTY=1012, 
		ST_ISSIMPLE=1013, ST_LINEFROMTEXT=1014, ST_LINEFROMWKB=1015, ST_LINESTRINGFROMTEXT=1016, 
		ST_LINESTRINGFROMWKB=1017, ST_NUMGEOMETRIES=1018, ST_NUMINTERIORRING=1019, 
		ST_NUMINTERIORRINGS=1020, ST_NUMPOINTS=1021, ST_OVERLAPS=1022, ST_POINTFROMTEXT=1023, 
		ST_POINTFROMWKB=1024, ST_POINTN=1025, ST_POLYFROMTEXT=1026, ST_POLYFROMWKB=1027, 
		ST_POLYGONFROMTEXT=1028, ST_POLYGONFROMWKB=1029, ST_SRID=1030, ST_STARTPOINT=1031, 
		ST_SYMDIFFERENCE=1032, ST_TOUCHES=1033, ST_UNION=1034, ST_WITHIN=1035, 
		ST_X=1036, ST_Y=1037, SUBDATE=1038, SUBSTRING_INDEX=1039, SUBTIME=1040, 
		SYSTEM_USER=1041, TAN=1042, TIMEDIFF=1043, TIMESTAMPADD=1044, TIMESTAMPDIFF=1045, 
		TIME_FORMAT=1046, TIME_TO_SEC=1047, TOUCHES=1048, TO_BASE64=1049, TO_DAYS=1050, 
		TO_SECONDS=1051, UCASE=1052, UNCOMPRESS=1053, UNCOMPRESSED_LENGTH=1054, 
		UNHEX=1055, UNIX_TIMESTAMP=1056, UPDATEXML=1057, UPPER=1058, UUID=1059, 
		UUID_SHORT=1060, VALIDATE_PASSWORD_STRENGTH=1061, VERSION=1062, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1063, 
		WEEKDAY=1064, WEEKOFYEAR=1065, WEIGHT_STRING=1066, WITHIN=1067, YEARWEEK=1068, 
		Y_FUNCTION=1069, X_FUNCTION=1070, VAR_ASSIGN=1071, PLUS_ASSIGN=1072, MINUS_ASSIGN=1073, 
		MULT_ASSIGN=1074, DIV_ASSIGN=1075, MOD_ASSIGN=1076, AND_ASSIGN=1077, XOR_ASSIGN=1078, 
		OR_ASSIGN=1079, STAR=1080, DIVIDE=1081, MODULE=1082, PLUS=1083, MINUS=1084, 
		DIV=1085, MOD=1086, EQUAL_SYMBOL=1087, GREATER_SYMBOL=1088, LESS_SYMBOL=1089, 
		EXCLAMATION_SYMBOL=1090, BIT_NOT_OP=1091, BIT_OR_OP=1092, BIT_AND_OP=1093, 
		BIT_XOR_OP=1094, DOT=1095, LR_BRACKET=1096, RR_BRACKET=1097, COMMA=1098, 
		SEMI=1099, AT_SIGN=1100, ZERO_DECIMAL=1101, ONE_DECIMAL=1102, TWO_DECIMAL=1103, 
		SINGLE_QUOTE_SYMB=1104, DOUBLE_QUOTE_SYMB=1105, REVERSE_QUOTE_SYMB=1106, 
		COLON_SYMB=1107, CHARSET_REVERSE_QOUTE_STRING=1108, FILESIZE_LITERAL=1109, 
		START_NATIONAL_STRING_LITERAL=1110, STRING_LITERAL=1111, DECIMAL_LITERAL=1112, 
		HEXADECIMAL_LITERAL=1113, REAL_LITERAL=1114, NULL_SPEC_LITERAL=1115, BIT_STRING=1116, 
		STRING_CHARSET_NAME=1117, DOT_ID=1118, ID=1119, REVERSE_QUOTE_ID=1120, 
		STRING_USER_NAME=1121, IP_ADDRESS=1122, LOCAL_ID=1123, GLOBAL_ID=1124, 
		ERROR_RECONGNIGION=1125;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_withClause = 23, RULE_commonTableExpressions = 24, 
		RULE_cteName = 25, RULE_cteColumnName = 26, RULE_createView = 27, RULE_createDatabaseOption = 28, 
		RULE_charSet = 29, RULE_ownerStatement = 30, RULE_scheduleExpression = 31, 
		RULE_timestampValue = 32, RULE_intervalExpr = 33, RULE_intervalType = 34, 
		RULE_enableType = 35, RULE_indexType = 36, RULE_indexOption = 37, RULE_procedureParameter = 38, 
		RULE_functionParameter = 39, RULE_routineOption = 40, RULE_serverOption = 41, 
		RULE_createDefinitions = 42, RULE_createDefinition = 43, RULE_columnDefinition = 44, 
		RULE_columnConstraint = 45, RULE_tableConstraint = 46, RULE_referenceDefinition = 47, 
		RULE_referenceAction = 48, RULE_referenceControlType = 49, RULE_indexColumnDefinition = 50, 
		RULE_tableOption = 51, RULE_tableType = 52, RULE_tablespaceStorage = 53, 
		RULE_partitionDefinitions = 54, RULE_partitionFunctionDefinition = 55, 
		RULE_subpartitionFunctionDefinition = 56, RULE_partitionDefinition = 57, 
		RULE_partitionDefinerAtom = 58, RULE_partitionDefinerVector = 59, RULE_subpartitionDefinition = 60, 
		RULE_partitionOption = 61, RULE_alterDatabase = 62, RULE_alterEvent = 63, 
		RULE_alterFunction = 64, RULE_alterInstance = 65, RULE_alterLogfileGroup = 66, 
		RULE_alterProcedure = 67, RULE_alterServer = 68, RULE_alterTable = 69, 
		RULE_alterTablespace = 70, RULE_alterView = 71, RULE_alterSpecification = 72, 
		RULE_dropDatabase = 73, RULE_dropEvent = 74, RULE_dropIndex = 75, RULE_dropLogfileGroup = 76, 
		RULE_dropProcedure = 77, RULE_dropFunction = 78, RULE_dropServer = 79, 
		RULE_dropTable = 80, RULE_dropTablespace = 81, RULE_dropTrigger = 82, 
		RULE_dropView = 83, RULE_renameTable = 84, RULE_renameTableClause = 85, 
		RULE_truncateTable = 86, RULE_callStatement = 87, RULE_deleteStatement = 88, 
		RULE_doStatement = 89, RULE_handlerStatement = 90, RULE_insertStatement = 91, 
		RULE_loadDataStatement = 92, RULE_loadXmlStatement = 93, RULE_replaceStatement = 94, 
		RULE_selectStatement = 95, RULE_updateStatement = 96, RULE_insertStatementValue = 97, 
		RULE_updatedElement = 98, RULE_assignmentField = 99, RULE_lockClause = 100, 
		RULE_singleDeleteStatement = 101, RULE_multipleDeleteStatement = 102, 
		RULE_handlerOpenStatement = 103, RULE_handlerReadIndexStatement = 104, 
		RULE_handlerReadStatement = 105, RULE_handlerCloseStatement = 106, RULE_singleUpdateStatement = 107, 
		RULE_multipleUpdateStatement = 108, RULE_orderByClause = 109, RULE_orderByExpression = 110, 
		RULE_tableSources = 111, RULE_tableSource = 112, RULE_tableSourceItem = 113, 
		RULE_indexHint = 114, RULE_indexHintType = 115, RULE_joinPart = 116, RULE_queryExpression = 117, 
		RULE_queryExpressionNointo = 118, RULE_querySpecification = 119, RULE_querySpecificationNointo = 120, 
		RULE_unionParenthesis = 121, RULE_unionStatement = 122, RULE_selectSpec = 123, 
		RULE_selectElements = 124, RULE_selectElement = 125, RULE_selectIntoExpression = 126, 
		RULE_selectFieldsInto = 127, RULE_selectLinesInto = 128, RULE_fromClause = 129, 
		RULE_groupByClause = 130, RULE_havingClause = 131, RULE_windowClause = 132, 
		RULE_groupByItem = 133, RULE_limitClause = 134, RULE_limitClauseAtom = 135, 
		RULE_startTransaction = 136, RULE_beginWork = 137, RULE_commitWork = 138, 
		RULE_rollbackWork = 139, RULE_savepointStatement = 140, RULE_rollbackStatement = 141, 
		RULE_releaseStatement = 142, RULE_lockTables = 143, RULE_unlockTables = 144, 
		RULE_setAutocommitStatement = 145, RULE_setTransactionStatement = 146, 
		RULE_transactionMode = 147, RULE_lockTableElement = 148, RULE_lockAction = 149, 
		RULE_transactionOption = 150, RULE_transactionLevel = 151, RULE_changeMaster = 152, 
		RULE_changeReplicationFilter = 153, RULE_purgeBinaryLogs = 154, RULE_resetMaster = 155, 
		RULE_resetSlave = 156, RULE_startSlave = 157, RULE_stopSlave = 158, RULE_startGroupReplication = 159, 
		RULE_stopGroupReplication = 160, RULE_masterOption = 161, RULE_stringMasterOption = 162, 
		RULE_decimalMasterOption = 163, RULE_boolMasterOption = 164, RULE_channelOption = 165, 
		RULE_replicationFilter = 166, RULE_tablePair = 167, RULE_threadType = 168, 
		RULE_untilOption = 169, RULE_connectionOption = 170, RULE_gtuidSet = 171, 
		RULE_xaStartTransaction = 172, RULE_xaEndTransaction = 173, RULE_xaPrepareStatement = 174, 
		RULE_xaCommitWork = 175, RULE_xaRollbackWork = 176, RULE_xaRecoverWork = 177, 
		RULE_prepareStatement = 178, RULE_executeStatement = 179, RULE_deallocatePrepare = 180, 
		RULE_routineBody = 181, RULE_blockStatement = 182, RULE_caseStatement = 183, 
		RULE_ifStatement = 184, RULE_iterateStatement = 185, RULE_leaveStatement = 186, 
		RULE_loopStatement = 187, RULE_repeatStatement = 188, RULE_returnStatement = 189, 
		RULE_whileStatement = 190, RULE_cursorStatement = 191, RULE_declareVariable = 192, 
		RULE_declareCondition = 193, RULE_declareCursor = 194, RULE_declareHandler = 195, 
		RULE_handlerConditionValue = 196, RULE_procedureSqlStatement = 197, RULE_caseAlternative = 198, 
		RULE_elifAlternative = 199, RULE_alterUser = 200, RULE_createUser = 201, 
		RULE_dropUser = 202, RULE_grantStatement = 203, RULE_roleOption = 204, 
		RULE_grantProxy = 205, RULE_renameUser = 206, RULE_revokeStatement = 207, 
		RULE_revokeProxy = 208, RULE_setPasswordStatement = 209, RULE_userSpecification = 210, 
		RULE_userAuthOption = 211, RULE_tlsOption = 212, RULE_userResourceOption = 213, 
		RULE_userPasswordOption = 214, RULE_userLockOption = 215, RULE_privelegeClause = 216, 
		RULE_privilege = 217, RULE_privilegeLevel = 218, RULE_renameUserClause = 219, 
		RULE_analyzeTable = 220, RULE_checkTable = 221, RULE_checksumTable = 222, 
		RULE_optimizeTable = 223, RULE_repairTable = 224, RULE_checkTableOption = 225, 
		RULE_createUdfunction = 226, RULE_installPlugin = 227, RULE_uninstallPlugin = 228, 
		RULE_setStatement = 229, RULE_showStatement = 230, RULE_variableClause = 231, 
		RULE_showCommonEntity = 232, RULE_showFilter = 233, RULE_showGlobalInfoClause = 234, 
		RULE_showSchemaEntity = 235, RULE_showProfileType = 236, RULE_binlogStatement = 237, 
		RULE_cacheIndexStatement = 238, RULE_flushStatement = 239, RULE_killStatement = 240, 
		RULE_loadIndexIntoCache = 241, RULE_resetStatement = 242, RULE_shutdownStatement = 243, 
		RULE_tableIndexes = 244, RULE_flushOption = 245, RULE_flushTableOption = 246, 
		RULE_loadedTableIndexes = 247, RULE_simpleDescribeStatement = 248, RULE_fullDescribeStatement = 249, 
		RULE_helpStatement = 250, RULE_useStatement = 251, RULE_signalStatement = 252, 
		RULE_resignalStatement = 253, RULE_signalConditionInformation = 254, RULE_diagnosticsStatement = 255, 
		RULE_diagnosticsConditionInformationName = 256, RULE_describeObjectClause = 257, 
		RULE_fullId = 258, RULE_tableName = 259, RULE_fullColumnName = 260, RULE_indexColumnName = 261, 
		RULE_userName = 262, RULE_mysqlVariable = 263, RULE_charsetName = 264, 
		RULE_collationName = 265, RULE_engineName = 266, RULE_uuidSet = 267, RULE_xid = 268, 
		RULE_xuidStringId = 269, RULE_authPlugin = 270, RULE_uid = 271, RULE_simpleId = 272, 
		RULE_dottedId = 273, RULE_decimalLiteral = 274, RULE_fileSizeLiteral = 275, 
		RULE_stringLiteral = 276, RULE_booleanLiteral = 277, RULE_hexadecimalLiteral = 278, 
		RULE_nullNotnull = 279, RULE_constant = 280, RULE_dataType = 281, RULE_collectionOptions = 282, 
		RULE_convertedDataType = 283, RULE_lengthOneDimension = 284, RULE_lengthTwoDimension = 285, 
		RULE_lengthTwoOptionalDimension = 286, RULE_uidList = 287, RULE_tables = 288, 
		RULE_indexColumnNames = 289, RULE_expressions = 290, RULE_expressionsWithDefaults = 291, 
		RULE_constants = 292, RULE_simpleStrings = 293, RULE_userVariables = 294, 
		RULE_defaultValue = 295, RULE_currentTimestamp = 296, RULE_expressionOrDefault = 297, 
		RULE_ifExists = 298, RULE_ifNotExists = 299, RULE_functionCall = 300, 
		RULE_specificFunction = 301, RULE_caseFuncAlternative = 302, RULE_levelsInWeightString = 303, 
		RULE_levelInWeightListElement = 304, RULE_aggregateWindowedFunction = 305, 
		RULE_nonAggregateWindowedFunction = 306, RULE_overClause = 307, RULE_windowSpec = 308, 
		RULE_windowName = 309, RULE_frameClause = 310, RULE_frameUnits = 311, 
		RULE_frameExtent = 312, RULE_frameBetween = 313, RULE_frameRange = 314, 
		RULE_partitionClause = 315, RULE_scalarFunctionName = 316, RULE_passwordFunctionClause = 317, 
		RULE_functionArgs = 318, RULE_functionArg = 319, RULE_expression = 320, 
		RULE_predicate = 321, RULE_expressionAtom = 322, RULE_unaryOperator = 323, 
		RULE_comparisonOperator = 324, RULE_logicalOperator = 325, RULE_bitOperator = 326, 
		RULE_mathOperator = 327, RULE_jsonOperator = 328, RULE_charsetNameBase = 329, 
		RULE_transactionLevelBase = 330, RULE_privilegesBase = 331, RULE_intervalTypeBase = 332, 
		RULE_dataTypeBase = 333, RULE_keywordsCanBeId = 334, RULE_functionNameBase = 335;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
		"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
		"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
		"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
		"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
		"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
		"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
		"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
		"dropTablespace", "dropTrigger", "dropView", "renameTable", "renameTableClause", 
		"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
		"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
		"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
		"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
		"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
		"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
		"setStatement", "showStatement", "variableClause", "showCommonEntity", 
		"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
		"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
		"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
		"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
		"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
		"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
		"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
		"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable", 
		"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
		"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
		"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
		"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension", 
		"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables", 
		"indexColumnNames", "expressions", "expressionsWithDefaults", "constants", 
		"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
		"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
		"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
		"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
		"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
		"keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
		"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
		"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
		"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
		"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
		"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
		"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", 
		"'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
		"'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
		"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", 
		"'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
		"'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
		"'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", 
		"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
		"'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
		"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
		"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", 
		"'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
		"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
		"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
		"'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
		"'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
		"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
		"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
		"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
		"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
		"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
		"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
		"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
		"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
		"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
		"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
		"'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
		"'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
		"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
		"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
		"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
		"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", 
		"'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
		"'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", 
		"'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
		"'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", 
		"'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
		"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NOCOPY'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
		"'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", 
		"'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
		"'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
		"'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
		"'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
		"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
		"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
		"'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", 
		"'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", 
		"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
		"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
		"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
		"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
		"'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
		"'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
		"'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
		"'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
		"'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
		"'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
		"'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
		"'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
		"'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
		"'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
		"'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", 
		"'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", 
		"'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
		"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
		"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
		"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
		"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
		"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
		"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
		"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
		null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
		"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", 
		"'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
		"'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
		"'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
		"'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
		"'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
		"'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
		"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
		"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
		"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
		"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
		"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
		"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
		"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
		"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
		"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
		"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
		"OR", "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
		"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
		"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
		"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
		"SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
		"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
		"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
		"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
		"JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
		"JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", "JSON_MERGE", 
		"JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", "JSON_REPLACE", 
		"JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", 
		"JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
		"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
		"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
		"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
		"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
		"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
		"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
		"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
		"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
		"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
		"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
		"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", 
		"CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", 
		"CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
		"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
		"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
		"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
		"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
		"EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", 
		"EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
		"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
		"INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", 
		"ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", 
		"LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
		"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
		"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
		"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
		"MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
		"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCOPY", "NOWAIT", "NODEGROUP", 
		"NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", 
		"ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
		"PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", 
		"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", 
		"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", 
		"REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", 
		"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", 
		"ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", 
		"SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
		"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
		"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
		"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
		"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
		"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
		"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
		"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
		"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
		"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
		"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
		"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
		"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
		"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
		"APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
		"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
		"FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
		"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", 
		"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", 
		"PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
		"RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
		"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
		"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", 
		"ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", 
		"CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", 
		"COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
		"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
		"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
		"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
		"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
		"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
		"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
		"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
		"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
		"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
		"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
		"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
		"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
		"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
		"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
		"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
		"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
		"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
		"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
		"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
		"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
		"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GET - 68)) | (1L << (GRANT - 68)) | (1L << (INSERT - 68)) | (1L << (KILL - 68)) | (1L << (LOAD - 68)) | (1L << (LOCK - 68)) | (1L << (OPTIMIZE - 68)) | (1L << (PURGE - 68)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (RELEASE - 132)) | (1L << (RENAME - 132)) | (1L << (REPLACE - 132)) | (1L << (RESIGNAL - 132)) | (1L << (REVOKE - 132)) | (1L << (SELECT - 132)) | (1L << (SET - 132)) | (1L << (SHOW - 132)) | (1L << (SIGNAL - 132)) | (1L << (UNLOCK - 132)) | (1L << (UPDATE - 132)) | (1L << (USE - 132)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (BEGIN - 332)) | (1L << (BINLOG - 332)) | (1L << (CACHE - 332)) | (1L << (CHECKSUM - 332)) | (1L << (COMMIT - 332)) | (1L << (DEALLOCATE - 332)) | (1L << (DO - 332)))) != 0) || ((((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & ((1L << (FLUSH - 416)) | (1L << (HANDLER - 416)) | (1L << (HELP - 416)) | (1L << (INSTALL - 416)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (PREPARE - 535)) | (1L << (REPAIR - 535)) | (1L << (RESET - 535)) | (1L << (ROLLBACK - 535)) | (1L << (SAVEPOINT - 535)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (START - 601)) | (1L << (STOP - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (XA - 601)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 672;
				sqlStatements();
				}
			}

			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 675;
				Match(MINUS);
				State = 676;
				Match(MINUS);
				}
			}

			State = 679;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 690;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 681;
						sqlStatement();
						State = 684;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUS) {
							{
							State = 682;
							Match(MINUS);
							State = 683;
							Match(MINUS);
							}
						}

						State = 687;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 686;
							Match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						State = 689;
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 695;
				sqlStatement();
				State = 701;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 696;
						Match(MINUS);
						State = 697;
						Match(MINUS);
						}
					}

					State = 700;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 703;
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				ddlStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				dmlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708;
				transactionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				replicationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 710;
				preparedStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 711;
				administrationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 712;
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddlStatement);
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717;
				createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 719;
				createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720;
				createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 721;
				createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 722;
				createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 723;
				createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 724;
				createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 725;
				createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 726;
				createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 727;
				createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 728;
				createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 729;
				alterDatabase();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 730;
				alterEvent();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 731;
				alterFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 732;
				alterInstance();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 733;
				alterLogfileGroup();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 734;
				alterProcedure();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 735;
				alterServer();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 736;
				alterTable();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 737;
				alterTablespace();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 738;
				alterView();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 739;
				dropDatabase();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 740;
				dropEvent();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 741;
				dropIndex();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 742;
				dropLogfileGroup();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 743;
				dropProcedure();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 744;
				dropFunction();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 745;
				dropServer();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 746;
				dropTable();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 747;
				dropTablespace();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 748;
				dropTrigger();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 749;
				dropView();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 750;
				renameTable();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 751;
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dmlStatement);
		try {
			State = 764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755;
				insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756;
				updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 757;
				deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 758;
				replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 759;
				callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 760;
				loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 761;
				loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 762;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 763;
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_transactionStatement);
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 769;
				rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 770;
				savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 771;
				rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 772;
				releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 773;
				lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 774;
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_replicationStatement);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777;
				changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778;
				changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 779;
				purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 780;
				resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 781;
				resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 782;
				startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 783;
				stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 784;
				startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 785;
				stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 786;
				xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 787;
				xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 788;
				xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 789;
				xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 790;
				xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 791;
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_preparedStatement);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794;
				prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 796;
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 801;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 802;
				leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 803;
				loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 804;
				repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 805;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 806;
				iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 807;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 808;
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_administrationStatement);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 811;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 812;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 813;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 814;
				grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 815;
				grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 816;
				renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 817;
				revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 818;
				revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 819;
				analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 820;
				checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 821;
				checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 822;
				optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 823;
				repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 824;
				createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 825;
				installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 826;
				uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 827;
				setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 828;
				showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 829;
				binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 830;
				cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 831;
				flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 832;
				killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 833;
				loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 834;
				resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 835;
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsStatementContext diagnosticsStatement() {
			return GetRuleContext<DiagnosticsStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_utilityStatement);
		try {
			State = 845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 838;
				simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 839;
				fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 840;
				helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 841;
				useStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 842;
				signalStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 843;
				resignalStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 844;
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(CREATE);
			State = 848;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 849;
				ifNotExists();
				}
			}

			State = 852;
			uid();
			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET) {
				{
				{
				State = 853;
				createDatabaseOption();
				}
				}
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(CREATE);
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 860;
				ownerStatement();
				}
			}

			State = 863;
			Match(EVENT);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 864;
				ifNotExists();
				}
			}

			State = 867;
			fullId();
			State = 868;
			Match(ON);
			State = 869;
			Match(SCHEDULE);
			State = 870;
			scheduleExpression();
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 871;
				Match(ON);
				State = 872;
				Match(COMPLETION);
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 873;
					Match(NOT);
					}
				}

				State = 876;
				Match(PRESERVE);
				}
			}

			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 879;
				enableType();
				}
			}

			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 882;
				Match(COMMENT);
				State = 883;
				Match(STRING_LITERAL);
				}
			}

			State = 886;
			Match(DO);
			State = 887;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOCOPY() { return GetTokens(MySqlParser.NOCOPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY(int i) {
			return GetToken(MySqlParser.NOCOPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTANT() { return GetTokens(MySqlParser.INSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT(int i) {
			return GetToken(MySqlParser.INSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			Match(CREATE);
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 890;
				Match(OR);
				State = 891;
				Match(REPLACE);
				}
			}

			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 894;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 897;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 900;
			Match(INDEX);
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 901;
				Match(IF);
				State = 902;
				Match(NOT);
				State = 903;
				Match(EXISTS);
				}
			}

			State = 906;
			uid();
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 907;
				indexType();
				}
			}

			State = 910;
			Match(ON);
			State = 911;
			tableName();
			State = 912;
			indexColumnNames();
			State = 916;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				{
				State = 913;
				Match(WAIT);
				State = 914;
				decimalLiteral();
				}
				break;
			case NOWAIT:
				{
				State = 915;
				Match(NOWAIT);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case IGNORED:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case NOT:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case USING:
			case WITH:
			case ALGORITHM:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case CLUSTERING:
			case COMMENT:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case INVISIBLE:
			case KEY_BLOCK_SIZE:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case VISIBLE:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				State = 918;
				indexOption();
				}
				}
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 936;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 934;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 924;
						Match(ALGORITHM);
						State = 926;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 925;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 928;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 929;
						Match(LOCK);
						State = 931;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 930;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 933;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 938;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			Match(CREATE);
			State = 940;
			Match(LOGFILE);
			State = 941;
			Match(GROUP);
			State = 942;
			uid();
			State = 943;
			Match(ADD);
			State = 944;
			Match(UNDOFILE);
			State = 945;
			_localctx.undoFile = Match(STRING_LITERAL);
			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 946;
				Match(INITIAL_SIZE);
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 947;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 950;
				_localctx.initSize = fileSizeLiteral();
				}
			}

			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 953;
				Match(UNDO_BUFFER_SIZE);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 954;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 957;
				_localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 960;
				Match(REDO_BUFFER_SIZE);
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 961;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 964;
				_localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 967;
				Match(NODEGROUP);
				State = 969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 968;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 971;
				uid();
				}
			}

			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 974;
				Match(WAIT);
				}
			}

			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 977;
				Match(COMMENT);
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 978;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 981;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 984;
			Match(ENGINE);
			State = 986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 985;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 988;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(CREATE);
			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 991;
				ownerStatement();
				}
			}

			State = 994;
			Match(PROCEDURE);
			State = 995;
			fullId();
			State = 996;
			Match(LR_BRACKET);
			State = 998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (IN - 34)) | (1L << (INOUT - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (OUT - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 997;
				procedureParameter();
				}
			}

			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1000;
				Match(COMMA);
				State = 1001;
				procedureParameter();
				}
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			Match(RR_BRACKET);
			State = 1011;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1008;
					routineOption();
					}
					} 
				}
				State = 1013;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 1014;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			Match(CREATE);
			State = 1018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1017;
				ownerStatement();
				}
			}

			State = 1020;
			Match(FUNCTION);
			State = 1021;
			fullId();
			State = 1022;
			Match(LR_BRACKET);
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 1023;
				functionParameter();
				}
			}

			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1026;
				Match(COMMA);
				State = 1027;
				functionParameter();
				}
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1033;
			Match(RR_BRACKET);
			State = 1034;
			Match(RETURNS);
			State = 1035;
			dataType();
			State = 1039;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1036;
					routineOption();
					}
					} 
				}
				State = 1041;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			State = 1044;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IGNORED:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 1042;
				routineBody();
				}
				break;
			case RETURN:
				{
				State = 1043;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(CREATE);
			State = 1047;
			Match(SERVER);
			State = 1048;
			uid();
			State = 1049;
			Match(FOREIGN);
			State = 1050;
			Match(DATA);
			State = 1051;
			Match(WRAPPER);
			State = 1052;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1053;
			Match(OPTIONS);
			State = 1054;
			Match(LR_BRACKET);
			State = 1055;
			serverOption();
			State = 1060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1056;
				Match(COMMA);
				State = 1057;
				serverOption();
				}
				}
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1063;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCopyCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCopyCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPLACE() { return GetTokens(MySqlParser.REPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE(int i) {
			return GetToken(MySqlParser.REPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065;
				Match(CREATE);
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1066;
					Match(OR);
					State = 1067;
					Match(REPLACE);
					}
				}

				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1070;
					Match(TEMPORARY);
					}
				}

				State = 1073;
				Match(TABLE);
				State = 1075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1074;
					ifNotExists();
					}
				}

				State = 1077;
				tableName();
				State = 1085;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 1078;
					Match(LIKE);
					State = 1079;
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 1080;
					Match(LR_BRACKET);
					State = 1081;
					Match(LIKE);
					State = 1082;
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 1083;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087;
				Match(CREATE);
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1088;
					Match(OR);
					State = 1089;
					Match(REPLACE);
					}
				}

				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1092;
					Match(TEMPORARY);
					}
				}

				State = 1095;
				Match(TABLE);
				State = 1097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1096;
					ifNotExists();
					}
				}

				State = 1099;
				tableName();
				State = 1101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 1100;
					createDefinitions();
					}
					break;
				}
				State = 1113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (AUTO_INCREMENT - 330)) | (1L << (AVG_ROW_LENGTH - 330)) | (1L << (CHECKSUM - 330)) | (1L << (PAGE_CHECKSUM - 330)) | (1L << (COMMENT - 330)) | (1L << (COMPRESSION - 330)) | (1L << (CONNECTION - 330)) | (1L << (DATA - 330)) | (1L << (DELAY_KEY_WRITE - 330)) | (1L << (ENCRYPTION - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (INSERT_METHOD - 394)) | (1L << (KEY_BLOCK_SIZE - 394)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (PACK_KEYS - 482)) | (1L << (PASSWORD - 482)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (ROW_FORMAT - 575)) | (1L << (STATS_AUTO_RECALC - 575)) | (1L << (STATS_PERSISTENT - 575)) | (1L << (STATS_SAMPLE_PAGES - 575)) | (1L << (STORAGE - 575)) | (1L << (TABLESPACE - 575)) | (1L << (TABLE_TYPE - 575)))) != 0) || _la==CHARSET) {
					{
					State = 1103;
					tableOption();
					State = 1110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (AUTO_INCREMENT - 330)) | (1L << (AVG_ROW_LENGTH - 330)) | (1L << (CHECKSUM - 330)) | (1L << (PAGE_CHECKSUM - 330)) | (1L << (COMMENT - 330)) | (1L << (COMPRESSION - 330)) | (1L << (CONNECTION - 330)) | (1L << (DATA - 330)) | (1L << (DELAY_KEY_WRITE - 330)) | (1L << (ENCRYPTION - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (INSERT_METHOD - 394)) | (1L << (KEY_BLOCK_SIZE - 394)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (PACK_KEYS - 482)) | (1L << (PASSWORD - 482)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (ROW_FORMAT - 575)) | (1L << (STATS_AUTO_RECALC - 575)) | (1L << (STATS_PERSISTENT - 575)) | (1L << (STATS_SAMPLE_PAGES - 575)) | (1L << (STORAGE - 575)) | (1L << (TABLESPACE - 575)) | (1L << (TABLE_TYPE - 575)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						State = 1105;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1104;
							Match(COMMA);
							}
						}

						State = 1107;
						tableOption();
						}
						}
						State = 1112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1115;
					partitionDefinitions();
					}
				}

				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1118;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1121;
					Match(AS);
					}
				}

				State = 1124;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1126;
				Match(CREATE);
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1127;
					Match(OR);
					State = 1128;
					Match(REPLACE);
					}
				}

				State = 1132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1131;
					Match(TEMPORARY);
					}
				}

				State = 1134;
				Match(TABLE);
				State = 1136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1135;
					ifNotExists();
					}
				}

				State = 1138;
				tableName();
				State = 1139;
				createDefinitions();
				State = 1150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 1140;
					tableOption();
					State = 1147;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1142;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1141;
								Match(COMMA);
								}
							}

							State = 1144;
							tableOption();
							}
							} 
						}
						State = 1149;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
					}
					}
					break;
				}
				State = 1153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1152;
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceInnodb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceInnodb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceInnodb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			Match(CREATE);
			State = 1158;
			Match(TABLESPACE);
			State = 1159;
			uid();
			State = 1160;
			Match(ADD);
			State = 1161;
			Match(DATAFILE);
			State = 1162;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1163;
				Match(FILE_BLOCK_SIZE);
				State = 1164;
				Match(EQUAL_SYMBOL);
				State = 1165;
				_localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1168;
				Match(ENGINE);
				State = 1170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1169;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1172;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceNdb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceNdb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceNdb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175;
			Match(CREATE);
			State = 1176;
			Match(TABLESPACE);
			State = 1177;
			uid();
			State = 1178;
			Match(ADD);
			State = 1179;
			Match(DATAFILE);
			State = 1180;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1181;
			Match(USE);
			State = 1182;
			Match(LOGFILE);
			State = 1183;
			Match(GROUP);
			State = 1184;
			uid();
			State = 1190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1185;
				Match(EXTENT_SIZE);
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1186;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1189;
				_localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1192;
				Match(INITIAL_SIZE);
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1193;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1196;
				_localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1199;
				Match(AUTOEXTEND_SIZE);
				State = 1201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1200;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1203;
				_localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1206;
				Match(MAX_SIZE);
				State = 1208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1207;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1210;
				_localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1213;
				Match(NODEGROUP);
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1214;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1217;
				uid();
				}
			}

			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1220;
				Match(WAIT);
				}
			}

			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1223;
				Match(COMMENT);
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1224;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1227;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1230;
			Match(ENGINE);
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1231;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1234;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(CREATE);
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1237;
				Match(OR);
				State = 1238;
				Match(REPLACE);
				}
			}

			State = 1242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1241;
				ownerStatement();
				}
			}

			State = 1244;
			Match(TRIGGER);
			State = 1245;
			_localctx.thisTrigger = fullId();
			State = 1246;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1247;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1248;
			Match(ON);
			State = 1249;
			tableName();
			State = 1250;
			Match(FOR);
			State = 1251;
			Match(EACH);
			State = 1252;
			Match(ROW);
			State = 1255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 1253;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1254;
				_localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1257;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 46, RULE_withClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259;
			Match(WITH);
			State = 1261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1260;
				Match(RECURSIVE);
				}
				break;
			}
			State = 1263;
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CteNameContext cteName() {
			return GetRuleContext<CteNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext[] cteColumnName() {
			return GetRuleContexts<CteColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext cteColumnName(int i) {
			return GetRuleContext<CteColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionsContext commonTableExpressions() {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(Context, State);
		EnterRule(_localctx, 48, RULE_commonTableExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			cteName();
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1266;
				Match(LR_BRACKET);
				State = 1267;
				cteColumnName();
				State = 1272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1268;
					Match(COMMA);
					State = 1269;
					cteColumnName();
					}
					}
					State = 1274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1275;
				Match(RR_BRACKET);
				}
			}

			State = 1279;
			Match(AS);
			State = 1280;
			Match(LR_BRACKET);
			State = 1281;
			dmlStatement();
			State = 1282;
			Match(RR_BRACKET);
			State = 1285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1283;
				Match(COMMA);
				State = 1284;
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCteName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCteName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteNameContext cteName() {
		CteNameContext _localctx = new CteNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_cteName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCteColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCteColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteColumnNameContext cteColumnName() {
		CteColumnNameContext _localctx = new CteColumnNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_cteColumnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 54, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291;
			Match(CREATE);
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1292;
				Match(OR);
				State = 1293;
				Match(REPLACE);
				}
			}

			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1296;
				Match(ALGORITHM);
				State = 1297;
				Match(EQUAL_SYMBOL);
				State = 1298;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1301;
				ownerStatement();
				}
			}

			State = 1307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1304;
				Match(SQL);
				State = 1305;
				Match(SECURITY);
				State = 1306;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1309;
			Match(VIEW);
			State = 1310;
			fullId();
			State = 1315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1311;
				Match(LR_BRACKET);
				State = 1312;
				uidList();
				State = 1313;
				Match(RR_BRACKET);
				}
			}

			State = 1317;
			Match(AS);
			State = 1319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1318;
				withClause();
				}
			}

			State = 1321;
			selectStatement();
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1322;
				Match(WITH);
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 1323;
					_localctx.checkOption = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOption = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1326;
				Match(CHECK);
				State = 1327;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 56, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1330;
					Match(DEFAULT);
					}
				}

				State = 1333;
				charSet();
				State = 1335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1334;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1339;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1337;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1338;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1341;
					Match(DEFAULT);
					}
				}

				State = 1344;
				Match(COLLATE);
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1345;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1348;
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 58, RULE_charSet);
		try {
			State = 1356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1351;
				Match(CHARACTER);
				State = 1352;
				Match(SET);
				}
				break;
			case CHARSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1353;
				Match(CHARSET);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1354;
				Match(CHAR);
				State = 1355;
				Match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOwnerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOwnerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_ownerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			Match(DEFINER);
			State = 1359;
			Match(EQUAL_SYMBOL);
			State = 1366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				State = 1360;
				userName();
				}
				break;
			case CURRENT_USER:
				{
				State = 1361;
				Match(CURRENT_USER);
				State = 1364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1362;
					Match(LR_BRACKET);
					State = 1363;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreciseSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreciseSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreciseSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_scheduleExpression);
		int _la;
		try {
			State = 1402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1368;
				Match(AT);
				State = 1369;
				timestampValue();
				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1370;
					intervalExpr();
					}
					}
					State = 1375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1376;
				Match(EVERY);
				State = 1379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 1377;
					decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1378;
					expression(0);
					}
					break;
				}
				State = 1381;
				intervalType();
				State = 1390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1382;
					Match(STARTS);
					State = 1383;
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					State = 1387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1384;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1389;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1392;
					Match(ENDS);
					State = 1393;
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					State = 1397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1394;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1399;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTimestampValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTimestampValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 64, RULE_timestampValue);
		try {
			State = 1408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1404;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1405;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1406;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1407;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			Match(PLUS);
			State = 1411;
			Match(INTERVAL);
			State = 1414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1412;
				decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1413;
				expression(0);
				}
				break;
			}
			State = 1416;
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_intervalType);
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1418;
				intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1419;
				Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1420;
				Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1421;
				Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1422;
				Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1423;
				Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1424;
				Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1425;
				Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1426;
				Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1427;
				Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1428;
				Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1429;
				Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1430;
				Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEnableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEnableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_enableType);
		try {
			State = 1438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433;
				Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1434;
				Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1435;
				Match(DISABLE);
				State = 1436;
				Match(ON);
				State = 1437;
				Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MySqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			Match(USING);
			State = 1441;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MySqlParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES() { return GetToken(MySqlParser.YES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MySqlParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 74, RULE_indexOption);
		int _la;
		try {
			State = 1473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1443;
				Match(KEY_BLOCK_SIZE);
				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1444;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1447;
				fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1448;
				indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1449;
				Match(WITH);
				State = 1450;
				Match(PARSER);
				State = 1451;
				uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1452;
				Match(COMMENT);
				State = 1453;
				Match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1454;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1455;
				Match(ENGINE_ATTRIBUTE);
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1456;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1459;
				Match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1460;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1461;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1464;
				Match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1465;
				Match(CLUSTERING);
				State = 1466;
				Match(EQUAL_SYMBOL);
				State = 1467;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1471;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IGNORED:
					{
					State = 1468;
					Match(IGNORED);
					}
					break;
				case NOT:
					{
					State = 1469;
					Match(NOT);
					State = 1470;
					Match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 76, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) {
				{
				State = 1475;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1478;
			uid();
			State = 1479;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			uid();
			State = 1482;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineSecurity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineSecurity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineSecurity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 80, RULE_routineOption);
		int _la;
		try {
			State = 1507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1484;
				Match(COMMENT);
				State = 1485;
				Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1486;
				Match(LANGUAGE);
				State = 1487;
				Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1488;
					Match(NOT);
					}
				}

				State = 1491;
				Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1502;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1492;
					Match(CONTAINS);
					State = 1493;
					Match(SQL);
					}
					break;
				case NO:
					{
					State = 1494;
					Match(NO);
					State = 1495;
					Match(SQL);
					}
					break;
				case READS:
					{
					State = 1496;
					Match(READS);
					State = 1497;
					Match(SQL);
					State = 1498;
					Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1499;
					Match(MODIFIES);
					State = 1500;
					Match(SQL);
					State = 1501;
					Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1504;
				Match(SQL);
				State = 1505;
				Match(SECURITY);
				State = 1506;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_serverOption);
		try {
			State = 1523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1509;
				Match(HOST);
				State = 1510;
				Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1511;
				Match(DATABASE);
				State = 1512;
				Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1513;
				Match(USER);
				State = 1514;
				Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1515;
				Match(PASSWORD);
				State = 1516;
				Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1517;
				Match(SOCKET);
				State = 1518;
				Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1519;
				Match(OWNER);
				State = 1520;
				Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1521;
				Match(PORT);
				State = 1522;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 84, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525;
			Match(LR_BRACKET);
			State = 1526;
			createDefinition();
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1527;
				Match(COMMA);
				State = 1528;
				createDefinition();
				}
				}
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1534;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_createDefinition);
		try {
			State = 1541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1536;
				uid();
				State = 1537;
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1539;
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1540;
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_columnDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543;
			dataType();
			State = 1547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1544;
					columnConstraint();
					}
					} 
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStorageColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStorageColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp() {
			return GetRuleContext<CurrentTimestampContext>(0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAutoIncrementColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAutoIncrementColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoIncrementColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommentColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommentColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSerialDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSerialDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerialDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratedColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(MySqlParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(MySqlParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGeneratedColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGeneratedColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratedColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFormatColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFormatColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollateColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollateColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckColumnConstraintContext : ColumnConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 90, RULE_columnConstraint);
		int _la;
		try {
			State = 1603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1550;
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1551;
				Match(DEFAULT);
				State = 1552;
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1553;
				Match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1554;
				Match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1559;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO_INCREMENT:
					{
					State = 1555;
					Match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					State = 1556;
					Match(ON);
					State = 1557;
					Match(UPDATE);
					State = 1558;
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1561;
					Match(PRIMARY);
					}
				}

				State = 1564;
				Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1565;
				Match(UNIQUE);
				State = 1567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1566;
					Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1569;
				Match(COMMENT);
				State = 1570;
				Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1571;
				Match(COLUMN_FORMAT);
				State = 1572;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1573;
				Match(STORAGE);
				State = 1574;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1575;
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1576;
				Match(COLLATE);
				State = 1577;
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 1578;
					Match(GENERATED);
					State = 1579;
					Match(ALWAYS);
					}
				}

				State = 1582;
				Match(AS);
				State = 1583;
				Match(LR_BRACKET);
				State = 1584;
				expression(0);
				State = 1585;
				Match(RR_BRACKET);
				State = 1587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					State = 1586;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1589;
				Match(SERIAL);
				State = 1590;
				Match(DEFAULT);
				State = 1591;
				Match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1592;
					Match(CONSTRAINT);
					State = 1594;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 1593;
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1598;
				Match(CHECK);
				State = 1599;
				Match(LR_BRACKET);
				State = 1600;
				expression(0);
				State = 1601;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterForeignKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitForeignKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableConstraint);
		int _la;
		try {
			State = 1674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1605;
					Match(CONSTRAINT);
					State = 1607;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 1606;
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1611;
				Match(PRIMARY);
				State = 1612;
				Match(KEY);
				State = 1614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 1613;
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1616;
					indexType();
					}
				}

				State = 1619;
				indexColumnNames();
				State = 1623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1620;
					indexOption();
					}
					}
					State = 1625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1626;
					Match(CONSTRAINT);
					State = 1628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 1627;
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1632;
				Match(UNIQUE);
				State = 1634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1633;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 1636;
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1639;
					indexType();
					}
				}

				State = 1642;
				indexColumnNames();
				State = 1646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1643;
					indexOption();
					}
					}
					State = 1648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1649;
					Match(CONSTRAINT);
					State = 1651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 1650;
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1655;
				Match(FOREIGN);
				State = 1656;
				Match(KEY);
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 1657;
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1660;
				indexColumnNames();
				State = 1661;
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1663;
					Match(CONSTRAINT);
					State = 1665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 1664;
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1669;
				Match(CHECK);
				State = 1670;
				Match(LR_BRACKET);
				State = 1671;
				expression(0);
				State = 1672;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			Match(REFERENCES);
			State = 1677;
			tableName();
			State = 1679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1678;
				indexColumnNames();
				}
				break;
			}
			State = 1683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1681;
				Match(MATCH);
				State = 1682;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1685;
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 96, RULE_referenceAction);
		try {
			State = 1704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1688;
				Match(ON);
				State = 1689;
				Match(DELETE);
				State = 1690;
				_localctx.onDelete = referenceControlType();
				State = 1694;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1691;
					Match(ON);
					State = 1692;
					Match(UPDATE);
					State = 1693;
					_localctx.onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1696;
				Match(ON);
				State = 1697;
				Match(UPDATE);
				State = 1698;
				_localctx.onUpdate = referenceControlType();
				State = 1702;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1699;
					Match(ON);
					State = 1700;
					Match(DELETE);
					State = 1701;
					_localctx.onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceControlType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceControlType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_referenceControlType);
		try {
			State = 1712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1706;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1707;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1708;
				Match(SET);
				State = 1709;
				Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1710;
				Match(NO);
				State = 1711;
				Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecialIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecialIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 1715;
					uid();
					}
				}

				State = 1719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1718;
					indexType();
					}
				}

				State = 1721;
				indexColumnNames();
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1722;
					indexOption();
					}
					}
					State = 1727;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1729;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 1732;
					uid();
					}
				}

				State = 1735;
				indexColumnNames();
				State = 1739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1736;
					indexOption();
					}
					}
					State = 1741;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPersistent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPersistent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPackKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPackKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPackKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSamplePage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSamplePage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSamplePage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTableTypeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MySqlParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public TableOptionTableTypeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionKeyBlockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionKeyBlockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionKeyBlockSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRecalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRecalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRecalculation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionChecksum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionChecksum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionChecksum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDelay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionConnection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCompression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCompression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCompression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionInsertMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionInsertMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionInsertMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 102, RULE_tableOption);
		int _la;
		try {
			State = 1889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1744;
				Match(ENGINE);
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1745;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONNECT || ((((_la - 752)) & ~0x3f) == 0 && ((1L << (_la - 752)) & ((1L << (ARCHIVE - 752)) | (1L << (BLACKHOLE - 752)) | (1L << (CSV - 752)) | (1L << (FEDERATED - 752)) | (1L << (INNODB - 752)) | (1L << (MEMORY - 752)) | (1L << (MRG_MYISAM - 752)) | (1L << (MYISAM - 752)) | (1L << (NDB - 752)) | (1L << (NDBCLUSTER - 752)) | (1L << (PERFORMANCE_SCHEMA - 752)) | (1L << (TOKUDB - 752)))) != 0) || ((((_la - 1111)) & ~0x3f) == 0 && ((1L << (_la - 1111)) & ((1L << (STRING_LITERAL - 1111)) | (1L << (ID - 1111)) | (1L << (REVERSE_QUOTE_ID - 1111)))) != 0)) {
					{
					State = 1748;
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1751;
				Match(AUTO_INCREMENT);
				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1752;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1755;
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1756;
				Match(AVG_ROW_LENGTH);
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1757;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1760;
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1761;
					Match(DEFAULT);
					}
				}

				State = 1764;
				charSet();
				State = 1766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1765;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1770;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1768;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1769;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1772;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1773;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1776;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1777;
					Match(DEFAULT);
					}
				}

				State = 1780;
				Match(COLLATE);
				State = 1782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1781;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1784;
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1785;
				Match(COMMENT);
				State = 1787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1786;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1789;
				Match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1790;
				Match(COMPRESSION);
				State = 1792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1791;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1794;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1795;
				Match(CONNECTION);
				State = 1797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1796;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1799;
				Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1800;
				Match(DATA);
				State = 1801;
				Match(DIRECTORY);
				State = 1803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1802;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1805;
				Match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1806;
				Match(DELAY_KEY_WRITE);
				State = 1808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1807;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1810;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1811;
				Match(ENCRYPTION);
				State = 1813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1812;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1815;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1816;
				Match(INDEX);
				State = 1817;
				Match(DIRECTORY);
				State = 1819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1818;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1821;
				Match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1822;
				Match(INSERT_METHOD);
				State = 1824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1823;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1826;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1827;
				Match(KEY_BLOCK_SIZE);
				State = 1829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1828;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1831;
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1832;
				Match(MAX_ROWS);
				State = 1834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1833;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1836;
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1837;
				Match(MIN_ROWS);
				State = 1839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1838;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1841;
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1842;
				Match(PACK_KEYS);
				State = 1844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1843;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1846;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1847;
				Match(PASSWORD);
				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1848;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1851;
				Match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1852;
				Match(ROW_FORMAT);
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1853;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1856;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (COMPACT - 358)) | (1L << (COMPRESSED - 358)) | (1L << (DYNAMIC - 358)) | (1L << (FIXED - 358)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1857;
				Match(STATS_AUTO_RECALC);
				State = 1859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1858;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1861;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1862;
				Match(STATS_PERSISTENT);
				State = 1864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1863;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1866;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1867;
				Match(STATS_SAMPLE_PAGES);
				State = 1869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1868;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1871;
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1872;
				Match(TABLESPACE);
				State = 1873;
				uid();
				State = 1875;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1874;
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1877;
				Match(TABLE_TYPE);
				State = 1878;
				Match(EQUAL_SYMBOL);
				State = 1879;
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1880;
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1881;
				Match(UNION);
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1882;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1885;
				Match(LR_BRACKET);
				State = 1886;
				tables();
				State = 1887;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1891;
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceStorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceStorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceStorage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 106, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			Match(STORAGE);
			State = 1894;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(MySqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 108, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896;
			Match(PARTITION);
			State = 1897;
			Match(BY);
			State = 1898;
			partitionFunctionDefinition();
			State = 1901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 1899;
				Match(PARTITIONS);
				State = 1900;
				_localctx.count = decimalLiteral();
				}
			}

			State = 1910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 1903;
				Match(SUBPARTITION);
				State = 1904;
				Match(BY);
				State = 1905;
				subpartitionFunctionDefinition();
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 1906;
					Match(SUBPARTITIONS);
					State = 1907;
					_localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 1923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 1912;
				Match(LR_BRACKET);
				State = 1913;
				partitionDefinition();
				State = 1918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1914;
					Match(COMMA);
					State = 1915;
					partitionDefinition();
					}
					}
					State = 1920;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1921;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 1970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1925;
					Match(LINEAR);
					}
				}

				State = 1928;
				Match(HASH);
				State = 1929;
				Match(LR_BRACKET);
				State = 1930;
				expression(0);
				State = 1931;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1933;
					Match(LINEAR);
					}
				}

				State = 1936;
				Match(KEY);
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1937;
					Match(ALGORITHM);
					State = 1938;
					Match(EQUAL_SYMBOL);
					State = 1939;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1942;
				Match(LR_BRACKET);
				State = 1943;
				uidList();
				State = 1944;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1946;
				Match(RANGE);
				State = 1956;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1947;
					Match(LR_BRACKET);
					State = 1948;
					expression(0);
					State = 1949;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1951;
					Match(COLUMNS);
					State = 1952;
					Match(LR_BRACKET);
					State = 1953;
					uidList();
					State = 1954;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1958;
				Match(LIST);
				State = 1968;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1959;
					Match(LR_BRACKET);
					State = 1960;
					expression(0);
					State = 1961;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1963;
					Match(COLUMNS);
					State = 1964;
					Match(LR_BRACKET);
					State = 1965;
					uidList();
					State = 1966;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 1993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1972;
					Match(LINEAR);
					}
				}

				State = 1975;
				Match(HASH);
				State = 1976;
				Match(LR_BRACKET);
				State = 1977;
				expression(0);
				State = 1978;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1980;
					Match(LINEAR);
					}
				}

				State = 1983;
				Match(KEY);
				State = 1987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1984;
					Match(ALGORITHM);
					State = 1985;
					Match(EQUAL_SYMBOL);
					State = 1986;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1989;
				Match(LR_BRACKET);
				State = 1990;
				uidList();
				State = 1991;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisonContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListVector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_partitionDefinition);
		int _la;
		try {
			State = 2141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1995;
				Match(PARTITION);
				State = 1996;
				uid();
				State = 1997;
				Match(VALUES);
				State = 1998;
				Match(LESS);
				State = 1999;
				Match(THAN);
				State = 2000;
				Match(LR_BRACKET);
				State = 2001;
				partitionDefinerAtom();
				State = 2006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2002;
					Match(COMMA);
					State = 2003;
					partitionDefinerAtom();
					}
					}
					State = 2008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2009;
				Match(RR_BRACKET);
				State = 2013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2010;
					partitionOption();
					}
					}
					State = 2015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2016;
					Match(LR_BRACKET);
					State = 2017;
					subpartitionDefinition();
					State = 2022;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2018;
						Match(COMMA);
						State = 2019;
						subpartitionDefinition();
						}
						}
						State = 2024;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2025;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2029;
				Match(PARTITION);
				State = 2030;
				uid();
				State = 2031;
				Match(VALUES);
				State = 2032;
				Match(LESS);
				State = 2033;
				Match(THAN);
				State = 2034;
				partitionDefinerAtom();
				State = 2038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2035;
					partitionOption();
					}
					}
					State = 2040;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2041;
					Match(LR_BRACKET);
					State = 2042;
					subpartitionDefinition();
					State = 2047;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2043;
						Match(COMMA);
						State = 2044;
						subpartitionDefinition();
						}
						}
						State = 2049;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2050;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2054;
				Match(PARTITION);
				State = 2055;
				uid();
				State = 2056;
				Match(VALUES);
				State = 2057;
				Match(IN);
				State = 2058;
				Match(LR_BRACKET);
				State = 2059;
				partitionDefinerAtom();
				State = 2064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2060;
					Match(COMMA);
					State = 2061;
					partitionDefinerAtom();
					}
					}
					State = 2066;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2067;
				Match(RR_BRACKET);
				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2068;
					partitionOption();
					}
					}
					State = 2073;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2074;
					Match(LR_BRACKET);
					State = 2075;
					subpartitionDefinition();
					State = 2080;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2076;
						Match(COMMA);
						State = 2077;
						subpartitionDefinition();
						}
						}
						State = 2082;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2083;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2087;
				Match(PARTITION);
				State = 2088;
				uid();
				State = 2089;
				Match(VALUES);
				State = 2090;
				Match(IN);
				State = 2091;
				Match(LR_BRACKET);
				State = 2092;
				partitionDefinerVector();
				State = 2097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2093;
					Match(COMMA);
					State = 2094;
					partitionDefinerVector();
					}
					}
					State = 2099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2100;
				Match(RR_BRACKET);
				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2101;
					partitionOption();
					}
					}
					State = 2106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2107;
					Match(LR_BRACKET);
					State = 2108;
					subpartitionDefinition();
					State = 2113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2109;
						Match(COMMA);
						State = 2110;
						subpartitionDefinition();
						}
						}
						State = 2115;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2116;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2120;
				Match(PARTITION);
				State = 2121;
				uid();
				State = 2125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2122;
					partitionOption();
					}
					}
					State = 2127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2128;
					Match(LR_BRACKET);
					State = 2129;
					subpartitionDefinition();
					State = 2134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2130;
						Match(COMMA);
						State = 2131;
						subpartitionDefinition();
						}
						}
						State = 2136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2137;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 116, RULE_partitionDefinerAtom);
		try {
			State = 2146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2143;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2144;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2145;
				Match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 118, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148;
			Match(LR_BRACKET);
			State = 2149;
			partitionDefinerAtom();
			State = 2152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2150;
				Match(COMMA);
				State = 2151;
				partitionDefinerAtom();
				}
				}
				State = 2154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 2156;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2158;
			Match(SUBPARTITION);
			State = 2159;
			uid();
			State = 2163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMMENT - 356)) | (1L << (DATA - 356)) | (1L << (ENGINE - 356)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MAX_ROWS - 482)) | (1L << (MIN_ROWS - 482)) | (1L << (NODEGROUP - 482)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 2160;
				partitionOption();
				}
				}
				State = 2165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionNodeGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionNodeGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionNodeGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_partitionOption);
		int _la;
		try {
			State = 2214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2166;
					Match(DEFAULT);
					}
				}

				State = 2170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2169;
					Match(STORAGE);
					}
				}

				State = 2172;
				Match(ENGINE);
				State = 2174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2173;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2176;
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2177;
				Match(COMMENT);
				State = 2179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2178;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2181;
				((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2182;
				Match(DATA);
				State = 2183;
				Match(DIRECTORY);
				State = 2185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2184;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2187;
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2188;
				Match(INDEX);
				State = 2189;
				Match(DIRECTORY);
				State = 2191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2190;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2193;
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2194;
				Match(MAX_ROWS);
				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2195;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2198;
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2199;
				Match(MIN_ROWS);
				State = 2201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2200;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2203;
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2204;
				Match(TABLESPACE);
				State = 2206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2205;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2208;
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2209;
				Match(NODEGROUP);
				State = 2211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2210;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2213;
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUpgradeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUpgradeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUpgradeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterSimpleDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterSimpleDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSimpleDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 124, RULE_alterDatabase);
		int _la;
		try {
			State = 2234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2216;
				Match(ALTER);
				State = 2217;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 2218;
					uid();
					}
					break;
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2221;
					createDatabaseOption();
					}
					}
					State = 2224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2226;
				Match(ALTER);
				State = 2227;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2228;
				uid();
				State = 2229;
				Match(UPGRADE);
				State = 2230;
				Match(DATA);
				State = 2231;
				Match(DIRECTORY);
				State = 2232;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 126, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2236;
			Match(ALTER);
			State = 2238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2237;
				ownerStatement();
				}
			}

			State = 2240;
			Match(EVENT);
			State = 2241;
			fullId();
			State = 2245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 2242;
				Match(ON);
				State = 2243;
				Match(SCHEDULE);
				State = 2244;
				scheduleExpression();
				}
				break;
			}
			State = 2253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2247;
				Match(ON);
				State = 2248;
				Match(COMPLETION);
				State = 2250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2249;
					Match(NOT);
					}
				}

				State = 2252;
				Match(PRESERVE);
				}
			}

			State = 2258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2255;
				Match(RENAME);
				State = 2256;
				Match(TO);
				State = 2257;
				fullId();
				}
				break;
			}
			State = 2261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2260;
				enableType();
				}
			}

			State = 2265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2263;
				Match(COMMENT);
				State = 2264;
				Match(STRING_LITERAL);
				}
			}

			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 2267;
				Match(DO);
				State = 2268;
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 128, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271;
			Match(ALTER);
			State = 2272;
			Match(FUNCTION);
			State = 2273;
			fullId();
			State = 2277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (MODIFIES - 106)) | (1L << (NOT - 106)) | (1L << (READS - 106)) | (1L << (SQL - 106)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2274;
				routineOption();
				}
				}
				State = 2279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2280;
			Match(ALTER);
			State = 2281;
			Match(INSTANCE);
			State = 2282;
			Match(ROTATE);
			State = 2283;
			Match(INNODB);
			State = 2284;
			Match(MASTER);
			State = 2285;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			Match(ALTER);
			State = 2288;
			Match(LOGFILE);
			State = 2289;
			Match(GROUP);
			State = 2290;
			uid();
			State = 2291;
			Match(ADD);
			State = 2292;
			Match(UNDOFILE);
			State = 2293;
			Match(STRING_LITERAL);
			State = 2299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2294;
				Match(INITIAL_SIZE);
				State = 2296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2295;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2298;
				fileSizeLiteral();
				}
			}

			State = 2302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2301;
				Match(WAIT);
				}
			}

			State = 2304;
			Match(ENGINE);
			State = 2306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2305;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2308;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 134, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2310;
			Match(ALTER);
			State = 2311;
			Match(PROCEDURE);
			State = 2312;
			fullId();
			State = 2316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (MODIFIES - 106)) | (1L << (NOT - 106)) | (1L << (READS - 106)) | (1L << (SQL - 106)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2313;
				routineOption();
				}
				}
				State = 2318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 136, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2319;
			Match(ALTER);
			State = 2320;
			Match(SERVER);
			State = 2321;
			uid();
			State = 2322;
			Match(OPTIONS);
			State = 2323;
			Match(LR_BRACKET);
			State = 2324;
			serverOption();
			State = 2329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2325;
				Match(COMMA);
				State = 2326;
				serverOption();
				}
				}
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2332;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 138, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334;
			Match(ALTER);
			State = 2336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2335;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2338;
				Match(IGNORE);
				}
			}

			State = 2341;
			Match(TABLE);
			State = 2342;
			tableName();
			State = 2351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2343;
				alterSpecification();
				State = 2348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2344;
					Match(COMMA);
					State = 2345;
					alterSpecification();
					}
					}
					State = 2350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2353;
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 140, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356;
			Match(ALTER);
			State = 2357;
			Match(TABLESPACE);
			State = 2358;
			uid();
			State = 2359;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2360;
			Match(DATAFILE);
			State = 2361;
			Match(STRING_LITERAL);
			State = 2365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2362;
				Match(INITIAL_SIZE);
				State = 2363;
				Match(EQUAL_SYMBOL);
				State = 2364;
				fileSizeLiteral();
				}
			}

			State = 2368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2367;
				Match(WAIT);
				}
			}

			State = 2370;
			Match(ENGINE);
			State = 2372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2371;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2374;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 142, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376;
			Match(ALTER);
			State = 2380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2377;
				Match(ALGORITHM);
				State = 2378;
				Match(EQUAL_SYMBOL);
				State = 2379;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2382;
				ownerStatement();
				}
			}

			State = 2388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2385;
				Match(SQL);
				State = 2386;
				Match(SECURITY);
				State = 2387;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2390;
			Match(VIEW);
			State = 2391;
			fullId();
			State = 2396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2392;
				Match(LR_BRACKET);
				State = 2393;
				uidList();
				State = 2394;
				Match(RR_BRACKET);
				}
			}

			State = 2398;
			Match(AS);
			State = 2399;
			selectStatement();
			State = 2406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2400;
				Match(WITH);
				State = 2402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2401;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2404;
				Match(CHECK);
				State = 2405;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDisableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDisableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDisableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByConvertCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByConvertCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByConvertCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOptimizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOptimizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOptimizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCoalescePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCoalescePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCoalescePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropConstraintCheckContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropConstraintCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropConstraintCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropConstraintCheck(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAlterIndexVisibilityContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAlterIndexVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAlterIndexVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAlterIndexVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRebuildPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRebuildPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRebuildPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByUpgradePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByUpgradePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByUpgradePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRepairPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRepairPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRepairPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByForce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByForce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByForce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddSpecialIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddSpecialIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddSpecialIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByModifyColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByModifyColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByModifyColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByLock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByValidate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByValidate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByValidate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCheckPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCheckPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCheckPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByEnableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByEnableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByEnableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByReorganizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByReorganizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByReorganizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterBySetAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterBySetAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterBySetAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAnalyzePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAnalyzePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAnalyzePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAnalyzePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddUniqueKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddUniqueKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddUniqueKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTruncatePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTruncatePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTruncatePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 144, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			State = 2810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2408;
				tableOption();
				State = 2415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2410;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2409;
							Match(COMMA);
							}
						}

						State = 2412;
						tableOption();
						}
						} 
					}
					State = 2417;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2418;
				Match(ADD);
				State = 2420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2419;
					Match(COLUMN);
					}
				}

				State = 2423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2422;
					ifNotExists();
					}
				}

				State = 2425;
				uid();
				State = 2426;
				columnDefinition();
				State = 2430;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2427;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2428;
					Match(AFTER);
					State = 2429;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2432;
				Match(ADD);
				State = 2434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2433;
					Match(COLUMN);
					}
				}

				State = 2437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2436;
					ifNotExists();
					}
				}

				State = 2439;
				Match(LR_BRACKET);
				State = 2440;
				uid();
				State = 2441;
				columnDefinition();
				State = 2448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2442;
					Match(COMMA);
					State = 2443;
					uid();
					State = 2444;
					columnDefinition();
					}
					}
					State = 2450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2451;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2453;
				Match(ADD);
				State = 2454;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2455;
					ifNotExists();
					}
				}

				State = 2459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2458;
					uid();
					}
				}

				State = 2462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2461;
					indexType();
					}
				}

				State = 2464;
				indexColumnNames();
				State = 2468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2465;
					indexOption();
					}
					}
					State = 2470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2471;
				Match(ADD);
				State = 2476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2472;
					Match(CONSTRAINT);
					State = 2474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 2473;
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2478;
				Match(PRIMARY);
				State = 2479;
				Match(KEY);
				State = 2481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2480;
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				State = 2484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2483;
					indexType();
					}
				}

				State = 2486;
				indexColumnNames();
				State = 2490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2487;
					indexOption();
					}
					}
					State = 2492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2493;
				Match(ADD);
				State = 2498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2494;
					Match(CONSTRAINT);
					State = 2496;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 2495;
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2500;
				Match(UNIQUE);
				State = 2502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2501;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2504;
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2507;
					indexType();
					}
				}

				State = 2510;
				indexColumnNames();
				State = 2514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2511;
					indexOption();
					}
					}
					State = 2516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2517;
				Match(ADD);
				State = 2518;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2519;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2522;
					uid();
					}
				}

				State = 2525;
				indexColumnNames();
				State = 2529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2526;
					indexOption();
					}
					}
					State = 2531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2532;
				Match(ADD);
				State = 2537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2533;
					Match(CONSTRAINT);
					State = 2535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 2534;
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2539;
				Match(FOREIGN);
				State = 2540;
				Match(KEY);
				State = 2542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2541;
					ifNotExists();
					}
				}

				State = 2545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2544;
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2547;
				indexColumnNames();
				State = 2548;
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2550;
				Match(ADD);
				State = 2555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2551;
					Match(CONSTRAINT);
					State = 2553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
						{
						State = 2552;
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2557;
				Match(CHECK);
				State = 2558;
				Match(LR_BRACKET);
				State = 2559;
				expression(0);
				State = 2560;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2562;
				Match(ALGORITHM);
				State = 2564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2563;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2566;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2567;
				Match(ALTER);
				State = 2569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2568;
					Match(COLUMN);
					}
				}

				State = 2571;
				uid();
				State = 2577;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2572;
					Match(SET);
					State = 2573;
					Match(DEFAULT);
					State = 2574;
					defaultValue();
					}
					break;
				case DROP:
					{
					State = 2575;
					Match(DROP);
					State = 2576;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2579;
				Match(CHANGE);
				State = 2581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2580;
					Match(COLUMN);
					}
				}

				State = 2584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2583;
					ifExists();
					}
				}

				State = 2586;
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2587;
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2588;
				columnDefinition();
				State = 2592;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2589;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2590;
					Match(AFTER);
					State = 2591;
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2594;
				Match(RENAME);
				State = 2595;
				Match(COLUMN);
				State = 2596;
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				State = 2597;
				Match(TO);
				State = 2598;
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2600;
				Match(LOCK);
				State = 2602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2601;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2604;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2605;
				Match(MODIFY);
				State = 2607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2606;
					Match(COLUMN);
					}
				}

				State = 2610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2609;
					ifExists();
					}
				}

				State = 2612;
				uid();
				State = 2613;
				columnDefinition();
				State = 2617;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2614;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2615;
					Match(AFTER);
					State = 2616;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2619;
				Match(DROP);
				State = 2621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2620;
					Match(COLUMN);
					}
				}

				State = 2624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2623;
					ifExists();
					}
				}

				State = 2626;
				uid();
				State = 2628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESTRICT) {
					{
					State = 2627;
					Match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2630;
				Match(DROP);
				State = 2631;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2632;
					ifExists();
					}
				}

				State = 2635;
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2636;
				Match(DROP);
				State = 2637;
				Match(PRIMARY);
				State = 2638;
				Match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2639;
				Match(RENAME);
				State = 2640;
				((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2641;
				uid();
				State = 2642;
				Match(TO);
				State = 2643;
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2645;
				Match(ALTER);
				State = 2646;
				Match(INDEX);
				State = 2647;
				uid();
				State = 2648;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2650;
				Match(DROP);
				State = 2651;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2652;
					ifExists();
					}
				}

				State = 2655;
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2656;
				Match(DROP);
				State = 2657;
				Match(FOREIGN);
				State = 2658;
				Match(KEY);
				State = 2660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2659;
					ifExists();
					}
				}

				State = 2662;
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2663;
				Match(DISABLE);
				State = 2664;
				Match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2665;
				Match(ENABLE);
				State = 2666;
				Match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2667;
				Match(RENAME);
				State = 2669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2668;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
				case 1:
					{
					State = 2671;
					uid();
					}
					break;
				case 2:
					{
					State = 2672;
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2675;
				Match(ORDER);
				State = 2676;
				Match(BY);
				State = 2677;
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2678;
				Match(CONVERT);
				State = 2679;
				Match(TO);
				State = 2680;
				Match(CHARACTER);
				State = 2681;
				Match(SET);
				State = 2682;
				charsetName();
				State = 2685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2683;
					Match(COLLATE);
					State = 2684;
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2687;
					Match(DEFAULT);
					}
				}

				State = 2690;
				Match(CHARACTER);
				State = 2691;
				Match(SET);
				State = 2692;
				Match(EQUAL_SYMBOL);
				State = 2693;
				charsetName();
				State = 2697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2694;
					Match(COLLATE);
					State = 2695;
					Match(EQUAL_SYMBOL);
					State = 2696;
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2699;
				Match(DISCARD);
				State = 2700;
				Match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2701;
				Match(IMPORT);
				State = 2702;
				Match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2703;
				Match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2704;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2705;
				Match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2706;
				Match(ADD);
				State = 2707;
				Match(PARTITION);
				State = 2709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2708;
					ifNotExists();
					}
				}

				State = 2711;
				Match(LR_BRACKET);
				State = 2712;
				partitionDefinition();
				State = 2717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2713;
					Match(COMMA);
					State = 2714;
					partitionDefinition();
					}
					}
					State = 2719;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2720;
				Match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2722;
				Match(DROP);
				State = 2723;
				Match(PARTITION);
				State = 2725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2724;
					ifExists();
					}
				}

				State = 2727;
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2728;
				Match(DISCARD);
				State = 2729;
				Match(PARTITION);
				State = 2732;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2730;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2731;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2734;
				Match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2735;
				Match(IMPORT);
				State = 2736;
				Match(PARTITION);
				State = 2739;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2737;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2738;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2741;
				Match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2742;
				Match(TRUNCATE);
				State = 2743;
				Match(PARTITION);
				State = 2746;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2744;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2745;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2748;
				Match(COALESCE);
				State = 2749;
				Match(PARTITION);
				State = 2750;
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 2751;
				Match(REORGANIZE);
				State = 2752;
				Match(PARTITION);
				State = 2753;
				uidList();
				State = 2754;
				Match(INTO);
				State = 2755;
				Match(LR_BRACKET);
				State = 2756;
				partitionDefinition();
				State = 2761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2757;
					Match(COMMA);
					State = 2758;
					partitionDefinition();
					}
					}
					State = 2763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2764;
				Match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 2766;
				Match(EXCHANGE);
				State = 2767;
				Match(PARTITION);
				State = 2768;
				uid();
				State = 2769;
				Match(WITH);
				State = 2770;
				Match(TABLE);
				State = 2771;
				tableName();
				State = 2774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2772;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2773;
					Match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 2776;
				Match(ANALYZE);
				State = 2777;
				Match(PARTITION);
				State = 2780;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2778;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2779;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 2782;
				Match(CHECK);
				State = 2783;
				Match(PARTITION);
				State = 2786;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2784;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2785;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 2788;
				Match(OPTIMIZE);
				State = 2789;
				Match(PARTITION);
				State = 2792;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2790;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2791;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 2794;
				Match(REBUILD);
				State = 2795;
				Match(PARTITION);
				State = 2798;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2796;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2797;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 2800;
				Match(REPAIR);
				State = 2801;
				Match(PARTITION);
				State = 2804;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2802;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2803;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 2806;
				Match(REMOVE);
				State = 2807;
				Match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 2808;
				Match(UPGRADE);
				State = 2809;
				Match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 146, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			Match(DROP);
			State = 2813;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2814;
				ifExists();
				}
			}

			State = 2817;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 148, RULE_dropEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2819;
			Match(DROP);
			State = 2820;
			Match(EVENT);
			State = 2822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2821;
				ifExists();
				}
			}

			State = 2824;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 150, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826;
			Match(DROP);
			State = 2827;
			Match(INDEX);
			State = 2829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 2828;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2831;
			uid();
			State = 2832;
			Match(ON);
			State = 2833;
			tableName();
			State = 2846;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,368,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2844;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 2834;
						Match(ALGORITHM);
						State = 2836;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2835;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2838;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 2839;
						Match(LOCK);
						State = 2841;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2840;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2843;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,368,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 152, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2849;
			Match(DROP);
			State = 2850;
			Match(LOGFILE);
			State = 2851;
			Match(GROUP);
			State = 2852;
			uid();
			State = 2853;
			Match(ENGINE);
			State = 2854;
			Match(EQUAL_SYMBOL);
			State = 2855;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 154, RULE_dropProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2857;
			Match(DROP);
			State = 2858;
			Match(PROCEDURE);
			State = 2860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2859;
				ifExists();
				}
			}

			State = 2862;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 156, RULE_dropFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2864;
			Match(DROP);
			State = 2865;
			Match(FUNCTION);
			State = 2867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2866;
				ifExists();
				}
			}

			State = 2869;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 158, RULE_dropServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871;
			Match(DROP);
			State = 2872;
			Match(SERVER);
			State = 2874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2873;
				ifExists();
				}
			}

			State = 2876;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 160, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878;
			Match(DROP);
			State = 2880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 2879;
				Match(TEMPORARY);
				}
			}

			State = 2882;
			Match(TABLE);
			State = 2884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2883;
				ifExists();
				}
			}

			State = 2886;
			tables();
			State = 2888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2887;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 162, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2890;
			Match(DROP);
			State = 2891;
			Match(TABLESPACE);
			State = 2892;
			uid();
			State = 2898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 2893;
				Match(ENGINE);
				State = 2895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2894;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2897;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 164, RULE_dropTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2900;
			Match(DROP);
			State = 2901;
			Match(TRIGGER);
			State = 2903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2902;
				ifExists();
				}
			}

			State = 2905;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 166, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2907;
			Match(DROP);
			State = 2908;
			Match(VIEW);
			State = 2910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2909;
				ifExists();
				}
			}

			State = 2912;
			fullId();
			State = 2917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2913;
				Match(COMMA);
				State = 2914;
				fullId();
				}
				}
				State = 2919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2920;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 168, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923;
			Match(RENAME);
			State = 2924;
			Match(TABLE);
			State = 2925;
			renameTableClause();
			State = 2930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2926;
				Match(COMMA);
				State = 2927;
				renameTableClause();
				}
				}
				State = 2932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 170, RULE_renameTableClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2933;
			tableName();
			State = 2934;
			Match(TO);
			State = 2935;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 172, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937;
			Match(TRUNCATE);
			State = 2939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 2938;
				Match(TABLE);
				}
			}

			State = 2941;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943;
			Match(CALL);
			State = 2944;
			fullId();
			State = 2951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				{
				State = 2945;
				Match(LR_BRACKET);
				State = 2948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
				case 1:
					{
					State = 2946;
					constants();
					}
					break;
				case 2:
					{
					State = 2947;
					expressions();
					}
					break;
				}
				State = 2950;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_deleteStatement);
		try {
			State = 2955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2953;
				singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2954;
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957;
			Match(DO);
			State = 2958;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_handlerStatement);
		try {
			State = 2964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2960;
				handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2961;
				handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2962;
				handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2963;
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			Match(INSERT);
			State = 2968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				State = 2967;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2970;
				Match(IGNORE);
				}
			}

			State = 2974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2973;
				Match(INTO);
				}
			}

			State = 2976;
			tableName();
			State = 2983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2977;
				Match(PARTITION);
				State = 2978;
				Match(LR_BRACKET);
				State = 2980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 2979;
					_localctx.partitions = uidList();
					}
				}

				State = 2982;
				Match(RR_BRACKET);
				}
			}

			State = 3001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 2989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
				case 1:
					{
					State = 2985;
					Match(LR_BRACKET);
					State = 2986;
					_localctx.columns = uidList();
					State = 2987;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 2991;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 2992;
				Match(SET);
				State = 2993;
				_localctx.setFirst = updatedElement();
				State = 2998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2994;
					Match(COMMA);
					State = 2995;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3000;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3003;
				Match(ON);
				State = 3004;
				Match(DUPLICATE);
				State = 3005;
				Match(KEY);
				State = 3006;
				Match(UPDATE);
				State = 3007;
				_localctx.duplicatedFirst = updatedElement();
				State = 3012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3008;
					Match(COMMA);
					State = 3009;
					_localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 3014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES(int i) {
			return GetToken(MySqlParser.LINES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			Match(LOAD);
			State = 3018;
			Match(DATA);
			State = 3020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3019;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3022;
				Match(LOCAL);
				}
			}

			State = 3025;
			Match(INFILE);
			State = 3026;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3027;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3030;
			Match(INTO);
			State = 3031;
			Match(TABLE);
			State = 3032;
			tableName();
			State = 3038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3033;
				Match(PARTITION);
				State = 3034;
				Match(LR_BRACKET);
				State = 3035;
				uidList();
				State = 3036;
				Match(RR_BRACKET);
				}
			}

			State = 3043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3040;
				Match(CHARACTER);
				State = 3041;
				Match(SET);
				State = 3042;
				_localctx.charset = charsetName();
				}
			}

			State = 3051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 3045;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3046;
					selectFieldsInto();
					}
					}
					State = 3049;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 3059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 3053;
				Match(LINES);
				State = 3055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3054;
					selectLinesInto();
					}
					}
					State = 3057;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 3065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3061;
				Match(IGNORE);
				State = 3062;
				decimalLiteral();
				State = 3063;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
			case 1:
				{
				State = 3067;
				Match(LR_BRACKET);
				State = 3068;
				assignmentField();
				State = 3073;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3069;
					Match(COMMA);
					State = 3070;
					assignmentField();
					}
					}
					State = 3075;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3076;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
			case 1:
				{
				State = 3080;
				Match(SET);
				State = 3081;
				updatedElement();
				State = 3086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3082;
					Match(COMMA);
					State = 3083;
					updatedElement();
					}
					}
					State = 3088;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(MySqlParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadXmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadXmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadXmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3091;
			Match(LOAD);
			State = 3092;
			Match(XML);
			State = 3094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3093;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3096;
				Match(LOCAL);
				}
			}

			State = 3099;
			Match(INFILE);
			State = 3100;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3101;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3104;
			Match(INTO);
			State = 3105;
			Match(TABLE);
			State = 3106;
			tableName();
			State = 3110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3107;
				Match(CHARACTER);
				State = 3108;
				Match(SET);
				State = 3109;
				_localctx.charset = charsetName();
				}
			}

			State = 3118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 3112;
				Match(ROWS);
				State = 3113;
				Match(IDENTIFIED);
				State = 3114;
				Match(BY);
				State = 3115;
				Match(LESS_SYMBOL);
				State = 3116;
				_localctx.tag = Match(STRING_LITERAL);
				State = 3117;
				Match(GREATER_SYMBOL);
				}
			}

			State = 3124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3120;
				Match(IGNORE);
				State = 3121;
				decimalLiteral();
				State = 3122;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
			case 1:
				{
				State = 3126;
				Match(LR_BRACKET);
				State = 3127;
				assignmentField();
				State = 3132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3128;
					Match(COMMA);
					State = 3129;
					assignmentField();
					}
					}
					State = 3134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3135;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
			case 1:
				{
				State = 3139;
				Match(SET);
				State = 3140;
				updatedElement();
				State = 3145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3141;
					Match(COMMA);
					State = 3142;
					updatedElement();
					}
					}
					State = 3147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3150;
			Match(REPLACE);
			State = 3152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 3151;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3154;
				Match(INTO);
				}
			}

			State = 3157;
			tableName();
			State = 3163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3158;
				Match(PARTITION);
				State = 3159;
				Match(LR_BRACKET);
				State = 3160;
				_localctx.partitions = uidList();
				State = 3161;
				Match(RR_BRACKET);
				}
			}

			State = 3181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,424,Context) ) {
				case 1:
					{
					State = 3165;
					Match(LR_BRACKET);
					State = 3166;
					_localctx.columns = uidList();
					State = 3167;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3171;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3172;
				Match(SET);
				State = 3173;
				_localctx.setFirst = updatedElement();
				State = 3178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3174;
					Match(COMMA);
					State = 3175;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 3238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3183;
				querySpecification();
				State = 3185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
				case 1:
					{
					State = 3184;
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3187;
				queryExpression();
				State = 3189;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
				case 1:
					{
					State = 3188;
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3191;
				querySpecificationNointo();
				State = 3193;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3192;
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3195;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,429,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3197;
					Match(UNION);
					State = 3199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3198;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3203;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 3201;
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 3202;
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 3208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
				case 1:
					{
					State = 3207;
					orderByClause();
					}
					break;
				}
				State = 3211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3210;
					limitClause();
					}
				}

				State = 3214;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
				case 1:
					{
					State = 3213;
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3216;
				queryExpressionNointo();
				State = 3218;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3217;
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3220;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,436,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3222;
					Match(UNION);
					State = 3224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3223;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3226;
					queryExpression();
					}
				}

				State = 3230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
				case 1:
					{
					State = 3229;
					orderByClause();
					}
					break;
				}
				State = 3233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3232;
					limitClause();
					}
				}

				State = 3236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
				case 1:
					{
					State = 3235;
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_updateStatement);
		try {
			State = 3242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3240;
				singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3241;
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 194, RULE_insertStatementValue);
		int _la;
		try {
			State = 3262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3244;
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3245;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3246;
				Match(LR_BRACKET);
				State = 3248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
				case 1:
					{
					State = 3247;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3250;
				Match(RR_BRACKET);
				State = 3259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3251;
					Match(COMMA);
					State = 3252;
					Match(LR_BRACKET);
					State = 3254;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
					case 1:
						{
						State = 3253;
						expressionsWithDefaults();
						}
						break;
					}
					State = 3256;
					Match(RR_BRACKET);
					}
					}
					State = 3261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdatedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdatedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 196, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			fullColumnName();
			State = 3265;
			Match(EQUAL_SYMBOL);
			State = 3268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				{
				State = 3266;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3267;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignmentField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignmentField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 198, RULE_assignmentField);
		try {
			State = 3272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3270;
				uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3271;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_lockClause);
		try {
			State = 3280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3274;
				Match(FOR);
				State = 3275;
				Match(UPDATE);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3276;
				Match(LOCK);
				State = 3277;
				Match(IN);
				State = 3278;
				Match(SHARE);
				State = 3279;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3282;
			Match(DELETE);
			State = 3284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3283;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 3286;
				Match(QUICK);
				}
			}

			State = 3290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3289;
				Match(IGNORE);
				}
			}

			State = 3292;
			Match(FROM);
			State = 3293;
			tableName();
			State = 3299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3294;
				Match(PARTITION);
				State = 3295;
				Match(LR_BRACKET);
				State = 3296;
				uidList();
				State = 3297;
				Match(RR_BRACKET);
				}
			}

			State = 3303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3301;
				Match(WHERE);
				State = 3302;
				expression(0);
				}
			}

			State = 3306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3305;
				orderByClause();
				}
			}

			State = 3310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3308;
				Match(LIMIT);
				State = 3309;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MySqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MySqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 204, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3312;
			Match(DELETE);
			State = 3314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3313;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
			case 1:
				{
				State = 3316;
				Match(QUICK);
				}
				break;
			}
			State = 3320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3319;
				Match(IGNORE);
				}
			}

			State = 3361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 3322;
				tableName();
				State = 3325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3323;
					Match(DOT);
					State = 3324;
					Match(STAR);
					}
				}

				State = 3335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3327;
					Match(COMMA);
					State = 3328;
					tableName();
					State = 3331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3329;
						Match(DOT);
						State = 3330;
						Match(STAR);
						}
					}

					}
					}
					State = 3337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3338;
				Match(FROM);
				State = 3339;
				tableSources();
				}
				break;
			case FROM:
				{
				State = 3341;
				Match(FROM);
				State = 3342;
				tableName();
				State = 3345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3343;
					Match(DOT);
					State = 3344;
					Match(STAR);
					}
				}

				State = 3355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3347;
					Match(COMMA);
					State = 3348;
					tableName();
					State = 3351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3349;
						Match(DOT);
						State = 3350;
						Match(STAR);
						}
					}

					}
					}
					State = 3357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3358;
				Match(USING);
				State = 3359;
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3363;
				Match(WHERE);
				State = 3364;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerOpenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerOpenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerOpenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 206, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3367;
			Match(HANDLER);
			State = 3368;
			tableName();
			State = 3369;
			Match(OPEN);
			State = 3374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				{
				State = 3371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3370;
					Match(AS);
					}
				}

				State = 3373;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 208, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3376;
			Match(HANDLER);
			State = 3377;
			tableName();
			State = 3378;
			Match(READ);
			State = 3379;
			_localctx.index = uid();
			State = 3386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3380;
				comparisonOperator();
				State = 3381;
				Match(LR_BRACKET);
				State = 3382;
				constants();
				State = 3383;
				Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3385;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3388;
				Match(WHERE);
				State = 3389;
				expression(0);
				}
			}

			State = 3394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3392;
				Match(LIMIT);
				State = 3393;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396;
			Match(HANDLER);
			State = 3397;
			tableName();
			State = 3398;
			Match(READ);
			State = 3399;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3400;
				Match(WHERE);
				State = 3401;
				expression(0);
				}
			}

			State = 3406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3404;
				Match(LIMIT);
				State = 3405;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerCloseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerCloseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCloseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3408;
			Match(HANDLER);
			State = 3409;
			tableName();
			State = 3410;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3412;
			Match(UPDATE);
			State = 3414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3413;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3416;
				Match(IGNORE);
				}
			}

			State = 3419;
			tableName();
			State = 3424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (RIGHT - 142)) | (1L << (SCHEMA - 142)) | (1L << (STACKED - 142)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 3421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3420;
					Match(AS);
					}
				}

				State = 3423;
				uid();
				}
			}

			State = 3426;
			Match(SET);
			State = 3427;
			updatedElement();
			State = 3432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3428;
				Match(COMMA);
				State = 3429;
				updatedElement();
				}
				}
				State = 3434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3435;
				Match(WHERE);
				State = 3436;
				expression(0);
				}
			}

			State = 3440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3439;
				orderByClause();
				}
			}

			State = 3443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3442;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3445;
			Match(UPDATE);
			State = 3447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3446;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3449;
				Match(IGNORE);
				}
			}

			State = 3452;
			tableSources();
			State = 3453;
			Match(SET);
			State = 3454;
			updatedElement();
			State = 3459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3455;
				Match(COMMA);
				State = 3456;
				updatedElement();
				}
				}
				State = 3461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3462;
				Match(WHERE);
				State = 3463;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 218, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3466;
			Match(ORDER);
			State = 3467;
			Match(BY);
			State = 3468;
			orderByExpression();
			State = 3473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3469;
				Match(COMMA);
				State = 3470;
				orderByExpression();
				}
				}
				State = 3475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3476;
			expression(0);
			State = 3478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
			case 1:
				{
				State = 3477;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 222, RULE_tableSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3480;
			tableSource();
			State = 3485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3481;
				Match(COMMA);
				State = 3482;
				tableSource();
				}
				}
				State = 3487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 224, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3488;
				tableSourceItem();
				State = 3492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3489;
						joinPart();
						}
						} 
					}
					State = 3494;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3495;
				Match(LR_BRACKET);
				State = 3496;
				tableSourceItem();
				State = 3500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (NATURAL - 107)) | (1L << (RIGHT - 107)) | (1L << (STRAIGHT_JOIN - 107)))) != 0)) {
					{
					{
					State = 3497;
					joinPart();
					}
					}
					State = 3502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3503;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAtomTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAtomTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourcesItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourcesItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourcesItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 226, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3507;
				tableName();
				State = 3513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3508;
					Match(PARTITION);
					State = 3509;
					Match(LR_BRACKET);
					State = 3510;
					uidList();
					State = 3511;
					Match(RR_BRACKET);
					}
				}

				State = 3519;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
				case 1:
					{
					State = 3516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3515;
						Match(AS);
						}
					}

					State = 3518;
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
				case 1:
					{
					State = 3521;
					indexHint();
					State = 3526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,497,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3522;
							Match(COMMA);
							State = 3523;
							indexHint();
							}
							} 
						}
						State = 3528;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,497,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3536;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
				case 1:
					{
					State = 3531;
					selectStatement();
					}
					break;
				case 2:
					{
					State = 3532;
					Match(LR_BRACKET);
					State = 3533;
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3534;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3538;
					Match(AS);
					}
				}

				State = 3541;
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3543;
				Match(LR_BRACKET);
				State = 3544;
				tableSources();
				State = 3545;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 228, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3550;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3551;
				Match(FOR);
				State = 3552;
				indexHintType();
				}
			}

			State = 3555;
			Match(LR_BRACKET);
			State = 3556;
			uidList();
			State = 3557;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 230, RULE_indexHintType);
		try {
			State = 3564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3559;
				Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3560;
				Match(ORDER);
				State = 3561;
				Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3562;
				Match(GROUP);
				State = 3563;
				Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInnerJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInnerJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStraightJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStraightJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStraightJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 232, RULE_joinPart);
		int _la;
		try {
			State = 3610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3566;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3569;
				Match(JOIN);
				State = 3570;
				tableSourceItem();
				State = 3578;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
				case 1:
					{
					State = 3571;
					Match(ON);
					State = 3572;
					expression(0);
					}
					break;
				case 2:
					{
					State = 3573;
					Match(USING);
					State = 3574;
					Match(LR_BRACKET);
					State = 3575;
					uidList();
					State = 3576;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3580;
				Match(STRAIGHT_JOIN);
				State = 3581;
				tableSourceItem();
				State = 3584;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
				case 1:
					{
					State = 3582;
					Match(ON);
					State = 3583;
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3586;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3587;
					Match(OUTER);
					}
				}

				State = 3590;
				Match(JOIN);
				State = 3591;
				tableSourceItem();
				State = 3599;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 3592;
					Match(ON);
					State = 3593;
					expression(0);
					}
					break;
				case USING:
					{
					State = 3594;
					Match(USING);
					State = 3595;
					Match(LR_BRACKET);
					State = 3596;
					uidList();
					State = 3597;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3601;
				Match(NATURAL);
				State = 3606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 3602;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 3603;
						Match(OUTER);
						}
					}

					}
				}

				State = 3608;
				Match(JOIN);
				State = 3609;
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_queryExpression);
		try {
			State = 3620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3612;
				Match(LR_BRACKET);
				State = 3613;
				querySpecification();
				State = 3614;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3616;
				Match(LR_BRACKET);
				State = 3617;
				queryExpression();
				State = 3618;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 236, RULE_queryExpressionNointo);
		try {
			State = 3630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3622;
				Match(LR_BRACKET);
				State = 3623;
				querySpecificationNointo();
				State = 3624;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3626;
				Match(LR_BRACKET);
				State = 3627;
				queryExpressionNointo();
				State = 3628;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 238, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 3690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3632;
				Match(SELECT);
				State = 3636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3633;
						selectSpec();
						}
						} 
					}
					State = 3638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
				}
				State = 3639;
				selectElements();
				State = 3641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3640;
					selectIntoExpression();
					}
				}

				State = 3644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
				case 1:
					{
					State = 3643;
					fromClause();
					}
					break;
				}
				State = 3647;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
				case 1:
					{
					State = 3646;
					groupByClause();
					}
					break;
				}
				State = 3650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3649;
					havingClause();
					}
				}

				State = 3653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3652;
					windowClause();
					}
				}

				State = 3656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
				case 1:
					{
					State = 3655;
					orderByClause();
					}
					break;
				}
				State = 3659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
				case 1:
					{
					State = 3658;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3661;
				Match(SELECT);
				State = 3665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,522,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3662;
						selectSpec();
						}
						} 
					}
					State = 3667;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,522,Context);
				}
				State = 3668;
				selectElements();
				State = 3670;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
				case 1:
					{
					State = 3669;
					fromClause();
					}
					break;
				}
				State = 3673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
				case 1:
					{
					State = 3672;
					groupByClause();
					}
					break;
				}
				State = 3676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3675;
					havingClause();
					}
				}

				State = 3679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3678;
					windowClause();
					}
				}

				State = 3682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
				case 1:
					{
					State = 3681;
					orderByClause();
					}
					break;
				}
				State = 3685;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
				case 1:
					{
					State = 3684;
					limitClause();
					}
					break;
				}
				State = 3688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3687;
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecificationNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecificationNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecificationNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 240, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3692;
			Match(SELECT);
			State = 3696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,531,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3693;
					selectSpec();
					}
					} 
				}
				State = 3698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,531,Context);
			}
			State = 3699;
			selectElements();
			State = 3701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				{
				State = 3700;
				fromClause();
				}
				break;
			}
			State = 3704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
			case 1:
				{
				State = 3703;
				groupByClause();
				}
				break;
			}
			State = 3707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 3706;
				havingClause();
				}
			}

			State = 3710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 3709;
				windowClause();
				}
			}

			State = 3713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
			case 1:
				{
				State = 3712;
				orderByClause();
				}
				break;
			}
			State = 3716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
			case 1:
				{
				State = 3715;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 242, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3718;
			Match(UNION);
			State = 3720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3719;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3722;
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3724;
			Match(UNION);
			State = 3726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3725;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 3728;
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 3729;
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 246, RULE_selectSpec);
		int _la;
		try {
			State = 3740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3732;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3733;
				Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3734;
				Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3735;
				Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3736;
				Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3737;
				Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3738;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3739;
				Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 248, RULE_selectElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 3742;
				_localctx.star = Match(STAR);
				}
				break;
			case 2:
				{
				State = 3743;
				selectElement();
				}
				break;
			}
			State = 3750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3746;
				Match(COMMA);
				State = 3747;
				selectElement();
				}
				}
				State = 3752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectExpressionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectExpressionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFunctionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFunctionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFunctionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStarElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStarElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStarElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectColumnElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectColumnElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 250, RULE_selectElement);
		int _la;
		try {
			State = 3782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,551,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3753;
				fullId();
				State = 3754;
				Match(DOT);
				State = 3755;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3757;
				fullColumnName();
				State = 3762;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
				case 1:
					{
					State = 3759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3758;
						Match(AS);
						}
					}

					State = 3761;
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3764;
				functionCall();
				State = 3769;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
				case 1:
					{
					State = 3766;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3765;
						Match(AS);
						}
					}

					State = 3768;
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
				case 1:
					{
					State = 3771;
					Match(LOCAL_ID);
					State = 3772;
					Match(VAR_ASSIGN);
					}
					break;
				}
				State = 3775;
				expression(0);
				State = 3780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
				case 1:
					{
					State = 3777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3776;
						Match(AS);
						}
					}

					State = 3779;
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoTextFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoTextFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoTextFile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoDumpFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoDumpFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoDumpFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 252, RULE_selectIntoExpression);
		int _la;
		try {
			State = 3820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3784;
				Match(INTO);
				State = 3785;
				assignmentField();
				State = 3790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3786;
					Match(COMMA);
					State = 3787;
					assignmentField();
					}
					}
					State = 3792;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3793;
				Match(INTO);
				State = 3794;
				Match(DUMPFILE);
				State = 3795;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 3796;
				Match(INTO);
				State = 3797;
				Match(OUTFILE);
				State = 3798;
				((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 3802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 3799;
					Match(CHARACTER);
					State = 3800;
					Match(SET);
					State = 3801;
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 3810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,555,Context) ) {
				case 1:
					{
					State = 3804;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3806;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3805;
						selectFieldsInto();
						}
						}
						State = 3808;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 3818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 3812;
					Match(LINES);
					State = 3814;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3813;
						selectLinesInto();
						}
						}
						State = 3816;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFieldsInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFieldsInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldsInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 254, RULE_selectFieldsInto);
		int _la;
		try {
			State = 3834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3822;
				Match(TERMINATED);
				State = 3823;
				Match(BY);
				State = 3824;
				_localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 3825;
					Match(OPTIONALLY);
					}
				}

				State = 3828;
				Match(ENCLOSED);
				State = 3829;
				Match(BY);
				State = 3830;
				_localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3831;
				Match(ESCAPED);
				State = 3832;
				Match(BY);
				State = 3833;
				_localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectLinesInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectLinesInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLinesInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 256, RULE_selectLinesInto);
		try {
			State = 3842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3836;
				Match(STARTING);
				State = 3837;
				Match(BY);
				State = 3838;
				_localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3839;
				Match(TERMINATED);
				State = 3840;
				Match(BY);
				State = 3841;
				_localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3844;
				Match(FROM);
				State = 3845;
				tableSources();
				}
			}

			State = 3850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3848;
				Match(WHERE);
				State = 3849;
				_localctx.whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 260, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3852;
			Match(GROUP);
			State = 3853;
			Match(BY);
			State = 3854;
			groupByItem();
			State = 3859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3855;
				Match(COMMA);
				State = 3856;
				groupByItem();
				}
				}
				State = 3861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3864;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
			case 1:
				{
				State = 3862;
				Match(WITH);
				State = 3863;
				Match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ExpressionContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 262, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3866;
			Match(HAVING);
			State = 3867;
			_localctx.havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(MySqlParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext[] windowName() {
			return GetRuleContexts<WindowNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName(int i) {
			return GetRuleContext<WindowNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(MySqlParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(MySqlParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext[] windowSpec() {
			return GetRuleContexts<WindowSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec(int i) {
			return GetRuleContext<WindowSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_windowClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3869;
			Match(WINDOW);
			State = 3870;
			windowName();
			State = 3871;
			Match(AS);
			State = 3872;
			Match(LR_BRACKET);
			State = 3873;
			windowSpec();
			State = 3874;
			Match(RR_BRACKET);
			State = 3884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3875;
				Match(COMMA);
				State = 3876;
				windowName();
				State = 3877;
				Match(AS);
				State = 3878;
				Match(LR_BRACKET);
				State = 3879;
				windowSpec();
				State = 3880;
				Match(RR_BRACKET);
				}
				}
				State = 3886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 266, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887;
			expression(0);
			State = 3889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				{
				State = 3888;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext[] limitClauseAtom() {
			return GetRuleContexts<LimitClauseAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom(int i) {
			return GetRuleContext<LimitClauseAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 268, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3891;
			Match(LIMIT);
			State = 3902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
			case 1:
				{
				State = 3895;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
				case 1:
					{
					State = 3892;
					_localctx.offset = limitClauseAtom();
					State = 3893;
					Match(COMMA);
					}
					break;
				}
				State = 3897;
				_localctx.limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				State = 3898;
				_localctx.limit = limitClauseAtom();
				State = 3899;
				Match(OFFSET);
				State = 3900;
				_localctx.offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClauseAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClauseAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClauseAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseAtomContext limitClauseAtom() {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
		EnterRule(_localctx, 270, RULE_limitClauseAtom);
		try {
			State = 3907;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3904;
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3905;
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3906;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 272, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3909;
			Match(START);
			State = 3910;
			Match(TRANSACTION);
			State = 3919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 3911;
				transactionMode();
				State = 3916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3912;
					Match(COMMA);
					State = 3913;
					transactionMode();
					}
					}
					State = 3918;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 274, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3921;
			Match(BEGIN);
			State = 3923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3922;
				Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 276, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3925;
			Match(COMMIT);
			State = 3927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3926;
				Match(WORK);
				}
			}

			State = 3934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3929;
				Match(AND);
				State = 3931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3930;
					_localctx.nochain = Match(NO);
					}
				}

				State = 3933;
				Match(CHAIN);
				}
			}

			State = 3940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				{
				State = 3937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3936;
					_localctx.norelease = Match(NO);
					}
				}

				State = 3939;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 278, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3942;
			Match(ROLLBACK);
			State = 3944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3943;
				Match(WORK);
				}
			}

			State = 3951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3946;
				Match(AND);
				State = 3948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3947;
					_localctx.nochain = Match(NO);
					}
				}

				State = 3950;
				Match(CHAIN);
				}
			}

			State = 3957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
			case 1:
				{
				State = 3954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3953;
					_localctx.norelease = Match(NO);
					}
				}

				State = 3956;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 280, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3959;
			Match(SAVEPOINT);
			State = 3960;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 282, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3962;
			Match(ROLLBACK);
			State = 3964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3963;
				Match(WORK);
				}
			}

			State = 3966;
			Match(TO);
			State = 3968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,585,Context) ) {
			case 1:
				{
				State = 3967;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 3970;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReleaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReleaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReleaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 284, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3972;
			Match(RELEASE);
			State = 3973;
			Match(SAVEPOINT);
			State = 3974;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 286, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3976;
			Match(LOCK);
			State = 3977;
			Match(TABLES);
			State = 3978;
			lockTableElement();
			State = 3983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3979;
				Match(COMMA);
				State = 3980;
				lockTableElement();
				}
				}
				State = 3985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 288, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3986;
			Match(UNLOCK);
			State = 3987;
			Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 290, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3989;
			Match(SET);
			State = 3990;
			Match(AUTOCOMMIT);
			State = 3991;
			Match(EQUAL_SYMBOL);
			State = 3992;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 292, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3994;
			Match(SET);
			State = 3996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 3995;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3998;
			Match(TRANSACTION);
			State = 3999;
			transactionOption();
			State = 4004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4000;
				Match(COMMA);
				State = 4001;
				transactionOption();
				}
				}
				State = 4006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 294, RULE_transactionMode);
		try {
			State = 4014;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,589,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4007;
				Match(WITH);
				State = 4008;
				Match(CONSISTENT);
				State = 4009;
				Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4010;
				Match(READ);
				State = 4011;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4012;
				Match(READ);
				State = 4013;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 296, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4016;
			tableName();
			State = 4021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (RIGHT - 142)) | (1L << (SCHEMA - 142)) | (1L << (STACKED - 142)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4017;
					Match(AS);
					}
				}

				State = 4020;
				uid();
				}
			}

			State = 4023;
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 298, RULE_lockAction);
		int _la;
		try {
			State = 4033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4025;
				Match(READ);
				State = 4027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 4026;
					Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 4029;
					Match(LOW_PRIORITY);
					}
				}

				State = 4032;
				Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 300, RULE_transactionOption);
		try {
			State = 4042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4035;
				Match(ISOLATION);
				State = 4036;
				Match(LEVEL);
				State = 4037;
				transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4038;
				Match(READ);
				State = 4039;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4040;
				Match(READ);
				State = 4041;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 302, RULE_transactionLevel);
		try {
			State = 4051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4044;
				Match(REPEATABLE);
				State = 4045;
				Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4046;
				Match(READ);
				State = 4047;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4048;
				Match(READ);
				State = 4049;
				Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4050;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 304, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053;
			Match(CHANGE);
			State = 4054;
			Match(MASTER);
			State = 4055;
			Match(TO);
			State = 4056;
			masterOption();
			State = 4061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4057;
				Match(COMMA);
				State = 4058;
				masterOption();
				}
				}
				State = 4063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4064;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplicationFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 306, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4067;
			Match(CHANGE);
			State = 4068;
			Match(REPLICATION);
			State = 4069;
			Match(FILTER);
			State = 4070;
			replicationFilter();
			State = 4075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4071;
				Match(COMMA);
				State = 4072;
				replicationFilter();
				}
				}
				State = 4077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPurgeBinaryLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPurgeBinaryLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurgeBinaryLogs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 308, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4078;
			Match(PURGE);
			State = 4079;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4080;
			Match(LOGS);
			State = 4085;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 4081;
				Match(TO);
				State = 4082;
				_localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 4083;
				Match(BEFORE);
				State = 4084;
				_localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 310, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4087;
			Match(RESET);
			State = 4088;
			Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 312, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4090;
			Match(RESET);
			State = 4091;
			Match(SLAVE);
			State = 4093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 4092;
				Match(ALL);
				}
			}

			State = 4096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4095;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 314, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4098;
			Match(START);
			State = 4099;
			Match(SLAVE);
			State = 4108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4100;
				threadType();
				State = 4105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4101;
					Match(COMMA);
					State = 4102;
					threadType();
					}
					}
					State = 4107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4110;
				Match(UNTIL);
				State = 4111;
				untilOption();
				}
			}

			State = 4117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 4114;
				connectionOption();
				}
				}
				State = 4119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4120;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 316, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4123;
			Match(STOP);
			State = 4124;
			Match(SLAVE);
			State = 4133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4125;
				threadType();
				State = 4130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4126;
					Match(COMMA);
					State = 4127;
					threadType();
					}
					}
					State = 4132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 318, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4135;
			Match(START);
			State = 4136;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 320, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4138;
			Match(STOP);
			State = 4139;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterStringOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterStringOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterStringOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterRealOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterRealOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterRealOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		[System.Diagnostics.DebuggerNonUserCode] public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterBoolOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterBoolOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterBoolOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterUidListOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterUidListOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterUidListOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterDecimalOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterDecimalOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterDecimalOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 322, RULE_masterOption);
		int _la;
		try {
			State = 4170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4141;
				stringMasterOption();
				State = 4142;
				Match(EQUAL_SYMBOL);
				State = 4143;
				Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4145;
				decimalMasterOption();
				State = 4146;
				Match(EQUAL_SYMBOL);
				State = 4147;
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4149;
				boolMasterOption();
				State = 4150;
				Match(EQUAL_SYMBOL);
				State = 4151;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4153;
				Match(MASTER_HEARTBEAT_PERIOD);
				State = 4154;
				Match(EQUAL_SYMBOL);
				State = 4155;
				Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4156;
				Match(IGNORE_SERVER_IDS);
				State = 4157;
				Match(EQUAL_SYMBOL);
				State = 4158;
				Match(LR_BRACKET);
				State = 4167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
					{
					State = 4159;
					uid();
					State = 4164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4160;
						Match(COMMA);
						State = 4161;
						uid();
						}
						}
						State = 4166;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4169;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 324, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4172;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)))) != 0) || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 326, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4174;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (MASTER_CONNECT_RETRY - 461)) | (1L << (MASTER_DELAY - 461)) | (1L << (MASTER_LOG_POS - 461)) | (1L << (MASTER_PORT - 461)) | (1L << (MASTER_RETRY_COUNT - 461)))) != 0) || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBoolMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBoolMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 328, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4176;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 330, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4178;
			Match(FOR);
			State = 4179;
			Match(CHANNEL);
			State = 4180;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRewriteDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRewriteDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 332, RULE_replicationFilter);
		int _la;
		try {
			State = 4231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4182;
				Match(REPLICATE_DO_DB);
				State = 4183;
				Match(EQUAL_SYMBOL);
				State = 4184;
				Match(LR_BRACKET);
				State = 4185;
				uidList();
				State = 4186;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4188;
				Match(REPLICATE_IGNORE_DB);
				State = 4189;
				Match(EQUAL_SYMBOL);
				State = 4190;
				Match(LR_BRACKET);
				State = 4191;
				uidList();
				State = 4192;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4194;
				Match(REPLICATE_DO_TABLE);
				State = 4195;
				Match(EQUAL_SYMBOL);
				State = 4196;
				Match(LR_BRACKET);
				State = 4197;
				tables();
				State = 4198;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4200;
				Match(REPLICATE_IGNORE_TABLE);
				State = 4201;
				Match(EQUAL_SYMBOL);
				State = 4202;
				Match(LR_BRACKET);
				State = 4203;
				tables();
				State = 4204;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4206;
				Match(REPLICATE_WILD_DO_TABLE);
				State = 4207;
				Match(EQUAL_SYMBOL);
				State = 4208;
				Match(LR_BRACKET);
				State = 4209;
				simpleStrings();
				State = 4210;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4212;
				Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 4213;
				Match(EQUAL_SYMBOL);
				State = 4214;
				Match(LR_BRACKET);
				State = 4215;
				simpleStrings();
				State = 4216;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4218;
				Match(REPLICATE_REWRITE_DB);
				State = 4219;
				Match(EQUAL_SYMBOL);
				State = 4220;
				Match(LR_BRACKET);
				State = 4221;
				tablePair();
				State = 4226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4222;
					Match(COMMA);
					State = 4223;
					tablePair();
					}
					}
					State = 4228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4229;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 334, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4233;
			Match(LR_BRACKET);
			State = 4234;
			_localctx.firstTable = tableName();
			State = 4235;
			Match(COMMA);
			State = 4236;
			_localctx.secondTable = tableName();
			State = 4237;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThreadType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThreadType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 336, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4239;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtidsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtidsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtidsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlGapsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlGapsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlGapsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRelayLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRelayLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelayLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 338, RULE_untilOption);
		int _la;
		try {
			State = 4259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4241;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4242;
				Match(EQUAL_SYMBOL);
				State = 4243;
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4244;
				Match(MASTER_LOG_FILE);
				State = 4245;
				Match(EQUAL_SYMBOL);
				State = 4246;
				Match(STRING_LITERAL);
				State = 4247;
				Match(COMMA);
				State = 4248;
				Match(MASTER_LOG_POS);
				State = 4249;
				Match(EQUAL_SYMBOL);
				State = 4250;
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4251;
				Match(RELAY_LOG_FILE);
				State = 4252;
				Match(EQUAL_SYMBOL);
				State = 4253;
				Match(STRING_LITERAL);
				State = 4254;
				Match(COMMA);
				State = 4255;
				Match(RELAY_LOG_POS);
				State = 4256;
				Match(EQUAL_SYMBOL);
				State = 4257;
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4258;
				Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginDirConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginDirConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginDirConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultAuthConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 340, RULE_connectionOption);
		try {
			State = 4273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4261;
				Match(USER);
				State = 4262;
				Match(EQUAL_SYMBOL);
				State = 4263;
				((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4264;
				Match(PASSWORD);
				State = 4265;
				Match(EQUAL_SYMBOL);
				State = 4266;
				((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4267;
				Match(DEFAULT_AUTH);
				State = 4268;
				Match(EQUAL_SYMBOL);
				State = 4269;
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4270;
				Match(PLUGIN_DIR);
				State = 4271;
				Match(EQUAL_SYMBOL);
				State = 4272;
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 342, RULE_gtuidSet);
		int _la;
		try {
			State = 4284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4275;
				uuidSet();
				State = 4280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4276;
					Match(COMMA);
					State = 4277;
					uuidSet();
					}
					}
					State = 4282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4283;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 344, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4286;
			Match(XA);
			State = 4287;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4288;
			xid();
			State = 4290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 4289;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaEndTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaEndTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaEndTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 346, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4292;
			Match(XA);
			State = 4293;
			Match(END);
			State = 4294;
			xid();
			State = 4300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 4295;
				Match(SUSPEND);
				State = 4298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4296;
					Match(FOR);
					State = 4297;
					Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 348, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4302;
			Match(XA);
			State = 4303;
			Match(PREPARE);
			State = 4304;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 350, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4306;
			Match(XA);
			State = 4307;
			Match(COMMIT);
			State = 4308;
			xid();
			State = 4311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 4309;
				Match(ONE);
				State = 4310;
				Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 352, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4313;
			Match(XA);
			State = 4314;
			Match(ROLLBACK);
			State = 4315;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRecoverWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRecoverWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRecoverWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 354, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4317;
			Match(XA);
			State = 4318;
			Match(RECOVER);
			State = 4321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 4319;
				Match(CONVERT);
				State = 4320;
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 356, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4323;
			Match(PREPARE);
			State = 4324;
			uid();
			State = 4325;
			Match(FROM);
			State = 4328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 4326;
				_localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 4327;
				_localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 358, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4330;
			Match(EXECUTE);
			State = 4331;
			uid();
			State = 4334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4332;
				Match(USING);
				State = 4333;
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeallocatePrepare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeallocatePrepare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocatePrepare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 360, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4336;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4337;
			Match(PREPARE);
			State = 4338;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 362, RULE_routineBody);
		try {
			State = 4342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,626,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4340;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4341;
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 364, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,627,Context) ) {
			case 1:
				{
				State = 4344;
				uid();
				State = 4345;
				Match(COLON_SYMB);
				}
				break;
			}
			State = 4349;
			Match(BEGIN);
			State = 4388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,633,Context) ) {
			case 1:
				{
				State = 4355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,628,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4350;
						declareVariable();
						State = 4351;
						Match(SEMI);
						}
						} 
					}
					State = 4357;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,628,Context);
				}
				State = 4363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,629,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4358;
						declareCondition();
						State = 4359;
						Match(SEMI);
						}
						} 
					}
					State = 4365;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,629,Context);
				}
				State = 4371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,630,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4366;
						declareCursor();
						State = 4367;
						Match(SEMI);
						}
						} 
					}
					State = 4373;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,630,Context);
				}
				State = 4379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 4374;
					declareHandler();
					State = 4375;
					Match(SEMI);
					}
					}
					State = 4381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,632,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4382;
						procedureSqlStatement();
						}
						} 
					}
					State = 4387;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,632,Context);
				}
				}
				break;
			}
			State = 4390;
			Match(END);
			State = 4392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
			case 1:
				{
				State = 4391;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(MySqlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 366, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394;
			Match(CASE);
			State = 4397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,635,Context) ) {
			case 1:
				{
				State = 4395;
				uid();
				}
				break;
			case 2:
				{
				State = 4396;
				expression(0);
				}
				break;
			}
			State = 4400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4399;
				caseAlternative();
				}
				}
				State = 4402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4404;
				Match(ELSE);
				State = 4406;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4405;
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4408;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,637,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4412;
			Match(END);
			State = 4413;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MySqlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 368, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4415;
			Match(IF);
			State = 4416;
			expression(0);
			State = 4417;
			Match(THEN);
			State = 4419;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4418;
					_localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,639,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4423;
				elifAlternative();
				}
				}
				State = 4428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4429;
				Match(ELSE);
				State = 4431;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4430;
						_localctx._procedureSqlStatement = procedureSqlStatement();
						_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4433;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,641,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4437;
			Match(END);
			State = 4438;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 370, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4440;
			Match(ITERATE);
			State = 4441;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 372, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4443;
			Match(LEAVE);
			State = 4444;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(MySqlParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 374, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4446;
				uid();
				State = 4447;
				Match(COLON_SYMB);
				}
			}

			State = 4451;
			Match(LOOP);
			State = 4453;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4452;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,644,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4457;
			Match(END);
			State = 4458;
			Match(LOOP);
			State = 4460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4459;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(MySqlParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 376, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4462;
				uid();
				State = 4463;
				Match(COLON_SYMB);
				}
			}

			State = 4467;
			Match(REPEAT);
			State = 4469;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4468;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,647,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4473;
			Match(UNTIL);
			State = 4474;
			expression(0);
			State = 4475;
			Match(END);
			State = 4476;
			Match(REPEAT);
			State = 4478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4477;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 378, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4480;
			Match(RETURN);
			State = 4481;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(MySqlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 380, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4483;
				uid();
				State = 4484;
				Match(COLON_SYMB);
				}
			}

			State = 4488;
			Match(WHILE);
			State = 4489;
			expression(0);
			State = 4490;
			Match(DO);
			State = 4492;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4491;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,650,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4496;
			Match(END);
			State = 4497;
			Match(WHILE);
			State = 4499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (RIGHT - 111)) | (1L << (SCHEMA - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SERIAL - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (AVG - 272)) | (1L << (BIT_AND - 272)) | (1L << (BIT_OR - 272)) | (1L << (BIT_XOR - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (GROUP_CONCAT - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (MAX - 272)) | (1L << (MIN - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (STD - 272)) | (1L << (STDDEV - 272)) | (1L << (STDDEV_POP - 272)) | (1L << (STDDEV_SAMP - 272)) | (1L << (SUM - 272)) | (1L << (VAR_POP - 272)) | (1L << (VAR_SAMP - 272)) | (1L << (VARIANCE - 272)) | (1L << (POSITION - 272)) | (1L << (ACCOUNT - 272)) | (1L << (ACTION - 272)) | (1L << (AFTER - 272)) | (1L << (AGGREGATE - 272)) | (1L << (ALGORITHM - 272)) | (1L << (ANY - 272)) | (1L << (AT - 272)) | (1L << (AUTHORS - 272)) | (1L << (AUTOCOMMIT - 272)) | (1L << (AUTOEXTEND_SIZE - 272)) | (1L << (AUTO_INCREMENT - 272)) | (1L << (AVG_ROW_LENGTH - 272)) | (1L << (BEGIN - 272)) | (1L << (BINLOG - 272)) | (1L << (BIT - 272)) | (1L << (BLOCK - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (BOOL - 336)) | (1L << (BOOLEAN - 336)) | (1L << (BTREE - 336)) | (1L << (CACHE - 336)) | (1L << (CASCADED - 336)) | (1L << (CHAIN - 336)) | (1L << (CHANGED - 336)) | (1L << (CHANNEL - 336)) | (1L << (CHECKSUM - 336)) | (1L << (PAGE_CHECKSUM - 336)) | (1L << (CIPHER - 336)) | (1L << (CLASS_ORIGIN - 336)) | (1L << (CLIENT - 336)) | (1L << (CLOSE - 336)) | (1L << (CLUSTERING - 336)) | (1L << (COALESCE - 336)) | (1L << (CODE - 336)) | (1L << (COLUMNS - 336)) | (1L << (COLUMN_FORMAT - 336)) | (1L << (COLUMN_NAME - 336)) | (1L << (COMMENT - 336)) | (1L << (COMMIT - 336)) | (1L << (COMPACT - 336)) | (1L << (COMPLETION - 336)) | (1L << (COMPRESSED - 336)) | (1L << (COMPRESSION - 336)) | (1L << (CONCURRENT - 336)) | (1L << (CONNECT - 336)) | (1L << (CONNECTION - 336)) | (1L << (CONSISTENT - 336)) | (1L << (CONSTRAINT_CATALOG - 336)) | (1L << (CONSTRAINT_SCHEMA - 336)) | (1L << (CONSTRAINT_NAME - 336)) | (1L << (CONTAINS - 336)) | (1L << (CONTEXT - 336)) | (1L << (CONTRIBUTORS - 336)) | (1L << (COPY - 336)) | (1L << (CPU - 336)) | (1L << (CURSOR_NAME - 336)) | (1L << (DATA - 336)) | (1L << (DATAFILE - 336)) | (1L << (DEALLOCATE - 336)) | (1L << (DEFAULT_AUTH - 336)) | (1L << (DEFINER - 336)) | (1L << (DELAY_KEY_WRITE - 336)) | (1L << (DES_KEY_FILE - 336)) | (1L << (DIRECTORY - 336)) | (1L << (DISABLE - 336)) | (1L << (DISCARD - 336)) | (1L << (DISK - 336)) | (1L << (DO - 336)) | (1L << (DUMPFILE - 336)) | (1L << (DUPLICATE - 336)) | (1L << (DYNAMIC - 336)) | (1L << (ENABLE - 336)) | (1L << (ENCRYPTION - 336)) | (1L << (END - 336)) | (1L << (ENDS - 336)) | (1L << (ENGINE - 336)) | (1L << (ENGINES - 336)) | (1L << (ERROR - 336)) | (1L << (ERRORS - 336)) | (1L << (ESCAPE - 336)) | (1L << (EVEN - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (EVENT - 400)) | (1L << (EVENTS - 400)) | (1L << (EVERY - 400)) | (1L << (EXCHANGE - 400)) | (1L << (EXCLUSIVE - 400)) | (1L << (EXPIRE - 400)) | (1L << (EXPORT - 400)) | (1L << (EXTENDED - 400)) | (1L << (EXTENT_SIZE - 400)) | (1L << (FAST - 400)) | (1L << (FAULTS - 400)) | (1L << (FIELDS - 400)) | (1L << (FILE_BLOCK_SIZE - 400)) | (1L << (FILTER - 400)) | (1L << (FIRST - 400)) | (1L << (FIXED - 400)) | (1L << (FLUSH - 400)) | (1L << (FOLLOWS - 400)) | (1L << (FOUND - 400)) | (1L << (FULL - 400)) | (1L << (FUNCTION - 400)) | (1L << (GENERAL - 400)) | (1L << (GLOBAL - 400)) | (1L << (GRANTS - 400)) | (1L << (GROUP_REPLICATION - 400)) | (1L << (HANDLER - 400)) | (1L << (HASH - 400)) | (1L << (HELP - 400)) | (1L << (HOST - 400)) | (1L << (HOSTS - 400)) | (1L << (IDENTIFIED - 400)) | (1L << (IGNORE_SERVER_IDS - 400)) | (1L << (IMPORT - 400)) | (1L << (INDEXES - 400)) | (1L << (INITIAL_SIZE - 400)) | (1L << (INPLACE - 400)) | (1L << (INSERT_METHOD - 400)) | (1L << (INSTALL - 400)) | (1L << (INSTANCE - 400)) | (1L << (INSTANT - 400)) | (1L << (INVISIBLE - 400)) | (1L << (INVOKER - 400)) | (1L << (IO - 400)) | (1L << (IO_THREAD - 400)) | (1L << (IPC - 400)) | (1L << (ISOLATION - 400)) | (1L << (ISSUER - 400)) | (1L << (JSON - 400)) | (1L << (KEY_BLOCK_SIZE - 400)) | (1L << (LANGUAGE - 400)) | (1L << (LAST - 400)) | (1L << (LEAVES - 400)) | (1L << (LESS - 400)) | (1L << (LEVEL - 400)) | (1L << (LIST - 400)) | (1L << (LOCAL - 400)) | (1L << (LOGFILE - 400)) | (1L << (LOGS - 400)) | (1L << (MASTER - 400)) | (1L << (MASTER_AUTO_POSITION - 400)) | (1L << (MASTER_CONNECT_RETRY - 400)) | (1L << (MASTER_DELAY - 400)) | (1L << (MASTER_HEARTBEAT_PERIOD - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_HOST - 464)) | (1L << (MASTER_LOG_FILE - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PASSWORD - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)) | (1L << (MASTER_SSL - 464)) | (1L << (MASTER_SSL_CA - 464)) | (1L << (MASTER_SSL_CAPATH - 464)) | (1L << (MASTER_SSL_CERT - 464)) | (1L << (MASTER_SSL_CIPHER - 464)) | (1L << (MASTER_SSL_CRL - 464)) | (1L << (MASTER_SSL_CRLPATH - 464)) | (1L << (MASTER_SSL_KEY - 464)) | (1L << (MASTER_TLS_VERSION - 464)) | (1L << (MASTER_USER - 464)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 464)) | (1L << (MAX_QUERIES_PER_HOUR - 464)) | (1L << (MAX_ROWS - 464)) | (1L << (MAX_SIZE - 464)) | (1L << (MAX_UPDATES_PER_HOUR - 464)) | (1L << (MAX_USER_CONNECTIONS - 464)) | (1L << (MEDIUM - 464)) | (1L << (MEMBER - 464)) | (1L << (MERGE - 464)) | (1L << (MESSAGE_TEXT - 464)) | (1L << (MID - 464)) | (1L << (MIGRATE - 464)) | (1L << (MIN_ROWS - 464)) | (1L << (MODE - 464)) | (1L << (MODIFY - 464)) | (1L << (MUTEX - 464)) | (1L << (MYSQL - 464)) | (1L << (MYSQL_ERRNO - 464)) | (1L << (NAME - 464)) | (1L << (NAMES - 464)) | (1L << (NCHAR - 464)) | (1L << (NEVER - 464)) | (1L << (NEXT - 464)) | (1L << (NO - 464)) | (1L << (NOCOPY - 464)) | (1L << (NOWAIT - 464)) | (1L << (NODEGROUP - 464)) | (1L << (NONE - 464)) | (1L << (ODBC - 464)) | (1L << (OFFLINE - 464)) | (1L << (OFFSET - 464)) | (1L << (OF - 464)) | (1L << (OJ - 464)) | (1L << (OLD_PASSWORD - 464)) | (1L << (ONE - 464)) | (1L << (ONLINE - 464)) | (1L << (ONLY - 464)) | (1L << (OPEN - 464)) | (1L << (OPTIMIZER_COSTS - 464)) | (1L << (OPTIONS - 464)) | (1L << (OWNER - 464)) | (1L << (PACK_KEYS - 464)) | (1L << (PAGE - 464)) | (1L << (PARSER - 464)) | (1L << (PARTIAL - 464)) | (1L << (PARTITIONING - 464)) | (1L << (PARTITIONS - 464)) | (1L << (PASSWORD - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (PHASE - 528)) | (1L << (PLUGIN - 528)) | (1L << (PLUGIN_DIR - 528)) | (1L << (PLUGINS - 528)) | (1L << (PORT - 528)) | (1L << (PRECEDES - 528)) | (1L << (PREPARE - 528)) | (1L << (PRESERVE - 528)) | (1L << (PREV - 528)) | (1L << (PROCESSLIST - 528)) | (1L << (PROFILE - 528)) | (1L << (PROFILES - 528)) | (1L << (PROXY - 528)) | (1L << (QUERY - 528)) | (1L << (QUICK - 528)) | (1L << (REBUILD - 528)) | (1L << (RECOVER - 528)) | (1L << (RECURSIVE - 528)) | (1L << (REDO_BUFFER_SIZE - 528)) | (1L << (REDUNDANT - 528)) | (1L << (RELAY - 528)) | (1L << (RELAY_LOG_FILE - 528)) | (1L << (RELAY_LOG_POS - 528)) | (1L << (RELAYLOG - 528)) | (1L << (REMOVE - 528)) | (1L << (REORGANIZE - 528)) | (1L << (REPAIR - 528)) | (1L << (REPLICATE_DO_DB - 528)) | (1L << (REPLICATE_DO_TABLE - 528)) | (1L << (REPLICATE_IGNORE_DB - 528)) | (1L << (REPLICATE_IGNORE_TABLE - 528)) | (1L << (REPLICATE_REWRITE_DB - 528)) | (1L << (REPLICATE_WILD_DO_TABLE - 528)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 528)) | (1L << (REPLICATION - 528)) | (1L << (RESET - 528)) | (1L << (RESUME - 528)) | (1L << (RETURNED_SQLSTATE - 528)) | (1L << (RETURNS - 528)) | (1L << (ROLE - 528)) | (1L << (ROLLBACK - 528)) | (1L << (ROLLUP - 528)) | (1L << (ROTATE - 528)) | (1L << (ROW - 528)) | (1L << (ROWS - 528)) | (1L << (ROW_FORMAT - 528)) | (1L << (RTREE - 528)) | (1L << (SAVEPOINT - 528)) | (1L << (SCHEDULE - 528)) | (1L << (SECURITY - 528)) | (1L << (SERVER - 528)) | (1L << (SESSION - 528)) | (1L << (SHARE - 528)) | (1L << (SHARED - 528)) | (1L << (SIGNED - 528)) | (1L << (SIMPLE - 528)) | (1L << (SLAVE - 528)) | (1L << (SLOW - 528)) | (1L << (SNAPSHOT - 528)) | (1L << (SOCKET - 528)) | (1L << (SOME - 528)) | (1L << (SONAME - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (SOUNDS - 592)) | (1L << (SOURCE - 592)) | (1L << (SQL_AFTER_GTIDS - 592)) | (1L << (SQL_AFTER_MTS_GAPS - 592)) | (1L << (SQL_BEFORE_GTIDS - 592)) | (1L << (SQL_BUFFER_RESULT - 592)) | (1L << (SQL_CACHE - 592)) | (1L << (SQL_NO_CACHE - 592)) | (1L << (SQL_THREAD - 592)) | (1L << (START - 592)) | (1L << (STARTS - 592)) | (1L << (STATS_AUTO_RECALC - 592)) | (1L << (STATS_PERSISTENT - 592)) | (1L << (STATS_SAMPLE_PAGES - 592)) | (1L << (STATUS - 592)) | (1L << (STOP - 592)) | (1L << (STORAGE - 592)) | (1L << (STRING - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (SUBJECT - 592)) | (1L << (SUBPARTITION - 592)) | (1L << (SUBPARTITIONS - 592)) | (1L << (SUSPEND - 592)) | (1L << (SWAPS - 592)) | (1L << (SWITCHES - 592)) | (1L << (TABLE_NAME - 592)) | (1L << (TABLESPACE - 592)) | (1L << (TEMPORARY - 592)) | (1L << (TEMPTABLE - 592)) | (1L << (THAN - 592)) | (1L << (TRADITIONAL - 592)) | (1L << (TRANSACTION - 592)) | (1L << (TRANSACTIONAL - 592)) | (1L << (TRIGGERS - 592)) | (1L << (TRUNCATE - 592)) | (1L << (UNDEFINED - 592)) | (1L << (UNDOFILE - 592)) | (1L << (UNDO_BUFFER_SIZE - 592)) | (1L << (UNINSTALL - 592)) | (1L << (UNKNOWN - 592)) | (1L << (UNTIL - 592)) | (1L << (UPGRADE - 592)) | (1L << (USER - 592)) | (1L << (USE_FRM - 592)) | (1L << (USER_RESOURCES - 592)) | (1L << (VALIDATION - 592)) | (1L << (VALUE - 592)) | (1L << (VARIABLES - 592)) | (1L << (VIEW - 592)) | (1L << (VISIBLE - 592)) | (1L << (WAIT - 592)) | (1L << (WARNINGS - 592)) | (1L << (WITHOUT - 592)) | (1L << (WORK - 592)) | (1L << (WRAPPER - 592)) | (1L << (X509 - 592)) | (1L << (XA - 592)) | (1L << (XML - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (EUR - 656)) | (1L << (USA - 656)) | (1L << (JIS - 656)) | (1L << (ISO - 656)) | (1L << (INTERNAL - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (TABLES - 656)) | (1L << (ROUTINE - 656)) | (1L << (EXECUTE - 656)) | (1L << (FILE - 656)) | (1L << (PROCESS - 656)) | (1L << (RELOAD - 656)) | (1L << (SHUTDOWN - 656)) | (1L << (SUPER - 656)) | (1L << (PRIVILEGES - 656)) | (1L << (AUDIT_ADMIN - 656)) | (1L << (BACKUP_ADMIN - 656)) | (1L << (BINLOG_ADMIN - 656)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 656)) | (1L << (CLONE_ADMIN - 656)) | (1L << (CONNECTION_ADMIN - 656)) | (1L << (ENCRYPTION_KEY_ADMIN - 656)) | (1L << (FIREWALL_ADMIN - 656)) | (1L << (FIREWALL_USER - 656)) | (1L << (ADMIN - 656)) | (1L << (GROUP_REPLICATION_ADMIN - 656)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 656)) | (1L << (NDB_STORED_USER - 656)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 656)) | (1L << (REPLICATION_APPLIER - 656)) | (1L << (REPLICATION_SLAVE_ADMIN - 656)) | (1L << (RESOURCE_GROUP_ADMIN - 656)) | (1L << (RESOURCE_GROUP_USER - 656)) | (1L << (ROLE_ADMIN - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)) | (1L << (SET_USER_ID - 656)) | (1L << (SHOW_ROUTINE - 656)) | (1L << (SYSTEM_VARIABLES_ADMIN - 656)) | (1L << (TABLE_ENCRYPTION_ADMIN - 656)) | (1L << (VERSION_TOKEN_ADMIN - 656)) | (1L << (XA_RECOVER_ADMIN - 656)) | (1L << (ARMSCII8 - 656)) | (1L << (ASCII - 656)) | (1L << (BIG5 - 656)) | (1L << (CP1250 - 656)) | (1L << (CP1251 - 656)) | (1L << (CP1256 - 656)) | (1L << (CP1257 - 656)) | (1L << (CP850 - 656)) | (1L << (CP852 - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (CP866 - 720)) | (1L << (CP932 - 720)) | (1L << (DEC8 - 720)) | (1L << (EUCJPMS - 720)) | (1L << (EUCKR - 720)) | (1L << (GB18030 - 720)) | (1L << (GB2312 - 720)) | (1L << (GBK - 720)) | (1L << (GEOSTD8 - 720)) | (1L << (GREEK - 720)) | (1L << (HEBREW - 720)) | (1L << (HP8 - 720)) | (1L << (KEYBCS2 - 720)) | (1L << (KOI8R - 720)) | (1L << (KOI8U - 720)) | (1L << (LATIN1 - 720)) | (1L << (LATIN2 - 720)) | (1L << (LATIN5 - 720)) | (1L << (LATIN7 - 720)) | (1L << (MACCE - 720)) | (1L << (MACROMAN - 720)) | (1L << (SJIS - 720)) | (1L << (SWE7 - 720)) | (1L << (TIS620 - 720)) | (1L << (UCS2 - 720)) | (1L << (UJIS - 720)) | (1L << (UTF16 - 720)) | (1L << (UTF16LE - 720)) | (1L << (UTF32 - 720)) | (1L << (UTF8 - 720)) | (1L << (UTF8MB3 - 720)) | (1L << (UTF8MB4 - 720)) | (1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (REPEATABLE - 720)) | (1L << (COMMITTED - 720)) | (1L << (UNCOMMITTED - 720)) | (1L << (SERIALIZABLE - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (ASBINARY - 784)) | (1L << (ASIN - 784)) | (1L << (ASTEXT - 784)) | (1L << (ASWKB - 784)) | (1L << (ASWKT - 784)) | (1L << (ASYMMETRIC_DECRYPT - 784)) | (1L << (ASYMMETRIC_DERIVE - 784)) | (1L << (ASYMMETRIC_ENCRYPT - 784)) | (1L << (ASYMMETRIC_SIGN - 784)) | (1L << (ASYMMETRIC_VERIFY - 784)) | (1L << (ATAN - 784)) | (1L << (ATAN2 - 784)) | (1L << (BENCHMARK - 784)) | (1L << (BIN - 784)) | (1L << (BIT_COUNT - 784)) | (1L << (BIT_LENGTH - 784)) | (1L << (BUFFER - 784)) | (1L << (CATALOG_NAME - 784)) | (1L << (CEIL - 784)) | (1L << (CEILING - 784)) | (1L << (CENTROID - 784)) | (1L << (CHARACTER_LENGTH - 784)) | (1L << (CHARSET - 784)) | (1L << (CHAR_LENGTH - 784)) | (1L << (COERCIBILITY - 784)) | (1L << (COLLATION - 784)) | (1L << (COMPRESS - 784)) | (1L << (CONCAT - 784)) | (1L << (CONCAT_WS - 784)) | (1L << (CONNECTION_ID - 784)) | (1L << (CONV - 784)) | (1L << (CONVERT_TZ - 784)) | (1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENGINE_ATTRIBUTE - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (FIND_IN_SET - 848)) | (1L << (FLOOR - 848)) | (1L << (FORMAT - 848)) | (1L << (FOUND_ROWS - 848)) | (1L << (FROM_BASE64 - 848)) | (1L << (FROM_DAYS - 848)) | (1L << (FROM_UNIXTIME - 848)) | (1L << (GEOMCOLLFROMTEXT - 848)) | (1L << (GEOMCOLLFROMWKB - 848)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 848)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 848)) | (1L << (GEOMETRYFROMTEXT - 848)) | (1L << (GEOMETRYFROMWKB - 848)) | (1L << (GEOMETRYN - 848)) | (1L << (GEOMETRYTYPE - 848)) | (1L << (GEOMFROMTEXT - 848)) | (1L << (GEOMFROMWKB - 848)) | (1L << (GET_FORMAT - 848)) | (1L << (GET_LOCK - 848)) | (1L << (GLENGTH - 848)) | (1L << (GREATEST - 848)) | (1L << (GTID_SUBSET - 848)) | (1L << (GTID_SUBTRACT - 848)) | (1L << (HEX - 848)) | (1L << (IFNULL - 848)) | (1L << (INET6_ATON - 848)) | (1L << (INET6_NTOA - 848)) | (1L << (INET_ATON - 848)) | (1L << (INET_NTOA - 848)) | (1L << (INSTR - 848)) | (1L << (INTERIORRINGN - 848)) | (1L << (INTERSECTS - 848)) | (1L << (ISCLOSED - 848)) | (1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (MBRDISJOINT - 912)) | (1L << (MBREQUAL - 912)) | (1L << (MBRINTERSECTS - 912)) | (1L << (MBROVERLAPS - 912)) | (1L << (MBRTOUCHES - 912)) | (1L << (MBRWITHIN - 912)) | (1L << (MD5 - 912)) | (1L << (MLINEFROMTEXT - 912)) | (1L << (MLINEFROMWKB - 912)) | (1L << (MONTHNAME - 912)) | (1L << (MPOINTFROMTEXT - 912)) | (1L << (MPOINTFROMWKB - 912)) | (1L << (MPOLYFROMTEXT - 912)) | (1L << (MPOLYFROMWKB - 912)) | (1L << (MULTILINESTRINGFROMTEXT - 912)) | (1L << (MULTILINESTRINGFROMWKB - 912)) | (1L << (MULTIPOINTFROMTEXT - 912)) | (1L << (MULTIPOINTFROMWKB - 912)) | (1L << (MULTIPOLYGONFROMTEXT - 912)) | (1L << (MULTIPOLYGONFROMWKB - 912)) | (1L << (NAME_CONST - 912)) | (1L << (NULLIF - 912)) | (1L << (NUMGEOMETRIES - 912)) | (1L << (NUMINTERIORRINGS - 912)) | (1L << (NUMPOINTS - 912)) | (1L << (OCT - 912)) | (1L << (OCTET_LENGTH - 912)) | (1L << (ORD - 912)) | (1L << (OVERLAPS - 912)) | (1L << (PERIOD_ADD - 912)) | (1L << (PERIOD_DIFF - 912)) | (1L << (PI - 912)) | (1L << (POINTFROMTEXT - 912)) | (1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (SRID - 976)) | (1L << (STARTPOINT - 976)) | (1L << (STRCMP - 976)) | (1L << (STR_TO_DATE - 976)) | (1L << (ST_AREA - 976)) | (1L << (ST_ASBINARY - 976)) | (1L << (ST_ASTEXT - 976)) | (1L << (ST_ASWKB - 976)) | (1L << (ST_ASWKT - 976)) | (1L << (ST_BUFFER - 976)) | (1L << (ST_CENTROID - 976)) | (1L << (ST_CONTAINS - 976)) | (1L << (ST_CROSSES - 976)) | (1L << (ST_DIFFERENCE - 976)) | (1L << (ST_DIMENSION - 976)) | (1L << (ST_DISJOINT - 976)) | (1L << (ST_DISTANCE - 976)) | (1L << (ST_ENDPOINT - 976)) | (1L << (ST_ENVELOPE - 976)) | (1L << (ST_EQUALS - 976)) | (1L << (ST_EXTERIORRING - 976)) | (1L << (ST_GEOMCOLLFROMTEXT - 976)) | (1L << (ST_GEOMCOLLFROMTXT - 976)) | (1L << (ST_GEOMCOLLFROMWKB - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 976)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 976)) | (1L << (ST_GEOMETRYFROMTEXT - 976)) | (1L << (ST_GEOMETRYFROMWKB - 976)) | (1L << (ST_GEOMETRYN - 976)) | (1L << (ST_GEOMETRYTYPE - 976)) | (1L << (ST_GEOMFROMTEXT - 976)) | (1L << (ST_GEOMFROMWKB - 976)) | (1L << (ST_INTERIORRINGN - 976)) | (1L << (ST_INTERSECTION - 976)) | (1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (SUBTIME - 1040)) | (1L << (SYSTEM_USER - 1040)) | (1L << (TAN - 1040)) | (1L << (TIMEDIFF - 1040)) | (1L << (TIMESTAMPADD - 1040)) | (1L << (TIMESTAMPDIFF - 1040)) | (1L << (TIME_FORMAT - 1040)) | (1L << (TIME_TO_SEC - 1040)) | (1L << (TOUCHES - 1040)) | (1L << (TO_BASE64 - 1040)) | (1L << (TO_DAYS - 1040)) | (1L << (TO_SECONDS - 1040)) | (1L << (UCASE - 1040)) | (1L << (UNCOMPRESS - 1040)) | (1L << (UNCOMPRESSED_LENGTH - 1040)) | (1L << (UNHEX - 1040)) | (1L << (UNIX_TIMESTAMP - 1040)) | (1L << (UPDATEXML - 1040)) | (1L << (UPPER - 1040)) | (1L << (UUID - 1040)) | (1L << (UUID_SHORT - 1040)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1040)) | (1L << (VERSION - 1040)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1040)) | (1L << (WEEKDAY - 1040)) | (1L << (WEEKOFYEAR - 1040)) | (1L << (WEIGHT_STRING - 1040)) | (1L << (WITHIN - 1040)) | (1L << (YEARWEEK - 1040)) | (1L << (Y_FUNCTION - 1040)) | (1L << (X_FUNCTION - 1040)) | (1L << (MOD - 1040)))) != 0) || ((((_la - 1108)) & ~0x3f) == 0 && ((1L << (_la - 1108)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1108)) | (1L << (STRING_LITERAL - 1108)) | (1L << (ID - 1108)) | (1L << (REVERSE_QUOTE_ID - 1108)))) != 0)) {
				{
				State = 4498;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCloseCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCloseCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOpenCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOpenCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFetchCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFetchCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetchCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 382, RULE_cursorStatement);
		int _la;
		try {
			State = 4516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4501;
				Match(CLOSE);
				State = 4502;
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4503;
				Match(FETCH);
				State = 4508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,653,Context) ) {
				case 1:
					{
					State = 4505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 4504;
						Match(NEXT);
						}
					}

					State = 4507;
					Match(FROM);
					}
					break;
				}
				State = 4510;
				uid();
				State = 4511;
				Match(INTO);
				State = 4512;
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4514;
				Match(OPEN);
				State = 4515;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 384, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4518;
			Match(DECLARE);
			State = 4519;
			uidList();
			State = 4520;
			dataType();
			State = 4523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4521;
				Match(DEFAULT);
				State = 4522;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 386, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4525;
			Match(DECLARE);
			State = 4526;
			uid();
			State = 4527;
			Match(CONDITION);
			State = 4528;
			Match(FOR);
			State = 4535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 4529;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 4530;
				Match(SQLSTATE);
				State = 4532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4531;
					Match(VALUE);
					}
				}

				State = 4534;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 388, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4537;
			Match(DECLARE);
			State = 4538;
			uid();
			State = 4539;
			Match(CURSOR);
			State = 4540;
			Match(FOR);
			State = 4541;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 390, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4543;
			Match(DECLARE);
			State = 4544;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4545;
			Match(HANDLER);
			State = 4546;
			Match(FOR);
			State = 4547;
			handlerConditionValue();
			State = 4552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4548;
				Match(COMMA);
				State = 4549;
				handlerConditionValue();
				}
				}
				State = 4554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4555;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionWarning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionWarning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionNotfound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionNotfound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionNotfound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionException(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 392, RULE_handlerConditionValue);
		int _la;
		try {
			State = 4568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4557;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4558;
				Match(SQLSTATE);
				State = 4560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4559;
					Match(VALUE);
					}
				}

				State = 4562;
				Match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4563;
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4564;
				Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4565;
				Match(NOT);
				State = 4566;
				Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4567;
				Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 394, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				{
				State = 4570;
				compoundStatement();
				}
				break;
			case 2:
				{
				State = 4571;
				sqlStatement();
				}
				break;
			}
			State = 4574;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 396, RULE_caseAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4576;
			Match(WHEN);
			State = 4579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
			case 1:
				{
				State = 4577;
				constant();
				}
				break;
			case 2:
				{
				State = 4578;
				expression(0);
				}
				break;
			}
			State = 4581;
			Match(THEN);
			State = 4583;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4582;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,663,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElifAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElifAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 398, RULE_elifAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4587;
			Match(ELSEIF);
			State = 4588;
			expression(0);
			State = 4589;
			Match(THEN);
			State = 4591;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4590;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,664,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterUserMysqlV57Context : AlterUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 400, RULE_alterUser);
		int _la;
		try {
			State = 4649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,676,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4595;
				Match(ALTER);
				State = 4596;
				Match(USER);
				State = 4597;
				userSpecification();
				State = 4602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4598;
					Match(COMMA);
					State = 4599;
					userSpecification();
					}
					}
					State = 4604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4605;
				Match(ALTER);
				State = 4606;
				Match(USER);
				State = 4608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4607;
					ifExists();
					}
				}

				State = 4610;
				userAuthOption();
				State = 4615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4611;
					Match(COMMA);
					State = 4612;
					userAuthOption();
					}
					}
					State = 4617;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4618;
					Match(REQUIRE);
					State = 4630;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4619;
						((AlterUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4620;
						tlsOption();
						State = 4627;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4622;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4621;
								Match(AND);
								}
							}

							State = 4624;
							tlsOption();
							}
							}
							State = 4629;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4634;
					Match(WITH);
					State = 4636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4635;
						userResourceOption();
						}
						}
						State = 4638;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 480)) | (1L << (MAX_QUERIES_PER_HOUR - 480)) | (1L << (MAX_UPDATES_PER_HOUR - 480)) | (1L << (MAX_USER_CONNECTIONS - 480)))) != 0) );
					}
				}

				State = 4646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4644;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4642;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4643;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV57Context : CreateUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 402, RULE_createUser);
		int _la;
		try {
			State = 4705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,688,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4651;
				Match(CREATE);
				State = 4652;
				Match(USER);
				State = 4653;
				userAuthOption();
				State = 4658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4654;
					Match(COMMA);
					State = 4655;
					userAuthOption();
					}
					}
					State = 4660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4661;
				Match(CREATE);
				State = 4662;
				Match(USER);
				State = 4664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4663;
					ifNotExists();
					}
				}

				State = 4666;
				userAuthOption();
				State = 4671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4667;
					Match(COMMA);
					State = 4668;
					userAuthOption();
					}
					}
					State = 4673;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4674;
					Match(REQUIRE);
					State = 4686;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4675;
						((CreateUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4676;
						tlsOption();
						State = 4683;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4678;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4677;
								Match(AND);
								}
							}

							State = 4680;
							tlsOption();
							}
							}
							State = 4685;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4690;
					Match(WITH);
					State = 4692;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4691;
						userResourceOption();
						}
						}
						State = 4694;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 480)) | (1L << (MAX_QUERIES_PER_HOUR - 480)) | (1L << (MAX_UPDATES_PER_HOUR - 480)) | (1L << (MAX_USER_CONNECTIONS - 480)))) != 0) );
					}
				}

				State = 4702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4700;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4698;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4699;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 404, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4707;
			Match(DROP);
			State = 4708;
			Match(USER);
			State = 4710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 4709;
				ifExists();
				}
			}

			State = 4712;
			userName();
			State = 4717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4713;
				Match(COMMA);
				State = 4714;
				userName();
				}
				}
				State = 4719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION(int i) {
			return GetToken(MySqlParser.OPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 406, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			State = 4813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,709,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4720;
				Match(GRANT);
				State = 4721;
				privelegeClause();
				State = 4726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4722;
					Match(COMMA);
					State = 4723;
					privelegeClause();
					}
					}
					State = 4728;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4729;
				Match(ON);
				State = 4731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,692,Context) ) {
				case 1:
					{
					State = 4730;
					_localctx.privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4733;
				privilegeLevel();
				State = 4734;
				Match(TO);
				State = 4735;
				userAuthOption();
				State = 4740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4736;
					Match(COMMA);
					State = 4737;
					userAuthOption();
					}
					}
					State = 4742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4743;
					Match(REQUIRE);
					State = 4755;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4744;
						_localctx.tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4745;
						tlsOption();
						State = 4752;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4747;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4746;
								Match(AND);
								}
							}

							State = 4749;
							tlsOption();
							}
							}
							State = 4754;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4759;
					Match(WITH);
					State = 4765;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,699,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 4763;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GRANT:
								{
								State = 4760;
								Match(GRANT);
								State = 4761;
								Match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								State = 4762;
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						State = 4767;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,699,Context);
					}
					}
				}

				State = 4776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4770;
					Match(AS);
					State = 4771;
					userName();
					State = 4772;
					Match(WITH);
					State = 4773;
					Match(ROLE);
					State = 4774;
					roleOption();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4778;
				Match(GRANT);
				State = 4781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
				case 1:
					{
					State = 4779;
					userName();
					}
					break;
				case 2:
					{
					State = 4780;
					uid();
					}
					break;
				}
				State = 4790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4783;
					Match(COMMA);
					State = 4786;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,703,Context) ) {
					case 1:
						{
						State = 4784;
						userName();
						}
						break;
					case 2:
						{
						State = 4785;
						uid();
						}
						break;
					}
					}
					}
					State = 4792;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4793;
				Match(TO);
				State = 4796;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
				case 1:
					{
					State = 4794;
					userName();
					}
					break;
				case 2:
					{
					State = 4795;
					uid();
					}
					break;
				}
				State = 4805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4798;
					Match(COMMA);
					State = 4801;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
					case 1:
						{
						State = 4799;
						userName();
						}
						break;
					case 2:
						{
						State = 4800;
						uid();
						}
						break;
					}
					}
					}
					State = 4807;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4808;
					Match(WITH);
					State = 4809;
					Match(ADMIN);
					State = 4810;
					Match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOptionContext roleOption() {
		RoleOptionContext _localctx = new RoleOptionContext(Context, State);
		EnterRule(_localctx, 408, RULE_roleOption);
		int _la;
		try {
			State = 4837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4815;
				Match(DEFAULT);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4816;
				Match(NONE);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4817;
				Match(ALL);
				State = 4827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT) {
					{
					State = 4818;
					Match(EXCEPT);
					State = 4819;
					userName();
					State = 4824;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4820;
						Match(COMMA);
						State = 4821;
						userName();
						}
						}
						State = 4826;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4829;
				userName();
				State = 4834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4830;
					Match(COMMA);
					State = 4831;
					userName();
					}
					}
					State = 4836;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 410, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4839;
			Match(GRANT);
			State = 4840;
			Match(PROXY);
			State = 4841;
			Match(ON);
			State = 4842;
			_localctx.fromFirst = userName();
			State = 4843;
			Match(TO);
			State = 4844;
			_localctx.toFirst = userName();
			State = 4849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4845;
				Match(COMMA);
				State = 4846;
				_localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 4851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4852;
				Match(WITH);
				State = 4853;
				Match(GRANT);
				State = 4854;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 412, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4857;
			Match(RENAME);
			State = 4858;
			Match(USER);
			State = 4859;
			renameUserClause();
			State = 4864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4860;
				Match(COMMA);
				State = 4861;
				renameUserClause();
				}
				}
				State = 4866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDetailRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDetailRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoleRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShortRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShortRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 414, RULE_revokeStatement);
		int _la;
		try {
			State = 4931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4867;
				Match(REVOKE);
				State = 4868;
				privelegeClause();
				State = 4873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4869;
					Match(COMMA);
					State = 4870;
					privelegeClause();
					}
					}
					State = 4875;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4876;
				Match(ON);
				State = 4878;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,718,Context) ) {
				case 1:
					{
					State = 4877;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4880;
				privilegeLevel();
				State = 4881;
				Match(FROM);
				State = 4882;
				userName();
				State = 4887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4883;
					Match(COMMA);
					State = 4884;
					userName();
					}
					}
					State = 4889;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4890;
				Match(REVOKE);
				State = 4891;
				Match(ALL);
				State = 4893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 4892;
					Match(PRIVILEGES);
					}
				}

				State = 4895;
				Match(COMMA);
				State = 4896;
				Match(GRANT);
				State = 4897;
				Match(OPTION);
				State = 4898;
				Match(FROM);
				State = 4899;
				userName();
				State = 4904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4900;
					Match(COMMA);
					State = 4901;
					userName();
					}
					}
					State = 4906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4907;
				Match(REVOKE);
				State = 4908;
				uid();
				State = 4913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4909;
					Match(COMMA);
					State = 4910;
					uid();
					}
					}
					State = 4915;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4916;
				Match(FROM);
				State = 4919;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
				case 1:
					{
					State = 4917;
					userName();
					}
					break;
				case 2:
					{
					State = 4918;
					uid();
					}
					break;
				}
				State = 4928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4921;
					Match(COMMA);
					State = 4924;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
					case 1:
						{
						State = 4922;
						userName();
						}
						break;
					case 2:
						{
						State = 4923;
						uid();
						}
						break;
					}
					}
					}
					State = 4930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRevokeProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRevokeProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 416, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4933;
			Match(REVOKE);
			State = 4934;
			Match(PROXY);
			State = 4935;
			Match(ON);
			State = 4936;
			_localctx.onUser = userName();
			State = 4937;
			Match(FROM);
			State = 4938;
			_localctx.fromFirst = userName();
			State = 4943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4939;
				Match(COMMA);
				State = 4940;
				_localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 4945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPasswordStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPasswordStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 418, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4946;
			Match(SET);
			State = 4947;
			Match(PASSWORD);
			State = 4950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4948;
				Match(FOR);
				State = 4949;
				userName();
				}
			}

			State = 4952;
			Match(EQUAL_SYMBOL);
			State = 4955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 4953;
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 4954;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 420, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4957;
			userName();
			State = 4958;
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(MySqlParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHashAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHashAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 422, RULE_userAuthOption);
		int _la;
		try {
			State = 4988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,733,Context) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4960;
				userName();
				State = 4961;
				Match(IDENTIFIED);
				State = 4962;
				Match(BY);
				State = 4963;
				Match(PASSWORD);
				State = 4964;
				((PasswordAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4966;
				userName();
				State = 4967;
				Match(IDENTIFIED);
				State = 4970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4968;
					Match(WITH);
					State = 4969;
					authPlugin();
					}
				}

				State = 4972;
				Match(BY);
				State = 4973;
				Match(STRING_LITERAL);
				State = 4977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN) {
					{
					State = 4974;
					Match(RETAIN);
					State = 4975;
					Match(CURRENT);
					State = 4976;
					Match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4979;
				userName();
				State = 4980;
				Match(IDENTIFIED);
				State = 4981;
				Match(WITH);
				State = 4982;
				authPlugin();
				State = 4985;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
				case 1:
					{
					State = 4983;
					Match(AS);
					State = 4984;
					Match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4987;
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTlsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTlsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTlsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 424, RULE_tlsOption);
		try {
			State = 4998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4990;
				Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4991;
				Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4992;
				Match(CIPHER);
				State = 4993;
				Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4994;
				Match(ISSUER);
				State = 4995;
				Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4996;
				Match(SUBJECT);
				State = 4997;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserResourceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserResourceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserResourceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 426, RULE_userResourceOption);
		try {
			State = 5008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5000;
				Match(MAX_QUERIES_PER_HOUR);
				State = 5001;
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5002;
				Match(MAX_UPDATES_PER_HOUR);
				State = 5003;
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5004;
				Match(MAX_CONNECTIONS_PER_HOUR);
				State = 5005;
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5006;
				Match(MAX_USER_CONNECTIONS);
				State = 5007;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPasswordOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 428, RULE_userPasswordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5010;
			Match(PASSWORD);
			State = 5011;
			Match(EXPIRE);
			State = 5018;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 5012;
				_localctx.expireType = Match(DEFAULT);
				}
				break;
			case NEVER:
				{
				State = 5013;
				_localctx.expireType = Match(NEVER);
				}
				break;
			case INTERVAL:
				{
				State = 5014;
				_localctx.expireType = Match(INTERVAL);
				State = 5015;
				decimalLiteral();
				State = 5016;
				Match(DAY);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 430, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5020;
			Match(ACCOUNT);
			State = 5021;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivelegeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivelegeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivelegeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 432, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5023;
			privilege();
			State = 5028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5024;
				Match(LR_BRACKET);
				State = 5025;
				uidList();
				State = 5026;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_PASSWORD_ADMIN() { return GetToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_OPTIMIZER_COSTS() { return GetToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_STATUS() { return GetToken(MySqlParser.FLUSH_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_TABLES() { return GetToken(MySqlParser.FLUSH_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_USER_RESOURCES() { return GetToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ENABLE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_CONNECTION_ADMIN() { return GetToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 434, RULE_privilege);
		int _la;
		try {
			State = 5109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5030;
				Match(ALL);
				State = 5032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5031;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5034;
				Match(ALTER);
				State = 5036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 5035;
					Match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5038;
				Match(CREATE);
				State = 5046;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 5039;
					Match(TEMPORARY);
					State = 5040;
					Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 5041;
					Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 5042;
					Match(VIEW);
					}
					break;
				case USER:
					{
					State = 5043;
					Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 5044;
					Match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					State = 5045;
					Match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5048;
				Match(DELETE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5049;
				Match(DROP);
				State = 5051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROLE) {
					{
					State = 5050;
					Match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5053;
				Match(EVENT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5054;
				Match(EXECUTE);
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5055;
				Match(FILE);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5056;
				Match(GRANT);
				State = 5057;
				Match(OPTION);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5058;
				Match(INDEX);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5059;
				Match(INSERT);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5060;
				Match(LOCK);
				State = 5061;
				Match(TABLES);
				}
				break;
			case PROCESS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5062;
				Match(PROCESS);
				}
				break;
			case PROXY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5063;
				Match(PROXY);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5064;
				Match(REFERENCES);
				}
				break;
			case RELOAD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5065;
				Match(RELOAD);
				}
				break;
			case REPLICATION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5066;
				Match(REPLICATION);
				State = 5067;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5068;
				Match(SELECT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5069;
				Match(SHOW);
				State = 5070;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5071;
				Match(SHUTDOWN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5072;
				Match(SUPER);
				}
				break;
			case TRIGGER:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5073;
				Match(TRIGGER);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5074;
				Match(UPDATE);
				}
				break;
			case USAGE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5075;
				Match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5076;
				Match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 5077;
				Match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 5078;
				Match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 5079;
				Match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 29);
				{
				State = 5080;
				Match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 5081;
				Match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 31);
				{
				State = 5082;
				Match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				EnterOuterAlt(_localctx, 32);
				{
				State = 5083;
				Match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				EnterOuterAlt(_localctx, 33);
				{
				State = 5084;
				Match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				EnterOuterAlt(_localctx, 34);
				{
				State = 5085;
				Match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				EnterOuterAlt(_localctx, 35);
				{
				State = 5086;
				Match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				EnterOuterAlt(_localctx, 36);
				{
				State = 5087;
				Match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				EnterOuterAlt(_localctx, 37);
				{
				State = 5088;
				Match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				EnterOuterAlt(_localctx, 38);
				{
				State = 5089;
				Match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				EnterOuterAlt(_localctx, 39);
				{
				State = 5090;
				Match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				EnterOuterAlt(_localctx, 40);
				{
				State = 5091;
				Match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 5092;
				Match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				EnterOuterAlt(_localctx, 42);
				{
				State = 5093;
				Match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 43);
				{
				State = 5094;
				Match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				EnterOuterAlt(_localctx, 44);
				{
				State = 5095;
				Match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				EnterOuterAlt(_localctx, 45);
				{
				State = 5096;
				Match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				EnterOuterAlt(_localctx, 46);
				{
				State = 5097;
				Match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				EnterOuterAlt(_localctx, 47);
				{
				State = 5098;
				Match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				EnterOuterAlt(_localctx, 48);
				{
				State = 5099;
				Match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 49);
				{
				State = 5100;
				Match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 50);
				{
				State = 5101;
				Match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				EnterOuterAlt(_localctx, 51);
				{
				State = 5102;
				Match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				EnterOuterAlt(_localctx, 52);
				{
				State = 5103;
				Match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				EnterOuterAlt(_localctx, 53);
				{
				State = 5104;
				Match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 54);
				{
				State = 5105;
				Match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 55);
				{
				State = 5106;
				Match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				EnterOuterAlt(_localctx, 56);
				{
				State = 5107;
				Match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				EnterOuterAlt(_localctx, 57);
				{
				State = 5108;
				Match(XA_RECOVER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteSchemaPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteSchemaPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteSchemaPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGlobalPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGlobalPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentSchemaPriviLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentSchemaPriviLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchemaPriviLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 436, RULE_privilegeLevel);
		try {
			State = 5127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5111;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5112;
				Match(STAR);
				State = 5113;
				Match(DOT);
				State = 5114;
				Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5115;
				uid();
				State = 5116;
				Match(DOT);
				State = 5117;
				Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5119;
				uid();
				State = 5120;
				Match(DOT);
				State = 5121;
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5123;
				uid();
				State = 5124;
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5126;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUserClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUserClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUserClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 438, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5129;
			_localctx.fromFirst = userName();
			State = 5130;
			Match(TO);
			State = 5131;
			_localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HISTOGRAM() { return GetTokens(MySqlParser.HISTOGRAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM(int i) {
			return GetToken(MySqlParser.HISTOGRAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAnalyzeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAnalyzeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 440, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5133;
			Match(ANALYZE);
			State = 5135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5134;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5137;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5138;
			tables();
			State = 5156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
			case 1:
				{
				State = 5139;
				Match(UPDATE);
				State = 5140;
				Match(HISTOGRAM);
				State = 5141;
				Match(ON);
				State = 5142;
				fullColumnName();
				State = 5147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5143;
					Match(COMMA);
					State = 5144;
					fullColumnName();
					}
					}
					State = 5149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5150;
					Match(WITH);
					State = 5151;
					decimalLiteral();
					State = 5152;
					Match(BUCKETS);
					}
				}

				}
				break;
			}
			State = 5169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,749,Context) ) {
			case 1:
				{
				State = 5158;
				Match(DROP);
				State = 5159;
				Match(HISTOGRAM);
				State = 5160;
				Match(ON);
				State = 5161;
				fullColumnName();
				State = 5166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5162;
					Match(COMMA);
					State = 5163;
					fullColumnName();
					}
					}
					State = 5168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 442, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5171;
			Match(CHECK);
			State = 5172;
			Match(TABLE);
			State = 5173;
			tables();
			State = 5177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 5174;
				checkTableOption();
				}
				}
				State = 5179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChecksumTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChecksumTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecksumTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 444, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5180;
			Match(CHECKSUM);
			State = 5181;
			Match(TABLE);
			State = 5182;
			tables();
			State = 5184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 5183;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptimizeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptimizeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimizeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 446, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5186;
			Match(OPTIMIZE);
			State = 5188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5187;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5190;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5191;
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepairTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepairTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 448, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5193;
			Match(REPAIR);
			State = 5195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5194;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5197;
			Match(TABLE);
			State = 5198;
			tables();
			State = 5200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 5199;
				Match(QUICK);
				}
			}

			State = 5203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 5202;
				Match(EXTENDED);
				}
			}

			State = 5206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 5205;
				Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 450, RULE_checkTableOption);
		try {
			State = 5215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5208;
				Match(FOR);
				State = 5209;
				Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5210;
				Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5211;
				Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5212;
				Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5213;
				Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5214;
				Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUdfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUdfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 452, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5217;
			Match(CREATE);
			State = 5219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 5218;
				Match(AGGREGATE);
				}
			}

			State = 5221;
			Match(FUNCTION);
			State = 5222;
			uid();
			State = 5223;
			Match(RETURNS);
			State = 5224;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INTEGER - 197)) | (1L << (REAL - 197)) | (1L << (DECIMAL - 197)))) != 0) || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5225;
			Match(SONAME);
			State = 5226;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 454, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5228;
			Match(INSTALL);
			State = 5229;
			Match(PLUGIN);
			State = 5230;
			uid();
			State = 5231;
			Match(SONAME);
			State = 5232;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUninstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUninstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 456, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5234;
			Match(UNINSTALL);
			State = 5235;
			Match(PLUGIN);
			State = 5236;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNames(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNewValueInsideTriggerContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetNewValueInsideTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetNewValueInsideTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNewValueInsideTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 458, RULE_setStatement);
		int _la;
		try {
			State = 5290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5238;
				Match(SET);
				State = 5239;
				variableClause();
				State = 5240;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
				case 1:
					{
					State = 5241;
					expression(0);
					}
					break;
				case 2:
					{
					State = 5242;
					Match(ON);
					}
					break;
				}
				State = 5254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5245;
					Match(COMMA);
					State = 5246;
					variableClause();
					State = 5247;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5250;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
					case 1:
						{
						State = 5248;
						expression(0);
						}
						break;
					case 2:
						{
						State = 5249;
						Match(ON);
						}
						break;
					}
					}
					}
					State = 5256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5257;
				Match(SET);
				State = 5258;
				charSet();
				State = 5261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5259;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 5260;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5263;
				Match(SET);
				State = 5264;
				Match(NAMES);
				State = 5271;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5265;
					charsetName();
					State = 5268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 5266;
						Match(COLLATE);
						State = 5267;
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 5270;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5273;
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5274;
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5275;
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5276;
				Match(SET);
				State = 5277;
				fullId();
				State = 5278;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5279;
				expression(0);
				State = 5287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5280;
					Match(COMMA);
					State = 5281;
					fullId();
					State = 5282;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5283;
					expression(0);
					}
					}
					State = 5289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowOpenTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFullIdObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFullIdObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFullIdObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCountErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowObjectFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowObjectFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowObjectFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateDb(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowLogEventsContext : ShowStatementContext {
		public IToken logFormat;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowMasterLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowMasterLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowMasterLogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSlaveStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSlaveStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSlaveStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 460, RULE_showStatement);
		int _la;
		try {
			State = 5445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,789,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5292;
				Match(SHOW);
				State = 5293;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5294;
				Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5295;
				Match(SHOW);
				State = 5296;
				((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5297;
				Match(EVENTS);
				State = 5300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5298;
					Match(IN);
					State = 5299;
					((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5302;
					Match(FROM);
					State = 5303;
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5306;
					Match(LIMIT);
					State = 5310;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
					case 1:
						{
						State = 5307;
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						State = 5308;
						Match(COMMA);
						}
						break;
					}
					State = 5312;
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5315;
				Match(SHOW);
				State = 5316;
				showCommonEntity();
				State = 5318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5317;
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5320;
				Match(SHOW);
				State = 5322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5321;
					Match(FULL);
					}
				}

				State = 5324;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5325;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5326;
				tableName();
				State = 5329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5327;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5328;
					uid();
					}
				}

				State = 5332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5331;
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5334;
				Match(SHOW);
				State = 5335;
				Match(CREATE);
				State = 5336;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 5337;
					ifNotExists();
					}
				}

				State = 5340;
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5341;
				Match(SHOW);
				State = 5342;
				Match(CREATE);
				State = 5343;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (PROCEDURE - 125)) | (1L << (TABLE - 125)) | (1L << (TRIGGER - 125)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5344;
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5345;
				Match(SHOW);
				State = 5346;
				Match(CREATE);
				State = 5347;
				Match(USER);
				State = 5348;
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5349;
				Match(SHOW);
				State = 5350;
				Match(ENGINE);
				State = 5351;
				engineName();
				State = 5352;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5354;
				Match(SHOW);
				State = 5355;
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5356;
				Match(SHOW);
				State = 5357;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5358;
					Match(LIMIT);
					State = 5362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
					case 1:
						{
						State = 5359;
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						State = 5360;
						Match(COMMA);
						}
						break;
					}
					State = 5364;
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5367;
				Match(SHOW);
				State = 5368;
				Match(COUNT);
				State = 5369;
				Match(LR_BRACKET);
				State = 5370;
				Match(STAR);
				State = 5371;
				Match(RR_BRACKET);
				State = 5372;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5373;
				Match(SHOW);
				State = 5374;
				showSchemaEntity();
				State = 5377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5375;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5376;
					uid();
					}
				}

				State = 5380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5379;
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5382;
				Match(SHOW);
				State = 5383;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5384;
				Match(CODE);
				State = 5385;
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5386;
				Match(SHOW);
				State = 5387;
				Match(GRANTS);
				State = 5390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5388;
					Match(FOR);
					State = 5389;
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 5392;
				Match(SHOW);
				State = 5393;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5394;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5395;
				tableName();
				State = 5398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5396;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5397;
					uid();
					}
				}

				State = 5402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5400;
					Match(WHERE);
					State = 5401;
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 5404;
				Match(SHOW);
				State = 5405;
				Match(OPEN);
				State = 5406;
				Match(TABLES);
				State = 5409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5407;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5408;
					uid();
					}
				}

				State = 5412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5411;
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 5414;
				Match(SHOW);
				State = 5415;
				Match(PROFILE);
				State = 5416;
				showProfileType();
				State = 5421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5417;
					Match(COMMA);
					State = 5418;
					showProfileType();
					}
					}
					State = 5423;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5424;
					Match(FOR);
					State = 5425;
					Match(QUERY);
					State = 5426;
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				State = 5429;
				Match(LIMIT);
				State = 5433;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,787,Context) ) {
				case 1:
					{
					State = 5430;
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					State = 5431;
					Match(COMMA);
					}
					break;
				}
				State = 5435;
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 5437;
				Match(SHOW);
				State = 5438;
				Match(SLAVE);
				State = 5439;
				Match(STATUS);
				State = 5443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5440;
					Match(FOR);
					State = 5441;
					Match(CHANNEL);
					State = 5442;
					Match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN() { return GetTokens(MySqlParser.AT_SIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN(int i) {
			return GetToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 462, RULE_variableClause);
		int _la;
		try {
			State = 5457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5447;
				Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5448;
				Match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5454;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
				case 1:
					{
					State = 5451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 5449;
						Match(AT_SIGN);
						State = 5450;
						Match(AT_SIGN);
						}
					}

					State = 5453;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5456;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCommonEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCommonEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommonEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 464, RULE_showCommonEntity);
		int _la;
		try {
			State = 5472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5459;
				Match(CHARACTER);
				State = 5460;
				Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5461;
				Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5462;
				Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5463;
				Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5464;
				Match(FUNCTION);
				State = 5465;
				Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5466;
				Match(PROCEDURE);
				State = 5467;
				Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 5468;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5471;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 466, RULE_showFilter);
		try {
			State = 5478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5474;
				Match(LIKE);
				State = 5475;
				Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5476;
				Match(WHERE);
				State = 5477;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 468, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 5497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 5480;
					Match(STORAGE);
					}
				}

				State = 5483;
				Match(ENGINES);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5484;
				Match(MASTER);
				State = 5485;
				Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5486;
				Match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5487;
				Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5488;
					Match(FULL);
					}
				}

				State = 5491;
				Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5492;
				Match(PROFILES);
				}
				break;
			case SLAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5493;
				Match(SLAVE);
				State = 5494;
				Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5495;
				Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5496;
				Match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 470, RULE_showSchemaEntity);
		int _la;
		try {
			State = 5507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5499;
				Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5500;
				Match(TABLE);
				State = 5501;
				Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5502;
					Match(FULL);
					}
				}

				State = 5505;
				Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5506;
				Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 472, RULE_showProfileType);
		try {
			State = 5521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5509;
				Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5510;
				Match(BLOCK);
				State = 5511;
				Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5512;
				Match(CONTEXT);
				State = 5513;
				Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5514;
				Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5515;
				Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5516;
				Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5517;
				Match(PAGE);
				State = 5518;
				Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5519;
				Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5520;
				Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinlogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinlogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinlogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 474, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5523;
			Match(BINLOG);
			State = 5524;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCacheIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCacheIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 476, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5526;
			Match(CACHE);
			State = 5527;
			Match(INDEX);
			State = 5528;
			tableIndexes();
			State = 5533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5529;
				Match(COMMA);
				State = 5530;
				tableIndexes();
				}
				}
				State = 5535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5536;
				Match(PARTITION);
				State = 5537;
				Match(LR_BRACKET);
				State = 5540;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5538;
					uidList();
					}
					break;
				case ALL:
					{
					State = 5539;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5542;
				Match(RR_BRACKET);
				}
			}

			State = 5545;
			Match(IN);
			State = 5546;
			_localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 478, RULE_flushStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5548;
			Match(FLUSH);
			State = 5550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5549;
				_localctx.flushFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.flushFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5552;
			flushOption();
			State = 5557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5553;
				Match(COMMA);
				State = 5554;
				flushOption();
				}
				}
				State = 5559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 480, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5560;
			Match(KILL);
			State = 5562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				State = 5561;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5564;
				decimalLiteral();
				}
				}
				State = 5567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1101)) & ~0x3f) == 0 && ((1L << (_la - 1101)) & ((1L << (ZERO_DECIMAL - 1101)) | (1L << (ONE_DECIMAL - 1101)) | (1L << (TWO_DECIMAL - 1101)) | (1L << (DECIMAL_LITERAL - 1101)) | (1L << (REAL_LITERAL - 1101)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadIndexIntoCache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadIndexIntoCache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadIndexIntoCache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 482, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5569;
			Match(LOAD);
			State = 5570;
			Match(INDEX);
			State = 5571;
			Match(INTO);
			State = 5572;
			Match(CACHE);
			State = 5573;
			loadedTableIndexes();
			State = 5578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5574;
				Match(COMMA);
				State = 5575;
				loadedTableIndexes();
				}
				}
				State = 5580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 484, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5581;
			Match(RESET);
			State = 5582;
			Match(QUERY);
			State = 5583;
			Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShutdownStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShutdownStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdownStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 486, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5585;
			Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 488, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5587;
			tableName();
			State = 5595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5588;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5591;
				Match(LR_BRACKET);
				State = 5592;
				uidList();
				State = 5593;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 490, RULE_flushOption);
		int _la;
		try {
			State = 5629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5615;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 5597;
					Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 5598;
					Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 5600;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (ERROR - 394)) | (1L << (GENERAL - 394)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						State = 5599;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (ENGINE - 394)) | (1L << (ERROR - 394)) | (1L << (GENERAL - 394)))) != 0) || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5602;
					Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 5603;
					Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 5604;
					Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 5605;
					Match(QUERY);
					State = 5606;
					Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 5607;
					Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 5608;
					Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 5609;
					Match(TABLES);
					State = 5613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 5610;
						Match(WITH);
						State = 5611;
						Match(READ);
						State = 5612;
						Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5617;
				Match(RELAY);
				State = 5618;
				Match(LOGS);
				State = 5620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5619;
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5622;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5624;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 5623;
					tables();
					}
					break;
				}
				State = 5627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 5626;
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 492, RULE_flushTableOption);
		try {
			State = 5636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5631;
				Match(WITH);
				State = 5632;
				Match(READ);
				State = 5633;
				Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5634;
				Match(FOR);
				State = 5635;
				Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadedTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadedTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadedTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 494, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5638;
			tableName();
			State = 5646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5639;
				Match(PARTITION);
				State = 5640;
				Match(LR_BRACKET);
				State = 5643;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5641;
					_localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 5642;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5645;
				Match(RR_BRACKET);
				}
			}

			State = 5655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
			case 1:
				{
				State = 5649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5648;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5651;
				Match(LR_BRACKET);
				State = 5652;
				_localctx.indexList = uidList();
				State = 5653;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 5657;
				Match(IGNORE);
				State = 5658;
				Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 496, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5661;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5662;
			tableName();
			State = 5665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,825,Context) ) {
			case 1:
				{
				State = 5663;
				_localctx.column = uid();
				}
				break;
			case 2:
				{
				State = 5664;
				_localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 498, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5667;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 5668;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5669;
				Match(EQUAL_SYMBOL);
				State = 5670;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5673;
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHelpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHelpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 500, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5675;
			Match(HELP);
			State = 5676;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 502, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5678;
			Match(USE);
			State = 5679;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(MySqlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 504, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5681;
			Match(SIGNAL);
			State = 5689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5682;
				Match(SQLSTATE);
				State = 5684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5683;
					Match(VALUE);
					}
				}

				State = 5686;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5687;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5688;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
			case 1:
				{
				State = 5691;
				Match(SET);
				State = 5692;
				signalConditionInformation();
				State = 5697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5693;
					Match(COMMA);
					State = 5694;
					signalConditionInformation();
					}
					}
					State = 5699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL() { return GetToken(MySqlParser.RESIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 506, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5702;
			Match(RESIGNAL);
			State = 5710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5703;
				Match(SQLSTATE);
				State = 5705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5704;
					Match(VALUE);
					}
				}

				State = 5707;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5708;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5709;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 5721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,834,Context) ) {
			case 1:
				{
				State = 5712;
				Match(SET);
				State = 5713;
				signalConditionInformation();
				State = 5718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5714;
					Match(COMMA);
					State = 5715;
					signalConditionInformation();
					}
					}
					State = 5720;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalConditionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalConditionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalConditionInformation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalConditionInformation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalConditionInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalConditionInformationContext signalConditionInformation() {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
		EnterRule(_localctx, 508, RULE_signalConditionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5723;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (CLASS_ORIGIN - 347)) | (1L << (COLUMN_NAME - 347)) | (1L << (CONSTRAINT_CATALOG - 347)) | (1L << (CONSTRAINT_SCHEMA - 347)) | (1L << (CONSTRAINT_NAME - 347)) | (1L << (CURSOR_NAME - 347)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5724;
			Match(EQUAL_SYMBOL);
			State = 5729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				{
				State = 5725;
				stringLiteral();
				}
				break;
			case 2:
				{
				State = 5726;
				Match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				State = 5727;
				mysqlVariable();
				}
				break;
			case 4:
				{
				State = 5728;
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MySqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName() {
			return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(MySqlParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(MySqlParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW_COUNT() { return GetTokens(MySqlParser.ROW_COUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT(int i) {
			return GetToken(MySqlParser.ROW_COUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsStatementContext diagnosticsStatement() {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 510, RULE_diagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5731;
			Match(GET);
			State = 5733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				State = 5732;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5735;
			Match(DIAGNOSTICS);
			State = 5767;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				State = 5736;
				variableClause();
				State = 5737;
				Match(EQUAL_SYMBOL);
				State = 5738;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5739;
					Match(COMMA);
					State = 5740;
					variableClause();
					State = 5741;
					Match(EQUAL_SYMBOL);
					State = 5742;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 5748;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				State = 5749;
				Match(CONDITION);
				State = 5752;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5750;
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					State = 5751;
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5754;
				variableClause();
				State = 5755;
				Match(EQUAL_SYMBOL);
				State = 5756;
				diagnosticsConditionInformationName();
				State = 5764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5757;
					Match(COMMA);
					State = 5758;
					variableClause();
					State = 5759;
					Match(EQUAL_SYMBOL);
					State = 5760;
					diagnosticsConditionInformationName();
					}
					}
					State = 5766;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsConditionInformationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsConditionInformationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsConditionInformationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
		EnterRule(_localctx, 512, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5769;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (CLASS_ORIGIN - 347)) | (1L << (COLUMN_NAME - 347)) | (1L << (CONSTRAINT_CATALOG - 347)) | (1L << (CONSTRAINT_SCHEMA - 347)) | (1L << (CONSTRAINT_NAME - 347)) | (1L << (CURSOR_NAME - 347)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & ((1L << (RETURNED_SQLSTATE - 566)) | (1L << (SUBCLASS_ORIGIN - 566)) | (1L << (TABLE_NAME - 566)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_describeObjectClause);
		try {
			State = 5781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5776;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 5771;
					selectStatement();
					}
					break;
				case DELETE:
					{
					State = 5772;
					deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 5773;
					insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 5774;
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 5775;
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5778;
				Match(FOR);
				State = 5779;
				Match(CONNECTION);
				State = 5780;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 516, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5783;
			uid();
			State = 5787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
			case 1:
				{
				State = 5784;
				Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 5785;
				Match(DOT);
				State = 5786;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 518, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5789;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 520, RULE_fullColumnName);
		try {
			State = 5803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5791;
				uid();
				State = 5796;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
				case 1:
					{
					State = 5792;
					dottedId();
					State = 5794;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
					case 1:
						{
						State = 5793;
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5798;
				MatchWildcard();
				State = 5799;
				dottedId();
				State = 5801;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,846,Context) ) {
				case 1:
					{
					State = 5800;
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 522, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
			case 1:
				{
				State = 5807;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
				case 1:
					{
					State = 5805;
					uid();
					}
					break;
				case 2:
					{
					State = 5806;
					Match(STRING_LITERAL);
					}
					break;
				}
				State = 5813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5809;
					Match(LR_BRACKET);
					State = 5810;
					decimalLiteral();
					State = 5811;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				State = 5815;
				expression(0);
				}
				break;
			}
			State = 5819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 5818;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 524, RULE_userName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5821;
			_la = TokenStream.LA(1);
			if ( !(_la==ADMIN || ((((_la - 1111)) & ~0x3f) == 0 && ((1L << (_la - 1111)) & ((1L << (STRING_LITERAL - 1111)) | (1L << (ID - 1111)) | (1L << (STRING_USER_NAME - 1111)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 526, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5823;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 528, RULE_charsetName);
		try {
			State = 5829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,852,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5825;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5826;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5827;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5828;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 530, RULE_collationName);
		try {
			State = 5833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5831;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5832;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKUDB() { return GetToken(MySqlParser.TOKUDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 532, RULE_engineName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5835;
			_la = TokenStream.LA(1);
			if ( !(_la==CONNECT || ((((_la - 752)) & ~0x3f) == 0 && ((1L << (_la - 752)) & ((1L << (ARCHIVE - 752)) | (1L << (BLACKHOLE - 752)) | (1L << (CSV - 752)) | (1L << (FEDERATED - 752)) | (1L << (INNODB - 752)) | (1L << (MEMORY - 752)) | (1L << (MRG_MYISAM - 752)) | (1L << (MYISAM - 752)) | (1L << (NDB - 752)) | (1L << (NDBCLUSTER - 752)) | (1L << (PERFORMANCE_SCHEMA - 752)) | (1L << (TOKUDB - 752)))) != 0) || ((((_la - 1111)) & ~0x3f) == 0 && ((1L << (_la - 1111)) & ((1L << (STRING_LITERAL - 1111)) | (1L << (ID - 1111)) | (1L << (REVERSE_QUOTE_ID - 1111)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_SYMB() { return GetTokens(MySqlParser.COLON_SYMB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB(int i) {
			return GetToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 534, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5837;
			decimalLiteral();
			State = 5838;
			Match(MINUS);
			State = 5839;
			decimalLiteral();
			State = 5840;
			Match(MINUS);
			State = 5841;
			decimalLiteral();
			State = 5842;
			Match(MINUS);
			State = 5843;
			decimalLiteral();
			State = 5844;
			Match(MINUS);
			State = 5845;
			decimalLiteral();
			State = 5851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5846;
				Match(COLON_SYMB);
				State = 5847;
				decimalLiteral();
				State = 5848;
				Match(MINUS);
				State = 5849;
				decimalLiteral();
				}
				}
				State = 5853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 536, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5855;
			_localctx.globalTableUid = xuidStringId();
			State = 5862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5856;
				Match(COMMA);
				State = 5857;
				_localctx.qualifier = xuidStringId();
				State = 5860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5858;
					Match(COMMA);
					State = 5859;
					_localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXuidStringId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXuidStringId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXuidStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 538, RULE_xuidStringId);
		int _la;
		try {
			State = 5871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5864;
				Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5865;
				Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5866;
					Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 5869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAuthPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAuthPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 540, RULE_authPlugin);
		try {
			State = 5875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5873;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5874;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 542, RULE_uid);
		try {
			State = 5880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5877;
				simpleId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5878;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5879;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 544, RULE_simpleId);
		try {
			State = 5891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5882;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5883;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5884;
				transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5885;
				engineName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5886;
				privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5887;
				intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5888;
				dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5889;
				keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5890;
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDottedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDottedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDottedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 546, RULE_dottedId);
		try {
			State = 5896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5893;
				Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5894;
				Match(DOT);
				State = 5895;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 548, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5898;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1101)) & ~0x3f) == 0 && ((1L << (_la - 1101)) & ((1L << (ZERO_DECIMAL - 1101)) | (1L << (ONE_DECIMAL - 1101)) | (1L << (TWO_DECIMAL - 1101)) | (1L << (DECIMAL_LITERAL - 1101)) | (1L << (REAL_LITERAL - 1101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFileSizeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFileSizeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 550, RULE_fileSizeLiteral);
		try {
			State = 5902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5900;
				Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5901;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 552, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 5927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5909;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5905;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5904;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 5907;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5908;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5912;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5911;
						Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5914;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,866,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5921;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5917;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5916;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 5919;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5920;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5925;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
				case 1:
					{
					State = 5923;
					Match(COLLATE);
					State = 5924;
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 554, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5929;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 556, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 5931;
				Match(STRING_CHARSET_NAME);
				}
			}

			State = 5934;
			Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullNotnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullNotnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullNotnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 558, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5936;
				Match(NOT);
				}
			}

			State = 5939;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 560, RULE_constant);
		int _la;
		try {
			State = 5953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,874,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5941;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5942;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5943;
				Match(MINUS);
				State = 5944;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5945;
				hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5946;
				booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5947;
				Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5948;
				Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 5949;
					Match(NOT);
					}
				}

				State = 5952;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLECTION() { return GetToken(MySqlParser.GEOMCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY() { return GetToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpatialDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpatialDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarbinaryDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLongVarbinaryDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLongVarbinaryDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarbinaryDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionsContext collectionOptions() {
			return GetRuleContext<CollectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollectionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollectionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalVaryingStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNationalVaryingStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNationalVaryingStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalVaryingStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDLEINT() { return GetToken(MySqlParser.MIDDLEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT1() { return GetToken(MySqlParser.INT1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2() { return GetToken(MySqlParser.INT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT3() { return GetToken(MySqlParser.INT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(MySqlParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(MySqlParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED() { return GetTokens(MySqlParser.SIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED(int i) {
			return GetToken(MySqlParser.SIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED() { return GetTokens(MySqlParser.UNSIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED(int i) {
			return GetToken(MySqlParser.UNSIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL() { return GetTokens(MySqlParser.ZEROFILL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL(int i) {
			return GetToken(MySqlParser.ZEROFILL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(MySqlParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MySqlParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT4() { return GetToken(MySqlParser.FLOAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT8() { return GetToken(MySqlParser.FLOAT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDimensionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDimensionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(MySqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(MySqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(MySqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarcharDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public LongVarcharDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLongVarcharDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLongVarcharDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarcharDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNationalStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNationalStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 562, RULE_dataType);
		int _la;
		try {
			int _alt;
			State = 6077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5955;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (CHAR - 213)) | (1L << (VARCHAR - 213)) | (1L << (NVARCHAR - 213)) | (1L << (LONG - 213)) | (1L << (TINYTEXT - 213)) | (1L << (TEXT - 213)) | (1L << (MEDIUMTEXT - 213)) | (1L << (LONGTEXT - 213)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARYING) {
					{
					State = 5956;
					Match(VARYING);
					}
				}

				State = 5960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
				case 1:
					{
					State = 5959;
					lengthOneDimension();
					}
					break;
				}
				State = 5963;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
				case 1:
					{
					State = 5962;
					Match(BINARY);
					}
					break;
				}
				State = 5968;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
				case 1:
					{
					State = 5965;
					charSet();
					State = 5966;
					charsetName();
					}
					break;
				}
				State = 5973;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,879,Context) ) {
				case 1:
					{
					State = 5970;
					Match(COLLATE);
					State = 5971;
					collationName();
					}
					break;
				case 2:
					{
					State = 5972;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5975;
				Match(NATIONAL);
				State = 5976;
				((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5978;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
				case 1:
					{
					State = 5977;
					lengthOneDimension();
					}
					break;
				}
				State = 5981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
				case 1:
					{
					State = 5980;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5983;
				Match(NCHAR);
				State = 5984;
				((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
				State = 5986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,882,Context) ) {
				case 1:
					{
					State = 5985;
					lengthOneDimension();
					}
					break;
				}
				State = 5989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
				case 1:
					{
					State = 5988;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5991;
				Match(NATIONAL);
				State = 5992;
				((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5993;
				Match(VARYING);
				State = 5995;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
				case 1:
					{
					State = 5994;
					lengthOneDimension();
					}
					break;
				}
				State = 5998;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
				case 1:
					{
					State = 5997;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6000;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TINYINT - 187)) | (1L << (SMALLINT - 187)) | (1L << (MEDIUMINT - 187)) | (1L << (MIDDLEINT - 187)) | (1L << (INT - 187)) | (1L << (INT1 - 187)) | (1L << (INT2 - 187)) | (1L << (INT3 - 187)) | (1L << (INT4 - 187)) | (1L << (INT8 - 187)) | (1L << (INTEGER - 187)) | (1L << (BIGINT - 187)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6002;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
				case 1:
					{
					State = 6001;
					lengthOneDimension();
					}
					break;
				}
				State = 6007;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6004;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6009;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,887,Context);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6010;
				((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
				State = 6012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
				case 1:
					{
					State = 6011;
					lengthTwoDimension();
					}
					break;
				}
				State = 6017;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6014;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6019;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6020;
				((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
				State = 6022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 6021;
					Match(PRECISION);
					}
				}

				State = 6025;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,891,Context) ) {
				case 1:
					{
					State = 6024;
					lengthTwoDimension();
					}
					break;
				}
				State = 6030;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,892,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6027;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6032;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,892,Context);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6033;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (FLOAT - 202)) | (1L << (FLOAT4 - 202)) | (1L << (FLOAT8 - 202)) | (1L << (DECIMAL - 202)) | (1L << (DEC - 202)) | (1L << (NUMERIC - 202)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6035;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
				case 1:
					{
					State = 6034;
					lengthTwoOptionalDimension();
					}
					break;
				}
				State = 6040;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,894,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6037;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6042;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,894,Context);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6043;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TINYBLOB - 208)) | (1L << (MEDIUMBLOB - 208)) | (1L << (LONGBLOB - 208)) | (1L << (SERIAL - 208)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6044;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (TIME - 209)) | (1L << (TIMESTAMP - 209)) | (1L << (DATETIME - 209)) | (1L << (YEAR - 209)) | (1L << (BINARY - 209)) | (1L << (VARBINARY - 209)) | (1L << (BLOB - 209)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6046;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 6045;
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6048;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6049;
				collectionOptions();
				State = 6051;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
				case 1:
					{
					State = 6050;
					Match(BINARY);
					}
					break;
				}
				State = 6056;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
				case 1:
					{
					State = 6053;
					charSet();
					State = 6054;
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6058;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (GEOMETRYCOLLECTION - 768)) | (1L << (GEOMCOLLECTION - 768)) | (1L << (GEOMETRY - 768)) | (1L << (LINESTRING - 768)) | (1L << (MULTILINESTRING - 768)) | (1L << (MULTIPOINT - 768)) | (1L << (MULTIPOLYGON - 768)) | (1L << (POINT - 768)) | (1L << (POLYGON - 768)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6059;
				((LongVarcharDataTypeContext)_localctx).typeName = Match(LONG);
				State = 6061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARCHAR) {
					{
					State = 6060;
					Match(VARCHAR);
					}
				}

				State = 6064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
				case 1:
					{
					State = 6063;
					Match(BINARY);
					}
					break;
				}
				State = 6069;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
				case 1:
					{
					State = 6066;
					charSet();
					State = 6067;
					charsetName();
					}
					break;
				}
				State = 6073;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
				case 1:
					{
					State = 6071;
					Match(COLLATE);
					State = 6072;
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6075;
				Match(LONG);
				State = 6076;
				Match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionsContext collectionOptions() {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
		EnterRule(_localctx, 564, RULE_collectionOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6079;
			Match(LR_BRACKET);
			State = 6080;
			Match(STRING_LITERAL);
			State = 6085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6081;
				Match(COMMA);
				State = 6082;
				Match(STRING_LITERAL);
				}
				}
				State = 6087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6088;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MySqlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConvertedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConvertedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 566, RULE_convertedDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				State = 6090;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6091;
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				State = 6094;
				_localctx.typeName = Match(CHAR);
				State = 6096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6095;
					lengthOneDimension();
					}
				}

				State = 6101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					State = 6098;
					charSet();
					State = 6099;
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				State = 6103;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (INT - 191)) | (1L << (INTEGER - 191)) | (1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0) || _la==JSON) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				{
				State = 6104;
				_localctx.typeName = Match(DECIMAL);
				State = 6106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6105;
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				State = 6108;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 6109;
					Match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 6114;
				Match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthOneDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthOneDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOneDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 568, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6117;
			Match(LR_BRACKET);
			State = 6118;
			decimalLiteral();
			State = 6119;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 570, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6121;
			Match(LR_BRACKET);
			State = 6122;
			decimalLiteral();
			State = 6123;
			Match(COMMA);
			State = 6124;
			decimalLiteral();
			State = 6125;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoOptionalDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoOptionalDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoOptionalDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 572, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6127;
			Match(LR_BRACKET);
			State = 6128;
			decimalLiteral();
			State = 6131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6129;
				Match(COMMA);
				State = 6130;
				decimalLiteral();
				}
			}

			State = 6133;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUidList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUidList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUidList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 574, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6135;
			uid();
			State = 6140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,912,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6136;
					Match(COMMA);
					State = 6137;
					uid();
					}
					} 
				}
				State = 6142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,912,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 576, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6143;
			tableName();
			State = 6148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,913,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6144;
					Match(COMMA);
					State = 6145;
					tableName();
					}
					} 
				}
				State = 6150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,913,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 578, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6151;
			Match(LR_BRACKET);
			State = 6152;
			indexColumnName();
			State = 6157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6153;
				Match(COMMA);
				State = 6154;
				indexColumnName();
				}
				}
				State = 6159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6160;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 580, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6162;
			expression(0);
			State = 6167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6163;
				Match(COMMA);
				State = 6164;
				expression(0);
				}
				}
				State = 6169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionsWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionsWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsWithDefaults(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 582, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6170;
			expressionOrDefault();
			State = 6175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6171;
				Match(COMMA);
				State = 6172;
				expressionOrDefault();
				}
				}
				State = 6177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 584, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6178;
			constant();
			State = 6183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6179;
				Match(COMMA);
				State = 6180;
				constant();
				}
				}
				State = 6185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 586, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6186;
			Match(STRING_LITERAL);
			State = 6191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6187;
				Match(COMMA);
				State = 6188;
				Match(STRING_LITERAL);
				}
				}
				State = 6193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MySqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 588, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6194;
			Match(LOCAL_ID);
			State = 6199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6195;
				Match(COMMA);
				State = 6196;
				Match(LOCAL_ID);
				}
				}
				State = 6201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 590, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
			case 1:
				{
				State = 6202;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				State = 6204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6203;
					unaryOperator();
					}
					break;
				}
				State = 6206;
				constant();
				}
				break;
			case 3:
				{
				State = 6207;
				currentTimestamp();
				}
				break;
			case 4:
				{
				State = 6208;
				Match(LR_BRACKET);
				State = 6209;
				expression(0);
				State = 6210;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
			case 1:
				{
				State = 6214;
				Match(ON);
				State = 6215;
				Match(UPDATE);
				State = 6216;
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 592, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				State = 6219;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (CURRENT_TIMESTAMP - 303)) | (1L << (LOCALTIME - 303)) | (1L << (LOCALTIMESTAMP - 303)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
				case 1:
					{
					State = 6220;
					Match(LR_BRACKET);
					State = 6222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1101)) & ~0x3f) == 0 && ((1L << (_la - 1101)) & ((1L << (ZERO_DECIMAL - 1101)) | (1L << (ONE_DECIMAL - 1101)) | (1L << (TWO_DECIMAL - 1101)) | (1L << (DECIMAL_LITERAL - 1101)) | (1L << (REAL_LITERAL - 1101)))) != 0)) {
						{
						State = 6221;
						decimalLiteral();
						}
					}

					State = 6224;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				State = 6227;
				Match(NOW);
				State = 6228;
				Match(LR_BRACKET);
				State = 6230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1101)) & ~0x3f) == 0 && ((1L << (_la - 1101)) & ((1L << (ZERO_DECIMAL - 1101)) | (1L << (ONE_DECIMAL - 1101)) | (1L << (TWO_DECIMAL - 1101)) | (1L << (DECIMAL_LITERAL - 1101)) | (1L << (REAL_LITERAL - 1101)))) != 0)) {
					{
					State = 6229;
					decimalLiteral();
					}
				}

				State = 6232;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 594, RULE_expressionOrDefault);
		try {
			State = 6237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6235;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6236;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 596, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6239;
			Match(IF);
			State = 6240;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 598, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6242;
			Match(IF);
			State = 6243;
			Match(NOT);
			State = 6244;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecificFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecificFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return GetRuleContext<NonAggregateWindowedFunctionContext>(0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 600, RULE_functionCall);
		try {
			State = 6264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6246;
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6247;
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6248;
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6249;
				scalarFunctionName();
				State = 6250;
				Match(LR_BRACKET);
				State = 6252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 6251;
					functionArgs();
					}
					break;
				}
				State = 6254;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6256;
				fullId();
				State = 6257;
				Match(LR_BRACKET);
				State = 6259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
				case 1:
					{
					State = 6258;
					functionArgs();
					}
					break;
				}
				State = 6261;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6263;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPositionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPositionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTrimFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTrimFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonValueFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(MySqlParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MySqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(MySqlParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(MySqlParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_LITERAL() { return GetTokens(MySqlParser.NULL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL(int i) {
			return GetToken(MySqlParser.NULL_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext[] defaultValue() {
			return GetRuleContexts<DefaultValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue(int i) {
			return GetRuleContext<DefaultValueContext>(i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonValueFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonValueFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExtractFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExtractFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValuesFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValuesFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpressionFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGetFormatFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGetFormatFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetFormatFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 602, RULE_specificFunction);
		int _la;
		try {
			State = 6458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,956,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6266;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (CURRENT_DATE - 301)) | (1L << (CURRENT_TIME - 301)) | (1L << (CURRENT_TIMESTAMP - 301)) | (1L << (LOCALTIME - 301)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
				case 1:
					{
					State = 6267;
					Match(LR_BRACKET);
					State = 6268;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6271;
				Match(CONVERT);
				State = 6272;
				Match(LR_BRACKET);
				State = 6273;
				expression(0);
				State = 6274;
				((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 6275;
				convertedDataType();
				State = 6276;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6278;
				Match(CONVERT);
				State = 6279;
				Match(LR_BRACKET);
				State = 6280;
				expression(0);
				State = 6281;
				Match(USING);
				State = 6282;
				charsetName();
				State = 6283;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6285;
				Match(CAST);
				State = 6286;
				Match(LR_BRACKET);
				State = 6287;
				expression(0);
				State = 6288;
				Match(AS);
				State = 6289;
				convertedDataType();
				State = 6290;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6292;
				Match(VALUES);
				State = 6293;
				Match(LR_BRACKET);
				State = 6294;
				fullColumnName();
				State = 6295;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6297;
				Match(CASE);
				State = 6298;
				expression(0);
				State = 6300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6299;
					caseFuncAlternative();
					}
					}
					State = 6302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6304;
					Match(ELSE);
					State = 6305;
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6308;
				Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6310;
				Match(CASE);
				State = 6312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6311;
					caseFuncAlternative();
					}
					}
					State = 6314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6316;
					Match(ELSE);
					State = 6317;
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6320;
				Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6322;
				Match(CHAR);
				State = 6323;
				Match(LR_BRACKET);
				State = 6324;
				functionArgs();
				State = 6327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 6325;
					Match(USING);
					State = 6326;
					charsetName();
					}
				}

				State = 6329;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6331;
				Match(POSITION);
				State = 6332;
				Match(LR_BRACKET);
				State = 6335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 6333;
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6334;
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 6337;
				Match(IN);
				State = 6340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 6338;
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6339;
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 6342;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6344;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6345;
				Match(LR_BRACKET);
				State = 6348;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 6346;
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6347;
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6350;
				Match(FROM);
				State = 6353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 6351;
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 6352;
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6355;
					Match(FOR);
					State = 6358;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
					case 1:
						{
						State = 6356;
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 6357;
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 6362;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6364;
				Match(TRIM);
				State = 6365;
				Match(LR_BRACKET);
				State = 6366;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
				case 1:
					{
					State = 6367;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6368;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6371;
				Match(FROM);
				State = 6374;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
				case 1:
					{
					State = 6372;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6373;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6376;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6378;
				Match(TRIM);
				State = 6379;
				Match(LR_BRACKET);
				State = 6382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
				case 1:
					{
					State = 6380;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6381;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6384;
				Match(FROM);
				State = 6387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
				case 1:
					{
					State = 6385;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6386;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6389;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6391;
				Match(WEIGHT_STRING);
				State = 6392;
				Match(LR_BRACKET);
				State = 6395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 6393;
					stringLiteral();
					}
					break;
				case 2:
					{
					State = 6394;
					expression(0);
					}
					break;
				}
				State = 6403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 6397;
					Match(AS);
					State = 6398;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6399;
					Match(LR_BRACKET);
					State = 6400;
					decimalLiteral();
					State = 6401;
					Match(RR_BRACKET);
					}
				}

				State = 6406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 6405;
					levelsInWeightString();
					}
				}

				State = 6408;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6410;
				Match(EXTRACT);
				State = 6411;
				Match(LR_BRACKET);
				State = 6412;
				intervalType();
				State = 6413;
				Match(FROM);
				State = 6416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 6414;
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6415;
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6418;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6420;
				Match(GET_FORMAT);
				State = 6421;
				Match(LR_BRACKET);
				State = 6422;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (DATETIME - 208)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6423;
				Match(COMMA);
				State = 6424;
				stringLiteral();
				State = 6425;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 6427;
				Match(JSON_VALUE);
				State = 6428;
				Match(LR_BRACKET);
				State = 6429;
				expression(0);
				State = 6430;
				Match(COMMA);
				State = 6431;
				expression(0);
				State = 6434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 6432;
					Match(RETURNING);
					State = 6433;
					convertedDataType();
					}
				}

				State = 6444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
				case 1:
					{
					State = 6440;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6436;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6437;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6438;
						Match(DEFAULT);
						State = 6439;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6442;
					Match(ON);
					State = 6443;
					Match(EMPTY);
					}
					break;
				}
				State = 6454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					State = 6450;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6446;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6447;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6448;
						Match(DEFAULT);
						State = 6449;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6452;
					Match(ON);
					State = 6453;
					Match(ERROR);
					}
				}

				State = 6456;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFuncAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFuncAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFuncAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 604, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6460;
			Match(WHEN);
			State = 6461;
			_localctx.condition = functionArg();
			State = 6462;
			Match(THEN);
			State = 6463;
			_localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 606, RULE_levelsInWeightString);
		int _la;
		try {
			State = 6479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,958,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6465;
				Match(LEVEL);
				State = 6466;
				levelInWeightListElement();
				State = 6471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6467;
					Match(COMMA);
					State = 6468;
					levelInWeightListElement();
					}
					}
					State = 6473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6474;
				Match(LEVEL);
				State = 6475;
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 6476;
				Match(MINUS);
				State = 6477;
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelInWeightListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelInWeightListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelInWeightListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 608, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6481;
			decimalLiteral();
			State = 6483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 6482;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 610, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 6544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6485;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (AVG - 274)) | (1L << (MAX - 274)) | (1L << (MIN - 274)) | (1L << (SUM - 274)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6486;
				Match(LR_BRACKET);
				State = 6488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
				case 1:
					{
					State = 6487;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6490;
				functionArg();
				State = 6491;
				Match(RR_BRACKET);
				State = 6493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
				case 1:
					{
					State = 6492;
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6495;
				Match(COUNT);
				State = 6496;
				Match(LR_BRACKET);
				State = 6504;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
				case 1:
					{
					State = 6497;
					_localctx.starArg = Match(STAR);
					}
					break;
				case 2:
					{
					State = 6499;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
					case 1:
						{
						State = 6498;
						_localctx.aggregator = Match(ALL);
						}
						break;
					}
					State = 6501;
					functionArg();
					}
					break;
				case 3:
					{
					State = 6502;
					_localctx.aggregator = Match(DISTINCT);
					State = 6503;
					functionArgs();
					}
					break;
				}
				State = 6506;
				Match(RR_BRACKET);
				State = 6508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
				case 1:
					{
					State = 6507;
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6510;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6511;
				Match(LR_BRACKET);
				State = 6513;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,965,Context) ) {
				case 1:
					{
					State = 6512;
					_localctx.aggregator = Match(ALL);
					}
					break;
				}
				State = 6515;
				functionArg();
				State = 6516;
				Match(RR_BRACKET);
				State = 6518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,966,Context) ) {
				case 1:
					{
					State = 6517;
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6520;
				Match(GROUP_CONCAT);
				State = 6521;
				Match(LR_BRACKET);
				State = 6523;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
				case 1:
					{
					State = 6522;
					_localctx.aggregator = Match(DISTINCT);
					}
					break;
				}
				State = 6525;
				functionArgs();
				State = 6536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 6526;
					Match(ORDER);
					State = 6527;
					Match(BY);
					State = 6528;
					orderByExpression();
					State = 6533;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 6529;
						Match(COMMA);
						State = 6530;
						orderByExpression();
						}
						}
						State = 6535;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 6540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 6538;
					Match(SEPARATOR);
					State = 6539;
					_localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 6542;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAggregateWindowedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 612, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			State = 6584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6546;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6547;
				Match(LR_BRACKET);
				State = 6548;
				expression(0);
				State = 6551;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 6549;
					Match(COMMA);
					State = 6550;
					decimalLiteral();
					}
					break;
				}
				State = 6555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6553;
					Match(COMMA);
					State = 6554;
					decimalLiteral();
					}
				}

				State = 6557;
				Match(RR_BRACKET);
				State = 6558;
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6560;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6561;
				Match(LR_BRACKET);
				State = 6562;
				expression(0);
				State = 6563;
				Match(RR_BRACKET);
				State = 6564;
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6566;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (CUME_DIST - 279)) | (1L << (DENSE_RANK - 279)) | (1L << (PERCENT_RANK - 279)) | (1L << (RANK - 279)) | (1L << (ROW_NUMBER - 279)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6567;
				Match(LR_BRACKET);
				State = 6568;
				Match(RR_BRACKET);
				State = 6569;
				overClause();
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6570;
				Match(NTH_VALUE);
				State = 6571;
				Match(LR_BRACKET);
				State = 6572;
				expression(0);
				State = 6573;
				Match(COMMA);
				State = 6574;
				decimalLiteral();
				State = 6575;
				Match(RR_BRACKET);
				State = 6576;
				overClause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6578;
				Match(NTILE);
				State = 6579;
				Match(LR_BRACKET);
				State = 6580;
				decimalLiteral();
				State = 6581;
				Match(RR_BRACKET);
				State = 6582;
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(MySqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(Context, State);
		EnterRule(_localctx, 614, RULE_overClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6586;
			Match(OVER);
			State = 6593;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6587;
				Match(LR_BRACKET);
				State = 6589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 6588;
					windowSpec();
					}
					break;
				}
				State = 6591;
				Match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 6592;
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameClauseContext frameClause() {
			return GetRuleContext<FrameClauseContext>(0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 616, RULE_windowSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,977,Context) ) {
			case 1:
				{
				State = 6595;
				windowName();
				}
				break;
			}
			State = 6599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6598;
				partitionClause();
				}
			}

			State = 6602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6601;
				orderByClause();
				}
			}

			State = 6605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 6604;
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 618, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6607;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameUnitsContext frameUnits() {
			return GetRuleContext<FrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameClauseContext frameClause() {
		FrameClauseContext _localctx = new FrameClauseContext(Context, State);
		EnterRule(_localctx, 620, RULE_frameClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6609;
			frameUnits();
			State = 6610;
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameUnitsContext frameUnits() {
		FrameUnitsContext _localctx = new FrameUnitsContext(Context, State);
		EnterRule(_localctx, 622, RULE_frameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6612;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBetweenContext frameBetween() {
			return GetRuleContext<FrameBetweenContext>(0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 624, RULE_frameExtent);
		try {
			State = 6616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6614;
				frameRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6615;
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBetweenContext frameBetween() {
		FrameBetweenContext _localctx = new FrameBetweenContext(Context, State);
		EnterRule(_localctx, 626, RULE_frameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6618;
			Match(BETWEEN);
			State = 6619;
			frameRange();
			State = 6620;
			Match(AND);
			State = 6621;
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(MySqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(MySqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 628, RULE_frameRange);
		int _la;
		try {
			State = 6630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6623;
				Match(CURRENT);
				State = 6624;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6625;
				Match(UNBOUNDED);
				State = 6626;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6627;
				expression(0);
				State = 6628;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 630, RULE_partitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6632;
			Match(PARTITION);
			State = 6633;
			Match(BY);
			State = 6634;
			expression(0);
			State = 6639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6635;
				Match(COMMA);
				State = 6636;
				expression(0);
				}
				}
				State = 6641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 632, RULE_scalarFunctionName);
		try {
			State = 6665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6642;
				functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6643;
				Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6644;
				Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6645;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6646;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6647;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6648;
				Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6649;
				Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6650;
				Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6651;
				Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6652;
				Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6653;
				Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6654;
				Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6655;
				Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6656;
				Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6657;
				Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6658;
				Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6659;
				Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6660;
				Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6661;
				Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6662;
				Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6663;
				Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6664;
				Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 634, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6667;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6668;
			Match(LR_BRACKET);
			State = 6669;
			functionArg();
			State = 6670;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 636, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
			case 1:
				{
				State = 6672;
				constant();
				}
				break;
			case 2:
				{
				State = 6673;
				fullColumnName();
				}
				break;
			case 3:
				{
				State = 6674;
				functionCall();
				}
				break;
			case 4:
				{
				State = 6675;
				expression(0);
				}
				break;
			}
			State = 6687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6678;
				Match(COMMA);
				State = 6683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
				case 1:
					{
					State = 6679;
					constant();
					}
					break;
				case 2:
					{
					State = 6680;
					fullColumnName();
					}
					break;
				case 3:
					{
					State = 6681;
					functionCall();
					}
					break;
				case 4:
					{
					State = 6682;
					expression(0);
					}
					break;
				}
				}
				}
				State = 6689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 638, RULE_functionArg);
		try {
			State = 6694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,988,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6690;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6691;
				fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6692;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6693;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 640;
		EnterRecursionRule(_localctx, 640, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6697;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6698;
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6699;
				predicate(0);
				State = 6700;
				Match(IS);
				State = 6702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6701;
					Match(NOT);
					}
				}

				State = 6704;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6706;
				predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,991,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 6709;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 6710;
					logicalOperator();
					State = 6711;
					expression(4);
					}
					} 
				}
				State = 6717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,991,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSoundsLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSoundsLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundsLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionAtomPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionAtomPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtomPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryComparisonPredicateContext : PredicateContext {
		public IToken quantifier;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonMemberOfPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonMemberOfPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonMemberOfPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonMemberOfPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryComparisonPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRegexpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRegexpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 642;
		EnterRecursionRule(_localctx, 642, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 6721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
			case 1:
				{
				State = 6719;
				Match(LOCAL_ID);
				State = 6720;
				Match(VAR_ASSIGN);
				}
				break;
			}
			State = 6723;
			expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6789;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1000,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6787;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6725;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 6726;
						comparisonOperator();
						State = 6727;
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6729;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 6731;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6730;
							Match(NOT);
							}
						}

						State = 6733;
						Match(BETWEEN);
						State = 6734;
						predicate(0);
						State = 6735;
						Match(AND);
						State = 6736;
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6738;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 6739;
						Match(SOUNDS);
						State = 6740;
						Match(LIKE);
						State = 6741;
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6742;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6744;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6743;
							Match(NOT);
							}
						}

						State = 6746;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6747;
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6748;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 6750;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6749;
							Match(NOT);
							}
						}

						State = 6752;
						Match(IN);
						State = 6753;
						Match(LR_BRACKET);
						State = 6756;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,996,Context) ) {
						case 1:
							{
							State = 6754;
							selectStatement();
							}
							break;
						case 2:
							{
							State = 6755;
							expressions();
							}
							break;
						}
						State = 6758;
						Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6760;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 6761;
						Match(IS);
						State = 6762;
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6763;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 6764;
						comparisonOperator();
						State = 6765;
						((SubqueryComparisonPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6766;
						Match(LR_BRACKET);
						State = 6767;
						selectStatement();
						State = 6768;
						Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6770;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 6772;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6771;
							Match(NOT);
							}
						}

						State = 6774;
						Match(LIKE);
						State = 6775;
						predicate(0);
						State = 6778;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,998,Context) ) {
						case 1:
							{
							State = 6776;
							Match(ESCAPE);
							State = 6777;
							Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6780;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6781;
						Match(MEMBER);
						State = 6782;
						Match(OF);
						State = 6783;
						Match(LR_BRACKET);
						State = 6784;
						predicate(0);
						State = 6785;
						Match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				State = 6791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1000,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollateExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollateExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariableExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariableExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedRowExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedRowExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedRowExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExistsExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExistsExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstantExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstantExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnNameExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnNameExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 644;
		EnterRecursionRule(_localctx, 644, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6793;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6794;
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6795;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6796;
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6797;
				unaryOperator();
				State = 6798;
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6800;
				Match(BINARY);
				State = 6801;
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6802;
				Match(LR_BRACKET);
				State = 6803;
				expression(0);
				State = 6808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6804;
					Match(COMMA);
					State = 6805;
					expression(0);
					}
					}
					State = 6810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6811;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6813;
				Match(ROW);
				State = 6814;
				Match(LR_BRACKET);
				State = 6815;
				expression(0);
				State = 6818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6816;
					Match(COMMA);
					State = 6817;
					expression(0);
					}
					}
					State = 6820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 6822;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6824;
				Match(EXISTS);
				State = 6825;
				Match(LR_BRACKET);
				State = 6826;
				selectStatement();
				State = 6827;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6829;
				Match(LR_BRACKET);
				State = 6830;
				selectStatement();
				State = 6831;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6833;
				Match(INTERVAL);
				State = 6834;
				expression(0);
				State = 6835;
				intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6856;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1005,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6854;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6839;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6840;
						bitOperator();
						State = 6841;
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6843;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6844;
						mathOperator();
						State = 6845;
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6847;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6848;
						jsonOperator();
						State = 6849;
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 6851;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 6852;
						Match(COLLATE);
						State = 6853;
						collationName();
						}
						break;
					}
					} 
				}
				State = 6858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1005,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT_OP() { return GetToken(MySqlParser.BIT_NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 646, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6859;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || ((((_la - 1083)) & ~0x3f) == 0 && ((1L << (_la - 1083)) & ((1L << (PLUS - 1083)) | (1L << (MINUS - 1083)) | (1L << (EXCLAMATION_SYMBOL - 1083)) | (1L << (BIT_NOT_OP - 1083)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 648, RULE_comparisonOperator);
		try {
			State = 6875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6861;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6862;
				Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6863;
				Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6864;
				Match(LESS_SYMBOL);
				State = 6865;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6866;
				Match(GREATER_SYMBOL);
				State = 6867;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6868;
				Match(LESS_SYMBOL);
				State = 6869;
				Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6870;
				Match(EXCLAMATION_SYMBOL);
				State = 6871;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6872;
				Match(LESS_SYMBOL);
				State = 6873;
				Match(EQUAL_SYMBOL);
				State = 6874;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND_OP() { return GetTokens(MySqlParser.BIT_AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP(int i) {
			return GetToken(MySqlParser.BIT_AND_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR_OP() { return GetTokens(MySqlParser.BIT_OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP(int i) {
			return GetToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 650, RULE_logicalOperator);
		try {
			State = 6884;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6877;
				Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6878;
				Match(BIT_AND_OP);
				State = 6879;
				Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6880;
				Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6881;
				Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6882;
				Match(BIT_OR_OP);
				State = 6883;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MySqlParser.LESS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL(int i) {
			return GetToken(MySqlParser.LESS_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP() { return GetToken(MySqlParser.BIT_AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_OP() { return GetToken(MySqlParser.BIT_XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP() { return GetToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 652, RULE_bitOperator);
		try {
			State = 6893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6886;
				Match(LESS_SYMBOL);
				State = 6887;
				Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6888;
				Match(GREATER_SYMBOL);
				State = 6889;
				Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6890;
				Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6891;
				Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6892;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MySqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MySqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 654, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6895;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1080)) & ~0x3f) == 0 && ((1L << (_la - 1080)) & ((1L << (STAR - 1080)) | (1L << (DIVIDE - 1080)) | (1L << (MODULE - 1080)) | (1L << (PLUS - 1080)) | (1L << (MINUS - 1080)) | (1L << (DIV - 1080)) | (1L << (MOD - 1080)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 656, RULE_jsonOperator);
		try {
			State = 6902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6897;
				Match(MINUS);
				State = 6898;
				Match(GREATER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6899;
				Match(MINUS);
				State = 6900;
				Match(GREATER_SYMBOL);
				State = 6901;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB18030() { return GetToken(MySqlParser.GB18030, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 658, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6904;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (ARMSCII8 - 711)) | (1L << (ASCII - 711)) | (1L << (BIG5 - 711)) | (1L << (CP1250 - 711)) | (1L << (CP1251 - 711)) | (1L << (CP1256 - 711)) | (1L << (CP1257 - 711)) | (1L << (CP850 - 711)) | (1L << (CP852 - 711)) | (1L << (CP866 - 711)) | (1L << (CP932 - 711)) | (1L << (DEC8 - 711)) | (1L << (EUCJPMS - 711)) | (1L << (EUCKR - 711)) | (1L << (GB18030 - 711)) | (1L << (GB2312 - 711)) | (1L << (GBK - 711)) | (1L << (GEOSTD8 - 711)) | (1L << (GREEK - 711)) | (1L << (HEBREW - 711)) | (1L << (HP8 - 711)) | (1L << (KEYBCS2 - 711)) | (1L << (KOI8R - 711)) | (1L << (KOI8U - 711)) | (1L << (LATIN1 - 711)) | (1L << (LATIN2 - 711)) | (1L << (LATIN5 - 711)) | (1L << (LATIN7 - 711)) | (1L << (MACCE - 711)) | (1L << (MACROMAN - 711)) | (1L << (SJIS - 711)) | (1L << (SWE7 - 711)) | (1L << (TIS620 - 711)) | (1L << (UCS2 - 711)) | (1L << (UJIS - 711)) | (1L << (UTF16 - 711)) | (1L << (UTF16LE - 711)) | (1L << (UTF32 - 711)) | (1L << (UTF8 - 711)) | (1L << (UTF8MB3 - 711)) | (1L << (UTF8MB4 - 711)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevelBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevelBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevelBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 660, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6906;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (REPEATABLE - 764)) | (1L << (COMMITTED - 764)) | (1L << (UNCOMMITTED - 764)) | (1L << (SERIALIZABLE - 764)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilegesBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilegesBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegesBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 662, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6908;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (TABLES - 669)) | (1L << (ROUTINE - 669)) | (1L << (EXECUTE - 669)) | (1L << (FILE - 669)) | (1L << (PROCESS - 669)) | (1L << (RELOAD - 669)) | (1L << (SHUTDOWN - 669)) | (1L << (SUPER - 669)) | (1L << (PRIVILEGES - 669)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 664, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6910;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (QUARTER - 661)) | (1L << (MONTH - 661)) | (1L << (DAY - 661)) | (1L << (HOUR - 661)) | (1L << (MINUTE - 661)) | (1L << (WEEK - 661)) | (1L << (SECOND - 661)) | (1L << (MICROSECOND - 661)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 666, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6912;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (TEXT - 208)) | (1L << (ENUM - 208)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MySqlParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUR() { return GetToken(MySqlParser.EUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MySqlParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(MySqlParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(MySqlParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JIS() { return GetToken(MySqlParser.JIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY() { return GetToken(MySqlParser.NOCOPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MySqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MySqlParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MySqlParser.RTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MySqlParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USA() { return GetToken(MySqlParser.USA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeywordsCanBeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeywordsCanBeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordsCanBeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 668, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6914;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NUMBER - 111)) | (1L << (OPTIONAL - 111)) | (1L << (ORDER - 111)) | (1L << (STACKED - 111)))) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & ((1L << (SERIAL - 230)) | (1L << (AVG - 230)) | (1L << (BIT_AND - 230)) | (1L << (BIT_OR - 230)) | (1L << (BIT_XOR - 230)) | (1L << (COUNT - 230)) | (1L << (GROUP_CONCAT - 230)) | (1L << (MAX - 230)) | (1L << (MIN - 230)) | (1L << (STD - 230)))) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (STDDEV - 294)) | (1L << (STDDEV_POP - 294)) | (1L << (STDDEV_SAMP - 294)) | (1L << (SUM - 294)) | (1L << (VAR_POP - 294)) | (1L << (VAR_SAMP - 294)) | (1L << (VARIANCE - 294)) | (1L << (ACCOUNT - 294)) | (1L << (ACTION - 294)) | (1L << (AFTER - 294)) | (1L << (AGGREGATE - 294)) | (1L << (ALGORITHM - 294)) | (1L << (ANY - 294)) | (1L << (AT - 294)) | (1L << (AUTHORS - 294)) | (1L << (AUTOCOMMIT - 294)) | (1L << (AUTOEXTEND_SIZE - 294)) | (1L << (AUTO_INCREMENT - 294)) | (1L << (AVG_ROW_LENGTH - 294)) | (1L << (BEGIN - 294)) | (1L << (BINLOG - 294)) | (1L << (BIT - 294)) | (1L << (BLOCK - 294)) | (1L << (BOOL - 294)) | (1L << (BOOLEAN - 294)) | (1L << (BTREE - 294)) | (1L << (CACHE - 294)) | (1L << (CASCADED - 294)) | (1L << (CHAIN - 294)) | (1L << (CHANGED - 294)) | (1L << (CHANNEL - 294)) | (1L << (CHECKSUM - 294)) | (1L << (PAGE_CHECKSUM - 294)) | (1L << (CIPHER - 294)) | (1L << (CLASS_ORIGIN - 294)) | (1L << (CLIENT - 294)) | (1L << (CLOSE - 294)) | (1L << (CLUSTERING - 294)) | (1L << (COALESCE - 294)) | (1L << (CODE - 294)) | (1L << (COLUMNS - 294)) | (1L << (COLUMN_FORMAT - 294)) | (1L << (COLUMN_NAME - 294)) | (1L << (COMMENT - 294)) | (1L << (COMMIT - 294)))) != 0) || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (COMPACT - 358)) | (1L << (COMPLETION - 358)) | (1L << (COMPRESSED - 358)) | (1L << (COMPRESSION - 358)) | (1L << (CONCURRENT - 358)) | (1L << (CONNECT - 358)) | (1L << (CONNECTION - 358)) | (1L << (CONSISTENT - 358)) | (1L << (CONSTRAINT_CATALOG - 358)) | (1L << (CONSTRAINT_SCHEMA - 358)) | (1L << (CONSTRAINT_NAME - 358)) | (1L << (CONTAINS - 358)) | (1L << (CONTEXT - 358)) | (1L << (CONTRIBUTORS - 358)) | (1L << (COPY - 358)) | (1L << (CPU - 358)) | (1L << (CURSOR_NAME - 358)) | (1L << (DATA - 358)) | (1L << (DATAFILE - 358)) | (1L << (DEALLOCATE - 358)) | (1L << (DEFAULT_AUTH - 358)) | (1L << (DEFINER - 358)) | (1L << (DELAY_KEY_WRITE - 358)) | (1L << (DES_KEY_FILE - 358)) | (1L << (DIRECTORY - 358)) | (1L << (DISABLE - 358)) | (1L << (DISCARD - 358)) | (1L << (DISK - 358)) | (1L << (DO - 358)) | (1L << (DUMPFILE - 358)) | (1L << (DUPLICATE - 358)) | (1L << (DYNAMIC - 358)) | (1L << (ENABLE - 358)) | (1L << (ENCRYPTION - 358)) | (1L << (END - 358)) | (1L << (ENDS - 358)) | (1L << (ENGINE - 358)) | (1L << (ENGINES - 358)) | (1L << (ERROR - 358)) | (1L << (ERRORS - 358)) | (1L << (ESCAPE - 358)) | (1L << (EVEN - 358)) | (1L << (EVENT - 358)) | (1L << (EVENTS - 358)) | (1L << (EVERY - 358)) | (1L << (EXCHANGE - 358)) | (1L << (EXCLUSIVE - 358)) | (1L << (EXPIRE - 358)) | (1L << (EXPORT - 358)) | (1L << (EXTENDED - 358)) | (1L << (EXTENT_SIZE - 358)) | (1L << (FAST - 358)) | (1L << (FAULTS - 358)) | (1L << (FIELDS - 358)) | (1L << (FILE_BLOCK_SIZE - 358)) | (1L << (FILTER - 358)) | (1L << (FIRST - 358)) | (1L << (FIXED - 358)) | (1L << (FLUSH - 358)) | (1L << (FOLLOWS - 358)) | (1L << (FOUND - 358)) | (1L << (FULL - 358)) | (1L << (FUNCTION - 358)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (GENERAL - 422)) | (1L << (GLOBAL - 422)) | (1L << (GRANTS - 422)) | (1L << (GROUP_REPLICATION - 422)) | (1L << (HANDLER - 422)) | (1L << (HASH - 422)) | (1L << (HELP - 422)) | (1L << (HOST - 422)) | (1L << (HOSTS - 422)) | (1L << (IDENTIFIED - 422)) | (1L << (IGNORE_SERVER_IDS - 422)) | (1L << (IMPORT - 422)) | (1L << (INDEXES - 422)) | (1L << (INITIAL_SIZE - 422)) | (1L << (INPLACE - 422)) | (1L << (INSERT_METHOD - 422)) | (1L << (INSTALL - 422)) | (1L << (INSTANCE - 422)) | (1L << (INSTANT - 422)) | (1L << (INVOKER - 422)) | (1L << (IO - 422)) | (1L << (IO_THREAD - 422)) | (1L << (IPC - 422)) | (1L << (ISOLATION - 422)) | (1L << (ISSUER - 422)) | (1L << (JSON - 422)) | (1L << (KEY_BLOCK_SIZE - 422)) | (1L << (LANGUAGE - 422)) | (1L << (LAST - 422)) | (1L << (LEAVES - 422)) | (1L << (LESS - 422)) | (1L << (LEVEL - 422)) | (1L << (LIST - 422)) | (1L << (LOCAL - 422)) | (1L << (LOGFILE - 422)) | (1L << (LOGS - 422)) | (1L << (MASTER - 422)) | (1L << (MASTER_AUTO_POSITION - 422)) | (1L << (MASTER_CONNECT_RETRY - 422)) | (1L << (MASTER_DELAY - 422)) | (1L << (MASTER_HEARTBEAT_PERIOD - 422)) | (1L << (MASTER_HOST - 422)) | (1L << (MASTER_LOG_FILE - 422)) | (1L << (MASTER_LOG_POS - 422)) | (1L << (MASTER_PASSWORD - 422)) | (1L << (MASTER_PORT - 422)) | (1L << (MASTER_RETRY_COUNT - 422)) | (1L << (MASTER_SSL - 422)) | (1L << (MASTER_SSL_CA - 422)) | (1L << (MASTER_SSL_CAPATH - 422)) | (1L << (MASTER_SSL_CERT - 422)) | (1L << (MASTER_SSL_CIPHER - 422)) | (1L << (MASTER_SSL_CRL - 422)) | (1L << (MASTER_SSL_CRLPATH - 422)) | (1L << (MASTER_SSL_KEY - 422)) | (1L << (MASTER_TLS_VERSION - 422)) | (1L << (MASTER_USER - 422)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 422)) | (1L << (MAX_QUERIES_PER_HOUR - 422)) | (1L << (MAX_ROWS - 422)) | (1L << (MAX_SIZE - 422)) | (1L << (MAX_UPDATES_PER_HOUR - 422)) | (1L << (MAX_USER_CONNECTIONS - 422)))) != 0) || ((((_la - 486)) & ~0x3f) == 0 && ((1L << (_la - 486)) & ((1L << (MEDIUM - 486)) | (1L << (MEMBER - 486)) | (1L << (MERGE - 486)) | (1L << (MESSAGE_TEXT - 486)) | (1L << (MID - 486)) | (1L << (MIGRATE - 486)) | (1L << (MIN_ROWS - 486)) | (1L << (MODE - 486)) | (1L << (MODIFY - 486)) | (1L << (MUTEX - 486)) | (1L << (MYSQL - 486)) | (1L << (MYSQL_ERRNO - 486)) | (1L << (NAME - 486)) | (1L << (NAMES - 486)) | (1L << (NCHAR - 486)) | (1L << (NEVER - 486)) | (1L << (NEXT - 486)) | (1L << (NO - 486)) | (1L << (NOCOPY - 486)) | (1L << (NOWAIT - 486)) | (1L << (NODEGROUP - 486)) | (1L << (NONE - 486)) | (1L << (ODBC - 486)) | (1L << (OFFLINE - 486)) | (1L << (OFFSET - 486)) | (1L << (OF - 486)) | (1L << (OJ - 486)) | (1L << (OLD_PASSWORD - 486)) | (1L << (ONE - 486)) | (1L << (ONLINE - 486)) | (1L << (ONLY - 486)) | (1L << (OPEN - 486)) | (1L << (OPTIMIZER_COSTS - 486)) | (1L << (OPTIONS - 486)) | (1L << (OWNER - 486)) | (1L << (PACK_KEYS - 486)) | (1L << (PAGE - 486)) | (1L << (PARSER - 486)) | (1L << (PARTIAL - 486)) | (1L << (PARTITIONING - 486)) | (1L << (PARTITIONS - 486)) | (1L << (PASSWORD - 486)) | (1L << (PHASE - 486)) | (1L << (PLUGIN - 486)) | (1L << (PLUGIN_DIR - 486)) | (1L << (PLUGINS - 486)) | (1L << (PORT - 486)) | (1L << (PRECEDES - 486)) | (1L << (PREPARE - 486)) | (1L << (PRESERVE - 486)) | (1L << (PREV - 486)) | (1L << (PROCESSLIST - 486)) | (1L << (PROFILE - 486)) | (1L << (PROFILES - 486)) | (1L << (PROXY - 486)) | (1L << (QUERY - 486)) | (1L << (QUICK - 486)) | (1L << (REBUILD - 486)) | (1L << (RECOVER - 486)) | (1L << (RECURSIVE - 486)) | (1L << (REDO_BUFFER_SIZE - 486)) | (1L << (REDUNDANT - 486)) | (1L << (RELAY - 486)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (RELAY_LOG_FILE - 550)) | (1L << (RELAY_LOG_POS - 550)) | (1L << (RELAYLOG - 550)) | (1L << (REMOVE - 550)) | (1L << (REORGANIZE - 550)) | (1L << (REPAIR - 550)) | (1L << (REPLICATE_DO_DB - 550)) | (1L << (REPLICATE_DO_TABLE - 550)) | (1L << (REPLICATE_IGNORE_DB - 550)) | (1L << (REPLICATE_IGNORE_TABLE - 550)) | (1L << (REPLICATE_REWRITE_DB - 550)) | (1L << (REPLICATE_WILD_DO_TABLE - 550)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 550)) | (1L << (REPLICATION - 550)) | (1L << (RESET - 550)) | (1L << (RESUME - 550)) | (1L << (RETURNED_SQLSTATE - 550)) | (1L << (RETURNS - 550)) | (1L << (ROLE - 550)) | (1L << (ROLLBACK - 550)) | (1L << (ROLLUP - 550)) | (1L << (ROTATE - 550)) | (1L << (ROW - 550)) | (1L << (ROWS - 550)) | (1L << (ROW_FORMAT - 550)) | (1L << (RTREE - 550)) | (1L << (SAVEPOINT - 550)) | (1L << (SCHEDULE - 550)) | (1L << (SECURITY - 550)) | (1L << (SERVER - 550)) | (1L << (SESSION - 550)) | (1L << (SHARE - 550)) | (1L << (SHARED - 550)) | (1L << (SIGNED - 550)) | (1L << (SIMPLE - 550)) | (1L << (SLAVE - 550)) | (1L << (SLOW - 550)) | (1L << (SNAPSHOT - 550)) | (1L << (SOCKET - 550)) | (1L << (SOME - 550)) | (1L << (SONAME - 550)) | (1L << (SOUNDS - 550)) | (1L << (SOURCE - 550)) | (1L << (SQL_AFTER_GTIDS - 550)) | (1L << (SQL_AFTER_MTS_GAPS - 550)) | (1L << (SQL_BEFORE_GTIDS - 550)) | (1L << (SQL_BUFFER_RESULT - 550)) | (1L << (SQL_CACHE - 550)) | (1L << (SQL_NO_CACHE - 550)) | (1L << (SQL_THREAD - 550)) | (1L << (START - 550)) | (1L << (STARTS - 550)) | (1L << (STATS_AUTO_RECALC - 550)) | (1L << (STATS_PERSISTENT - 550)) | (1L << (STATS_SAMPLE_PAGES - 550)) | (1L << (STATUS - 550)) | (1L << (STOP - 550)) | (1L << (STORAGE - 550)) | (1L << (STRING - 550)) | (1L << (SUBCLASS_ORIGIN - 550)) | (1L << (SUBJECT - 550)) | (1L << (SUBPARTITION - 550)))) != 0) || ((((_la - 614)) & ~0x3f) == 0 && ((1L << (_la - 614)) & ((1L << (SUBPARTITIONS - 614)) | (1L << (SUSPEND - 614)) | (1L << (SWAPS - 614)) | (1L << (SWITCHES - 614)) | (1L << (TABLE_NAME - 614)) | (1L << (TABLESPACE - 614)) | (1L << (TEMPORARY - 614)) | (1L << (TEMPTABLE - 614)) | (1L << (THAN - 614)) | (1L << (TRADITIONAL - 614)) | (1L << (TRANSACTION - 614)) | (1L << (TRANSACTIONAL - 614)) | (1L << (TRIGGERS - 614)) | (1L << (TRUNCATE - 614)) | (1L << (UNDEFINED - 614)) | (1L << (UNDOFILE - 614)) | (1L << (UNDO_BUFFER_SIZE - 614)) | (1L << (UNINSTALL - 614)) | (1L << (UNKNOWN - 614)) | (1L << (UNTIL - 614)) | (1L << (UPGRADE - 614)) | (1L << (USER - 614)) | (1L << (USE_FRM - 614)) | (1L << (USER_RESOURCES - 614)) | (1L << (VALIDATION - 614)) | (1L << (VALUE - 614)) | (1L << (VARIABLES - 614)) | (1L << (VIEW - 614)) | (1L << (WAIT - 614)) | (1L << (WARNINGS - 614)) | (1L << (WITHOUT - 614)) | (1L << (WORK - 614)) | (1L << (WRAPPER - 614)) | (1L << (X509 - 614)) | (1L << (XA - 614)) | (1L << (XML - 614)) | (1L << (EUR - 614)) | (1L << (USA - 614)) | (1L << (JIS - 614)) | (1L << (ISO - 614)) | (1L << (INTERNAL - 614)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (AUDIT_ADMIN - 679)) | (1L << (BACKUP_ADMIN - 679)) | (1L << (BINLOG_ADMIN - 679)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 679)) | (1L << (CLONE_ADMIN - 679)) | (1L << (CONNECTION_ADMIN - 679)) | (1L << (ENCRYPTION_KEY_ADMIN - 679)) | (1L << (FIREWALL_ADMIN - 679)) | (1L << (FIREWALL_USER - 679)) | (1L << (ADMIN - 679)) | (1L << (GROUP_REPLICATION_ADMIN - 679)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 679)) | (1L << (NDB_STORED_USER - 679)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 679)) | (1L << (REPLICATION_APPLIER - 679)) | (1L << (REPLICATION_SLAVE_ADMIN - 679)) | (1L << (RESOURCE_GROUP_ADMIN - 679)) | (1L << (RESOURCE_GROUP_USER - 679)) | (1L << (ROLE_ADMIN - 679)) | (1L << (SESSION_VARIABLES_ADMIN - 679)) | (1L << (SET_USER_ID - 679)) | (1L << (SHOW_ROUTINE - 679)) | (1L << (SYSTEM_VARIABLES_ADMIN - 679)) | (1L << (TABLE_ENCRYPTION_ADMIN - 679)) | (1L << (VERSION_TOKEN_ADMIN - 679)) | (1L << (XA_RECOVER_ADMIN - 679)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(MySqlParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(MySqlParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUOTE() { return GetToken(MySqlParser.JSON_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS() { return GetToken(MySqlParser.JSON_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS_PATH() { return GetToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXTRACT() { return GetToken(MySqlParser.JSON_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_KEYS() { return GetToken(MySqlParser.JSON_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OVERLAPS() { return GetToken(MySqlParser.JSON_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEARCH() { return GetToken(MySqlParser.JSON_SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_APPEND() { return GetToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_INSERT() { return GetToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_INSERT() { return GetToken(MySqlParser.JSON_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE() { return GetToken(MySqlParser.JSON_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PATCH() { return GetToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PRESERVE() { return GetToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REMOVE() { return GetToken(MySqlParser.JSON_REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REPLACE() { return GetToken(MySqlParser.JSON_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SET() { return GetToken(MySqlParser.JSON_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTE() { return GetToken(MySqlParser.JSON_UNQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_DEPTH() { return GetToken(MySqlParser.JSON_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_LENGTH() { return GetToken(MySqlParser.JSON_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TYPE() { return GetToken(MySqlParser.JSON_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALID() { return GetToken(MySqlParser.JSON_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MySqlParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALID() { return GetToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return GetToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_PRETTY() { return GetToken(MySqlParser.JSON_PRETTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_FREE() { return GetToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_SIZE() { return GetToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(MySqlParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 670, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6916;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (LEFT - 93)) | (1L << (RIGHT - 93)) | (1L << (SCHEMA - 93)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (DATE - 208)) | (1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (YEAR - 208)) | (1L << (JSON_ARRAY - 208)) | (1L << (JSON_OBJECT - 208)) | (1L << (JSON_QUOTE - 208)) | (1L << (JSON_CONTAINS - 208)) | (1L << (JSON_CONTAINS_PATH - 208)) | (1L << (JSON_EXTRACT - 208)) | (1L << (JSON_KEYS - 208)) | (1L << (JSON_OVERLAPS - 208)) | (1L << (JSON_SEARCH - 208)) | (1L << (JSON_VALUE - 208)) | (1L << (JSON_ARRAY_APPEND - 208)) | (1L << (JSON_ARRAY_INSERT - 208)) | (1L << (JSON_INSERT - 208)) | (1L << (JSON_MERGE - 208)) | (1L << (JSON_MERGE_PATCH - 208)) | (1L << (JSON_MERGE_PRESERVE - 208)) | (1L << (JSON_REMOVE - 208)) | (1L << (JSON_REPLACE - 208)) | (1L << (JSON_SET - 208)) | (1L << (JSON_UNQUOTE - 208)) | (1L << (JSON_DEPTH - 208)) | (1L << (JSON_LENGTH - 208)) | (1L << (JSON_TYPE - 208)) | (1L << (JSON_VALID - 208)) | (1L << (JSON_TABLE - 208)) | (1L << (JSON_SCHEMA_VALID - 208)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 208)) | (1L << (JSON_PRETTY - 208)) | (1L << (JSON_STORAGE_FREE - 208)) | (1L << (JSON_STORAGE_SIZE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (JSON_ARRAYAGG - 272)) | (1L << (JSON_OBJECTAGG - 272)) | (1L << (COUNT - 272)) | (1L << (CUME_DIST - 272)) | (1L << (DENSE_RANK - 272)) | (1L << (FIRST_VALUE - 272)) | (1L << (LAG - 272)) | (1L << (LAST_VALUE - 272)) | (1L << (LEAD - 272)) | (1L << (NTILE - 272)) | (1L << (NTH_VALUE - 272)) | (1L << (PERCENT_RANK - 272)) | (1L << (RANK - 272)) | (1L << (ROW_NUMBER - 272)) | (1L << (POSITION - 272)))) != 0) || _la==INVISIBLE || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (VISIBLE - 645)) | (1L << (QUARTER - 645)) | (1L << (MONTH - 645)) | (1L << (DAY - 645)) | (1L << (HOUR - 645)) | (1L << (MINUTE - 645)) | (1L << (WEEK - 645)) | (1L << (SECOND - 645)) | (1L << (MICROSECOND - 645)) | (1L << (SESSION_VARIABLES_ADMIN - 645)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (GEOMETRYCOLLECTION - 768)) | (1L << (LINESTRING - 768)) | (1L << (MULTILINESTRING - 768)) | (1L << (MULTIPOINT - 768)) | (1L << (MULTIPOLYGON - 768)) | (1L << (POINT - 768)) | (1L << (POLYGON - 768)) | (1L << (ABS - 768)) | (1L << (ACOS - 768)) | (1L << (ADDDATE - 768)) | (1L << (ADDTIME - 768)) | (1L << (AES_DECRYPT - 768)) | (1L << (AES_ENCRYPT - 768)) | (1L << (AREA - 768)) | (1L << (ASBINARY - 768)) | (1L << (ASIN - 768)) | (1L << (ASTEXT - 768)) | (1L << (ASWKB - 768)) | (1L << (ASWKT - 768)) | (1L << (ASYMMETRIC_DECRYPT - 768)) | (1L << (ASYMMETRIC_DERIVE - 768)) | (1L << (ASYMMETRIC_ENCRYPT - 768)) | (1L << (ASYMMETRIC_SIGN - 768)) | (1L << (ASYMMETRIC_VERIFY - 768)) | (1L << (ATAN - 768)) | (1L << (ATAN2 - 768)) | (1L << (BENCHMARK - 768)) | (1L << (BIN - 768)) | (1L << (BIT_COUNT - 768)) | (1L << (BIT_LENGTH - 768)) | (1L << (BUFFER - 768)) | (1L << (CEIL - 768)) | (1L << (CEILING - 768)) | (1L << (CENTROID - 768)) | (1L << (CHARACTER_LENGTH - 768)) | (1L << (CHARSET - 768)) | (1L << (CHAR_LENGTH - 768)) | (1L << (COERCIBILITY - 768)) | (1L << (COLLATION - 768)) | (1L << (COMPRESS - 768)) | (1L << (CONCAT - 768)) | (1L << (CONCAT_WS - 768)) | (1L << (CONNECTION_ID - 768)) | (1L << (CONV - 768)) | (1L << (CONVERT_TZ - 768)) | (1L << (COS - 768)) | (1L << (COT - 768)) | (1L << (CRC32 - 768)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 768)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 768)) | (1L << (CREATE_DH_PARAMETERS - 768)) | (1L << (CREATE_DIGEST - 768)) | (1L << (CROSSES - 768)) | (1L << (DATEDIFF - 768)) | (1L << (DATE_FORMAT - 768)) | (1L << (DAYNAME - 768)) | (1L << (DAYOFMONTH - 768)) | (1L << (DAYOFWEEK - 768)) | (1L << (DAYOFYEAR - 768)) | (1L << (DECODE - 768)) | (1L << (DEGREES - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (DES_DECRYPT - 832)) | (1L << (DES_ENCRYPT - 832)) | (1L << (DIMENSION - 832)) | (1L << (DISJOINT - 832)) | (1L << (ELT - 832)) | (1L << (ENCODE - 832)) | (1L << (ENCRYPT - 832)) | (1L << (ENDPOINT - 832)) | (1L << (ENVELOPE - 832)) | (1L << (EQUALS - 832)) | (1L << (EXP - 832)) | (1L << (EXPORT_SET - 832)) | (1L << (EXTERIORRING - 832)) | (1L << (EXTRACTVALUE - 832)) | (1L << (FIELD - 832)) | (1L << (FIND_IN_SET - 832)) | (1L << (FLOOR - 832)) | (1L << (FORMAT - 832)) | (1L << (FOUND_ROWS - 832)) | (1L << (FROM_BASE64 - 832)) | (1L << (FROM_DAYS - 832)) | (1L << (FROM_UNIXTIME - 832)) | (1L << (GEOMCOLLFROMTEXT - 832)) | (1L << (GEOMCOLLFROMWKB - 832)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 832)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 832)) | (1L << (GEOMETRYFROMTEXT - 832)) | (1L << (GEOMETRYFROMWKB - 832)) | (1L << (GEOMETRYN - 832)) | (1L << (GEOMETRYTYPE - 832)) | (1L << (GEOMFROMTEXT - 832)) | (1L << (GEOMFROMWKB - 832)) | (1L << (GET_FORMAT - 832)) | (1L << (GET_LOCK - 832)) | (1L << (GLENGTH - 832)) | (1L << (GREATEST - 832)) | (1L << (GTID_SUBSET - 832)) | (1L << (GTID_SUBTRACT - 832)) | (1L << (HEX - 832)) | (1L << (IFNULL - 832)) | (1L << (INET6_ATON - 832)) | (1L << (INET6_NTOA - 832)) | (1L << (INET_ATON - 832)) | (1L << (INET_NTOA - 832)) | (1L << (INSTR - 832)) | (1L << (INTERIORRINGN - 832)) | (1L << (INTERSECTS - 832)) | (1L << (ISCLOSED - 832)) | (1L << (ISEMPTY - 832)) | (1L << (ISNULL - 832)) | (1L << (ISSIMPLE - 832)) | (1L << (IS_FREE_LOCK - 832)) | (1L << (IS_IPV4 - 832)) | (1L << (IS_IPV4_COMPAT - 832)) | (1L << (IS_IPV4_MAPPED - 832)) | (1L << (IS_IPV6 - 832)) | (1L << (IS_USED_LOCK - 832)) | (1L << (LAST_INSERT_ID - 832)) | (1L << (LCASE - 832)) | (1L << (LEAST - 832)) | (1L << (LENGTH - 832)) | (1L << (LINEFROMTEXT - 832)) | (1L << (LINEFROMWKB - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (LINESTRINGFROMTEXT - 896)) | (1L << (LINESTRINGFROMWKB - 896)) | (1L << (LN - 896)) | (1L << (LOAD_FILE - 896)) | (1L << (LOCATE - 896)) | (1L << (LOG - 896)) | (1L << (LOG10 - 896)) | (1L << (LOG2 - 896)) | (1L << (LOWER - 896)) | (1L << (LPAD - 896)) | (1L << (LTRIM - 896)) | (1L << (MAKEDATE - 896)) | (1L << (MAKETIME - 896)) | (1L << (MAKE_SET - 896)) | (1L << (MASTER_POS_WAIT - 896)) | (1L << (MBRCONTAINS - 896)) | (1L << (MBRDISJOINT - 896)) | (1L << (MBREQUAL - 896)) | (1L << (MBRINTERSECTS - 896)) | (1L << (MBROVERLAPS - 896)) | (1L << (MBRTOUCHES - 896)) | (1L << (MBRWITHIN - 896)) | (1L << (MD5 - 896)) | (1L << (MLINEFROMTEXT - 896)) | (1L << (MLINEFROMWKB - 896)) | (1L << (MONTHNAME - 896)) | (1L << (MPOINTFROMTEXT - 896)) | (1L << (MPOINTFROMWKB - 896)) | (1L << (MPOLYFROMTEXT - 896)) | (1L << (MPOLYFROMWKB - 896)) | (1L << (MULTILINESTRINGFROMTEXT - 896)) | (1L << (MULTILINESTRINGFROMWKB - 896)) | (1L << (MULTIPOINTFROMTEXT - 896)) | (1L << (MULTIPOINTFROMWKB - 896)) | (1L << (MULTIPOLYGONFROMTEXT - 896)) | (1L << (MULTIPOLYGONFROMWKB - 896)) | (1L << (NAME_CONST - 896)) | (1L << (NULLIF - 896)) | (1L << (NUMGEOMETRIES - 896)) | (1L << (NUMINTERIORRINGS - 896)) | (1L << (NUMPOINTS - 896)) | (1L << (OCT - 896)) | (1L << (OCTET_LENGTH - 896)) | (1L << (ORD - 896)) | (1L << (OVERLAPS - 896)) | (1L << (PERIOD_ADD - 896)) | (1L << (PERIOD_DIFF - 896)) | (1L << (PI - 896)) | (1L << (POINTFROMTEXT - 896)) | (1L << (POINTFROMWKB - 896)) | (1L << (POINTN - 896)) | (1L << (POLYFROMTEXT - 896)) | (1L << (POLYFROMWKB - 896)) | (1L << (POLYGONFROMTEXT - 896)) | (1L << (POLYGONFROMWKB - 896)) | (1L << (POW - 896)) | (1L << (POWER - 896)) | (1L << (QUOTE - 896)) | (1L << (RADIANS - 896)) | (1L << (RAND - 896)) | (1L << (RANDOM_BYTES - 896)) | (1L << (RELEASE_LOCK - 896)) | (1L << (REVERSE - 896)) | (1L << (ROUND - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ROW_COUNT - 960)) | (1L << (RPAD - 960)) | (1L << (RTRIM - 960)) | (1L << (SEC_TO_TIME - 960)) | (1L << (SESSION_USER - 960)) | (1L << (SHA - 960)) | (1L << (SHA1 - 960)) | (1L << (SHA2 - 960)) | (1L << (SIGN - 960)) | (1L << (SIN - 960)) | (1L << (SLEEP - 960)) | (1L << (SOUNDEX - 960)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 960)) | (1L << (SQRT - 960)) | (1L << (SRID - 960)) | (1L << (STARTPOINT - 960)) | (1L << (STRCMP - 960)) | (1L << (STR_TO_DATE - 960)) | (1L << (ST_AREA - 960)) | (1L << (ST_ASBINARY - 960)) | (1L << (ST_ASTEXT - 960)) | (1L << (ST_ASWKB - 960)) | (1L << (ST_ASWKT - 960)) | (1L << (ST_BUFFER - 960)) | (1L << (ST_CENTROID - 960)) | (1L << (ST_CONTAINS - 960)) | (1L << (ST_CROSSES - 960)) | (1L << (ST_DIFFERENCE - 960)) | (1L << (ST_DIMENSION - 960)) | (1L << (ST_DISJOINT - 960)) | (1L << (ST_DISTANCE - 960)) | (1L << (ST_ENDPOINT - 960)) | (1L << (ST_ENVELOPE - 960)) | (1L << (ST_EQUALS - 960)) | (1L << (ST_EXTERIORRING - 960)) | (1L << (ST_GEOMCOLLFROMTEXT - 960)) | (1L << (ST_GEOMCOLLFROMTXT - 960)) | (1L << (ST_GEOMCOLLFROMWKB - 960)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 960)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 960)) | (1L << (ST_GEOMETRYFROMTEXT - 960)) | (1L << (ST_GEOMETRYFROMWKB - 960)) | (1L << (ST_GEOMETRYN - 960)) | (1L << (ST_GEOMETRYTYPE - 960)) | (1L << (ST_GEOMFROMTEXT - 960)) | (1L << (ST_GEOMFROMWKB - 960)) | (1L << (ST_INTERIORRINGN - 960)) | (1L << (ST_INTERSECTION - 960)) | (1L << (ST_INTERSECTS - 960)) | (1L << (ST_ISCLOSED - 960)) | (1L << (ST_ISEMPTY - 960)) | (1L << (ST_ISSIMPLE - 960)) | (1L << (ST_LINEFROMTEXT - 960)) | (1L << (ST_LINEFROMWKB - 960)) | (1L << (ST_LINESTRINGFROMTEXT - 960)) | (1L << (ST_LINESTRINGFROMWKB - 960)) | (1L << (ST_NUMGEOMETRIES - 960)) | (1L << (ST_NUMINTERIORRING - 960)) | (1L << (ST_NUMINTERIORRINGS - 960)) | (1L << (ST_NUMPOINTS - 960)) | (1L << (ST_OVERLAPS - 960)) | (1L << (ST_POINTFROMTEXT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ST_POINTFROMWKB - 1024)) | (1L << (ST_POINTN - 1024)) | (1L << (ST_POLYFROMTEXT - 1024)) | (1L << (ST_POLYFROMWKB - 1024)) | (1L << (ST_POLYGONFROMTEXT - 1024)) | (1L << (ST_POLYGONFROMWKB - 1024)) | (1L << (ST_SRID - 1024)) | (1L << (ST_STARTPOINT - 1024)) | (1L << (ST_SYMDIFFERENCE - 1024)) | (1L << (ST_TOUCHES - 1024)) | (1L << (ST_UNION - 1024)) | (1L << (ST_WITHIN - 1024)) | (1L << (ST_X - 1024)) | (1L << (ST_Y - 1024)) | (1L << (SUBDATE - 1024)) | (1L << (SUBSTRING_INDEX - 1024)) | (1L << (SUBTIME - 1024)) | (1L << (SYSTEM_USER - 1024)) | (1L << (TAN - 1024)) | (1L << (TIMEDIFF - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (TIMESTAMPDIFF - 1024)) | (1L << (TIME_FORMAT - 1024)) | (1L << (TIME_TO_SEC - 1024)) | (1L << (TOUCHES - 1024)) | (1L << (TO_BASE64 - 1024)) | (1L << (TO_DAYS - 1024)) | (1L << (TO_SECONDS - 1024)) | (1L << (UCASE - 1024)) | (1L << (UNCOMPRESS - 1024)) | (1L << (UNCOMPRESSED_LENGTH - 1024)) | (1L << (UNHEX - 1024)) | (1L << (UNIX_TIMESTAMP - 1024)) | (1L << (UPDATEXML - 1024)) | (1L << (UPPER - 1024)) | (1L << (UUID - 1024)) | (1L << (UUID_SHORT - 1024)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1024)) | (1L << (VERSION - 1024)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1024)) | (1L << (WEEKDAY - 1024)) | (1L << (WEEKOFYEAR - 1024)) | (1L << (WEIGHT_STRING - 1024)) | (1L << (WITHIN - 1024)) | (1L << (YEARWEEK - 1024)) | (1L << (Y_FUNCTION - 1024)) | (1L << (X_FUNCTION - 1024)) | (1L << (MOD - 1024)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 320: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 321: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 322: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,1125,6919,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,1,0,3,0,674,8,0,1,0,1,0,3,0,678,8,
		0,1,0,1,0,1,1,1,1,1,1,3,1,685,8,1,1,1,3,1,688,8,1,1,1,5,1,691,8,1,10,1,
		12,1,694,9,1,1,1,1,1,1,1,3,1,699,8,1,1,1,3,1,702,8,1,1,1,3,1,705,8,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,714,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,753,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,765,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,3,6,776,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,793,8,7,1,8,1,8,1,8,3,8,798,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,810,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,837,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,846,8,
		11,1,12,1,12,1,12,3,12,851,8,12,1,12,1,12,5,12,855,8,12,10,12,12,12,858,
		9,12,1,13,1,13,3,13,862,8,13,1,13,1,13,3,13,866,8,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,3,13,875,8,13,1,13,3,13,878,8,13,1,13,3,13,881,8,13,
		1,13,1,13,3,13,885,8,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,893,8,14,1,
		14,3,14,896,8,14,1,14,3,14,899,8,14,1,14,1,14,1,14,1,14,3,14,905,8,14,
		1,14,1,14,3,14,909,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,917,8,14,1,
		14,5,14,920,8,14,10,14,12,14,923,9,14,1,14,1,14,3,14,927,8,14,1,14,1,14,
		1,14,3,14,932,8,14,1,14,5,14,935,8,14,10,14,12,14,938,9,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,949,8,15,1,15,3,15,952,8,15,1,15,
		1,15,3,15,956,8,15,1,15,3,15,959,8,15,1,15,1,15,3,15,963,8,15,1,15,3,15,
		966,8,15,1,15,1,15,3,15,970,8,15,1,15,3,15,973,8,15,1,15,3,15,976,8,15,
		1,15,1,15,3,15,980,8,15,1,15,3,15,983,8,15,1,15,1,15,3,15,987,8,15,1,15,
		1,15,1,16,1,16,3,16,993,8,16,1,16,1,16,1,16,1,16,3,16,999,8,16,1,16,1,
		16,5,16,1003,8,16,10,16,12,16,1006,9,16,1,16,1,16,5,16,1010,8,16,10,16,
		12,16,1013,9,16,1,16,1,16,1,17,1,17,3,17,1019,8,17,1,17,1,17,1,17,1,17,
		3,17,1025,8,17,1,17,1,17,5,17,1029,8,17,10,17,12,17,1032,9,17,1,17,1,17,
		1,17,1,17,5,17,1038,8,17,10,17,12,17,1041,9,17,1,17,1,17,3,17,1045,8,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,1059,
		8,18,10,18,12,18,1062,9,18,1,18,1,18,1,19,1,19,1,19,3,19,1069,8,19,1,19,
		3,19,1072,8,19,1,19,1,19,3,19,1076,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,3,19,1086,8,19,1,19,1,19,1,19,3,19,1091,8,19,1,19,3,19,1094,
		8,19,1,19,1,19,3,19,1098,8,19,1,19,1,19,3,19,1102,8,19,1,19,1,19,3,19,
		1106,8,19,1,19,5,19,1109,8,19,10,19,12,19,1112,9,19,3,19,1114,8,19,1,19,
		3,19,1117,8,19,1,19,3,19,1120,8,19,1,19,3,19,1123,8,19,1,19,1,19,1,19,
		1,19,1,19,3,19,1130,8,19,1,19,3,19,1133,8,19,1,19,1,19,3,19,1137,8,19,
		1,19,1,19,1,19,1,19,3,19,1143,8,19,1,19,5,19,1146,8,19,10,19,12,19,1149,
		9,19,3,19,1151,8,19,1,19,3,19,1154,8,19,3,19,1156,8,19,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,3,20,1167,8,20,1,20,1,20,3,20,1171,8,20,
		1,20,3,20,1174,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,3,21,1188,8,21,1,21,3,21,1191,8,21,1,21,1,21,3,21,1195,8,21,
		1,21,3,21,1198,8,21,1,21,1,21,3,21,1202,8,21,1,21,3,21,1205,8,21,1,21,
		1,21,3,21,1209,8,21,1,21,3,21,1212,8,21,1,21,1,21,3,21,1216,8,21,1,21,
		3,21,1219,8,21,1,21,3,21,1222,8,21,1,21,1,21,3,21,1226,8,21,1,21,3,21,
		1229,8,21,1,21,1,21,3,21,1233,8,21,1,21,1,21,1,22,1,22,1,22,3,22,1240,
		8,22,1,22,3,22,1243,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,3,22,1256,8,22,1,22,1,22,1,23,1,23,3,23,1262,8,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,5,24,1271,8,24,10,24,12,24,1274,9,24,1,24,1,24,
		3,24,1278,8,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1286,8,24,1,25,1,25,
		1,26,1,26,1,27,1,27,1,27,3,27,1295,8,27,1,27,1,27,1,27,3,27,1300,8,27,
		1,27,3,27,1303,8,27,1,27,1,27,1,27,3,27,1308,8,27,1,27,1,27,1,27,1,27,
		1,27,1,27,3,27,1316,8,27,1,27,1,27,3,27,1320,8,27,1,27,1,27,1,27,3,27,
		1325,8,27,1,27,1,27,3,27,1329,8,27,1,28,3,28,1332,8,28,1,28,1,28,3,28,
		1336,8,28,1,28,1,28,3,28,1340,8,28,1,28,3,28,1343,8,28,1,28,1,28,3,28,
		1347,8,28,1,28,3,28,1350,8,28,1,29,1,29,1,29,1,29,1,29,3,29,1357,8,29,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,1365,8,30,3,30,1367,8,30,1,31,1,31,
		1,31,5,31,1372,8,31,10,31,12,31,1375,9,31,1,31,1,31,1,31,3,31,1380,8,31,
		1,31,1,31,1,31,1,31,5,31,1386,8,31,10,31,12,31,1389,9,31,3,31,1391,8,31,
		1,31,1,31,1,31,5,31,1396,8,31,10,31,12,31,1399,9,31,3,31,1401,8,31,3,31,
		1403,8,31,1,32,1,32,1,32,1,32,3,32,1409,8,32,1,33,1,33,1,33,1,33,3,33,
		1415,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,3,34,1432,8,34,1,35,1,35,1,35,1,35,1,35,3,35,1439,8,35,
		1,36,1,36,1,36,1,37,1,37,3,37,1446,8,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,3,37,1458,8,37,1,37,1,37,1,37,3,37,1463,8,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,3,37,1472,8,37,3,37,1474,8,37,1,38,3,38,
		1477,8,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,
		1490,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
		1503,8,40,1,40,1,40,1,40,3,40,1508,8,40,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1524,8,41,1,42,1,42,1,42,
		1,42,5,42,1530,8,42,10,42,12,42,1533,9,42,1,42,1,42,1,43,1,43,1,43,1,43,
		1,43,3,43,1542,8,43,1,44,1,44,5,44,1546,8,44,10,44,12,44,1549,9,44,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1560,8,45,1,45,3,45,1563,
		8,45,1,45,1,45,1,45,3,45,1568,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,3,45,1581,8,45,1,45,1,45,1,45,1,45,1,45,3,45,1588,
		8,45,1,45,1,45,1,45,1,45,1,45,3,45,1595,8,45,3,45,1597,8,45,1,45,1,45,
		1,45,1,45,1,45,3,45,1604,8,45,1,46,1,46,3,46,1608,8,46,3,46,1610,8,46,
		1,46,1,46,1,46,3,46,1615,8,46,1,46,3,46,1618,8,46,1,46,1,46,5,46,1622,
		8,46,10,46,12,46,1625,9,46,1,46,1,46,3,46,1629,8,46,3,46,1631,8,46,1,46,
		1,46,3,46,1635,8,46,1,46,3,46,1638,8,46,1,46,3,46,1641,8,46,1,46,1,46,
		5,46,1645,8,46,10,46,12,46,1648,9,46,1,46,1,46,3,46,1652,8,46,3,46,1654,
		8,46,1,46,1,46,1,46,3,46,1659,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1666,
		8,46,3,46,1668,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1675,8,46,1,47,1,47,
		1,47,3,47,1680,8,47,1,47,1,47,3,47,1684,8,47,1,47,3,47,1687,8,47,1,48,
		1,48,1,48,1,48,1,48,1,48,3,48,1695,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
		3,48,1703,8,48,3,48,1705,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1713,
		8,49,1,50,1,50,3,50,1717,8,50,1,50,3,50,1720,8,50,1,50,1,50,5,50,1724,
		8,50,10,50,12,50,1727,9,50,1,50,1,50,3,50,1731,8,50,1,50,3,50,1734,8,50,
		1,50,1,50,5,50,1738,8,50,10,50,12,50,1741,9,50,3,50,1743,8,50,1,51,1,51,
		3,51,1747,8,51,1,51,3,51,1750,8,51,1,51,1,51,3,51,1754,8,51,1,51,1,51,
		1,51,3,51,1759,8,51,1,51,1,51,3,51,1763,8,51,1,51,1,51,3,51,1767,8,51,
		1,51,1,51,3,51,1771,8,51,1,51,1,51,3,51,1775,8,51,1,51,1,51,3,51,1779,
		8,51,1,51,1,51,3,51,1783,8,51,1,51,1,51,1,51,3,51,1788,8,51,1,51,1,51,
		1,51,3,51,1793,8,51,1,51,1,51,1,51,3,51,1798,8,51,1,51,1,51,1,51,1,51,
		3,51,1804,8,51,1,51,1,51,1,51,3,51,1809,8,51,1,51,1,51,1,51,3,51,1814,
		8,51,1,51,1,51,1,51,1,51,3,51,1820,8,51,1,51,1,51,1,51,3,51,1825,8,51,
		1,51,1,51,1,51,3,51,1830,8,51,1,51,1,51,1,51,3,51,1835,8,51,1,51,1,51,
		1,51,3,51,1840,8,51,1,51,1,51,1,51,3,51,1845,8,51,1,51,1,51,1,51,3,51,
		1850,8,51,1,51,1,51,1,51,3,51,1855,8,51,1,51,1,51,1,51,3,51,1860,8,51,
		1,51,1,51,1,51,3,51,1865,8,51,1,51,1,51,1,51,3,51,1870,8,51,1,51,1,51,
		1,51,1,51,3,51,1876,8,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1884,8,51,
		1,51,1,51,1,51,1,51,3,51,1890,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
		1,54,1,54,1,54,3,54,1902,8,54,1,54,1,54,1,54,1,54,1,54,3,54,1909,8,54,
		3,54,1911,8,54,1,54,1,54,1,54,1,54,5,54,1917,8,54,10,54,12,54,1920,9,54,
		1,54,1,54,3,54,1924,8,54,1,55,3,55,1927,8,55,1,55,1,55,1,55,1,55,1,55,
		1,55,3,55,1935,8,55,1,55,1,55,1,55,1,55,3,55,1941,8,55,1,55,1,55,1,55,
		1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1957,8,55,
		1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1969,8,55,3,55,
		1971,8,55,1,56,3,56,1974,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1982,
		8,56,1,56,1,56,1,56,1,56,3,56,1988,8,56,1,56,1,56,1,56,1,56,3,56,1994,
		8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,2005,8,57,10,57,
		12,57,2008,9,57,1,57,1,57,5,57,2012,8,57,10,57,12,57,2015,9,57,1,57,1,
		57,1,57,1,57,5,57,2021,8,57,10,57,12,57,2024,9,57,1,57,1,57,3,57,2028,
		8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,2037,8,57,10,57,12,57,2040,
		9,57,1,57,1,57,1,57,1,57,5,57,2046,8,57,10,57,12,57,2049,9,57,1,57,1,57,
		3,57,2053,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,2063,8,57,
		10,57,12,57,2066,9,57,1,57,1,57,5,57,2070,8,57,10,57,12,57,2073,9,57,1,
		57,1,57,1,57,1,57,5,57,2079,8,57,10,57,12,57,2082,9,57,1,57,1,57,3,57,
		2086,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,2096,8,57,10,57,
		12,57,2099,9,57,1,57,1,57,5,57,2103,8,57,10,57,12,57,2106,9,57,1,57,1,
		57,1,57,1,57,5,57,2112,8,57,10,57,12,57,2115,9,57,1,57,1,57,3,57,2119,
		8,57,1,57,1,57,1,57,5,57,2124,8,57,10,57,12,57,2127,9,57,1,57,1,57,1,57,
		1,57,5,57,2133,8,57,10,57,12,57,2136,9,57,1,57,1,57,3,57,2140,8,57,3,57,
		2142,8,57,1,58,1,58,1,58,3,58,2147,8,58,1,59,1,59,1,59,1,59,4,59,2153,
		8,59,11,59,12,59,2154,1,59,1,59,1,60,1,60,1,60,5,60,2162,8,60,10,60,12,
		60,2165,9,60,1,61,3,61,2168,8,61,1,61,3,61,2171,8,61,1,61,1,61,3,61,2175,
		8,61,1,61,1,61,1,61,3,61,2180,8,61,1,61,1,61,1,61,1,61,3,61,2186,8,61,
		1,61,1,61,1,61,1,61,3,61,2192,8,61,1,61,1,61,1,61,3,61,2197,8,61,1,61,
		1,61,1,61,3,61,2202,8,61,1,61,1,61,1,61,3,61,2207,8,61,1,61,1,61,1,61,
		3,61,2212,8,61,1,61,3,61,2215,8,61,1,62,1,62,1,62,3,62,2220,8,62,1,62,
		4,62,2223,8,62,11,62,12,62,2224,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		3,62,2235,8,62,1,63,1,63,3,63,2239,8,63,1,63,1,63,1,63,1,63,1,63,3,63,
		2246,8,63,1,63,1,63,1,63,3,63,2251,8,63,1,63,3,63,2254,8,63,1,63,1,63,
		1,63,3,63,2259,8,63,1,63,3,63,2262,8,63,1,63,1,63,3,63,2266,8,63,1,63,
		1,63,3,63,2270,8,63,1,64,1,64,1,64,1,64,5,64,2276,8,64,10,64,12,64,2279,
		9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,1,66,3,66,2297,8,66,1,66,3,66,2300,8,66,1,66,3,66,2303,8,66,
		1,66,1,66,3,66,2307,8,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,2315,8,67,
		10,67,12,67,2318,9,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,2328,
		8,68,10,68,12,68,2331,9,68,1,68,1,68,1,69,1,69,3,69,2337,8,69,1,69,3,69,
		2340,8,69,1,69,1,69,1,69,1,69,1,69,5,69,2347,8,69,10,69,12,69,2350,9,69,
		3,69,2352,8,69,1,69,3,69,2355,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,3,70,2366,8,70,1,70,3,70,2369,8,70,1,70,1,70,3,70,2373,8,70,
		1,70,1,70,1,71,1,71,1,71,1,71,3,71,2381,8,71,1,71,3,71,2384,8,71,1,71,
		1,71,1,71,3,71,2389,8,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2397,8,71,
		1,71,1,71,1,71,1,71,3,71,2403,8,71,1,71,1,71,3,71,2407,8,71,1,72,1,72,
		3,72,2411,8,72,1,72,5,72,2414,8,72,10,72,12,72,2417,9,72,1,72,1,72,3,72,
		2421,8,72,1,72,3,72,2424,8,72,1,72,1,72,1,72,1,72,1,72,3,72,2431,8,72,
		1,72,1,72,3,72,2435,8,72,1,72,3,72,2438,8,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,5,72,2447,8,72,10,72,12,72,2450,9,72,1,72,1,72,1,72,1,72,1,72,
		3,72,2457,8,72,1,72,3,72,2460,8,72,1,72,3,72,2463,8,72,1,72,1,72,5,72,
		2467,8,72,10,72,12,72,2470,9,72,1,72,1,72,1,72,3,72,2475,8,72,3,72,2477,
		8,72,1,72,1,72,1,72,3,72,2482,8,72,1,72,3,72,2485,8,72,1,72,1,72,5,72,
		2489,8,72,10,72,12,72,2492,9,72,1,72,1,72,1,72,3,72,2497,8,72,3,72,2499,
		8,72,1,72,1,72,3,72,2503,8,72,1,72,3,72,2506,8,72,1,72,3,72,2509,8,72,
		1,72,1,72,5,72,2513,8,72,10,72,12,72,2516,9,72,1,72,1,72,1,72,3,72,2521,
		8,72,1,72,3,72,2524,8,72,1,72,1,72,5,72,2528,8,72,10,72,12,72,2531,9,72,
		1,72,1,72,1,72,3,72,2536,8,72,3,72,2538,8,72,1,72,1,72,1,72,3,72,2543,
		8,72,1,72,3,72,2546,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2554,8,72,
		3,72,2556,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2565,8,72,1,72,
		1,72,1,72,3,72,2570,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2578,8,72,
		1,72,1,72,3,72,2582,8,72,1,72,3,72,2585,8,72,1,72,1,72,1,72,1,72,1,72,
		1,72,3,72,2593,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2603,
		8,72,1,72,1,72,1,72,3,72,2608,8,72,1,72,3,72,2611,8,72,1,72,1,72,1,72,
		1,72,1,72,3,72,2618,8,72,1,72,1,72,3,72,2622,8,72,1,72,3,72,2625,8,72,
		1,72,1,72,3,72,2629,8,72,1,72,1,72,1,72,3,72,2634,8,72,1,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,3,72,2654,8,72,1,72,1,72,1,72,1,72,1,72,3,72,2661,8,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,3,72,2670,8,72,1,72,1,72,3,72,2674,8,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2686,8,72,1,72,3,72,
		2689,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2698,8,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2710,8,72,1,72,1,72,1,72,
		1,72,5,72,2716,8,72,10,72,12,72,2719,9,72,1,72,1,72,1,72,1,72,1,72,3,72,
		2726,8,72,1,72,1,72,1,72,1,72,1,72,3,72,2733,8,72,1,72,1,72,1,72,1,72,
		1,72,3,72,2740,8,72,1,72,1,72,1,72,1,72,1,72,3,72,2747,8,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,2760,8,72,10,72,12,72,
		2763,9,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2775,
		8,72,1,72,1,72,1,72,1,72,3,72,2781,8,72,1,72,1,72,1,72,1,72,3,72,2787,
		8,72,1,72,1,72,1,72,1,72,3,72,2793,8,72,1,72,1,72,1,72,1,72,3,72,2799,
		8,72,1,72,1,72,1,72,1,72,3,72,2805,8,72,1,72,1,72,1,72,1,72,3,72,2811,
		8,72,1,73,1,73,1,73,3,73,2816,8,73,1,73,1,73,1,74,1,74,1,74,3,74,2823,
		8,74,1,74,1,74,1,75,1,75,1,75,3,75,2830,8,75,1,75,1,75,1,75,1,75,1,75,
		3,75,2837,8,75,1,75,1,75,1,75,3,75,2842,8,75,1,75,5,75,2845,8,75,10,75,
		12,75,2848,9,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
		3,77,2861,8,77,1,77,1,77,1,78,1,78,1,78,3,78,2868,8,78,1,78,1,78,1,79,
		1,79,1,79,3,79,2875,8,79,1,79,1,79,1,80,1,80,3,80,2881,8,80,1,80,1,80,
		3,80,2885,8,80,1,80,1,80,3,80,2889,8,80,1,81,1,81,1,81,1,81,1,81,3,81,
		2896,8,81,1,81,3,81,2899,8,81,1,82,1,82,1,82,3,82,2904,8,82,1,82,1,82,
		1,83,1,83,1,83,3,83,2911,8,83,1,83,1,83,1,83,5,83,2916,8,83,10,83,12,83,
		2919,9,83,1,83,3,83,2922,8,83,1,84,1,84,1,84,1,84,1,84,5,84,2929,8,84,
		10,84,12,84,2932,9,84,1,85,1,85,1,85,1,85,1,86,1,86,3,86,2940,8,86,1,86,
		1,86,1,87,1,87,1,87,1,87,1,87,3,87,2949,8,87,1,87,3,87,2952,8,87,1,88,
		1,88,3,88,2956,8,88,1,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,2965,8,90,
		1,91,1,91,3,91,2969,8,91,1,91,3,91,2972,8,91,1,91,3,91,2975,8,91,1,91,
		1,91,1,91,1,91,3,91,2981,8,91,1,91,3,91,2984,8,91,1,91,1,91,1,91,1,91,
		3,91,2990,8,91,1,91,1,91,1,91,1,91,1,91,5,91,2997,8,91,10,91,12,91,3000,
		9,91,3,91,3002,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,5,91,3011,8,91,
		10,91,12,91,3014,9,91,3,91,3016,8,91,1,92,1,92,1,92,3,92,3021,8,92,1,92,
		3,92,3024,8,92,1,92,1,92,1,92,3,92,3029,8,92,1,92,1,92,1,92,1,92,1,92,
		1,92,1,92,1,92,3,92,3039,8,92,1,92,1,92,1,92,3,92,3044,8,92,1,92,1,92,
		4,92,3048,8,92,11,92,12,92,3049,3,92,3052,8,92,1,92,1,92,4,92,3056,8,92,
		11,92,12,92,3057,3,92,3060,8,92,1,92,1,92,1,92,1,92,3,92,3066,8,92,1,92,
		1,92,1,92,1,92,5,92,3072,8,92,10,92,12,92,3075,9,92,1,92,1,92,3,92,3079,
		8,92,1,92,1,92,1,92,1,92,5,92,3085,8,92,10,92,12,92,3088,9,92,3,92,3090,
		8,92,1,93,1,93,1,93,3,93,3095,8,93,1,93,3,93,3098,8,93,1,93,1,93,1,93,
		3,93,3103,8,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,3111,8,93,1,93,1,93,
		1,93,1,93,1,93,1,93,3,93,3119,8,93,1,93,1,93,1,93,1,93,3,93,3125,8,93,
		1,93,1,93,1,93,1,93,5,93,3131,8,93,10,93,12,93,3134,9,93,1,93,1,93,3,93,
		3138,8,93,1,93,1,93,1,93,1,93,5,93,3144,8,93,10,93,12,93,3147,9,93,3,93,
		3149,8,93,1,94,1,94,3,94,3153,8,94,1,94,3,94,3156,8,94,1,94,1,94,1,94,
		1,94,1,94,1,94,3,94,3164,8,94,1,94,1,94,1,94,1,94,3,94,3170,8,94,1,94,
		1,94,1,94,1,94,1,94,5,94,3177,8,94,10,94,12,94,3180,9,94,3,94,3182,8,94,
		1,95,1,95,3,95,3186,8,95,1,95,1,95,3,95,3190,8,95,1,95,1,95,4,95,3194,
		8,95,11,95,12,95,3195,1,95,1,95,3,95,3200,8,95,1,95,1,95,3,95,3204,8,95,
		3,95,3206,8,95,1,95,3,95,3209,8,95,1,95,3,95,3212,8,95,1,95,3,95,3215,
		8,95,1,95,1,95,4,95,3219,8,95,11,95,12,95,3220,1,95,1,95,3,95,3225,8,95,
		1,95,3,95,3228,8,95,1,95,3,95,3231,8,95,1,95,3,95,3234,8,95,1,95,3,95,
		3237,8,95,3,95,3239,8,95,1,96,1,96,3,96,3243,8,96,1,97,1,97,1,97,1,97,
		3,97,3249,8,97,1,97,1,97,1,97,1,97,3,97,3255,8,97,1,97,5,97,3258,8,97,
		10,97,12,97,3261,9,97,3,97,3263,8,97,1,98,1,98,1,98,1,98,3,98,3269,8,98,
		1,99,1,99,3,99,3273,8,99,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3281,
		8,100,1,101,1,101,3,101,3285,8,101,1,101,3,101,3288,8,101,1,101,3,101,
		3291,8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,3300,8,101,
		1,101,1,101,3,101,3304,8,101,1,101,3,101,3307,8,101,1,101,1,101,3,101,
		3311,8,101,1,102,1,102,3,102,3315,8,102,1,102,3,102,3318,8,102,1,102,3,
		102,3321,8,102,1,102,1,102,1,102,3,102,3326,8,102,1,102,1,102,1,102,1,
		102,3,102,3332,8,102,5,102,3334,8,102,10,102,12,102,3337,9,102,1,102,1,
		102,1,102,1,102,1,102,1,102,1,102,3,102,3346,8,102,1,102,1,102,1,102,1,
		102,3,102,3352,8,102,5,102,3354,8,102,10,102,12,102,3357,9,102,1,102,1,
		102,1,102,3,102,3362,8,102,1,102,1,102,3,102,3366,8,102,1,103,1,103,1,
		103,1,103,3,103,3372,8,103,1,103,3,103,3375,8,103,1,104,1,104,1,104,1,
		104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,3387,8,104,1,104,1,104,3,
		104,3391,8,104,1,104,1,104,3,104,3395,8,104,1,105,1,105,1,105,1,105,1,
		105,1,105,3,105,3403,8,105,1,105,1,105,3,105,3407,8,105,1,106,1,106,1,
		106,1,106,1,107,1,107,3,107,3415,8,107,1,107,3,107,3418,8,107,1,107,1,
		107,3,107,3422,8,107,1,107,3,107,3425,8,107,1,107,1,107,1,107,1,107,5,
		107,3431,8,107,10,107,12,107,3434,9,107,1,107,1,107,3,107,3438,8,107,1,
		107,3,107,3441,8,107,1,107,3,107,3444,8,107,1,108,1,108,3,108,3448,8,108,
		1,108,3,108,3451,8,108,1,108,1,108,1,108,1,108,1,108,5,108,3458,8,108,
		10,108,12,108,3461,9,108,1,108,1,108,3,108,3465,8,108,1,109,1,109,1,109,
		1,109,1,109,5,109,3472,8,109,10,109,12,109,3475,9,109,1,110,1,110,3,110,
		3479,8,110,1,111,1,111,1,111,5,111,3484,8,111,10,111,12,111,3487,9,111,
		1,112,1,112,5,112,3491,8,112,10,112,12,112,3494,9,112,1,112,1,112,1,112,
		5,112,3499,8,112,10,112,12,112,3502,9,112,1,112,1,112,3,112,3506,8,112,
		1,113,1,113,1,113,1,113,1,113,1,113,3,113,3514,8,113,1,113,3,113,3517,
		8,113,1,113,3,113,3520,8,113,1,113,1,113,1,113,5,113,3525,8,113,10,113,
		12,113,3528,9,113,3,113,3530,8,113,1,113,1,113,1,113,1,113,1,113,3,113,
		3537,8,113,1,113,3,113,3540,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
		3,113,3548,8,113,1,114,1,114,1,114,1,114,3,114,3554,8,114,1,114,1,114,
		1,114,1,114,1,115,1,115,1,115,1,115,1,115,3,115,3565,8,115,1,116,3,116,
		3568,8,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
		3579,8,116,1,116,1,116,1,116,1,116,3,116,3585,8,116,1,116,1,116,3,116,
		3589,8,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
		3600,8,116,1,116,1,116,1,116,3,116,3605,8,116,3,116,3607,8,116,1,116,1,
		116,3,116,3611,8,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,
		117,3621,8,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3631,
		8,118,1,119,1,119,5,119,3635,8,119,10,119,12,119,3638,9,119,1,119,1,119,
		3,119,3642,8,119,1,119,3,119,3645,8,119,1,119,3,119,3648,8,119,1,119,3,
		119,3651,8,119,1,119,3,119,3654,8,119,1,119,3,119,3657,8,119,1,119,3,119,
		3660,8,119,1,119,1,119,5,119,3664,8,119,10,119,12,119,3667,9,119,1,119,
		1,119,3,119,3671,8,119,1,119,3,119,3674,8,119,1,119,3,119,3677,8,119,1,
		119,3,119,3680,8,119,1,119,3,119,3683,8,119,1,119,3,119,3686,8,119,1,119,
		3,119,3689,8,119,3,119,3691,8,119,1,120,1,120,5,120,3695,8,120,10,120,
		12,120,3698,9,120,1,120,1,120,3,120,3702,8,120,1,120,3,120,3705,8,120,
		1,120,3,120,3708,8,120,1,120,3,120,3711,8,120,1,120,3,120,3714,8,120,1,
		120,3,120,3717,8,120,1,121,1,121,3,121,3721,8,121,1,121,1,121,1,122,1,
		122,3,122,3727,8,122,1,122,1,122,3,122,3731,8,122,1,123,1,123,1,123,1,
		123,1,123,1,123,1,123,1,123,3,123,3741,8,123,1,124,1,124,3,124,3745,8,
		124,1,124,1,124,5,124,3749,8,124,10,124,12,124,3752,9,124,1,125,1,125,
		1,125,1,125,1,125,1,125,3,125,3760,8,125,1,125,3,125,3763,8,125,1,125,
		1,125,3,125,3767,8,125,1,125,3,125,3770,8,125,1,125,1,125,3,125,3774,8,
		125,1,125,1,125,3,125,3778,8,125,1,125,3,125,3781,8,125,3,125,3783,8,125,
		1,126,1,126,1,126,1,126,5,126,3789,8,126,10,126,12,126,3792,9,126,1,126,
		1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3803,8,126,1,126,
		1,126,4,126,3807,8,126,11,126,12,126,3808,3,126,3811,8,126,1,126,1,126,
		4,126,3815,8,126,11,126,12,126,3816,3,126,3819,8,126,3,126,3821,8,126,
		1,127,1,127,1,127,1,127,3,127,3827,8,127,1,127,1,127,1,127,1,127,1,127,
		1,127,3,127,3835,8,127,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3843,
		8,128,1,129,1,129,3,129,3847,8,129,1,129,1,129,3,129,3851,8,129,1,130,
		1,130,1,130,1,130,1,130,5,130,3858,8,130,10,130,12,130,3861,9,130,1,130,
		1,130,3,130,3865,8,130,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,
		1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,5,132,3883,8,132,10,132,
		12,132,3886,9,132,1,133,1,133,3,133,3890,8,133,1,134,1,134,1,134,1,134,
		3,134,3896,8,134,1,134,1,134,1,134,1,134,1,134,3,134,3903,8,134,1,135,
		1,135,1,135,3,135,3908,8,135,1,136,1,136,1,136,1,136,1,136,5,136,3915,
		8,136,10,136,12,136,3918,9,136,3,136,3920,8,136,1,137,1,137,3,137,3924,
		8,137,1,138,1,138,3,138,3928,8,138,1,138,1,138,3,138,3932,8,138,1,138,
		3,138,3935,8,138,1,138,3,138,3938,8,138,1,138,3,138,3941,8,138,1,139,1,
		139,3,139,3945,8,139,1,139,1,139,3,139,3949,8,139,1,139,3,139,3952,8,139,
		1,139,3,139,3955,8,139,1,139,3,139,3958,8,139,1,140,1,140,1,140,1,141,
		1,141,3,141,3965,8,141,1,141,1,141,3,141,3969,8,141,1,141,1,141,1,142,
		1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,5,143,3982,8,143,10,143,
		12,143,3985,9,143,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,146,
		1,146,3,146,3997,8,146,1,146,1,146,1,146,1,146,5,146,4003,8,146,10,146,
		12,146,4006,9,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,4015,
		8,147,1,148,1,148,3,148,4019,8,148,1,148,3,148,4022,8,148,1,148,1,148,
		1,149,1,149,3,149,4028,8,149,1,149,3,149,4031,8,149,1,149,3,149,4034,8,
		149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,4043,8,150,1,151,1,
		151,1,151,1,151,1,151,1,151,1,151,3,151,4052,8,151,1,152,1,152,1,152,1,
		152,1,152,1,152,5,152,4060,8,152,10,152,12,152,4063,9,152,1,152,3,152,
		4066,8,152,1,153,1,153,1,153,1,153,1,153,1,153,5,153,4074,8,153,10,153,
		12,153,4077,9,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,4086,
		8,154,1,155,1,155,1,155,1,156,1,156,1,156,3,156,4094,8,156,1,156,3,156,
		4097,8,156,1,157,1,157,1,157,1,157,1,157,5,157,4104,8,157,10,157,12,157,
		4107,9,157,3,157,4109,8,157,1,157,1,157,3,157,4113,8,157,1,157,5,157,4116,
		8,157,10,157,12,157,4119,9,157,1,157,3,157,4122,8,157,1,158,1,158,1,158,
		1,158,1,158,5,158,4129,8,158,10,158,12,158,4132,9,158,3,158,4134,8,158,
		1,159,1,159,1,159,1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,161,
		1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
		1,161,1,161,1,161,5,161,4163,8,161,10,161,12,161,4166,9,161,3,161,4168,
		8,161,1,161,3,161,4171,8,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,
		1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,5,166,4225,8,166,
		10,166,12,166,4228,9,166,1,166,1,166,3,166,4232,8,166,1,167,1,167,1,167,
		1,167,1,167,1,167,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,
		4260,8,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
		1,170,1,170,3,170,4274,8,170,1,171,1,171,1,171,5,171,4279,8,171,10,171,
		12,171,4282,9,171,1,171,3,171,4285,8,171,1,172,1,172,1,172,1,172,3,172,
		4291,8,172,1,173,1,173,1,173,1,173,1,173,1,173,3,173,4299,8,173,3,173,
		4301,8,173,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,3,175,
		4312,8,175,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,3,177,4322,
		8,177,1,178,1,178,1,178,1,178,1,178,3,178,4329,8,178,1,179,1,179,1,179,
		1,179,3,179,4335,8,179,1,180,1,180,1,180,1,180,1,181,1,181,3,181,4343,
		8,181,1,182,1,182,1,182,3,182,4348,8,182,1,182,1,182,1,182,1,182,5,182,
		4354,8,182,10,182,12,182,4357,9,182,1,182,1,182,1,182,5,182,4362,8,182,
		10,182,12,182,4365,9,182,1,182,1,182,1,182,5,182,4370,8,182,10,182,12,
		182,4373,9,182,1,182,1,182,1,182,5,182,4378,8,182,10,182,12,182,4381,9,
		182,1,182,5,182,4384,8,182,10,182,12,182,4387,9,182,3,182,4389,8,182,1,
		182,1,182,3,182,4393,8,182,1,183,1,183,1,183,3,183,4398,8,183,1,183,4,
		183,4401,8,183,11,183,12,183,4402,1,183,1,183,4,183,4407,8,183,11,183,
		12,183,4408,3,183,4411,8,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,
		4,184,4420,8,184,11,184,12,184,4421,1,184,5,184,4425,8,184,10,184,12,184,
		4428,9,184,1,184,1,184,4,184,4432,8,184,11,184,12,184,4433,3,184,4436,
		8,184,1,184,1,184,1,184,1,185,1,185,1,185,1,186,1,186,1,186,1,187,1,187,
		1,187,3,187,4450,8,187,1,187,1,187,4,187,4454,8,187,11,187,12,187,4455,
		1,187,1,187,1,187,3,187,4461,8,187,1,188,1,188,1,188,3,188,4466,8,188,
		1,188,1,188,4,188,4470,8,188,11,188,12,188,4471,1,188,1,188,1,188,1,188,
		1,188,3,188,4479,8,188,1,189,1,189,1,189,1,190,1,190,1,190,3,190,4487,
		8,190,1,190,1,190,1,190,1,190,4,190,4493,8,190,11,190,12,190,4494,1,190,
		1,190,1,190,3,190,4500,8,190,1,191,1,191,1,191,1,191,3,191,4506,8,191,
		1,191,3,191,4509,8,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,4517,
		8,191,1,192,1,192,1,192,1,192,1,192,3,192,4524,8,192,1,193,1,193,1,193,
		1,193,1,193,1,193,1,193,3,193,4533,8,193,1,193,3,193,4536,8,193,1,194,
		1,194,1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
		5,195,4551,8,195,10,195,12,195,4554,9,195,1,195,1,195,1,196,1,196,1,196,
		3,196,4561,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,4569,8,196,
		1,197,1,197,3,197,4573,8,197,1,197,1,197,1,198,1,198,1,198,3,198,4580,
		8,198,1,198,1,198,4,198,4584,8,198,11,198,12,198,4585,1,199,1,199,1,199,
		1,199,4,199,4592,8,199,11,199,12,199,4593,1,200,1,200,1,200,1,200,1,200,
		5,200,4601,8,200,10,200,12,200,4604,9,200,1,200,1,200,1,200,3,200,4609,
		8,200,1,200,1,200,1,200,5,200,4614,8,200,10,200,12,200,4617,9,200,1,200,
		1,200,1,200,1,200,3,200,4623,8,200,1,200,5,200,4626,8,200,10,200,12,200,
		4629,9,200,3,200,4631,8,200,3,200,4633,8,200,1,200,1,200,4,200,4637,8,
		200,11,200,12,200,4638,3,200,4641,8,200,1,200,1,200,5,200,4645,8,200,10,
		200,12,200,4648,9,200,3,200,4650,8,200,1,201,1,201,1,201,1,201,1,201,5,
		201,4657,8,201,10,201,12,201,4660,9,201,1,201,1,201,1,201,3,201,4665,8,
		201,1,201,1,201,1,201,5,201,4670,8,201,10,201,12,201,4673,9,201,1,201,
		1,201,1,201,1,201,3,201,4679,8,201,1,201,5,201,4682,8,201,10,201,12,201,
		4685,9,201,3,201,4687,8,201,3,201,4689,8,201,1,201,1,201,4,201,4693,8,
		201,11,201,12,201,4694,3,201,4697,8,201,1,201,1,201,5,201,4701,8,201,10,
		201,12,201,4704,9,201,3,201,4706,8,201,1,202,1,202,1,202,3,202,4711,8,
		202,1,202,1,202,1,202,5,202,4716,8,202,10,202,12,202,4719,9,202,1,203,
		1,203,1,203,1,203,5,203,4725,8,203,10,203,12,203,4728,9,203,1,203,1,203,
		3,203,4732,8,203,1,203,1,203,1,203,1,203,1,203,5,203,4739,8,203,10,203,
		12,203,4742,9,203,1,203,1,203,1,203,1,203,3,203,4748,8,203,1,203,5,203,
		4751,8,203,10,203,12,203,4754,9,203,3,203,4756,8,203,3,203,4758,8,203,
		1,203,1,203,1,203,1,203,5,203,4764,8,203,10,203,12,203,4767,9,203,3,203,
		4769,8,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,4777,8,203,1,203,
		1,203,1,203,3,203,4782,8,203,1,203,1,203,1,203,3,203,4787,8,203,5,203,
		4789,8,203,10,203,12,203,4792,9,203,1,203,1,203,1,203,3,203,4797,8,203,
		1,203,1,203,1,203,3,203,4802,8,203,5,203,4804,8,203,10,203,12,203,4807,
		9,203,1,203,1,203,1,203,3,203,4812,8,203,3,203,4814,8,203,1,204,1,204,
		1,204,1,204,1,204,1,204,1,204,5,204,4823,8,204,10,204,12,204,4826,9,204,
		3,204,4828,8,204,1,204,1,204,1,204,5,204,4833,8,204,10,204,12,204,4836,
		9,204,3,204,4838,8,204,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
		5,205,4848,8,205,10,205,12,205,4851,9,205,1,205,1,205,1,205,3,205,4856,
		8,205,1,206,1,206,1,206,1,206,1,206,5,206,4863,8,206,10,206,12,206,4866,
		9,206,1,207,1,207,1,207,1,207,5,207,4872,8,207,10,207,12,207,4875,9,207,
		1,207,1,207,3,207,4879,8,207,1,207,1,207,1,207,1,207,1,207,5,207,4886,
		8,207,10,207,12,207,4889,9,207,1,207,1,207,1,207,3,207,4894,8,207,1,207,
		1,207,1,207,1,207,1,207,1,207,1,207,5,207,4903,8,207,10,207,12,207,4906,
		9,207,1,207,1,207,1,207,1,207,5,207,4912,8,207,10,207,12,207,4915,9,207,
		1,207,1,207,1,207,3,207,4920,8,207,1,207,1,207,1,207,3,207,4925,8,207,
		5,207,4927,8,207,10,207,12,207,4930,9,207,3,207,4932,8,207,1,208,1,208,
		1,208,1,208,1,208,1,208,1,208,1,208,5,208,4942,8,208,10,208,12,208,4945,
		9,208,1,209,1,209,1,209,1,209,3,209,4951,8,209,1,209,1,209,1,209,3,209,
		4956,8,209,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
		1,211,1,211,1,211,3,211,4971,8,211,1,211,1,211,1,211,1,211,1,211,3,211,
		4978,8,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,4986,8,211,1,211,
		3,211,4989,8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,
		4999,8,212,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,5009,
		8,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,5019,8,214,
		1,215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,3,216,5029,8,216,1,217,
		1,217,3,217,5033,8,217,1,217,1,217,3,217,5037,8,217,1,217,1,217,1,217,
		1,217,1,217,1,217,1,217,1,217,3,217,5047,8,217,1,217,1,217,1,217,3,217,
		5052,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
		1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
		1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
		1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
		1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5110,
		8,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,3,218,5128,8,218,1,219,1,219,1,219,1,219,
		1,220,1,220,3,220,5136,8,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
		1,220,5,220,5146,8,220,10,220,12,220,5149,9,220,1,220,1,220,1,220,1,220,
		3,220,5155,8,220,3,220,5157,8,220,1,220,1,220,1,220,1,220,1,220,1,220,
		5,220,5165,8,220,10,220,12,220,5168,9,220,3,220,5170,8,220,1,221,1,221,
		1,221,1,221,5,221,5176,8,221,10,221,12,221,5179,9,221,1,222,1,222,1,222,
		1,222,3,222,5185,8,222,1,223,1,223,3,223,5189,8,223,1,223,1,223,1,223,
		1,224,1,224,3,224,5196,8,224,1,224,1,224,1,224,3,224,5201,8,224,1,224,
		3,224,5204,8,224,1,224,3,224,5207,8,224,1,225,1,225,1,225,1,225,1,225,
		1,225,1,225,3,225,5216,8,225,1,226,1,226,3,226,5220,8,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,227,1,227,1,228,
		1,228,1,228,1,228,1,229,1,229,1,229,1,229,1,229,3,229,5244,8,229,1,229,
		1,229,1,229,1,229,1,229,3,229,5251,8,229,5,229,5253,8,229,10,229,12,229,
		5256,9,229,1,229,1,229,1,229,1,229,3,229,5262,8,229,1,229,1,229,1,229,
		1,229,1,229,3,229,5269,8,229,1,229,3,229,5272,8,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,5,229,5286,8,229,
		10,229,12,229,5289,9,229,3,229,5291,8,229,1,230,1,230,1,230,1,230,1,230,
		1,230,1,230,1,230,3,230,5301,8,230,1,230,1,230,3,230,5305,8,230,1,230,
		1,230,1,230,1,230,3,230,5311,8,230,1,230,3,230,5314,8,230,1,230,1,230,
		1,230,3,230,5319,8,230,1,230,1,230,3,230,5323,8,230,1,230,1,230,1,230,
		1,230,1,230,3,230,5330,8,230,1,230,3,230,5333,8,230,1,230,1,230,1,230,
		1,230,3,230,5339,8,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,1,230,3,230,5363,8,230,1,230,3,230,5366,8,230,1,230,1,230,1,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5378,8,230,1,230,3,230,
		5381,8,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5391,
		8,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5399,8,230,1,230,1,230,
		3,230,5403,8,230,1,230,1,230,1,230,1,230,1,230,3,230,5410,8,230,1,230,
		3,230,5413,8,230,1,230,1,230,1,230,1,230,1,230,5,230,5420,8,230,10,230,
		12,230,5423,9,230,1,230,1,230,1,230,3,230,5428,8,230,1,230,1,230,1,230,
		1,230,3,230,5434,8,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		3,230,5444,8,230,3,230,5446,8,230,1,231,1,231,1,231,1,231,3,231,5452,8,
		231,1,231,3,231,5455,8,231,1,231,3,231,5458,8,231,1,232,1,232,1,232,1,
		232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5470,8,232,1,232,3,232,5473,
		8,232,1,233,1,233,1,233,1,233,3,233,5479,8,233,1,234,3,234,5482,8,234,
		1,234,1,234,1,234,1,234,1,234,1,234,3,234,5490,8,234,1,234,1,234,1,234,
		1,234,1,234,1,234,3,234,5498,8,234,1,235,1,235,1,235,1,235,3,235,5504,
		8,235,1,235,1,235,3,235,5508,8,235,1,236,1,236,1,236,1,236,1,236,1,236,
		1,236,1,236,1,236,1,236,1,236,1,236,3,236,5522,8,236,1,237,1,237,1,237,
		1,238,1,238,1,238,1,238,1,238,5,238,5532,8,238,10,238,12,238,5535,9,238,
		1,238,1,238,1,238,1,238,3,238,5541,8,238,1,238,3,238,5544,8,238,1,238,
		1,238,1,238,1,239,1,239,3,239,5551,8,239,1,239,1,239,1,239,5,239,5556,
		8,239,10,239,12,239,5559,9,239,1,240,1,240,3,240,5563,8,240,1,240,4,240,
		5566,8,240,11,240,12,240,5567,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
		5,241,5577,8,241,10,241,12,241,5580,9,241,1,242,1,242,1,242,1,242,1,243,
		1,243,1,244,1,244,3,244,5590,8,244,1,244,1,244,1,244,1,244,3,244,5596,
		8,244,1,245,1,245,1,245,3,245,5601,8,245,1,245,1,245,1,245,1,245,1,245,
		1,245,1,245,1,245,1,245,1,245,1,245,3,245,5614,8,245,3,245,5616,8,245,
		1,245,1,245,1,245,3,245,5621,8,245,1,245,1,245,3,245,5625,8,245,1,245,
		3,245,5628,8,245,3,245,5630,8,245,1,246,1,246,1,246,1,246,1,246,3,246,
		5637,8,246,1,247,1,247,1,247,1,247,1,247,3,247,5644,8,247,1,247,3,247,
		5647,8,247,1,247,3,247,5650,8,247,1,247,1,247,1,247,1,247,3,247,5656,8,
		247,1,247,1,247,3,247,5660,8,247,1,248,1,248,1,248,1,248,3,248,5666,8,
		248,1,249,1,249,1,249,1,249,3,249,5672,8,249,1,249,1,249,1,250,1,250,1,
		250,1,251,1,251,1,251,1,252,1,252,1,252,3,252,5685,8,252,1,252,1,252,1,
		252,3,252,5690,8,252,1,252,1,252,1,252,1,252,5,252,5696,8,252,10,252,12,
		252,5699,9,252,3,252,5701,8,252,1,253,1,253,1,253,3,253,5706,8,253,1,253,
		1,253,1,253,3,253,5711,8,253,1,253,1,253,1,253,1,253,5,253,5717,8,253,
		10,253,12,253,5720,9,253,3,253,5722,8,253,1,254,1,254,1,254,1,254,1,254,
		1,254,3,254,5730,8,254,1,255,1,255,3,255,5734,8,255,1,255,1,255,1,255,
		1,255,1,255,1,255,1,255,1,255,1,255,5,255,5745,8,255,10,255,12,255,5748,
		9,255,1,255,1,255,1,255,3,255,5753,8,255,1,255,1,255,1,255,1,255,1,255,
		1,255,1,255,1,255,5,255,5763,8,255,10,255,12,255,5766,9,255,3,255,5768,
		8,255,1,256,1,256,1,257,1,257,1,257,1,257,1,257,3,257,5777,8,257,1,257,
		1,257,1,257,3,257,5782,8,257,1,258,1,258,1,258,1,258,3,258,5788,8,258,
		1,259,1,259,1,260,1,260,1,260,3,260,5795,8,260,3,260,5797,8,260,1,260,
		1,260,1,260,3,260,5802,8,260,3,260,5804,8,260,1,261,1,261,3,261,5808,8,
		261,1,261,1,261,1,261,1,261,3,261,5814,8,261,1,261,3,261,5817,8,261,1,
		261,3,261,5820,8,261,1,262,1,262,1,263,1,263,1,264,1,264,1,264,1,264,3,
		264,5830,8,264,1,265,1,265,3,265,5834,8,265,1,266,1,266,1,267,1,267,1,
		267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		4,267,5852,8,267,11,267,12,267,5853,1,268,1,268,1,268,1,268,1,268,3,268,
		5861,8,268,3,268,5863,8,268,1,269,1,269,1,269,4,269,5868,8,269,11,269,
		12,269,5869,3,269,5872,8,269,1,270,1,270,3,270,5876,8,270,1,271,1,271,
		1,271,3,271,5881,8,271,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,
		1,272,3,272,5892,8,272,1,273,1,273,1,273,3,273,5897,8,273,1,274,1,274,
		1,275,1,275,3,275,5903,8,275,1,276,3,276,5906,8,276,1,276,1,276,3,276,
		5910,8,276,1,276,4,276,5913,8,276,11,276,12,276,5914,1,276,3,276,5918,
		8,276,1,276,1,276,3,276,5922,8,276,1,276,1,276,3,276,5926,8,276,3,276,
		5928,8,276,1,277,1,277,1,278,3,278,5933,8,278,1,278,1,278,1,279,3,279,
		5938,8,279,1,279,1,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,
		1,280,3,280,5951,8,280,1,280,3,280,5954,8,280,1,281,1,281,3,281,5958,8,
		281,1,281,3,281,5961,8,281,1,281,3,281,5964,8,281,1,281,1,281,1,281,3,
		281,5969,8,281,1,281,1,281,1,281,3,281,5974,8,281,1,281,1,281,1,281,3,
		281,5979,8,281,1,281,3,281,5982,8,281,1,281,1,281,1,281,3,281,5987,8,281,
		1,281,3,281,5990,8,281,1,281,1,281,1,281,1,281,3,281,5996,8,281,1,281,
		3,281,5999,8,281,1,281,1,281,3,281,6003,8,281,1,281,5,281,6006,8,281,10,
		281,12,281,6009,9,281,1,281,1,281,3,281,6013,8,281,1,281,5,281,6016,8,
		281,10,281,12,281,6019,9,281,1,281,1,281,3,281,6023,8,281,1,281,3,281,
		6026,8,281,1,281,5,281,6029,8,281,10,281,12,281,6032,9,281,1,281,1,281,
		3,281,6036,8,281,1,281,5,281,6039,8,281,10,281,12,281,6042,9,281,1,281,
		1,281,1,281,3,281,6047,8,281,1,281,1,281,1,281,3,281,6052,8,281,1,281,
		1,281,1,281,3,281,6057,8,281,1,281,1,281,1,281,3,281,6062,8,281,1,281,
		3,281,6065,8,281,1,281,1,281,1,281,3,281,6070,8,281,1,281,1,281,3,281,
		6074,8,281,1,281,1,281,3,281,6078,8,281,1,282,1,282,1,282,1,282,5,282,
		6084,8,282,10,282,12,282,6087,9,282,1,282,1,282,1,283,1,283,3,283,6093,
		8,283,1,283,1,283,3,283,6097,8,283,1,283,1,283,1,283,3,283,6102,8,283,
		1,283,1,283,1,283,3,283,6107,8,283,1,283,1,283,3,283,6111,8,283,3,283,
		6113,8,283,1,283,3,283,6116,8,283,1,284,1,284,1,284,1,284,1,285,1,285,
		1,285,1,285,1,285,1,285,1,286,1,286,1,286,1,286,3,286,6132,8,286,1,286,
		1,286,1,287,1,287,1,287,5,287,6139,8,287,10,287,12,287,6142,9,287,1,288,
		1,288,1,288,5,288,6147,8,288,10,288,12,288,6150,9,288,1,289,1,289,1,289,
		1,289,5,289,6156,8,289,10,289,12,289,6159,9,289,1,289,1,289,1,290,1,290,
		1,290,5,290,6166,8,290,10,290,12,290,6169,9,290,1,291,1,291,1,291,5,291,
		6174,8,291,10,291,12,291,6177,9,291,1,292,1,292,1,292,5,292,6182,8,292,
		10,292,12,292,6185,9,292,1,293,1,293,1,293,5,293,6190,8,293,10,293,12,
		293,6193,9,293,1,294,1,294,1,294,5,294,6198,8,294,10,294,12,294,6201,9,
		294,1,295,1,295,3,295,6205,8,295,1,295,1,295,1,295,1,295,1,295,1,295,3,
		295,6213,8,295,1,295,1,295,1,295,3,295,6218,8,295,1,296,1,296,1,296,3,
		296,6223,8,296,1,296,3,296,6226,8,296,1,296,1,296,1,296,3,296,6231,8,296,
		1,296,3,296,6234,8,296,1,297,1,297,3,297,6238,8,297,1,298,1,298,1,298,
		1,299,1,299,1,299,1,299,1,300,1,300,1,300,1,300,1,300,1,300,3,300,6253,
		8,300,1,300,1,300,1,300,1,300,1,300,3,300,6260,8,300,1,300,1,300,1,300,
		3,300,6265,8,300,1,301,1,301,1,301,3,301,6270,8,301,1,301,1,301,1,301,
		1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		1,301,1,301,4,301,6301,8,301,11,301,12,301,6302,1,301,1,301,3,301,6307,
		8,301,1,301,1,301,1,301,1,301,4,301,6313,8,301,11,301,12,301,6314,1,301,
		1,301,3,301,6319,8,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,
		6328,8,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,6336,8,301,1,301,
		1,301,1,301,3,301,6341,8,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,
		6349,8,301,1,301,1,301,1,301,3,301,6354,8,301,1,301,1,301,1,301,3,301,
		6359,8,301,3,301,6361,8,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		3,301,6370,8,301,1,301,1,301,1,301,3,301,6375,8,301,1,301,1,301,1,301,
		1,301,1,301,1,301,3,301,6383,8,301,1,301,1,301,1,301,3,301,6388,8,301,
		1,301,1,301,1,301,1,301,1,301,1,301,3,301,6396,8,301,1,301,1,301,1,301,
		1,301,1,301,1,301,3,301,6404,8,301,1,301,3,301,6407,8,301,1,301,1,301,
		1,301,1,301,1,301,1,301,1,301,1,301,3,301,6417,8,301,1,301,1,301,1,301,
		1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		1,301,3,301,6435,8,301,1,301,1,301,1,301,1,301,3,301,6441,8,301,1,301,
		1,301,3,301,6445,8,301,1,301,1,301,1,301,1,301,3,301,6451,8,301,1,301,
		1,301,3,301,6455,8,301,1,301,1,301,3,301,6459,8,301,1,302,1,302,1,302,
		1,302,1,302,1,303,1,303,1,303,1,303,5,303,6470,8,303,10,303,12,303,6473,
		9,303,1,303,1,303,1,303,1,303,1,303,3,303,6480,8,303,1,304,1,304,3,304,
		6484,8,304,1,305,1,305,1,305,3,305,6489,8,305,1,305,1,305,1,305,3,305,
		6494,8,305,1,305,1,305,1,305,1,305,3,305,6500,8,305,1,305,1,305,1,305,
		3,305,6505,8,305,1,305,1,305,3,305,6509,8,305,1,305,1,305,1,305,3,305,
		6514,8,305,1,305,1,305,1,305,3,305,6519,8,305,1,305,1,305,1,305,3,305,
		6524,8,305,1,305,1,305,1,305,1,305,1,305,1,305,5,305,6532,8,305,10,305,
		12,305,6535,9,305,3,305,6537,8,305,1,305,1,305,3,305,6541,8,305,1,305,
		1,305,3,305,6545,8,305,1,306,1,306,1,306,1,306,1,306,3,306,6552,8,306,
		1,306,1,306,3,306,6556,8,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,
		1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,
		1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,6585,8,306,1,307,
		1,307,1,307,3,307,6590,8,307,1,307,1,307,3,307,6594,8,307,1,308,3,308,
		6597,8,308,1,308,3,308,6600,8,308,1,308,3,308,6603,8,308,1,308,3,308,6606,
		8,308,1,309,1,309,1,310,1,310,1,310,1,311,1,311,1,312,1,312,3,312,6617,
		8,312,1,313,1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,314,1,314,1,314,
		1,314,3,314,6631,8,314,1,315,1,315,1,315,1,315,1,315,5,315,6638,8,315,
		10,315,12,315,6641,9,315,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
		1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
		1,316,1,316,1,316,3,316,6666,8,316,1,317,1,317,1,317,1,317,1,317,1,318,
		1,318,1,318,1,318,3,318,6677,8,318,1,318,1,318,1,318,1,318,1,318,3,318,
		6684,8,318,5,318,6686,8,318,10,318,12,318,6689,9,318,1,319,1,319,1,319,
		1,319,3,319,6695,8,319,1,320,1,320,1,320,1,320,1,320,1,320,3,320,6703,
		8,320,1,320,1,320,1,320,3,320,6708,8,320,1,320,1,320,1,320,1,320,5,320,
		6714,8,320,10,320,12,320,6717,9,320,1,321,1,321,1,321,3,321,6722,8,321,
		1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,6732,8,321,1,321,
		1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,6745,
		8,321,1,321,1,321,1,321,1,321,3,321,6751,8,321,1,321,1,321,1,321,1,321,
		3,321,6757,8,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,
		1,321,1,321,1,321,1,321,1,321,3,321,6773,8,321,1,321,1,321,1,321,1,321,
		3,321,6779,8,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,5,321,6788,
		8,321,10,321,12,321,6791,9,321,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
		1,322,1,322,1,322,1,322,1,322,1,322,1,322,5,322,6807,8,322,10,322,12,322,
		6810,9,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,4,322,6819,8,322,
		11,322,12,322,6820,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
		1,322,1,322,1,322,1,322,1,322,1,322,3,322,6838,8,322,1,322,1,322,1,322,
		1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
		5,322,6855,8,322,10,322,12,322,6858,9,322,1,323,1,323,1,324,1,324,1,324,
		1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,3,324,
		6876,8,324,1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6885,8,325,
		1,326,1,326,1,326,1,326,1,326,1,326,1,326,3,326,6894,8,326,1,327,1,327,
		1,328,1,328,1,328,1,328,1,328,3,328,6903,8,328,1,329,1,329,1,330,1,330,
		1,331,1,331,1,332,1,332,1,333,1,333,1,334,1,334,1,335,1,335,1,335,0,3,
		640,642,644,336,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
		198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
		234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
		270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
		306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
		342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
		378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
		414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
		450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
		486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,
		522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,
		558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,
		594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,
		630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
		666,668,670,0,138,2,0,37,37,144,144,2,0,509,509,515,515,3,0,66,66,151,
		151,172,172,5,0,40,40,372,372,436,436,440,440,504,504,4,0,40,40,404,404,
		507,507,583,583,2,0,496,496,1111,1111,2,0,75,75,135,135,2,0,14,14,322,
		322,3,0,42,42,82,82,175,175,2,0,418,418,533,533,3,0,488,488,622,622,630,
		630,2,0,379,379,442,442,2,0,340,340,456,456,3,0,338,338,427,427,576,576,
		2,0,441,441,645,645,2,0,503,503,655,655,3,0,77,77,81,81,119,119,3,0,40,
		40,389,389,415,415,3,0,40,40,385,385,757,757,2,0,609,609,644,644,2,0,78,
		78,88,88,3,0,420,420,524,524,585,585,2,0,66,66,151,151,1,0,344,345,1,0,
		1101,1102,2,0,1111,1111,1119,1119,3,0,414,414,451,451,503,503,2,0,40,40,
		1101,1102,7,0,40,40,358,358,360,360,389,389,415,415,548,548,1119,1119,
		2,0,496,496,508,508,1,0,1102,1103,2,0,5,5,49,49,4,0,40,40,372,372,436,
		436,440,440,2,0,25,25,29,29,2,0,12,12,166,166,2,0,183,183,649,649,3,0,
		40,40,372,372,436,436,2,0,20,20,138,138,3,0,41,41,72,72,101,101,2,0,101,
		101,362,362,2,0,353,353,411,411,2,0,97,97,574,574,2,0,41,41,101,101,2,
		0,6,6,47,47,2,0,179,179,641,641,4,0,414,414,451,451,502,502,537,537,2,
		0,414,414,502,502,2,0,13,13,43,43,3,0,63,63,75,75,177,177,2,0,33,33,80,
		80,2,0,93,93,142,142,2,0,6,6,47,48,1,0,598,599,2,0,423,423,581,581,2,0,
		217,217,459,459,5,0,102,102,464,465,467,467,471,479,550,550,4,0,461,462,
		466,466,468,469,551,551,3,0,103,103,460,460,470,470,2,0,444,444,600,600,
		2,0,594,594,596,596,2,0,332,332,601,601,2,0,87,87,565,565,2,0,49,49,377,
		377,3,0,30,30,58,58,170,170,3,0,125,125,163,163,421,421,2,0,99,99,173,
		173,2,0,348,348,586,586,2,0,38,38,643,643,2,0,109,109,456,456,2,0,163,
		163,669,669,2,0,407,407,543,543,4,0,197,197,199,199,205,205,610,610,2,
		0,1071,1071,1087,1087,2,0,333,333,552,552,2,0,65,65,77,77,6,0,125,125,
		163,163,168,168,400,400,421,421,643,643,2,0,495,495,606,606,2,0,397,397,
		647,647,2,0,125,125,421,421,3,0,78,78,89,89,434,434,3,0,423,423,456,456,
		581,581,2,0,606,606,642,642,2,0,364,364,542,542,6,0,217,217,394,394,396,
		396,422,422,549,549,587,587,2,0,43,44,59,59,3,0,407,407,526,526,850,850,
		2,0,448,448,624,624,10,0,347,347,355,355,366,368,374,374,489,489,497,497,
		611,611,618,618,801,801,969,969,2,0,34,34,160,160,2,0,111,111,960,960,
		11,0,347,347,355,355,366,368,374,374,489,489,497,497,566,566,611,611,618,
		618,801,801,969,969,4,0,692,692,1111,1111,1119,1119,1121,1121,1,0,1123,
		1124,4,0,363,363,752,763,1111,1111,1119,1120,3,0,1101,1103,1112,1112,1114,
		1114,2,0,60,60,169,169,2,0,110,110,1115,1115,5,0,24,24,213,215,222,222,
		224,227,500,500,2,0,24,24,214,214,2,0,24,24,213,213,1,0,187,198,3,0,174,
		174,186,186,584,584,2,0,202,207,415,415,6,0,208,208,219,219,221,221,223,
		223,230,230,336,337,4,0,209,212,217,218,220,220,334,334,2,0,147,147,228,
		228,2,0,448,448,768,776,2,0,217,217,500,500,5,0,191,191,197,197,208,209,
		211,211,448,448,2,0,174,174,584,584,2,0,303,304,310,310,2,0,35,35,301,
		304,1,0,313,314,3,0,16,16,91,91,167,167,2,0,213,213,217,217,2,0,208,209,
		211,211,3,0,13,13,43,43,958,958,3,0,274,274,286,287,297,297,3,0,275,277,
		293,296,298,300,2,0,283,283,285,285,2,0,281,281,284,284,2,0,279,280,290,
		292,2,0,127,127,574,574,2,0,417,417,534,534,2,0,513,513,527,527,2,0,108,
		108,1090,1090,3,0,60,60,169,169,634,634,2,0,131,131,143,143,3,0,6,6,325,
		325,590,590,3,0,108,108,1083,1084,1090,1091,1,0,1080,1086,2,0,217,217,
		711,751,1,0,764,767,1,0,669,677,1,0,661,668,3,0,208,212,225,225,228,228,
		34,0,34,34,46,46,56,56,70,70,76,76,111,111,115,115,118,118,160,160,230,
		230,274,278,282,282,286,287,293,300,320,416,418,440,442,533,535,566,568,
		608,610,619,621,628,630,643,646,647,649,654,656,660,679,687,692,694,696,
		702,704,710,757,757,801,801,840,840,964,964,969,969,22,0,37,37,93,93,142,
		142,144,144,208,210,212,212,242,273,278,281,283,285,288,292,312,312,441,
		441,645,645,661,668,704,704,768,768,771,800,802,839,841,963,965,968,970,
		1070,1086,1086,8137,0,673,1,0,0,0,2,692,1,0,0,0,4,713,1,0,0,0,6,715,1,
		0,0,0,8,752,1,0,0,0,10,764,1,0,0,0,12,775,1,0,0,0,14,792,1,0,0,0,16,797,
		1,0,0,0,18,809,1,0,0,0,20,836,1,0,0,0,22,845,1,0,0,0,24,847,1,0,0,0,26,
		859,1,0,0,0,28,889,1,0,0,0,30,939,1,0,0,0,32,990,1,0,0,0,34,1016,1,0,0,
		0,36,1046,1,0,0,0,38,1155,1,0,0,0,40,1157,1,0,0,0,42,1175,1,0,0,0,44,1236,
		1,0,0,0,46,1259,1,0,0,0,48,1265,1,0,0,0,50,1287,1,0,0,0,52,1289,1,0,0,
		0,54,1291,1,0,0,0,56,1349,1,0,0,0,58,1356,1,0,0,0,60,1358,1,0,0,0,62,1402,
		1,0,0,0,64,1408,1,0,0,0,66,1410,1,0,0,0,68,1431,1,0,0,0,70,1438,1,0,0,
		0,72,1440,1,0,0,0,74,1473,1,0,0,0,76,1476,1,0,0,0,78,1481,1,0,0,0,80,1507,
		1,0,0,0,82,1523,1,0,0,0,84,1525,1,0,0,0,86,1541,1,0,0,0,88,1543,1,0,0,
		0,90,1603,1,0,0,0,92,1674,1,0,0,0,94,1676,1,0,0,0,96,1704,1,0,0,0,98,1712,
		1,0,0,0,100,1742,1,0,0,0,102,1889,1,0,0,0,104,1891,1,0,0,0,106,1893,1,
		0,0,0,108,1896,1,0,0,0,110,1970,1,0,0,0,112,1993,1,0,0,0,114,2141,1,0,
		0,0,116,2146,1,0,0,0,118,2148,1,0,0,0,120,2158,1,0,0,0,122,2214,1,0,0,
		0,124,2234,1,0,0,0,126,2236,1,0,0,0,128,2271,1,0,0,0,130,2280,1,0,0,0,
		132,2287,1,0,0,0,134,2310,1,0,0,0,136,2319,1,0,0,0,138,2334,1,0,0,0,140,
		2356,1,0,0,0,142,2376,1,0,0,0,144,2810,1,0,0,0,146,2812,1,0,0,0,148,2819,
		1,0,0,0,150,2826,1,0,0,0,152,2849,1,0,0,0,154,2857,1,0,0,0,156,2864,1,
		0,0,0,158,2871,1,0,0,0,160,2878,1,0,0,0,162,2890,1,0,0,0,164,2900,1,0,
		0,0,166,2907,1,0,0,0,168,2923,1,0,0,0,170,2933,1,0,0,0,172,2937,1,0,0,
		0,174,2943,1,0,0,0,176,2955,1,0,0,0,178,2957,1,0,0,0,180,2964,1,0,0,0,
		182,2966,1,0,0,0,184,3017,1,0,0,0,186,3091,1,0,0,0,188,3150,1,0,0,0,190,
		3238,1,0,0,0,192,3242,1,0,0,0,194,3262,1,0,0,0,196,3264,1,0,0,0,198,3272,
		1,0,0,0,200,3280,1,0,0,0,202,3282,1,0,0,0,204,3312,1,0,0,0,206,3367,1,
		0,0,0,208,3376,1,0,0,0,210,3396,1,0,0,0,212,3408,1,0,0,0,214,3412,1,0,
		0,0,216,3445,1,0,0,0,218,3466,1,0,0,0,220,3476,1,0,0,0,222,3480,1,0,0,
		0,224,3505,1,0,0,0,226,3547,1,0,0,0,228,3549,1,0,0,0,230,3564,1,0,0,0,
		232,3610,1,0,0,0,234,3620,1,0,0,0,236,3630,1,0,0,0,238,3690,1,0,0,0,240,
		3692,1,0,0,0,242,3718,1,0,0,0,244,3724,1,0,0,0,246,3740,1,0,0,0,248,3744,
		1,0,0,0,250,3782,1,0,0,0,252,3820,1,0,0,0,254,3834,1,0,0,0,256,3842,1,
		0,0,0,258,3846,1,0,0,0,260,3852,1,0,0,0,262,3866,1,0,0,0,264,3869,1,0,
		0,0,266,3887,1,0,0,0,268,3891,1,0,0,0,270,3907,1,0,0,0,272,3909,1,0,0,
		0,274,3921,1,0,0,0,276,3925,1,0,0,0,278,3942,1,0,0,0,280,3959,1,0,0,0,
		282,3962,1,0,0,0,284,3972,1,0,0,0,286,3976,1,0,0,0,288,3986,1,0,0,0,290,
		3989,1,0,0,0,292,3994,1,0,0,0,294,4014,1,0,0,0,296,4016,1,0,0,0,298,4033,
		1,0,0,0,300,4042,1,0,0,0,302,4051,1,0,0,0,304,4053,1,0,0,0,306,4067,1,
		0,0,0,308,4078,1,0,0,0,310,4087,1,0,0,0,312,4090,1,0,0,0,314,4098,1,0,
		0,0,316,4123,1,0,0,0,318,4135,1,0,0,0,320,4138,1,0,0,0,322,4170,1,0,0,
		0,324,4172,1,0,0,0,326,4174,1,0,0,0,328,4176,1,0,0,0,330,4178,1,0,0,0,
		332,4231,1,0,0,0,334,4233,1,0,0,0,336,4239,1,0,0,0,338,4259,1,0,0,0,340,
		4273,1,0,0,0,342,4284,1,0,0,0,344,4286,1,0,0,0,346,4292,1,0,0,0,348,4302,
		1,0,0,0,350,4306,1,0,0,0,352,4313,1,0,0,0,354,4317,1,0,0,0,356,4323,1,
		0,0,0,358,4330,1,0,0,0,360,4336,1,0,0,0,362,4342,1,0,0,0,364,4347,1,0,
		0,0,366,4394,1,0,0,0,368,4415,1,0,0,0,370,4440,1,0,0,0,372,4443,1,0,0,
		0,374,4449,1,0,0,0,376,4465,1,0,0,0,378,4480,1,0,0,0,380,4486,1,0,0,0,
		382,4516,1,0,0,0,384,4518,1,0,0,0,386,4525,1,0,0,0,388,4537,1,0,0,0,390,
		4543,1,0,0,0,392,4568,1,0,0,0,394,4572,1,0,0,0,396,4576,1,0,0,0,398,4587,
		1,0,0,0,400,4649,1,0,0,0,402,4705,1,0,0,0,404,4707,1,0,0,0,406,4813,1,
		0,0,0,408,4837,1,0,0,0,410,4839,1,0,0,0,412,4857,1,0,0,0,414,4931,1,0,
		0,0,416,4933,1,0,0,0,418,4946,1,0,0,0,420,4957,1,0,0,0,422,4988,1,0,0,
		0,424,4998,1,0,0,0,426,5008,1,0,0,0,428,5010,1,0,0,0,430,5020,1,0,0,0,
		432,5023,1,0,0,0,434,5109,1,0,0,0,436,5127,1,0,0,0,438,5129,1,0,0,0,440,
		5133,1,0,0,0,442,5171,1,0,0,0,444,5180,1,0,0,0,446,5186,1,0,0,0,448,5193,
		1,0,0,0,450,5215,1,0,0,0,452,5217,1,0,0,0,454,5228,1,0,0,0,456,5234,1,
		0,0,0,458,5290,1,0,0,0,460,5445,1,0,0,0,462,5457,1,0,0,0,464,5472,1,0,
		0,0,466,5478,1,0,0,0,468,5497,1,0,0,0,470,5507,1,0,0,0,472,5521,1,0,0,
		0,474,5523,1,0,0,0,476,5526,1,0,0,0,478,5548,1,0,0,0,480,5560,1,0,0,0,
		482,5569,1,0,0,0,484,5581,1,0,0,0,486,5585,1,0,0,0,488,5587,1,0,0,0,490,
		5629,1,0,0,0,492,5636,1,0,0,0,494,5638,1,0,0,0,496,5661,1,0,0,0,498,5667,
		1,0,0,0,500,5675,1,0,0,0,502,5678,1,0,0,0,504,5681,1,0,0,0,506,5702,1,
		0,0,0,508,5723,1,0,0,0,510,5731,1,0,0,0,512,5769,1,0,0,0,514,5781,1,0,
		0,0,516,5783,1,0,0,0,518,5789,1,0,0,0,520,5803,1,0,0,0,522,5816,1,0,0,
		0,524,5821,1,0,0,0,526,5823,1,0,0,0,528,5829,1,0,0,0,530,5833,1,0,0,0,
		532,5835,1,0,0,0,534,5837,1,0,0,0,536,5855,1,0,0,0,538,5871,1,0,0,0,540,
		5875,1,0,0,0,542,5880,1,0,0,0,544,5891,1,0,0,0,546,5896,1,0,0,0,548,5898,
		1,0,0,0,550,5902,1,0,0,0,552,5927,1,0,0,0,554,5929,1,0,0,0,556,5932,1,
		0,0,0,558,5937,1,0,0,0,560,5953,1,0,0,0,562,6077,1,0,0,0,564,6079,1,0,
		0,0,566,6112,1,0,0,0,568,6117,1,0,0,0,570,6121,1,0,0,0,572,6127,1,0,0,
		0,574,6135,1,0,0,0,576,6143,1,0,0,0,578,6151,1,0,0,0,580,6162,1,0,0,0,
		582,6170,1,0,0,0,584,6178,1,0,0,0,586,6186,1,0,0,0,588,6194,1,0,0,0,590,
		6212,1,0,0,0,592,6233,1,0,0,0,594,6237,1,0,0,0,596,6239,1,0,0,0,598,6242,
		1,0,0,0,600,6264,1,0,0,0,602,6458,1,0,0,0,604,6460,1,0,0,0,606,6479,1,
		0,0,0,608,6481,1,0,0,0,610,6544,1,0,0,0,612,6584,1,0,0,0,614,6586,1,0,
		0,0,616,6596,1,0,0,0,618,6607,1,0,0,0,620,6609,1,0,0,0,622,6612,1,0,0,
		0,624,6616,1,0,0,0,626,6618,1,0,0,0,628,6630,1,0,0,0,630,6632,1,0,0,0,
		632,6665,1,0,0,0,634,6667,1,0,0,0,636,6676,1,0,0,0,638,6694,1,0,0,0,640,
		6707,1,0,0,0,642,6718,1,0,0,0,644,6837,1,0,0,0,646,6859,1,0,0,0,648,6875,
		1,0,0,0,650,6884,1,0,0,0,652,6893,1,0,0,0,654,6895,1,0,0,0,656,6902,1,
		0,0,0,658,6904,1,0,0,0,660,6906,1,0,0,0,662,6908,1,0,0,0,664,6910,1,0,
		0,0,666,6912,1,0,0,0,668,6914,1,0,0,0,670,6916,1,0,0,0,672,674,3,2,1,0,
		673,672,1,0,0,0,673,674,1,0,0,0,674,677,1,0,0,0,675,676,5,1084,0,0,676,
		678,5,1084,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,
		5,0,0,1,680,1,1,0,0,0,681,684,3,4,2,0,682,683,5,1084,0,0,683,685,5,1084,
		0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,688,5,1099,0,0,
		687,686,1,0,0,0,687,688,1,0,0,0,688,691,1,0,0,0,689,691,3,6,3,0,690,681,
		1,0,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,
		0,693,704,1,0,0,0,694,692,1,0,0,0,695,701,3,4,2,0,696,697,5,1084,0,0,697,
		699,5,1084,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,
		5,1099,0,0,701,698,1,0,0,0,701,702,1,0,0,0,702,705,1,0,0,0,703,705,3,6,
		3,0,704,695,1,0,0,0,704,703,1,0,0,0,705,3,1,0,0,0,706,714,3,8,4,0,707,
		714,3,10,5,0,708,714,3,12,6,0,709,714,3,14,7,0,710,714,3,16,8,0,711,714,
		3,20,10,0,712,714,3,22,11,0,713,706,1,0,0,0,713,707,1,0,0,0,713,708,1,
		0,0,0,713,709,1,0,0,0,713,710,1,0,0,0,713,711,1,0,0,0,713,712,1,0,0,0,
		714,5,1,0,0,0,715,716,5,1099,0,0,716,7,1,0,0,0,717,753,3,24,12,0,718,753,
		3,26,13,0,719,753,3,28,14,0,720,753,3,30,15,0,721,753,3,32,16,0,722,753,
		3,34,17,0,723,753,3,36,18,0,724,753,3,38,19,0,725,753,3,40,20,0,726,753,
		3,42,21,0,727,753,3,44,22,0,728,753,3,54,27,0,729,753,3,124,62,0,730,753,
		3,126,63,0,731,753,3,128,64,0,732,753,3,130,65,0,733,753,3,132,66,0,734,
		753,3,134,67,0,735,753,3,136,68,0,736,753,3,138,69,0,737,753,3,140,70,
		0,738,753,3,142,71,0,739,753,3,146,73,0,740,753,3,148,74,0,741,753,3,150,
		75,0,742,753,3,152,76,0,743,753,3,154,77,0,744,753,3,156,78,0,745,753,
		3,158,79,0,746,753,3,160,80,0,747,753,3,162,81,0,748,753,3,164,82,0,749,
		753,3,166,83,0,750,753,3,168,84,0,751,753,3,172,86,0,752,717,1,0,0,0,752,
		718,1,0,0,0,752,719,1,0,0,0,752,720,1,0,0,0,752,721,1,0,0,0,752,722,1,
		0,0,0,752,723,1,0,0,0,752,724,1,0,0,0,752,725,1,0,0,0,752,726,1,0,0,0,
		752,727,1,0,0,0,752,728,1,0,0,0,752,729,1,0,0,0,752,730,1,0,0,0,752,731,
		1,0,0,0,752,732,1,0,0,0,752,733,1,0,0,0,752,734,1,0,0,0,752,735,1,0,0,
		0,752,736,1,0,0,0,752,737,1,0,0,0,752,738,1,0,0,0,752,739,1,0,0,0,752,
		740,1,0,0,0,752,741,1,0,0,0,752,742,1,0,0,0,752,743,1,0,0,0,752,744,1,
		0,0,0,752,745,1,0,0,0,752,746,1,0,0,0,752,747,1,0,0,0,752,748,1,0,0,0,
		752,749,1,0,0,0,752,750,1,0,0,0,752,751,1,0,0,0,753,9,1,0,0,0,754,765,
		3,190,95,0,755,765,3,182,91,0,756,765,3,192,96,0,757,765,3,176,88,0,758,
		765,3,188,94,0,759,765,3,174,87,0,760,765,3,184,92,0,761,765,3,186,93,
		0,762,765,3,178,89,0,763,765,3,180,90,0,764,754,1,0,0,0,764,755,1,0,0,
		0,764,756,1,0,0,0,764,757,1,0,0,0,764,758,1,0,0,0,764,759,1,0,0,0,764,
		760,1,0,0,0,764,761,1,0,0,0,764,762,1,0,0,0,764,763,1,0,0,0,765,11,1,0,
		0,0,766,776,3,272,136,0,767,776,3,274,137,0,768,776,3,276,138,0,769,776,
		3,278,139,0,770,776,3,280,140,0,771,776,3,282,141,0,772,776,3,284,142,
		0,773,776,3,286,143,0,774,776,3,288,144,0,775,766,1,0,0,0,775,767,1,0,
		0,0,775,768,1,0,0,0,775,769,1,0,0,0,775,770,1,0,0,0,775,771,1,0,0,0,775,
		772,1,0,0,0,775,773,1,0,0,0,775,774,1,0,0,0,776,13,1,0,0,0,777,793,3,304,
		152,0,778,793,3,306,153,0,779,793,3,308,154,0,780,793,3,310,155,0,781,
		793,3,312,156,0,782,793,3,314,157,0,783,793,3,316,158,0,784,793,3,318,
		159,0,785,793,3,320,160,0,786,793,3,344,172,0,787,793,3,346,173,0,788,
		793,3,348,174,0,789,793,3,350,175,0,790,793,3,352,176,0,791,793,3,354,
		177,0,792,777,1,0,0,0,792,778,1,0,0,0,792,779,1,0,0,0,792,780,1,0,0,0,
		792,781,1,0,0,0,792,782,1,0,0,0,792,783,1,0,0,0,792,784,1,0,0,0,792,785,
		1,0,0,0,792,786,1,0,0,0,792,787,1,0,0,0,792,788,1,0,0,0,792,789,1,0,0,
		0,792,790,1,0,0,0,792,791,1,0,0,0,793,15,1,0,0,0,794,798,3,356,178,0,795,
		798,3,358,179,0,796,798,3,360,180,0,797,794,1,0,0,0,797,795,1,0,0,0,797,
		796,1,0,0,0,798,17,1,0,0,0,799,810,3,364,182,0,800,810,3,366,183,0,801,
		810,3,368,184,0,802,810,3,372,186,0,803,810,3,374,187,0,804,810,3,376,
		188,0,805,810,3,380,190,0,806,810,3,370,185,0,807,810,3,378,189,0,808,
		810,3,382,191,0,809,799,1,0,0,0,809,800,1,0,0,0,809,801,1,0,0,0,809,802,
		1,0,0,0,809,803,1,0,0,0,809,804,1,0,0,0,809,805,1,0,0,0,809,806,1,0,0,
		0,809,807,1,0,0,0,809,808,1,0,0,0,810,19,1,0,0,0,811,837,3,400,200,0,812,
		837,3,402,201,0,813,837,3,404,202,0,814,837,3,406,203,0,815,837,3,410,
		205,0,816,837,3,412,206,0,817,837,3,414,207,0,818,837,3,416,208,0,819,
		837,3,440,220,0,820,837,3,442,221,0,821,837,3,444,222,0,822,837,3,446,
		223,0,823,837,3,448,224,0,824,837,3,452,226,0,825,837,3,454,227,0,826,
		837,3,456,228,0,827,837,3,458,229,0,828,837,3,460,230,0,829,837,3,474,
		237,0,830,837,3,476,238,0,831,837,3,478,239,0,832,837,3,480,240,0,833,
		837,3,482,241,0,834,837,3,484,242,0,835,837,3,486,243,0,836,811,1,0,0,
		0,836,812,1,0,0,0,836,813,1,0,0,0,836,814,1,0,0,0,836,815,1,0,0,0,836,
		816,1,0,0,0,836,817,1,0,0,0,836,818,1,0,0,0,836,819,1,0,0,0,836,820,1,
		0,0,0,836,821,1,0,0,0,836,822,1,0,0,0,836,823,1,0,0,0,836,824,1,0,0,0,
		836,825,1,0,0,0,836,826,1,0,0,0,836,827,1,0,0,0,836,828,1,0,0,0,836,829,
		1,0,0,0,836,830,1,0,0,0,836,831,1,0,0,0,836,832,1,0,0,0,836,833,1,0,0,
		0,836,834,1,0,0,0,836,835,1,0,0,0,837,21,1,0,0,0,838,846,3,496,248,0,839,
		846,3,498,249,0,840,846,3,500,250,0,841,846,3,502,251,0,842,846,3,504,
		252,0,843,846,3,506,253,0,844,846,3,510,255,0,845,838,1,0,0,0,845,839,
		1,0,0,0,845,840,1,0,0,0,845,841,1,0,0,0,845,842,1,0,0,0,845,843,1,0,0,
		0,845,844,1,0,0,0,846,23,1,0,0,0,847,848,5,32,0,0,848,850,7,0,0,0,849,
		851,3,598,299,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,856,
		3,542,271,0,853,855,3,56,28,0,854,853,1,0,0,0,855,858,1,0,0,0,856,854,
		1,0,0,0,856,857,1,0,0,0,857,25,1,0,0,0,858,856,1,0,0,0,859,861,5,32,0,
		0,860,862,3,60,30,0,861,860,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,
		865,5,400,0,0,864,866,3,598,299,0,865,864,1,0,0,0,865,866,1,0,0,0,866,
		867,1,0,0,0,867,868,3,516,258,0,868,869,5,112,0,0,869,870,5,578,0,0,870,
		877,3,62,31,0,871,872,5,112,0,0,872,874,5,359,0,0,873,875,5,108,0,0,874,
		873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,878,5,536,0,0,877,871,
		1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,881,3,70,35,0,880,879,1,0,
		0,0,880,881,1,0,0,0,881,884,1,0,0,0,882,883,5,356,0,0,883,885,5,1111,0,
		0,884,882,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,887,5,386,0,0,887,
		888,3,362,181,0,888,27,1,0,0,0,889,892,5,32,0,0,890,891,5,117,0,0,891,
		893,5,135,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,896,
		7,1,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,7,2,0,
		0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,904,5,78,0,0,901,
		902,5,74,0,0,902,903,5,108,0,0,903,905,5,57,0,0,904,901,1,0,0,0,904,905,
		1,0,0,0,905,906,1,0,0,0,906,908,3,542,271,0,907,909,3,72,36,0,908,907,
		1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,911,5,112,0,0,911,912,3,518,
		259,0,912,916,3,578,289,0,913,914,5,646,0,0,914,917,3,548,274,0,915,917,
		5,505,0,0,916,913,1,0,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,921,1,0,
		0,0,918,920,3,74,37,0,919,918,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,
		921,922,1,0,0,0,922,936,1,0,0,0,923,921,1,0,0,0,924,926,5,324,0,0,925,
		927,5,1087,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,935,
		7,3,0,0,929,931,5,99,0,0,930,932,5,1087,0,0,931,930,1,0,0,0,931,932,1,
		0,0,0,932,933,1,0,0,0,933,935,7,4,0,0,934,924,1,0,0,0,934,929,1,0,0,0,
		935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,29,1,0,0,0,938,936,
		1,0,0,0,939,940,5,32,0,0,940,941,5,457,0,0,941,942,5,70,0,0,942,943,3,
		542,271,0,943,944,5,5,0,0,944,945,5,631,0,0,945,951,5,1111,0,0,946,948,
		5,435,0,0,947,949,5,1087,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,
		0,0,0,950,952,3,550,275,0,951,946,1,0,0,0,951,952,1,0,0,0,952,958,1,0,
		0,0,953,955,5,632,0,0,954,956,5,1087,0,0,955,954,1,0,0,0,955,956,1,0,0,
		0,956,957,1,0,0,0,957,959,3,550,275,0,958,953,1,0,0,0,958,959,1,0,0,0,
		959,965,1,0,0,0,960,962,5,547,0,0,961,963,5,1087,0,0,962,961,1,0,0,0,962,
		963,1,0,0,0,963,964,1,0,0,0,964,966,3,550,275,0,965,960,1,0,0,0,965,966,
		1,0,0,0,966,972,1,0,0,0,967,969,5,506,0,0,968,970,5,1087,0,0,969,968,1,
		0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,973,3,542,271,0,972,967,1,0,
		0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,976,5,646,0,0,975,974,1,0,0,0,
		975,976,1,0,0,0,976,982,1,0,0,0,977,979,5,356,0,0,978,980,5,1087,0,0,979,
		978,1,0,0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,983,5,1111,0,0,982,977,
		1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,986,5,394,0,0,985,987,5,1087,
		0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,3,532,266,
		0,989,31,1,0,0,0,990,992,5,32,0,0,991,993,3,60,30,0,992,991,1,0,0,0,992,
		993,1,0,0,0,993,994,1,0,0,0,994,995,5,125,0,0,995,996,3,516,258,0,996,
		998,5,1096,0,0,997,999,3,76,38,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1004,
		1,0,0,0,1000,1001,5,1098,0,0,1001,1003,3,76,38,0,1002,1000,1,0,0,0,1003,
		1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,0,1006,
		1004,1,0,0,0,1007,1011,5,1097,0,0,1008,1010,3,80,40,0,1009,1008,1,0,0,
		0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,
		0,0,1013,1011,1,0,0,0,1014,1015,3,362,181,0,1015,33,1,0,0,0,1016,1018,
		5,32,0,0,1017,1019,3,60,30,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,
		1020,1,0,0,0,1020,1021,5,421,0,0,1021,1022,3,516,258,0,1022,1024,5,1096,
		0,0,1023,1025,3,78,39,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1030,
		1,0,0,0,1026,1027,5,1098,0,0,1027,1029,3,78,39,0,1028,1026,1,0,0,0,1029,
		1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,
		1030,1,0,0,0,1033,1034,5,1097,0,0,1034,1035,5,568,0,0,1035,1039,3,562,
		281,0,1036,1038,3,80,40,0,1037,1036,1,0,0,0,1038,1041,1,0,0,0,1039,1037,
		1,0,0,0,1039,1040,1,0,0,0,1040,1044,1,0,0,0,1041,1039,1,0,0,0,1042,1045,
		3,362,181,0,1043,1045,3,378,189,0,1044,1042,1,0,0,0,1044,1043,1,0,0,0,
		1045,35,1,0,0,0,1046,1047,5,32,0,0,1047,1048,5,580,0,0,1048,1049,3,542,
		271,0,1049,1050,5,64,0,0,1050,1051,5,375,0,0,1051,1052,5,651,0,0,1052,
		1053,7,5,0,0,1053,1054,5,519,0,0,1054,1055,5,1096,0,0,1055,1060,3,82,41,
		0,1056,1057,5,1098,0,0,1057,1059,3,82,41,0,1058,1056,1,0,0,0,1059,1062,
		1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1060,
		1,0,0,0,1063,1064,5,1097,0,0,1064,37,1,0,0,0,1065,1068,5,32,0,0,1066,1067,
		5,117,0,0,1067,1069,5,135,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,
		1071,1,0,0,0,1070,1072,5,621,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,
		1073,1,0,0,0,1073,1075,5,163,0,0,1074,1076,3,598,299,0,1075,1074,1,0,0,
		0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1085,3,518,259,0,1078,1079,
		5,94,0,0,1079,1086,3,518,259,0,1080,1081,5,1096,0,0,1081,1082,5,94,0,0,
		1082,1083,3,518,259,0,1083,1084,5,1097,0,0,1084,1086,1,0,0,0,1085,1078,
		1,0,0,0,1085,1080,1,0,0,0,1086,1156,1,0,0,0,1087,1090,5,32,0,0,1088,1089,
		5,117,0,0,1089,1091,5,135,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,
		1093,1,0,0,0,1092,1094,5,621,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,
		1095,1,0,0,0,1095,1097,5,163,0,0,1096,1098,3,598,299,0,1097,1096,1,0,0,
		0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,1101,3,518,259,0,1100,1102,
		3,84,42,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1113,1,0,0,0,1103,1110,
		3,102,51,0,1104,1106,5,1098,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,
		1107,1,0,0,0,1107,1109,3,102,51,0,1108,1105,1,0,0,0,1109,1112,1,0,0,0,
		1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,
		0,1113,1103,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,1117,3,108,
		54,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,0,0,1118,1120,7,
		6,0,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1122,1,0,0,0,1121,1123,
		5,12,0,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
		3,190,95,0,1125,1156,1,0,0,0,1126,1129,5,32,0,0,1127,1128,5,117,0,0,1128,
		1130,5,135,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,
		1133,5,621,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,
		1136,5,163,0,0,1135,1137,3,598,299,0,1136,1135,1,0,0,0,1136,1137,1,0,0,
		0,1137,1138,1,0,0,0,1138,1139,3,518,259,0,1139,1150,3,84,42,0,1140,1147,
		3,102,51,0,1141,1143,5,1098,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
		1144,1,0,0,0,1144,1146,3,102,51,0,1145,1142,1,0,0,0,1146,1149,1,0,0,0,
		1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,
		0,1150,1140,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,0,0,0,1152,1154,3,108,
		54,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1156,1,0,0,0,1155,1065,1,
		0,0,0,1155,1087,1,0,0,0,1155,1126,1,0,0,0,1156,39,1,0,0,0,1157,1158,5,
		32,0,0,1158,1159,5,619,0,0,1159,1160,3,542,271,0,1160,1161,5,5,0,0,1161,
		1162,5,376,0,0,1162,1166,5,1111,0,0,1163,1164,5,412,0,0,1164,1165,5,1087,
		0,0,1165,1167,3,550,275,0,1166,1163,1,0,0,0,1166,1167,1,0,0,0,1167,1173,
		1,0,0,0,1168,1170,5,394,0,0,1169,1171,5,1087,0,0,1170,1169,1,0,0,0,1170,
		1171,1,0,0,0,1171,1172,1,0,0,0,1172,1174,3,532,266,0,1173,1168,1,0,0,0,
		1173,1174,1,0,0,0,1174,41,1,0,0,0,1175,1176,5,32,0,0,1176,1177,5,619,0,
		0,1177,1178,3,542,271,0,1178,1179,5,5,0,0,1179,1180,5,376,0,0,1180,1181,
		5,1111,0,0,1181,1182,5,177,0,0,1182,1183,5,457,0,0,1183,1184,5,70,0,0,
		1184,1190,3,542,271,0,1185,1187,5,408,0,0,1186,1188,5,1087,0,0,1187,1186,
		1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,3,550,275,0,1190,
		1185,1,0,0,0,1190,1191,1,0,0,0,1191,1197,1,0,0,0,1192,1194,5,435,0,0,1193,
		1195,5,1087,0,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,
		1196,1198,3,550,275,0,1197,1192,1,0,0,0,1197,1198,1,0,0,0,1198,1204,1,
		0,0,0,1199,1201,5,329,0,0,1200,1202,5,1087,0,0,1201,1200,1,0,0,0,1201,
		1202,1,0,0,0,1202,1203,1,0,0,0,1203,1205,3,550,275,0,1204,1199,1,0,0,0,
		1204,1205,1,0,0,0,1205,1211,1,0,0,0,1206,1208,5,483,0,0,1207,1209,5,1087,
		0,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1212,3,
		550,275,0,1211,1206,1,0,0,0,1211,1212,1,0,0,0,1212,1218,1,0,0,0,1213,1215,
		5,506,0,0,1214,1216,5,1087,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,
		1217,1,0,0,0,1217,1219,3,542,271,0,1218,1213,1,0,0,0,1218,1219,1,0,0,0,
		1219,1221,1,0,0,0,1220,1222,5,646,0,0,1221,1220,1,0,0,0,1221,1222,1,0,
		0,0,1222,1228,1,0,0,0,1223,1225,5,356,0,0,1224,1226,5,1087,0,0,1225,1224,
		1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1229,5,1111,0,0,1228,
		1223,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1232,5,394,0,0,1231,
		1233,5,1087,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,
		1234,1235,3,532,266,0,1235,43,1,0,0,0,1236,1239,5,32,0,0,1237,1238,5,117,
		0,0,1238,1240,5,135,0,0,1239,1237,1,0,0,0,1239,1240,1,0,0,0,1240,1242,
		1,0,0,0,1241,1243,3,60,30,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,
		1,0,0,0,1244,1245,5,168,0,0,1245,1246,3,516,258,0,1246,1247,7,7,0,0,1247,
		1248,7,8,0,0,1248,1249,5,112,0,0,1249,1250,3,518,259,0,1250,1251,5,62,
		0,0,1251,1252,5,50,0,0,1252,1255,5,573,0,0,1253,1254,7,9,0,0,1254,1256,
		3,516,258,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,0,0,0,1257,
		1258,3,362,181,0,1258,45,1,0,0,0,1259,1261,5,183,0,0,1260,1262,5,546,0,
		0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,3,48,
		24,0,1264,47,1,0,0,0,1265,1277,3,50,25,0,1266,1267,5,1096,0,0,1267,1272,
		3,52,26,0,1268,1269,5,1098,0,0,1269,1271,3,52,26,0,1270,1268,1,0,0,0,1271,
		1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,1275,1,0,0,0,1274,
		1272,1,0,0,0,1275,1276,5,1097,0,0,1276,1278,1,0,0,0,1277,1266,1,0,0,0,
		1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,5,12,0,0,1280,1281,5,1096,
		0,0,1281,1282,3,10,5,0,1282,1285,5,1097,0,0,1283,1284,5,1098,0,0,1284,
		1286,3,48,24,0,1285,1283,1,0,0,0,1285,1286,1,0,0,0,1286,49,1,0,0,0,1287,
		1288,3,542,271,0,1288,51,1,0,0,0,1289,1290,3,542,271,0,1290,53,1,0,0,0,
		1291,1294,5,32,0,0,1292,1293,5,117,0,0,1293,1295,5,135,0,0,1294,1292,1,
		0,0,0,1294,1295,1,0,0,0,1295,1299,1,0,0,0,1296,1297,5,324,0,0,1297,1298,
		5,1087,0,0,1298,1300,7,10,0,0,1299,1296,1,0,0,0,1299,1300,1,0,0,0,1300,
		1302,1,0,0,0,1301,1303,3,60,30,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,
		1307,1,0,0,0,1304,1305,5,152,0,0,1305,1306,5,579,0,0,1306,1308,7,11,0,
		0,1307,1304,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,1310,5,643,
		0,0,1310,1315,3,516,258,0,1311,1312,5,1096,0,0,1312,1313,3,574,287,0,1313,
		1314,5,1097,0,0,1314,1316,1,0,0,0,1315,1311,1,0,0,0,1315,1316,1,0,0,0,
		1316,1317,1,0,0,0,1317,1319,5,12,0,0,1318,1320,3,46,23,0,1319,1318,1,0,
		0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1328,3,190,95,0,1322,1324,
		5,183,0,0,1323,1325,7,12,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,
		1326,1,0,0,0,1326,1327,5,25,0,0,1327,1329,5,114,0,0,1328,1322,1,0,0,0,
		1328,1329,1,0,0,0,1329,55,1,0,0,0,1330,1332,5,40,0,0,1331,1330,1,0,0,0,
		1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1335,3,58,29,0,1334,1336,5,1087,
		0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1339,1,0,0,0,1337,1340,3,
		528,264,0,1338,1340,5,40,0,0,1339,1337,1,0,0,0,1339,1338,1,0,0,0,1340,
		1350,1,0,0,0,1341,1343,5,40,0,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,
		1344,1,0,0,0,1344,1346,5,26,0,0,1345,1347,5,1087,0,0,1346,1345,1,0,0,0,
		1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1350,3,530,265,0,1349,1331,1,
		0,0,0,1349,1342,1,0,0,0,1350,57,1,0,0,0,1351,1352,5,24,0,0,1352,1357,5,
		147,0,0,1353,1357,5,806,0,0,1354,1355,5,213,0,0,1355,1357,5,147,0,0,1356,
		1351,1,0,0,0,1356,1353,1,0,0,0,1356,1354,1,0,0,0,1357,59,1,0,0,0,1358,
		1359,5,379,0,0,1359,1366,5,1087,0,0,1360,1367,3,524,262,0,1361,1364,5,
		35,0,0,1362,1363,5,1096,0,0,1363,1365,5,1097,0,0,1364,1362,1,0,0,0,1364,
		1365,1,0,0,0,1365,1367,1,0,0,0,1366,1360,1,0,0,0,1366,1361,1,0,0,0,1367,
		61,1,0,0,0,1368,1369,5,326,0,0,1369,1373,3,64,32,0,1370,1372,3,66,33,0,
		1371,1370,1,0,0,0,1372,1375,1,0,0,0,1373,1371,1,0,0,0,1373,1374,1,0,0,
		0,1374,1403,1,0,0,0,1375,1373,1,0,0,0,1376,1379,5,402,0,0,1377,1380,3,
		548,274,0,1378,1380,3,640,320,0,1379,1377,1,0,0,0,1379,1378,1,0,0,0,1380,
		1381,1,0,0,0,1381,1390,3,68,34,0,1382,1383,5,602,0,0,1383,1387,3,64,32,
		0,1384,1386,3,66,33,0,1385,1384,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,
		0,0,0,1387,1388,1,0,0,0,1388,1391,1,0,0,0,1389,1387,1,0,0,0,1390,1382,
		1,0,0,0,1390,1391,1,0,0,0,1391,1400,1,0,0,0,1392,1393,5,393,0,0,1393,1397,
		3,64,32,0,1394,1396,3,66,33,0,1395,1394,1,0,0,0,1396,1399,1,0,0,0,1397,
		1395,1,0,0,0,1397,1398,1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1400,
		1392,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,1402,1368,1,0,0,0,1402,
		1376,1,0,0,0,1403,63,1,0,0,0,1404,1409,5,303,0,0,1405,1409,3,552,276,0,
		1406,1409,3,548,274,0,1407,1409,3,640,320,0,1408,1404,1,0,0,0,1408,1405,
		1,0,0,0,1408,1406,1,0,0,0,1408,1407,1,0,0,0,1409,65,1,0,0,0,1410,1411,
		5,1083,0,0,1411,1414,5,83,0,0,1412,1415,3,548,274,0,1413,1415,3,640,320,
		0,1414,1412,1,0,0,0,1414,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1417,3,68,
		34,0,1417,67,1,0,0,0,1418,1432,3,664,332,0,1419,1432,5,212,0,0,1420,1432,
		5,231,0,0,1421,1432,5,232,0,0,1422,1432,5,233,0,0,1423,1432,5,234,0,0,
		1424,1432,5,235,0,0,1425,1432,5,236,0,0,1426,1432,5,237,0,0,1427,1432,
		5,238,0,0,1428,1432,5,239,0,0,1429,1432,5,240,0,0,1430,1432,5,241,0,0,
		1431,1418,1,0,0,0,1431,1419,1,0,0,0,1431,1420,1,0,0,0,1431,1421,1,0,0,
		0,1431,1422,1,0,0,0,1431,1423,1,0,0,0,1431,1424,1,0,0,0,1431,1425,1,0,
		0,0,1431,1426,1,0,0,0,1431,1427,1,0,0,0,1431,1428,1,0,0,0,1431,1429,1,
		0,0,0,1431,1430,1,0,0,0,1432,69,1,0,0,0,1433,1439,5,390,0,0,1434,1439,
		5,383,0,0,1435,1436,5,383,0,0,1436,1437,5,112,0,0,1437,1439,5,586,0,0,
		1438,1433,1,0,0,0,1438,1434,1,0,0,0,1438,1435,1,0,0,0,1439,71,1,0,0,0,
		1440,1441,5,178,0,0,1441,1442,7,13,0,0,1442,73,1,0,0,0,1443,1445,5,449,
		0,0,1444,1446,5,1087,0,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1447,
		1,0,0,0,1447,1474,3,550,275,0,1448,1474,3,72,36,0,1449,1450,5,183,0,0,
		1450,1451,5,523,0,0,1451,1474,3,542,271,0,1452,1453,5,356,0,0,1453,1474,
		5,1111,0,0,1454,1474,7,14,0,0,1455,1457,5,840,0,0,1456,1458,5,1087,0,0,
		1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1474,5,1111,
		0,0,1460,1462,5,964,0,0,1461,1463,5,1087,0,0,1462,1461,1,0,0,0,1462,1463,
		1,0,0,0,1463,1464,1,0,0,0,1464,1474,5,1111,0,0,1465,1466,5,350,0,0,1466,
		1467,5,1087,0,0,1467,1474,7,15,0,0,1468,1472,5,76,0,0,1469,1470,5,108,
		0,0,1470,1472,5,76,0,0,1471,1468,1,0,0,0,1471,1469,1,0,0,0,1472,1474,1,
		0,0,0,1473,1443,1,0,0,0,1473,1448,1,0,0,0,1473,1449,1,0,0,0,1473,1452,
		1,0,0,0,1473,1454,1,0,0,0,1473,1455,1,0,0,0,1473,1460,1,0,0,0,1473,1465,
		1,0,0,0,1473,1471,1,0,0,0,1474,75,1,0,0,0,1475,1477,7,16,0,0,1476,1475,
		1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,3,542,271,0,1479,
		1480,3,562,281,0,1480,77,1,0,0,0,1481,1482,3,542,271,0,1482,1483,3,562,
		281,0,1483,79,1,0,0,0,1484,1485,5,356,0,0,1485,1508,5,1111,0,0,1486,1487,
		5,450,0,0,1487,1508,5,152,0,0,1488,1490,5,108,0,0,1489,1488,1,0,0,0,1489,
		1490,1,0,0,0,1490,1491,1,0,0,0,1491,1508,5,45,0,0,1492,1493,5,369,0,0,
		1493,1503,5,152,0,0,1494,1495,5,503,0,0,1495,1503,5,152,0,0,1496,1497,
		5,129,0,0,1497,1498,5,152,0,0,1498,1503,5,375,0,0,1499,1500,5,106,0,0,
		1500,1501,5,152,0,0,1501,1503,5,375,0,0,1502,1492,1,0,0,0,1502,1494,1,
		0,0,0,1502,1496,1,0,0,0,1502,1499,1,0,0,0,1503,1508,1,0,0,0,1504,1505,
		5,152,0,0,1505,1506,5,579,0,0,1506,1508,7,11,0,0,1507,1484,1,0,0,0,1507,
		1486,1,0,0,0,1507,1489,1,0,0,0,1507,1502,1,0,0,0,1507,1504,1,0,0,0,1508,
		81,1,0,0,0,1509,1510,5,429,0,0,1510,1524,5,1111,0,0,1511,1512,5,37,0,0,
		1512,1524,5,1111,0,0,1513,1514,5,637,0,0,1514,1524,5,1111,0,0,1515,1516,
		5,527,0,0,1516,1524,5,1111,0,0,1517,1518,5,589,0,0,1518,1524,5,1111,0,
		0,1519,1520,5,520,0,0,1520,1524,5,1111,0,0,1521,1522,5,532,0,0,1522,1524,
		3,548,274,0,1523,1509,1,0,0,0,1523,1511,1,0,0,0,1523,1513,1,0,0,0,1523,
		1515,1,0,0,0,1523,1517,1,0,0,0,1523,1519,1,0,0,0,1523,1521,1,0,0,0,1524,
		83,1,0,0,0,1525,1526,5,1096,0,0,1526,1531,3,86,43,0,1527,1528,5,1098,0,
		0,1528,1530,3,86,43,0,1529,1527,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,
		0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,0,0,1533,1531,1,0,0,0,1534,1535,
		5,1097,0,0,1535,85,1,0,0,0,1536,1537,3,542,271,0,1537,1538,3,88,44,0,1538,
		1542,1,0,0,0,1539,1542,3,92,46,0,1540,1542,3,100,50,0,1541,1536,1,0,0,
		0,1541,1539,1,0,0,0,1541,1540,1,0,0,0,1542,87,1,0,0,0,1543,1547,3,562,
		281,0,1544,1546,3,90,45,0,1545,1544,1,0,0,0,1546,1549,1,0,0,0,1547,1545,
		1,0,0,0,1547,1548,1,0,0,0,1548,89,1,0,0,0,1549,1547,1,0,0,0,1550,1604,
		3,558,279,0,1551,1552,5,40,0,0,1552,1604,3,590,295,0,1553,1604,5,645,0,
		0,1554,1604,5,441,0,0,1555,1560,5,330,0,0,1556,1557,5,112,0,0,1557,1558,
		5,175,0,0,1558,1560,3,592,296,0,1559,1555,1,0,0,0,1559,1556,1,0,0,0,1560,
		1604,1,0,0,0,1561,1563,5,124,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,
		1564,1,0,0,0,1564,1604,5,88,0,0,1565,1567,5,172,0,0,1566,1568,5,88,0,0,
		1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1604,1,0,0,0,1569,1570,5,356,
		0,0,1570,1604,5,1111,0,0,1571,1572,5,354,0,0,1572,1604,7,17,0,0,1573,1574,
		5,608,0,0,1574,1604,7,18,0,0,1575,1604,3,94,47,0,1576,1577,5,26,0,0,1577,
		1604,3,530,265,0,1578,1579,5,67,0,0,1579,1581,5,8,0,0,1580,1578,1,0,0,
		0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,1583,5,12,0,0,1583,1584,5,1096,
		0,0,1584,1585,3,640,320,0,1585,1587,5,1097,0,0,1586,1588,7,19,0,0,1587,
		1586,1,0,0,0,1587,1588,1,0,0,0,1588,1604,1,0,0,0,1589,1590,5,230,0,0,1590,
		1591,5,40,0,0,1591,1604,5,641,0,0,1592,1594,5,29,0,0,1593,1595,3,542,271,
		0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1597,1,0,0,0,1596,1592,1,0,
		0,0,1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,1599,5,25,0,0,1599,1600,5,
		1096,0,0,1600,1601,3,640,320,0,1601,1602,5,1097,0,0,1602,1604,1,0,0,0,
		1603,1550,1,0,0,0,1603,1551,1,0,0,0,1603,1553,1,0,0,0,1603,1554,1,0,0,
		0,1603,1559,1,0,0,0,1603,1562,1,0,0,0,1603,1565,1,0,0,0,1603,1569,1,0,
		0,0,1603,1571,1,0,0,0,1603,1573,1,0,0,0,1603,1575,1,0,0,0,1603,1576,1,
		0,0,0,1603,1580,1,0,0,0,1603,1589,1,0,0,0,1603,1596,1,0,0,0,1604,91,1,
		0,0,0,1605,1607,5,29,0,0,1606,1608,3,542,271,0,1607,1606,1,0,0,0,1607,
		1608,1,0,0,0,1608,1610,1,0,0,0,1609,1605,1,0,0,0,1609,1610,1,0,0,0,1610,
		1611,1,0,0,0,1611,1612,5,124,0,0,1612,1614,5,88,0,0,1613,1615,3,542,271,
		0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,1616,1618,3,72,
		36,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1623,3,
		578,289,0,1620,1622,3,74,37,0,1621,1620,1,0,0,0,1622,1625,1,0,0,0,1623,
		1621,1,0,0,0,1623,1624,1,0,0,0,1624,1675,1,0,0,0,1625,1623,1,0,0,0,1626,
		1628,5,29,0,0,1627,1629,3,542,271,0,1628,1627,1,0,0,0,1628,1629,1,0,0,
		0,1629,1631,1,0,0,0,1630,1626,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,
		0,0,1632,1634,5,172,0,0,1633,1635,7,20,0,0,1634,1633,1,0,0,0,1634,1635,
		1,0,0,0,1635,1637,1,0,0,0,1636,1638,3,542,271,0,1637,1636,1,0,0,0,1637,
		1638,1,0,0,0,1638,1640,1,0,0,0,1639,1641,3,72,36,0,1640,1639,1,0,0,0,1640,
		1641,1,0,0,0,1641,1642,1,0,0,0,1642,1646,3,578,289,0,1643,1645,3,74,37,
		0,1644,1643,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,
		0,0,1647,1675,1,0,0,0,1648,1646,1,0,0,0,1649,1651,5,29,0,0,1650,1652,3,
		542,271,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,1653,1649,
		1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1656,5,64,0,0,1656,1658,
		5,88,0,0,1657,1659,3,542,271,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,
		1660,1,0,0,0,1660,1661,3,578,289,0,1661,1662,3,94,47,0,1662,1675,1,0,0,
		0,1663,1665,5,29,0,0,1664,1666,3,542,271,0,1665,1664,1,0,0,0,1665,1666,
		1,0,0,0,1666,1668,1,0,0,0,1667,1663,1,0,0,0,1667,1668,1,0,0,0,1668,1669,
		1,0,0,0,1669,1670,5,25,0,0,1670,1671,5,1096,0,0,1671,1672,3,640,320,0,
		1672,1673,5,1097,0,0,1673,1675,1,0,0,0,1674,1609,1,0,0,0,1674,1630,1,0,
		0,0,1674,1653,1,0,0,0,1674,1667,1,0,0,0,1675,93,1,0,0,0,1676,1677,5,130,
		0,0,1677,1679,3,518,259,0,1678,1680,3,578,289,0,1679,1678,1,0,0,0,1679,
		1680,1,0,0,0,1680,1683,1,0,0,0,1681,1682,5,104,0,0,1682,1684,7,21,0,0,
		1683,1681,1,0,0,0,1683,1684,1,0,0,0,1684,1686,1,0,0,0,1685,1687,3,96,48,
		0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,95,1,0,0,0,1688,1689,5,112,
		0,0,1689,1690,5,42,0,0,1690,1694,3,98,49,0,1691,1692,5,112,0,0,1692,1693,
		5,175,0,0,1693,1695,3,98,49,0,1694,1691,1,0,0,0,1694,1695,1,0,0,0,1695,
		1705,1,0,0,0,1696,1697,5,112,0,0,1697,1698,5,175,0,0,1698,1702,3,98,49,
		0,1699,1700,5,112,0,0,1700,1701,5,42,0,0,1701,1703,3,98,49,0,1702,1699,
		1,0,0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,0,1704,1688,1,0,0,0,1704,1696,
		1,0,0,0,1705,97,1,0,0,0,1706,1713,5,138,0,0,1707,1713,5,20,0,0,1708,1709,
		5,147,0,0,1709,1713,5,110,0,0,1710,1711,5,503,0,0,1711,1713,5,321,0,0,
		1712,1706,1,0,0,0,1712,1707,1,0,0,0,1712,1708,1,0,0,0,1712,1710,1,0,0,
		0,1713,99,1,0,0,0,1714,1716,7,20,0,0,1715,1717,3,542,271,0,1716,1715,1,
		0,0,0,1716,1717,1,0,0,0,1717,1719,1,0,0,0,1718,1720,3,72,36,0,1719,1718,
		1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,1721,1725,3,578,289,0,1722,
		1724,3,74,37,0,1723,1722,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,1725,
		1726,1,0,0,0,1726,1743,1,0,0,0,1727,1725,1,0,0,0,1728,1730,7,22,0,0,1729,
		1731,7,20,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,
		1734,3,542,271,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,
		1735,1739,3,578,289,0,1736,1738,3,74,37,0,1737,1736,1,0,0,0,1738,1741,
		1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,1743,1,0,0,0,1741,1739,
		1,0,0,0,1742,1714,1,0,0,0,1742,1728,1,0,0,0,1743,101,1,0,0,0,1744,1746,
		5,394,0,0,1745,1747,5,1087,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,
		1749,1,0,0,0,1748,1750,3,532,266,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,
		1750,1890,1,0,0,0,1751,1753,5,330,0,0,1752,1754,5,1087,0,0,1753,1752,1,
		0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1890,3,548,274,0,1756,1758,
		5,331,0,0,1757,1759,5,1087,0,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
		1760,1,0,0,0,1760,1890,3,548,274,0,1761,1763,5,40,0,0,1762,1761,1,0,0,
		0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1766,3,58,29,0,1765,1767,5,
		1087,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1770,1,0,0,0,1768,1771,
		3,528,264,0,1769,1771,5,40,0,0,1770,1768,1,0,0,0,1770,1769,1,0,0,0,1771,
		1890,1,0,0,0,1772,1774,7,23,0,0,1773,1775,5,1087,0,0,1774,1773,1,0,0,0,
		1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1890,7,24,0,0,1777,1779,5,40,
		0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,1782,5,
		26,0,0,1781,1783,5,1087,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,
		1,0,0,0,1784,1890,3,530,265,0,1785,1787,5,356,0,0,1786,1788,5,1087,0,0,
		1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1890,5,1111,
		0,0,1790,1792,5,361,0,0,1791,1793,5,1087,0,0,1792,1791,1,0,0,0,1792,1793,
		1,0,0,0,1793,1794,1,0,0,0,1794,1890,7,25,0,0,1795,1797,5,364,0,0,1796,
		1798,5,1087,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,
		1799,1890,5,1111,0,0,1800,1801,5,375,0,0,1801,1803,5,382,0,0,1802,1804,
		5,1087,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,
		1890,5,1111,0,0,1806,1808,5,380,0,0,1807,1809,5,1087,0,0,1808,1807,1,0,
		0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1890,7,24,0,0,1811,1813,5,
		391,0,0,1812,1814,5,1087,0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,0,1814,
		1815,1,0,0,0,1815,1890,5,1111,0,0,1816,1817,5,78,0,0,1817,1819,5,382,0,
		0,1818,1820,5,1087,0,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,
		0,0,0,1821,1890,5,1111,0,0,1822,1824,5,437,0,0,1823,1825,5,1087,0,0,1824,
		1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,0,0,0,1826,1890,7,26,0,0,1827,
		1829,5,449,0,0,1828,1830,5,1087,0,0,1829,1828,1,0,0,0,1829,1830,1,0,0,
		0,1830,1831,1,0,0,0,1831,1890,3,550,275,0,1832,1834,5,482,0,0,1833,1835,
		5,1087,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,
		1890,3,548,274,0,1837,1839,5,492,0,0,1838,1840,5,1087,0,0,1839,1838,1,
		0,0,0,1839,1840,1,0,0,0,1840,1841,1,0,0,0,1841,1890,3,548,274,0,1842,1844,
		5,521,0,0,1843,1845,5,1087,0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,
		1846,1,0,0,0,1846,1890,7,27,0,0,1847,1849,5,527,0,0,1848,1850,5,1087,0,
		0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1890,5,1111,
		0,0,1852,1854,5,575,0,0,1853,1855,5,1087,0,0,1854,1853,1,0,0,0,1854,1855,
		1,0,0,0,1855,1856,1,0,0,0,1856,1890,7,28,0,0,1857,1859,5,603,0,0,1858,
		1860,5,1087,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,0,0,
		1861,1890,7,27,0,0,1862,1864,5,604,0,0,1863,1865,5,1087,0,0,1864,1863,
		1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1890,7,27,0,0,1867,1869,
		5,605,0,0,1868,1870,5,1087,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,
		1871,1,0,0,0,1871,1890,3,548,274,0,1872,1873,5,619,0,0,1873,1875,3,542,
		271,0,1874,1876,3,106,53,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1890,
		1,0,0,0,1877,1878,5,620,0,0,1878,1879,5,1087,0,0,1879,1890,3,104,52,0,
		1880,1890,3,106,53,0,1881,1883,5,171,0,0,1882,1884,5,1087,0,0,1883,1882,
		1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1886,5,1096,0,0,1886,
		1887,3,576,288,0,1887,1888,5,1097,0,0,1888,1890,1,0,0,0,1889,1744,1,0,
		0,0,1889,1751,1,0,0,0,1889,1756,1,0,0,0,1889,1762,1,0,0,0,1889,1772,1,
		0,0,0,1889,1778,1,0,0,0,1889,1785,1,0,0,0,1889,1790,1,0,0,0,1889,1795,
		1,0,0,0,1889,1800,1,0,0,0,1889,1806,1,0,0,0,1889,1811,1,0,0,0,1889,1816,
		1,0,0,0,1889,1822,1,0,0,0,1889,1827,1,0,0,0,1889,1832,1,0,0,0,1889,1837,
		1,0,0,0,1889,1842,1,0,0,0,1889,1847,1,0,0,0,1889,1852,1,0,0,0,1889,1857,
		1,0,0,0,1889,1862,1,0,0,0,1889,1867,1,0,0,0,1889,1872,1,0,0,0,1889,1877,
		1,0,0,0,1889,1880,1,0,0,0,1889,1881,1,0,0,0,1890,103,1,0,0,0,1891,1892,
		7,29,0,0,1892,105,1,0,0,0,1893,1894,5,608,0,0,1894,1895,7,18,0,0,1895,
		107,1,0,0,0,1896,1897,5,123,0,0,1897,1898,5,18,0,0,1898,1901,3,110,55,
		0,1899,1900,5,526,0,0,1900,1902,3,548,274,0,1901,1899,1,0,0,0,1901,1902,
		1,0,0,0,1902,1910,1,0,0,0,1903,1904,5,613,0,0,1904,1905,5,18,0,0,1905,
		1908,3,112,56,0,1906,1907,5,614,0,0,1907,1909,3,548,274,0,1908,1906,1,
		0,0,0,1908,1909,1,0,0,0,1909,1911,1,0,0,0,1910,1903,1,0,0,0,1910,1911,
		1,0,0,0,1911,1923,1,0,0,0,1912,1913,5,1096,0,0,1913,1918,3,114,57,0,1914,
		1915,5,1098,0,0,1915,1917,3,114,57,0,1916,1914,1,0,0,0,1917,1920,1,0,0,
		0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1921,1,0,0,0,1920,1918,1,0,
		0,0,1921,1922,5,1097,0,0,1922,1924,1,0,0,0,1923,1912,1,0,0,0,1923,1924,
		1,0,0,0,1924,109,1,0,0,0,1925,1927,5,96,0,0,1926,1925,1,0,0,0,1926,1927,
		1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,427,0,0,1929,1930,5,1096,0,0,1930,
		1931,3,640,320,0,1931,1932,5,1097,0,0,1932,1971,1,0,0,0,1933,1935,5,96,
		0,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1940,5,
		88,0,0,1937,1938,5,324,0,0,1938,1939,5,1087,0,0,1939,1941,7,30,0,0,1940,
		1937,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,5,1096,0,0,
		1943,1944,3,574,287,0,1944,1945,5,1097,0,0,1945,1971,1,0,0,0,1946,1956,
		5,127,0,0,1947,1948,5,1096,0,0,1948,1949,3,640,320,0,1949,1950,5,1097,
		0,0,1950,1957,1,0,0,0,1951,1952,5,353,0,0,1952,1953,5,1096,0,0,1953,1954,
		3,574,287,0,1954,1955,5,1097,0,0,1955,1957,1,0,0,0,1956,1947,1,0,0,0,1956,
		1951,1,0,0,0,1957,1971,1,0,0,0,1958,1968,5,455,0,0,1959,1960,5,1096,0,
		0,1960,1961,3,640,320,0,1961,1962,5,1097,0,0,1962,1969,1,0,0,0,1963,1964,
		5,353,0,0,1964,1965,5,1096,0,0,1965,1966,3,574,287,0,1966,1967,5,1097,
		0,0,1967,1969,1,0,0,0,1968,1959,1,0,0,0,1968,1963,1,0,0,0,1969,1971,1,
		0,0,0,1970,1926,1,0,0,0,1970,1934,1,0,0,0,1970,1946,1,0,0,0,1970,1958,
		1,0,0,0,1971,111,1,0,0,0,1972,1974,5,96,0,0,1973,1972,1,0,0,0,1973,1974,
		1,0,0,0,1974,1975,1,0,0,0,1975,1976,5,427,0,0,1976,1977,5,1096,0,0,1977,
		1978,3,640,320,0,1978,1979,5,1097,0,0,1979,1994,1,0,0,0,1980,1982,5,96,
		0,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,1,0,0,0,1983,1987,5,
		88,0,0,1984,1985,5,324,0,0,1985,1986,5,1087,0,0,1986,1988,7,30,0,0,1987,
		1984,1,0,0,0,1987,1988,1,0,0,0,1988,1989,1,0,0,0,1989,1990,5,1096,0,0,
		1990,1991,3,574,287,0,1991,1992,5,1097,0,0,1992,1994,1,0,0,0,1993,1973,
		1,0,0,0,1993,1981,1,0,0,0,1994,113,1,0,0,0,1995,1996,5,123,0,0,1996,1997,
		3,542,271,0,1997,1998,5,179,0,0,1998,1999,5,453,0,0,1999,2000,5,623,0,
		0,2000,2001,5,1096,0,0,2001,2006,3,116,58,0,2002,2003,5,1098,0,0,2003,
		2005,3,116,58,0,2004,2002,1,0,0,0,2005,2008,1,0,0,0,2006,2004,1,0,0,0,
		2006,2007,1,0,0,0,2007,2009,1,0,0,0,2008,2006,1,0,0,0,2009,2013,5,1097,
		0,0,2010,2012,3,122,61,0,2011,2010,1,0,0,0,2012,2015,1,0,0,0,2013,2011,
		1,0,0,0,2013,2014,1,0,0,0,2014,2027,1,0,0,0,2015,2013,1,0,0,0,2016,2017,
		5,1096,0,0,2017,2022,3,120,60,0,2018,2019,5,1098,0,0,2019,2021,3,120,60,
		0,2020,2018,1,0,0,0,2021,2024,1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,
		0,0,2023,2025,1,0,0,0,2024,2022,1,0,0,0,2025,2026,5,1097,0,0,2026,2028,
		1,0,0,0,2027,2016,1,0,0,0,2027,2028,1,0,0,0,2028,2142,1,0,0,0,2029,2030,
		5,123,0,0,2030,2031,3,542,271,0,2031,2032,5,179,0,0,2032,2033,5,453,0,
		0,2033,2034,5,623,0,0,2034,2038,3,116,58,0,2035,2037,3,122,61,0,2036,2035,
		1,0,0,0,2037,2040,1,0,0,0,2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,2052,
		1,0,0,0,2040,2038,1,0,0,0,2041,2042,5,1096,0,0,2042,2047,3,120,60,0,2043,
		2044,5,1098,0,0,2044,2046,3,120,60,0,2045,2043,1,0,0,0,2046,2049,1,0,0,
		0,2047,2045,1,0,0,0,2047,2048,1,0,0,0,2048,2050,1,0,0,0,2049,2047,1,0,
		0,0,2050,2051,5,1097,0,0,2051,2053,1,0,0,0,2052,2041,1,0,0,0,2052,2053,
		1,0,0,0,2053,2142,1,0,0,0,2054,2055,5,123,0,0,2055,2056,3,542,271,0,2056,
		2057,5,179,0,0,2057,2058,5,77,0,0,2058,2059,5,1096,0,0,2059,2064,3,116,
		58,0,2060,2061,5,1098,0,0,2061,2063,3,116,58,0,2062,2060,1,0,0,0,2063,
		2066,1,0,0,0,2064,2062,1,0,0,0,2064,2065,1,0,0,0,2065,2067,1,0,0,0,2066,
		2064,1,0,0,0,2067,2071,5,1097,0,0,2068,2070,3,122,61,0,2069,2068,1,0,0,
		0,2070,2073,1,0,0,0,2071,2069,1,0,0,0,2071,2072,1,0,0,0,2072,2085,1,0,
		0,0,2073,2071,1,0,0,0,2074,2075,5,1096,0,0,2075,2080,3,120,60,0,2076,2077,
		5,1098,0,0,2077,2079,3,120,60,0,2078,2076,1,0,0,0,2079,2082,1,0,0,0,2080,
		2078,1,0,0,0,2080,2081,1,0,0,0,2081,2083,1,0,0,0,2082,2080,1,0,0,0,2083,
		2084,5,1097,0,0,2084,2086,1,0,0,0,2085,2074,1,0,0,0,2085,2086,1,0,0,0,
		2086,2142,1,0,0,0,2087,2088,5,123,0,0,2088,2089,3,542,271,0,2089,2090,
		5,179,0,0,2090,2091,5,77,0,0,2091,2092,5,1096,0,0,2092,2097,3,118,59,0,
		2093,2094,5,1098,0,0,2094,2096,3,118,59,0,2095,2093,1,0,0,0,2096,2099,
		1,0,0,0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,2100,1,0,0,0,2099,2097,
		1,0,0,0,2100,2104,5,1097,0,0,2101,2103,3,122,61,0,2102,2101,1,0,0,0,2103,
		2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,2118,1,0,0,0,2106,
		2104,1,0,0,0,2107,2108,5,1096,0,0,2108,2113,3,120,60,0,2109,2110,5,1098,
		0,0,2110,2112,3,120,60,0,2111,2109,1,0,0,0,2112,2115,1,0,0,0,2113,2111,
		1,0,0,0,2113,2114,1,0,0,0,2114,2116,1,0,0,0,2115,2113,1,0,0,0,2116,2117,
		5,1097,0,0,2117,2119,1,0,0,0,2118,2107,1,0,0,0,2118,2119,1,0,0,0,2119,
		2142,1,0,0,0,2120,2121,5,123,0,0,2121,2125,3,542,271,0,2122,2124,3,122,
		61,0,2123,2122,1,0,0,0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2125,2126,1,
		0,0,0,2126,2139,1,0,0,0,2127,2125,1,0,0,0,2128,2129,5,1096,0,0,2129,2134,
		3,120,60,0,2130,2131,5,1098,0,0,2131,2133,3,120,60,0,2132,2130,1,0,0,0,
		2133,2136,1,0,0,0,2134,2132,1,0,0,0,2134,2135,1,0,0,0,2135,2137,1,0,0,
		0,2136,2134,1,0,0,0,2137,2138,5,1097,0,0,2138,2140,1,0,0,0,2139,2128,1,
		0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,1995,1,0,0,0,2141,2029,
		1,0,0,0,2141,2054,1,0,0,0,2141,2087,1,0,0,0,2141,2120,1,0,0,0,2142,115,
		1,0,0,0,2143,2147,3,560,280,0,2144,2147,3,640,320,0,2145,2147,5,105,0,
		0,2146,2143,1,0,0,0,2146,2144,1,0,0,0,2146,2145,1,0,0,0,2147,117,1,0,0,
		0,2148,2149,5,1096,0,0,2149,2152,3,116,58,0,2150,2151,5,1098,0,0,2151,
		2153,3,116,58,0,2152,2150,1,0,0,0,2153,2154,1,0,0,0,2154,2152,1,0,0,0,
		2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,5,1097,0,0,2157,119,1,0,
		0,0,2158,2159,5,613,0,0,2159,2163,3,542,271,0,2160,2162,3,122,61,0,2161,
		2160,1,0,0,0,2162,2165,1,0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,
		121,1,0,0,0,2165,2163,1,0,0,0,2166,2168,5,40,0,0,2167,2166,1,0,0,0,2167,
		2168,1,0,0,0,2168,2170,1,0,0,0,2169,2171,5,608,0,0,2170,2169,1,0,0,0,2170,
		2171,1,0,0,0,2171,2172,1,0,0,0,2172,2174,5,394,0,0,2173,2175,5,1087,0,
		0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2215,3,532,
		266,0,2177,2179,5,356,0,0,2178,2180,5,1087,0,0,2179,2178,1,0,0,0,2179,
		2180,1,0,0,0,2180,2181,1,0,0,0,2181,2215,5,1111,0,0,2182,2183,5,375,0,
		0,2183,2185,5,382,0,0,2184,2186,5,1087,0,0,2185,2184,1,0,0,0,2185,2186,
		1,0,0,0,2186,2187,1,0,0,0,2187,2215,5,1111,0,0,2188,2189,5,78,0,0,2189,
		2191,5,382,0,0,2190,2192,5,1087,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,
		0,2192,2193,1,0,0,0,2193,2215,5,1111,0,0,2194,2196,5,482,0,0,2195,2197,
		5,1087,0,0,2196,2195,1,0,0,0,2196,2197,1,0,0,0,2197,2198,1,0,0,0,2198,
		2215,3,548,274,0,2199,2201,5,492,0,0,2200,2202,5,1087,0,0,2201,2200,1,
		0,0,0,2201,2202,1,0,0,0,2202,2203,1,0,0,0,2203,2215,3,548,274,0,2204,2206,
		5,619,0,0,2205,2207,5,1087,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,
		2208,1,0,0,0,2208,2215,3,542,271,0,2209,2211,5,506,0,0,2210,2212,5,1087,
		0,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2215,3,
		542,271,0,2214,2167,1,0,0,0,2214,2177,1,0,0,0,2214,2182,1,0,0,0,2214,2188,
		1,0,0,0,2214,2194,1,0,0,0,2214,2199,1,0,0,0,2214,2204,1,0,0,0,2214,2209,
		1,0,0,0,2215,123,1,0,0,0,2216,2217,5,7,0,0,2217,2219,7,0,0,0,2218,2220,
		3,542,271,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2222,1,0,0,0,2221,
		2223,3,56,28,0,2222,2221,1,0,0,0,2223,2224,1,0,0,0,2224,2222,1,0,0,0,2224,
		2225,1,0,0,0,2225,2235,1,0,0,0,2226,2227,5,7,0,0,2227,2228,7,0,0,0,2228,
		2229,3,542,271,0,2229,2230,5,636,0,0,2230,2231,5,375,0,0,2231,2232,5,382,
		0,0,2232,2233,5,498,0,0,2233,2235,1,0,0,0,2234,2216,1,0,0,0,2234,2226,
		1,0,0,0,2235,125,1,0,0,0,2236,2238,5,7,0,0,2237,2239,3,60,30,0,2238,2237,
		1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2241,5,400,0,0,2241,2245,
		3,516,258,0,2242,2243,5,112,0,0,2243,2244,5,578,0,0,2244,2246,3,62,31,
		0,2245,2242,1,0,0,0,2245,2246,1,0,0,0,2246,2253,1,0,0,0,2247,2248,5,112,
		0,0,2248,2250,5,359,0,0,2249,2251,5,108,0,0,2250,2249,1,0,0,0,2250,2251,
		1,0,0,0,2251,2252,1,0,0,0,2252,2254,5,536,0,0,2253,2247,1,0,0,0,2253,2254,
		1,0,0,0,2254,2258,1,0,0,0,2255,2256,5,133,0,0,2256,2257,5,166,0,0,2257,
		2259,3,516,258,0,2258,2255,1,0,0,0,2258,2259,1,0,0,0,2259,2261,1,0,0,0,
		2260,2262,3,70,35,0,2261,2260,1,0,0,0,2261,2262,1,0,0,0,2262,2265,1,0,
		0,0,2263,2264,5,356,0,0,2264,2266,5,1111,0,0,2265,2263,1,0,0,0,2265,2266,
		1,0,0,0,2266,2269,1,0,0,0,2267,2268,5,386,0,0,2268,2270,3,362,181,0,2269,
		2267,1,0,0,0,2269,2270,1,0,0,0,2270,127,1,0,0,0,2271,2272,5,7,0,0,2272,
		2273,5,421,0,0,2273,2277,3,516,258,0,2274,2276,3,80,40,0,2275,2274,1,0,
		0,0,2276,2279,1,0,0,0,2277,2275,1,0,0,0,2277,2278,1,0,0,0,2278,129,1,0,
		0,0,2279,2277,1,0,0,0,2280,2281,5,7,0,0,2281,2282,5,439,0,0,2282,2283,
		5,572,0,0,2283,2284,5,756,0,0,2284,2285,5,459,0,0,2285,2286,5,88,0,0,2286,
		131,1,0,0,0,2287,2288,5,7,0,0,2288,2289,5,457,0,0,2289,2290,5,70,0,0,2290,
		2291,3,542,271,0,2291,2292,5,5,0,0,2292,2293,5,631,0,0,2293,2299,5,1111,
		0,0,2294,2296,5,435,0,0,2295,2297,5,1087,0,0,2296,2295,1,0,0,0,2296,2297,
		1,0,0,0,2297,2298,1,0,0,0,2298,2300,3,550,275,0,2299,2294,1,0,0,0,2299,
		2300,1,0,0,0,2300,2302,1,0,0,0,2301,2303,5,646,0,0,2302,2301,1,0,0,0,2302,
		2303,1,0,0,0,2303,2304,1,0,0,0,2304,2306,5,394,0,0,2305,2307,5,1087,0,
		0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2309,3,532,
		266,0,2309,133,1,0,0,0,2310,2311,5,7,0,0,2311,2312,5,125,0,0,2312,2316,
		3,516,258,0,2313,2315,3,80,40,0,2314,2313,1,0,0,0,2315,2318,1,0,0,0,2316,
		2314,1,0,0,0,2316,2317,1,0,0,0,2317,135,1,0,0,0,2318,2316,1,0,0,0,2319,
		2320,5,7,0,0,2320,2321,5,580,0,0,2321,2322,3,542,271,0,2322,2323,5,519,
		0,0,2323,2324,5,1096,0,0,2324,2329,3,82,41,0,2325,2326,5,1098,0,0,2326,
		2328,3,82,41,0,2327,2325,1,0,0,0,2328,2331,1,0,0,0,2329,2327,1,0,0,0,2329,
		2330,1,0,0,0,2330,2332,1,0,0,0,2331,2329,1,0,0,0,2332,2333,5,1097,0,0,
		2333,137,1,0,0,0,2334,2336,5,7,0,0,2335,2337,7,1,0,0,2336,2335,1,0,0,0,
		2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,2340,5,75,0,0,2339,2338,1,0,0,
		0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,2342,5,163,0,0,2342,2351,3,
		518,259,0,2343,2348,3,144,72,0,2344,2345,5,1098,0,0,2345,2347,3,144,72,
		0,2346,2344,1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,0,0,0,2348,2349,1,0,
		0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2351,2343,1,0,0,0,2351,2352,1,
		0,0,0,2352,2354,1,0,0,0,2353,2355,3,108,54,0,2354,2353,1,0,0,0,2354,2355,
		1,0,0,0,2355,139,1,0,0,0,2356,2357,5,7,0,0,2357,2358,5,619,0,0,2358,2359,
		3,542,271,0,2359,2360,7,31,0,0,2360,2361,5,376,0,0,2361,2365,5,1111,0,
		0,2362,2363,5,435,0,0,2363,2364,5,1087,0,0,2364,2366,3,550,275,0,2365,
		2362,1,0,0,0,2365,2366,1,0,0,0,2366,2368,1,0,0,0,2367,2369,5,646,0,0,2368,
		2367,1,0,0,0,2368,2369,1,0,0,0,2369,2370,1,0,0,0,2370,2372,5,394,0,0,2371,
		2373,5,1087,0,0,2372,2371,1,0,0,0,2372,2373,1,0,0,0,2373,2374,1,0,0,0,
		2374,2375,3,532,266,0,2375,141,1,0,0,0,2376,2380,5,7,0,0,2377,2378,5,324,
		0,0,2378,2379,5,1087,0,0,2379,2381,7,10,0,0,2380,2377,1,0,0,0,2380,2381,
		1,0,0,0,2381,2383,1,0,0,0,2382,2384,3,60,30,0,2383,2382,1,0,0,0,2383,2384,
		1,0,0,0,2384,2388,1,0,0,0,2385,2386,5,152,0,0,2386,2387,5,579,0,0,2387,
		2389,7,11,0,0,2388,2385,1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,2390,
		2391,5,643,0,0,2391,2396,3,516,258,0,2392,2393,5,1096,0,0,2393,2394,3,
		574,287,0,2394,2395,5,1097,0,0,2395,2397,1,0,0,0,2396,2392,1,0,0,0,2396,
		2397,1,0,0,0,2397,2398,1,0,0,0,2398,2399,5,12,0,0,2399,2406,3,190,95,0,
		2400,2402,5,183,0,0,2401,2403,7,12,0,0,2402,2401,1,0,0,0,2402,2403,1,0,
		0,0,2403,2404,1,0,0,0,2404,2405,5,25,0,0,2405,2407,5,114,0,0,2406,2400,
		1,0,0,0,2406,2407,1,0,0,0,2407,143,1,0,0,0,2408,2415,3,102,51,0,2409,2411,
		5,1098,0,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,2412,
		2414,3,102,51,0,2413,2410,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,
		2415,2416,1,0,0,0,2416,2811,1,0,0,0,2417,2415,1,0,0,0,2418,2420,5,5,0,
		0,2419,2421,5,27,0,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2423,1,0,
		0,0,2422,2424,3,598,299,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,2425,
		1,0,0,0,2425,2426,3,542,271,0,2426,2430,3,88,44,0,2427,2431,5,414,0,0,
		2428,2429,5,322,0,0,2429,2431,3,542,271,0,2430,2427,1,0,0,0,2430,2428,
		1,0,0,0,2430,2431,1,0,0,0,2431,2811,1,0,0,0,2432,2434,5,5,0,0,2433,2435,
		5,27,0,0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2437,1,0,0,0,2436,2438,
		3,598,299,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,0,2439,
		2440,5,1096,0,0,2440,2441,3,542,271,0,2441,2448,3,88,44,0,2442,2443,5,
		1098,0,0,2443,2444,3,542,271,0,2444,2445,3,88,44,0,2445,2447,1,0,0,0,2446,
		2442,1,0,0,0,2447,2450,1,0,0,0,2448,2446,1,0,0,0,2448,2449,1,0,0,0,2449,
		2451,1,0,0,0,2450,2448,1,0,0,0,2451,2452,5,1097,0,0,2452,2811,1,0,0,0,
		2453,2454,5,5,0,0,2454,2456,7,20,0,0,2455,2457,3,598,299,0,2456,2455,1,
		0,0,0,2456,2457,1,0,0,0,2457,2459,1,0,0,0,2458,2460,3,542,271,0,2459,2458,
		1,0,0,0,2459,2460,1,0,0,0,2460,2462,1,0,0,0,2461,2463,3,72,36,0,2462,2461,
		1,0,0,0,2462,2463,1,0,0,0,2463,2464,1,0,0,0,2464,2468,3,578,289,0,2465,
		2467,3,74,37,0,2466,2465,1,0,0,0,2467,2470,1,0,0,0,2468,2466,1,0,0,0,2468,
		2469,1,0,0,0,2469,2811,1,0,0,0,2470,2468,1,0,0,0,2471,2476,5,5,0,0,2472,
		2474,5,29,0,0,2473,2475,3,542,271,0,2474,2473,1,0,0,0,2474,2475,1,0,0,
		0,2475,2477,1,0,0,0,2476,2472,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,
		0,0,2478,2479,5,124,0,0,2479,2481,5,88,0,0,2480,2482,3,542,271,0,2481,
		2480,1,0,0,0,2481,2482,1,0,0,0,2482,2484,1,0,0,0,2483,2485,3,72,36,0,2484,
		2483,1,0,0,0,2484,2485,1,0,0,0,2485,2486,1,0,0,0,2486,2490,3,578,289,0,
		2487,2489,3,74,37,0,2488,2487,1,0,0,0,2489,2492,1,0,0,0,2490,2488,1,0,
		0,0,2490,2491,1,0,0,0,2491,2811,1,0,0,0,2492,2490,1,0,0,0,2493,2498,5,
		5,0,0,2494,2496,5,29,0,0,2495,2497,3,542,271,0,2496,2495,1,0,0,0,2496,
		2497,1,0,0,0,2497,2499,1,0,0,0,2498,2494,1,0,0,0,2498,2499,1,0,0,0,2499,
		2500,1,0,0,0,2500,2502,5,172,0,0,2501,2503,7,20,0,0,2502,2501,1,0,0,0,
		2502,2503,1,0,0,0,2503,2505,1,0,0,0,2504,2506,3,542,271,0,2505,2504,1,
		0,0,0,2505,2506,1,0,0,0,2506,2508,1,0,0,0,2507,2509,3,72,36,0,2508,2507,
		1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,0,2510,2514,3,578,289,0,2511,
		2513,3,74,37,0,2512,2511,1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2514,
		2515,1,0,0,0,2515,2811,1,0,0,0,2516,2514,1,0,0,0,2517,2518,5,5,0,0,2518,
		2520,7,22,0,0,2519,2521,7,20,0,0,2520,2519,1,0,0,0,2520,2521,1,0,0,0,2521,
		2523,1,0,0,0,2522,2524,3,542,271,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,
		2524,2525,1,0,0,0,2525,2529,3,578,289,0,2526,2528,3,74,37,0,2527,2526,
		1,0,0,0,2528,2531,1,0,0,0,2529,2527,1,0,0,0,2529,2530,1,0,0,0,2530,2811,
		1,0,0,0,2531,2529,1,0,0,0,2532,2537,5,5,0,0,2533,2535,5,29,0,0,2534,2536,
		3,542,271,0,2535,2534,1,0,0,0,2535,2536,1,0,0,0,2536,2538,1,0,0,0,2537,
		2533,1,0,0,0,2537,2538,1,0,0,0,2538,2539,1,0,0,0,2539,2540,5,64,0,0,2540,
		2542,5,88,0,0,2541,2543,3,598,299,0,2542,2541,1,0,0,0,2542,2543,1,0,0,
		0,2543,2545,1,0,0,0,2544,2546,3,542,271,0,2545,2544,1,0,0,0,2545,2546,
		1,0,0,0,2546,2547,1,0,0,0,2547,2548,3,578,289,0,2548,2549,3,94,47,0,2549,
		2811,1,0,0,0,2550,2555,5,5,0,0,2551,2553,5,29,0,0,2552,2554,3,542,271,
		0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2556,1,0,0,0,2555,2551,1,0,
		0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2558,5,25,0,0,2558,2559,5,
		1096,0,0,2559,2560,3,640,320,0,2560,2561,5,1097,0,0,2561,2811,1,0,0,0,
		2562,2564,5,324,0,0,2563,2565,5,1087,0,0,2564,2563,1,0,0,0,2564,2565,1,
		0,0,0,2565,2566,1,0,0,0,2566,2811,7,32,0,0,2567,2569,5,7,0,0,2568,2570,
		5,27,0,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2571,1,0,0,0,2571,2577,
		3,542,271,0,2572,2573,5,147,0,0,2573,2574,5,40,0,0,2574,2578,3,590,295,
		0,2575,2576,5,49,0,0,2576,2578,5,40,0,0,2577,2572,1,0,0,0,2577,2575,1,
		0,0,0,2578,2811,1,0,0,0,2579,2581,5,23,0,0,2580,2582,5,27,0,0,2581,2580,
		1,0,0,0,2581,2582,1,0,0,0,2582,2584,1,0,0,0,2583,2585,3,596,298,0,2584,
		2583,1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,3,542,271,0,
		2587,2588,3,542,271,0,2588,2592,3,88,44,0,2589,2593,5,414,0,0,2590,2591,
		5,322,0,0,2591,2593,3,542,271,0,2592,2589,1,0,0,0,2592,2590,1,0,0,0,2592,
		2593,1,0,0,0,2593,2811,1,0,0,0,2594,2595,5,133,0,0,2595,2596,5,27,0,0,
		2596,2597,3,542,271,0,2597,2598,5,166,0,0,2598,2599,3,542,271,0,2599,2811,
		1,0,0,0,2600,2602,5,99,0,0,2601,2603,5,1087,0,0,2602,2601,1,0,0,0,2602,
		2603,1,0,0,0,2603,2604,1,0,0,0,2604,2811,7,4,0,0,2605,2607,5,494,0,0,2606,
		2608,5,27,0,0,2607,2606,1,0,0,0,2607,2608,1,0,0,0,2608,2610,1,0,0,0,2609,
		2611,3,596,298,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2612,1,0,0,0,
		2612,2613,3,542,271,0,2613,2617,3,88,44,0,2614,2618,5,414,0,0,2615,2616,
		5,322,0,0,2616,2618,3,542,271,0,2617,2614,1,0,0,0,2617,2615,1,0,0,0,2617,
		2618,1,0,0,0,2618,2811,1,0,0,0,2619,2621,5,49,0,0,2620,2622,5,27,0,0,2621,
		2620,1,0,0,0,2621,2622,1,0,0,0,2622,2624,1,0,0,0,2623,2625,3,596,298,0,
		2624,2623,1,0,0,0,2624,2625,1,0,0,0,2625,2626,1,0,0,0,2626,2628,3,542,
		271,0,2627,2629,5,138,0,0,2628,2627,1,0,0,0,2628,2629,1,0,0,0,2629,2811,
		1,0,0,0,2630,2631,5,49,0,0,2631,2633,7,33,0,0,2632,2634,3,596,298,0,2633,
		2632,1,0,0,0,2633,2634,1,0,0,0,2634,2635,1,0,0,0,2635,2811,3,542,271,0,
		2636,2637,5,49,0,0,2637,2638,5,124,0,0,2638,2811,5,88,0,0,2639,2640,5,
		133,0,0,2640,2641,7,20,0,0,2641,2642,3,542,271,0,2642,2643,5,166,0,0,2643,
		2644,3,542,271,0,2644,2811,1,0,0,0,2645,2646,5,7,0,0,2646,2647,5,78,0,
		0,2647,2648,3,542,271,0,2648,2649,7,14,0,0,2649,2811,1,0,0,0,2650,2651,
		5,49,0,0,2651,2653,7,20,0,0,2652,2654,3,596,298,0,2653,2652,1,0,0,0,2653,
		2654,1,0,0,0,2654,2655,1,0,0,0,2655,2811,3,542,271,0,2656,2657,5,49,0,
		0,2657,2658,5,64,0,0,2658,2660,5,88,0,0,2659,2661,3,596,298,0,2660,2659,
		1,0,0,0,2660,2661,1,0,0,0,2661,2662,1,0,0,0,2662,2811,3,542,271,0,2663,
		2664,5,383,0,0,2664,2811,5,89,0,0,2665,2666,5,390,0,0,2666,2811,5,89,0,
		0,2667,2669,5,133,0,0,2668,2670,7,34,0,0,2669,2668,1,0,0,0,2669,2670,1,
		0,0,0,2670,2673,1,0,0,0,2671,2674,3,542,271,0,2672,2674,3,516,258,0,2673,
		2671,1,0,0,0,2673,2672,1,0,0,0,2674,2811,1,0,0,0,2675,2676,5,118,0,0,2676,
		2677,5,18,0,0,2677,2811,3,574,287,0,2678,2679,5,31,0,0,2679,2680,5,166,
		0,0,2680,2681,5,24,0,0,2681,2682,5,147,0,0,2682,2685,3,528,264,0,2683,
		2684,5,26,0,0,2684,2686,3,530,265,0,2685,2683,1,0,0,0,2685,2686,1,0,0,
		0,2686,2811,1,0,0,0,2687,2689,5,40,0,0,2688,2687,1,0,0,0,2688,2689,1,0,
		0,0,2689,2690,1,0,0,0,2690,2691,5,24,0,0,2691,2692,5,147,0,0,2692,2693,
		5,1087,0,0,2693,2697,3,528,264,0,2694,2695,5,26,0,0,2695,2696,5,1087,0,
		0,2696,2698,3,530,265,0,2697,2694,1,0,0,0,2697,2698,1,0,0,0,2698,2811,
		1,0,0,0,2699,2700,5,384,0,0,2700,2811,5,619,0,0,2701,2702,5,433,0,0,2702,
		2811,5,619,0,0,2703,2811,5,63,0,0,2704,2705,7,35,0,0,2705,2811,5,640,0,
		0,2706,2707,5,5,0,0,2707,2709,5,123,0,0,2708,2710,3,598,299,0,2709,2708,
		1,0,0,0,2709,2710,1,0,0,0,2710,2711,1,0,0,0,2711,2712,5,1096,0,0,2712,
		2717,3,114,57,0,2713,2714,5,1098,0,0,2714,2716,3,114,57,0,2715,2713,1,
		0,0,0,2716,2719,1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,2720,
		1,0,0,0,2719,2717,1,0,0,0,2720,2721,5,1097,0,0,2721,2811,1,0,0,0,2722,
		2723,5,49,0,0,2723,2725,5,123,0,0,2724,2726,3,596,298,0,2725,2724,1,0,
		0,0,2725,2726,1,0,0,0,2726,2727,1,0,0,0,2727,2811,3,574,287,0,2728,2729,
		5,384,0,0,2729,2732,5,123,0,0,2730,2733,3,574,287,0,2731,2733,5,6,0,0,
		2732,2730,1,0,0,0,2732,2731,1,0,0,0,2733,2734,1,0,0,0,2734,2811,5,619,
		0,0,2735,2736,5,433,0,0,2736,2739,5,123,0,0,2737,2740,3,574,287,0,2738,
		2740,5,6,0,0,2739,2737,1,0,0,0,2739,2738,1,0,0,0,2740,2741,1,0,0,0,2741,
		2811,5,619,0,0,2742,2743,5,628,0,0,2743,2746,5,123,0,0,2744,2747,3,574,
		287,0,2745,2747,5,6,0,0,2746,2744,1,0,0,0,2746,2745,1,0,0,0,2747,2811,
		1,0,0,0,2748,2749,5,351,0,0,2749,2750,5,123,0,0,2750,2811,3,548,274,0,
		2751,2752,5,554,0,0,2752,2753,5,123,0,0,2753,2754,3,574,287,0,2754,2755,
		5,84,0,0,2755,2756,5,1096,0,0,2756,2761,3,114,57,0,2757,2758,5,1098,0,
		0,2758,2760,3,114,57,0,2759,2757,1,0,0,0,2760,2763,1,0,0,0,2761,2759,1,
		0,0,0,2761,2762,1,0,0,0,2762,2764,1,0,0,0,2763,2761,1,0,0,0,2764,2765,
		5,1097,0,0,2765,2811,1,0,0,0,2766,2767,5,403,0,0,2767,2768,5,123,0,0,2768,
		2769,3,542,271,0,2769,2770,5,183,0,0,2770,2771,5,163,0,0,2771,2774,3,518,
		259,0,2772,2773,7,35,0,0,2773,2775,5,640,0,0,2774,2772,1,0,0,0,2774,2775,
		1,0,0,0,2775,2811,1,0,0,0,2776,2777,5,9,0,0,2777,2780,5,123,0,0,2778,2781,
		3,574,287,0,2779,2781,5,6,0,0,2780,2778,1,0,0,0,2780,2779,1,0,0,0,2781,
		2811,1,0,0,0,2782,2783,5,25,0,0,2783,2786,5,123,0,0,2784,2787,3,574,287,
		0,2785,2787,5,6,0,0,2786,2784,1,0,0,0,2786,2785,1,0,0,0,2787,2811,1,0,
		0,0,2788,2789,5,113,0,0,2789,2792,5,123,0,0,2790,2793,3,574,287,0,2791,
		2793,5,6,0,0,2792,2790,1,0,0,0,2792,2791,1,0,0,0,2793,2811,1,0,0,0,2794,
		2795,5,544,0,0,2795,2798,5,123,0,0,2796,2799,3,574,287,0,2797,2799,5,6,
		0,0,2798,2796,1,0,0,0,2798,2797,1,0,0,0,2799,2811,1,0,0,0,2800,2801,5,
		555,0,0,2801,2804,5,123,0,0,2802,2805,3,574,287,0,2803,2805,5,6,0,0,2804,
		2802,1,0,0,0,2804,2803,1,0,0,0,2805,2811,1,0,0,0,2806,2807,5,553,0,0,2807,
		2811,5,525,0,0,2808,2809,5,636,0,0,2809,2811,5,525,0,0,2810,2408,1,0,0,
		0,2810,2418,1,0,0,0,2810,2432,1,0,0,0,2810,2453,1,0,0,0,2810,2471,1,0,
		0,0,2810,2493,1,0,0,0,2810,2517,1,0,0,0,2810,2532,1,0,0,0,2810,2550,1,
		0,0,0,2810,2562,1,0,0,0,2810,2567,1,0,0,0,2810,2579,1,0,0,0,2810,2594,
		1,0,0,0,2810,2600,1,0,0,0,2810,2605,1,0,0,0,2810,2619,1,0,0,0,2810,2630,
		1,0,0,0,2810,2636,1,0,0,0,2810,2639,1,0,0,0,2810,2645,1,0,0,0,2810,2650,
		1,0,0,0,2810,2656,1,0,0,0,2810,2663,1,0,0,0,2810,2665,1,0,0,0,2810,2667,
		1,0,0,0,2810,2675,1,0,0,0,2810,2678,1,0,0,0,2810,2688,1,0,0,0,2810,2699,
		1,0,0,0,2810,2701,1,0,0,0,2810,2703,1,0,0,0,2810,2704,1,0,0,0,2810,2706,
		1,0,0,0,2810,2722,1,0,0,0,2810,2728,1,0,0,0,2810,2735,1,0,0,0,2810,2742,
		1,0,0,0,2810,2748,1,0,0,0,2810,2751,1,0,0,0,2810,2766,1,0,0,0,2810,2776,
		1,0,0,0,2810,2782,1,0,0,0,2810,2788,1,0,0,0,2810,2794,1,0,0,0,2810,2800,
		1,0,0,0,2810,2806,1,0,0,0,2810,2808,1,0,0,0,2811,145,1,0,0,0,2812,2813,
		5,49,0,0,2813,2815,7,0,0,0,2814,2816,3,596,298,0,2815,2814,1,0,0,0,2815,
		2816,1,0,0,0,2816,2817,1,0,0,0,2817,2818,3,542,271,0,2818,147,1,0,0,0,
		2819,2820,5,49,0,0,2820,2822,5,400,0,0,2821,2823,3,596,298,0,2822,2821,
		1,0,0,0,2822,2823,1,0,0,0,2823,2824,1,0,0,0,2824,2825,3,516,258,0,2825,
		149,1,0,0,0,2826,2827,5,49,0,0,2827,2829,5,78,0,0,2828,2830,7,1,0,0,2829,
		2828,1,0,0,0,2829,2830,1,0,0,0,2830,2831,1,0,0,0,2831,2832,3,542,271,0,
		2832,2833,5,112,0,0,2833,2846,3,518,259,0,2834,2836,5,324,0,0,2835,2837,
		5,1087,0,0,2836,2835,1,0,0,0,2836,2837,1,0,0,0,2837,2838,1,0,0,0,2838,
		2845,7,36,0,0,2839,2841,5,99,0,0,2840,2842,5,1087,0,0,2841,2840,1,0,0,
		0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,2843,2845,7,4,0,0,2844,2834,1,0,
		0,0,2844,2839,1,0,0,0,2845,2848,1,0,0,0,2846,2844,1,0,0,0,2846,2847,1,
		0,0,0,2847,151,1,0,0,0,2848,2846,1,0,0,0,2849,2850,5,49,0,0,2850,2851,
		5,457,0,0,2851,2852,5,70,0,0,2852,2853,3,542,271,0,2853,2854,5,394,0,0,
		2854,2855,5,1087,0,0,2855,2856,3,532,266,0,2856,153,1,0,0,0,2857,2858,
		5,49,0,0,2858,2860,5,125,0,0,2859,2861,3,596,298,0,2860,2859,1,0,0,0,2860,
		2861,1,0,0,0,2861,2862,1,0,0,0,2862,2863,3,516,258,0,2863,155,1,0,0,0,
		2864,2865,5,49,0,0,2865,2867,5,421,0,0,2866,2868,3,596,298,0,2867,2866,
		1,0,0,0,2867,2868,1,0,0,0,2868,2869,1,0,0,0,2869,2870,3,516,258,0,2870,
		157,1,0,0,0,2871,2872,5,49,0,0,2872,2874,5,580,0,0,2873,2875,3,596,298,
		0,2874,2873,1,0,0,0,2874,2875,1,0,0,0,2875,2876,1,0,0,0,2876,2877,3,542,
		271,0,2877,159,1,0,0,0,2878,2880,5,49,0,0,2879,2881,5,621,0,0,2880,2879,
		1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2884,5,163,0,0,2883,2885,
		3,596,298,0,2884,2883,1,0,0,0,2884,2885,1,0,0,0,2885,2886,1,0,0,0,2886,
		2888,3,576,288,0,2887,2889,7,37,0,0,2888,2887,1,0,0,0,2888,2889,1,0,0,
		0,2889,161,1,0,0,0,2890,2891,5,49,0,0,2891,2892,5,619,0,0,2892,2898,3,
		542,271,0,2893,2895,5,394,0,0,2894,2896,5,1087,0,0,2895,2894,1,0,0,0,2895,
		2896,1,0,0,0,2896,2897,1,0,0,0,2897,2899,3,532,266,0,2898,2893,1,0,0,0,
		2898,2899,1,0,0,0,2899,163,1,0,0,0,2900,2901,5,49,0,0,2901,2903,5,168,
		0,0,2902,2904,3,596,298,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,2905,
		1,0,0,0,2905,2906,3,516,258,0,2906,165,1,0,0,0,2907,2908,5,49,0,0,2908,
		2910,5,643,0,0,2909,2911,3,596,298,0,2910,2909,1,0,0,0,2910,2911,1,0,0,
		0,2911,2912,1,0,0,0,2912,2917,3,516,258,0,2913,2914,5,1098,0,0,2914,2916,
		3,516,258,0,2915,2913,1,0,0,0,2916,2919,1,0,0,0,2917,2915,1,0,0,0,2917,
		2918,1,0,0,0,2918,2921,1,0,0,0,2919,2917,1,0,0,0,2920,2922,7,37,0,0,2921,
		2920,1,0,0,0,2921,2922,1,0,0,0,2922,167,1,0,0,0,2923,2924,5,133,0,0,2924,
		2925,5,163,0,0,2925,2930,3,170,85,0,2926,2927,5,1098,0,0,2927,2929,3,170,
		85,0,2928,2926,1,0,0,0,2929,2932,1,0,0,0,2930,2928,1,0,0,0,2930,2931,1,
		0,0,0,2931,169,1,0,0,0,2932,2930,1,0,0,0,2933,2934,3,518,259,0,2934,2935,
		5,166,0,0,2935,2936,3,518,259,0,2936,171,1,0,0,0,2937,2939,5,628,0,0,2938,
		2940,5,163,0,0,2939,2938,1,0,0,0,2939,2940,1,0,0,0,2940,2941,1,0,0,0,2941,
		2942,3,518,259,0,2942,173,1,0,0,0,2943,2944,5,19,0,0,2944,2951,3,516,258,
		0,2945,2948,5,1096,0,0,2946,2949,3,584,292,0,2947,2949,3,580,290,0,2948,
		2946,1,0,0,0,2948,2947,1,0,0,0,2948,2949,1,0,0,0,2949,2950,1,0,0,0,2950,
		2952,5,1097,0,0,2951,2945,1,0,0,0,2951,2952,1,0,0,0,2952,175,1,0,0,0,2953,
		2956,3,202,101,0,2954,2956,3,204,102,0,2955,2953,1,0,0,0,2955,2954,1,0,
		0,0,2956,177,1,0,0,0,2957,2958,5,386,0,0,2958,2959,3,580,290,0,2959,179,
		1,0,0,0,2960,2965,3,206,103,0,2961,2965,3,208,104,0,2962,2965,3,210,105,
		0,2963,2965,3,212,106,0,2964,2960,1,0,0,0,2964,2961,1,0,0,0,2964,2962,
		1,0,0,0,2964,2963,1,0,0,0,2965,181,1,0,0,0,2966,2968,5,82,0,0,2967,2969,
		7,38,0,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2971,1,0,0,0,2970,2972,
		5,75,0,0,2971,2970,1,0,0,0,2971,2972,1,0,0,0,2972,2974,1,0,0,0,2973,2975,
		5,84,0,0,2974,2973,1,0,0,0,2974,2975,1,0,0,0,2975,2976,1,0,0,0,2976,2983,
		3,518,259,0,2977,2978,5,123,0,0,2978,2980,5,1096,0,0,2979,2981,3,574,287,
		0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,2982,1,0,0,0,2982,2984,5,1097,
		0,0,2983,2977,1,0,0,0,2983,2984,1,0,0,0,2984,3001,1,0,0,0,2985,2986,5,
		1096,0,0,2986,2987,3,574,287,0,2987,2988,5,1097,0,0,2988,2990,1,0,0,0,
		2989,2985,1,0,0,0,2989,2990,1,0,0,0,2990,2991,1,0,0,0,2991,3002,3,194,
		97,0,2992,2993,5,147,0,0,2993,2998,3,196,98,0,2994,2995,5,1098,0,0,2995,
		2997,3,196,98,0,2996,2994,1,0,0,0,2997,3000,1,0,0,0,2998,2996,1,0,0,0,
		2998,2999,1,0,0,0,2999,3002,1,0,0,0,3000,2998,1,0,0,0,3001,2989,1,0,0,
		0,3001,2992,1,0,0,0,3002,3015,1,0,0,0,3003,3004,5,112,0,0,3004,3005,5,
		388,0,0,3005,3006,5,88,0,0,3006,3007,5,175,0,0,3007,3012,3,196,98,0,3008,
		3009,5,1098,0,0,3009,3011,3,196,98,0,3010,3008,1,0,0,0,3011,3014,1,0,0,
		0,3012,3010,1,0,0,0,3012,3013,1,0,0,0,3013,3016,1,0,0,0,3014,3012,1,0,
		0,0,3015,3003,1,0,0,0,3015,3016,1,0,0,0,3016,183,1,0,0,0,3017,3018,5,98,
		0,0,3018,3020,5,375,0,0,3019,3021,7,39,0,0,3020,3019,1,0,0,0,3020,3021,
		1,0,0,0,3021,3023,1,0,0,0,3022,3024,5,456,0,0,3023,3022,1,0,0,0,3023,3024,
		1,0,0,0,3024,3025,1,0,0,0,3025,3026,5,79,0,0,3026,3028,5,1111,0,0,3027,
		3029,7,6,0,0,3028,3027,1,0,0,0,3028,3029,1,0,0,0,3029,3030,1,0,0,0,3030,
		3031,5,84,0,0,3031,3032,5,163,0,0,3032,3038,3,518,259,0,3033,3034,5,123,
		0,0,3034,3035,5,1096,0,0,3035,3036,3,574,287,0,3036,3037,5,1097,0,0,3037,
		3039,1,0,0,0,3038,3033,1,0,0,0,3038,3039,1,0,0,0,3039,3043,1,0,0,0,3040,
		3041,5,24,0,0,3041,3042,5,147,0,0,3042,3044,3,528,264,0,3043,3040,1,0,
		0,0,3043,3044,1,0,0,0,3044,3051,1,0,0,0,3045,3047,7,40,0,0,3046,3048,3,
		254,127,0,3047,3046,1,0,0,0,3048,3049,1,0,0,0,3049,3047,1,0,0,0,3049,3050,
		1,0,0,0,3050,3052,1,0,0,0,3051,3045,1,0,0,0,3051,3052,1,0,0,0,3052,3059,
		1,0,0,0,3053,3055,5,97,0,0,3054,3056,3,256,128,0,3055,3054,1,0,0,0,3056,
		3057,1,0,0,0,3057,3055,1,0,0,0,3057,3058,1,0,0,0,3058,3060,1,0,0,0,3059,
		3053,1,0,0,0,3059,3060,1,0,0,0,3060,3065,1,0,0,0,3061,3062,5,75,0,0,3062,
		3063,3,548,274,0,3063,3064,7,41,0,0,3064,3066,1,0,0,0,3065,3061,1,0,0,
		0,3065,3066,1,0,0,0,3066,3078,1,0,0,0,3067,3068,5,1096,0,0,3068,3073,3,
		198,99,0,3069,3070,5,1098,0,0,3070,3072,3,198,99,0,3071,3069,1,0,0,0,3072,
		3075,1,0,0,0,3073,3071,1,0,0,0,3073,3074,1,0,0,0,3074,3076,1,0,0,0,3075,
		3073,1,0,0,0,3076,3077,5,1097,0,0,3077,3079,1,0,0,0,3078,3067,1,0,0,0,
		3078,3079,1,0,0,0,3079,3089,1,0,0,0,3080,3081,5,147,0,0,3081,3086,3,196,
		98,0,3082,3083,5,1098,0,0,3083,3085,3,196,98,0,3084,3082,1,0,0,0,3085,
		3088,1,0,0,0,3086,3084,1,0,0,0,3086,3087,1,0,0,0,3087,3090,1,0,0,0,3088,
		3086,1,0,0,0,3089,3080,1,0,0,0,3089,3090,1,0,0,0,3090,185,1,0,0,0,3091,
		3092,5,98,0,0,3092,3094,5,654,0,0,3093,3095,7,39,0,0,3094,3093,1,0,0,0,
		3094,3095,1,0,0,0,3095,3097,1,0,0,0,3096,3098,5,456,0,0,3097,3096,1,0,
		0,0,3097,3098,1,0,0,0,3098,3099,1,0,0,0,3099,3100,5,79,0,0,3100,3102,5,
		1111,0,0,3101,3103,7,6,0,0,3102,3101,1,0,0,0,3102,3103,1,0,0,0,3103,3104,
		1,0,0,0,3104,3105,5,84,0,0,3105,3106,5,163,0,0,3106,3110,3,518,259,0,3107,
		3108,5,24,0,0,3108,3109,5,147,0,0,3109,3111,3,528,264,0,3110,3107,1,0,
		0,0,3110,3111,1,0,0,0,3111,3118,1,0,0,0,3112,3113,5,574,0,0,3113,3114,
		5,431,0,0,3114,3115,5,18,0,0,3115,3116,5,1089,0,0,3116,3117,5,1111,0,0,
		3117,3119,5,1088,0,0,3118,3112,1,0,0,0,3118,3119,1,0,0,0,3119,3124,1,0,
		0,0,3120,3121,5,75,0,0,3121,3122,3,548,274,0,3122,3123,7,41,0,0,3123,3125,
		1,0,0,0,3124,3120,1,0,0,0,3124,3125,1,0,0,0,3125,3137,1,0,0,0,3126,3127,
		5,1096,0,0,3127,3132,3,198,99,0,3128,3129,5,1098,0,0,3129,3131,3,198,99,
		0,3130,3128,1,0,0,0,3131,3134,1,0,0,0,3132,3130,1,0,0,0,3132,3133,1,0,
		0,0,3133,3135,1,0,0,0,3134,3132,1,0,0,0,3135,3136,5,1097,0,0,3136,3138,
		1,0,0,0,3137,3126,1,0,0,0,3137,3138,1,0,0,0,3138,3148,1,0,0,0,3139,3140,
		5,147,0,0,3140,3145,3,196,98,0,3141,3142,5,1098,0,0,3142,3144,3,196,98,
		0,3143,3141,1,0,0,0,3144,3147,1,0,0,0,3145,3143,1,0,0,0,3145,3146,1,0,
		0,0,3146,3149,1,0,0,0,3147,3145,1,0,0,0,3148,3139,1,0,0,0,3148,3149,1,
		0,0,0,3149,187,1,0,0,0,3150,3152,5,135,0,0,3151,3153,7,42,0,0,3152,3151,
		1,0,0,0,3152,3153,1,0,0,0,3153,3155,1,0,0,0,3154,3156,5,84,0,0,3155,3154,
		1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,3163,3,518,259,0,3158,
		3159,5,123,0,0,3159,3160,5,1096,0,0,3160,3161,3,574,287,0,3161,3162,5,
		1097,0,0,3162,3164,1,0,0,0,3163,3158,1,0,0,0,3163,3164,1,0,0,0,3164,3181,
		1,0,0,0,3165,3166,5,1096,0,0,3166,3167,3,574,287,0,3167,3168,5,1097,0,
		0,3168,3170,1,0,0,0,3169,3165,1,0,0,0,3169,3170,1,0,0,0,3170,3171,1,0,
		0,0,3171,3182,3,194,97,0,3172,3173,5,147,0,0,3173,3178,3,196,98,0,3174,
		3175,5,1098,0,0,3175,3177,3,196,98,0,3176,3174,1,0,0,0,3177,3180,1,0,0,
		0,3178,3176,1,0,0,0,3178,3179,1,0,0,0,3179,3182,1,0,0,0,3180,3178,1,0,
		0,0,3181,3169,1,0,0,0,3181,3172,1,0,0,0,3182,189,1,0,0,0,3183,3185,3,238,
		119,0,3184,3186,3,200,100,0,3185,3184,1,0,0,0,3185,3186,1,0,0,0,3186,3239,
		1,0,0,0,3187,3189,3,234,117,0,3188,3190,3,200,100,0,3189,3188,1,0,0,0,
		3189,3190,1,0,0,0,3190,3239,1,0,0,0,3191,3193,3,240,120,0,3192,3194,3,
		244,122,0,3193,3192,1,0,0,0,3194,3195,1,0,0,0,3195,3193,1,0,0,0,3195,3196,
		1,0,0,0,3196,3205,1,0,0,0,3197,3199,5,171,0,0,3198,3200,7,43,0,0,3199,
		3198,1,0,0,0,3199,3200,1,0,0,0,3200,3203,1,0,0,0,3201,3204,3,238,119,0,
		3202,3204,3,234,117,0,3203,3201,1,0,0,0,3203,3202,1,0,0,0,3204,3206,1,
		0,0,0,3205,3197,1,0,0,0,3205,3206,1,0,0,0,3206,3208,1,0,0,0,3207,3209,
		3,218,109,0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,3211,1,0,0,0,3210,
		3212,3,268,134,0,3211,3210,1,0,0,0,3211,3212,1,0,0,0,3212,3214,1,0,0,0,
		3213,3215,3,200,100,0,3214,3213,1,0,0,0,3214,3215,1,0,0,0,3215,3239,1,
		0,0,0,3216,3218,3,236,118,0,3217,3219,3,242,121,0,3218,3217,1,0,0,0,3219,
		3220,1,0,0,0,3220,3218,1,0,0,0,3220,3221,1,0,0,0,3221,3227,1,0,0,0,3222,
		3224,5,171,0,0,3223,3225,7,43,0,0,3224,3223,1,0,0,0,3224,3225,1,0,0,0,
		3225,3226,1,0,0,0,3226,3228,3,234,117,0,3227,3222,1,0,0,0,3227,3228,1,
		0,0,0,3228,3230,1,0,0,0,3229,3231,3,218,109,0,3230,3229,1,0,0,0,3230,3231,
		1,0,0,0,3231,3233,1,0,0,0,3232,3234,3,268,134,0,3233,3232,1,0,0,0,3233,
		3234,1,0,0,0,3234,3236,1,0,0,0,3235,3237,3,200,100,0,3236,3235,1,0,0,0,
		3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,3183,1,0,0,0,3238,3187,1,0,0,
		0,3238,3191,1,0,0,0,3238,3216,1,0,0,0,3239,191,1,0,0,0,3240,3243,3,214,
		107,0,3241,3243,3,216,108,0,3242,3240,1,0,0,0,3242,3241,1,0,0,0,3243,193,
		1,0,0,0,3244,3263,3,190,95,0,3245,3246,7,44,0,0,3246,3248,5,1096,0,0,3247,
		3249,3,582,291,0,3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,3250,1,0,0,0,
		3250,3259,5,1097,0,0,3251,3252,5,1098,0,0,3252,3254,5,1096,0,0,3253,3255,
		3,582,291,0,3254,3253,1,0,0,0,3254,3255,1,0,0,0,3255,3256,1,0,0,0,3256,
		3258,5,1097,0,0,3257,3251,1,0,0,0,3258,3261,1,0,0,0,3259,3257,1,0,0,0,
		3259,3260,1,0,0,0,3260,3263,1,0,0,0,3261,3259,1,0,0,0,3262,3244,1,0,0,
		0,3262,3245,1,0,0,0,3263,195,1,0,0,0,3264,3265,3,520,260,0,3265,3268,5,
		1087,0,0,3266,3269,3,640,320,0,3267,3269,5,40,0,0,3268,3266,1,0,0,0,3268,
		3267,1,0,0,0,3269,197,1,0,0,0,3270,3273,3,542,271,0,3271,3273,5,1123,0,
		0,3272,3270,1,0,0,0,3272,3271,1,0,0,0,3273,199,1,0,0,0,3274,3275,5,62,
		0,0,3275,3281,5,175,0,0,3276,3277,5,99,0,0,3277,3278,5,77,0,0,3278,3279,
		5,582,0,0,3279,3281,5,493,0,0,3280,3274,1,0,0,0,3280,3276,1,0,0,0,3281,
		201,1,0,0,0,3282,3284,5,42,0,0,3283,3285,5,101,0,0,3284,3283,1,0,0,0,3284,
		3285,1,0,0,0,3285,3287,1,0,0,0,3286,3288,5,543,0,0,3287,3286,1,0,0,0,3287,
		3288,1,0,0,0,3288,3290,1,0,0,0,3289,3291,5,75,0,0,3290,3289,1,0,0,0,3290,
		3291,1,0,0,0,3291,3292,1,0,0,0,3292,3293,5,65,0,0,3293,3299,3,518,259,
		0,3294,3295,5,123,0,0,3295,3296,5,1096,0,0,3296,3297,3,574,287,0,3297,
		3298,5,1097,0,0,3298,3300,1,0,0,0,3299,3294,1,0,0,0,3299,3300,1,0,0,0,
		3300,3303,1,0,0,0,3301,3302,5,181,0,0,3302,3304,3,640,320,0,3303,3301,
		1,0,0,0,3303,3304,1,0,0,0,3304,3306,1,0,0,0,3305,3307,3,218,109,0,3306,
		3305,1,0,0,0,3306,3307,1,0,0,0,3307,3310,1,0,0,0,3308,3309,5,95,0,0,3309,
		3311,3,270,135,0,3310,3308,1,0,0,0,3310,3311,1,0,0,0,3311,203,1,0,0,0,
		3312,3314,5,42,0,0,3313,3315,5,101,0,0,3314,3313,1,0,0,0,3314,3315,1,0,
		0,0,3315,3317,1,0,0,0,3316,3318,5,543,0,0,3317,3316,1,0,0,0,3317,3318,
		1,0,0,0,3318,3320,1,0,0,0,3319,3321,5,75,0,0,3320,3319,1,0,0,0,3320,3321,
		1,0,0,0,3321,3361,1,0,0,0,3322,3325,3,518,259,0,3323,3324,5,1095,0,0,3324,
		3326,5,1080,0,0,3325,3323,1,0,0,0,3325,3326,1,0,0,0,3326,3335,1,0,0,0,
		3327,3328,5,1098,0,0,3328,3331,3,518,259,0,3329,3330,5,1095,0,0,3330,3332,
		5,1080,0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,3334,1,0,0,0,3333,
		3327,1,0,0,0,3334,3337,1,0,0,0,3335,3333,1,0,0,0,3335,3336,1,0,0,0,3336,
		3338,1,0,0,0,3337,3335,1,0,0,0,3338,3339,5,65,0,0,3339,3340,3,222,111,
		0,3340,3362,1,0,0,0,3341,3342,5,65,0,0,3342,3345,3,518,259,0,3343,3344,
		5,1095,0,0,3344,3346,5,1080,0,0,3345,3343,1,0,0,0,3345,3346,1,0,0,0,3346,
		3355,1,0,0,0,3347,3348,5,1098,0,0,3348,3351,3,518,259,0,3349,3350,5,1095,
		0,0,3350,3352,5,1080,0,0,3351,3349,1,0,0,0,3351,3352,1,0,0,0,3352,3354,
		1,0,0,0,3353,3347,1,0,0,0,3354,3357,1,0,0,0,3355,3353,1,0,0,0,3355,3356,
		1,0,0,0,3356,3358,1,0,0,0,3357,3355,1,0,0,0,3358,3359,5,178,0,0,3359,3360,
		3,222,111,0,3360,3362,1,0,0,0,3361,3322,1,0,0,0,3361,3341,1,0,0,0,3362,
		3365,1,0,0,0,3363,3364,5,181,0,0,3364,3366,3,640,320,0,3365,3363,1,0,0,
		0,3365,3366,1,0,0,0,3366,205,1,0,0,0,3367,3368,5,426,0,0,3368,3369,3,518,
		259,0,3369,3374,5,517,0,0,3370,3372,5,12,0,0,3371,3370,1,0,0,0,3371,3372,
		1,0,0,0,3372,3373,1,0,0,0,3373,3375,3,542,271,0,3374,3371,1,0,0,0,3374,
		3375,1,0,0,0,3375,207,1,0,0,0,3376,3377,5,426,0,0,3377,3378,3,518,259,
		0,3378,3379,5,128,0,0,3379,3386,3,542,271,0,3380,3381,3,648,324,0,3381,
		3382,5,1096,0,0,3382,3383,3,584,292,0,3383,3384,5,1097,0,0,3384,3387,1,
		0,0,0,3385,3387,7,45,0,0,3386,3380,1,0,0,0,3386,3385,1,0,0,0,3387,3390,
		1,0,0,0,3388,3389,5,181,0,0,3389,3391,3,640,320,0,3390,3388,1,0,0,0,3390,
		3391,1,0,0,0,3391,3394,1,0,0,0,3392,3393,5,95,0,0,3393,3395,3,270,135,
		0,3394,3392,1,0,0,0,3394,3395,1,0,0,0,3395,209,1,0,0,0,3396,3397,5,426,
		0,0,3397,3398,3,518,259,0,3398,3399,5,128,0,0,3399,3402,7,46,0,0,3400,
		3401,5,181,0,0,3401,3403,3,640,320,0,3402,3400,1,0,0,0,3402,3403,1,0,0,
		0,3403,3406,1,0,0,0,3404,3405,5,95,0,0,3405,3407,3,270,135,0,3406,3404,
		1,0,0,0,3406,3407,1,0,0,0,3407,211,1,0,0,0,3408,3409,5,426,0,0,3409,3410,
		3,518,259,0,3410,3411,5,349,0,0,3411,213,1,0,0,0,3412,3414,5,175,0,0,3413,
		3415,5,101,0,0,3414,3413,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,0,0,0,3416,
		3418,5,75,0,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3419,1,0,0,0,3419,
		3424,3,518,259,0,3420,3422,5,12,0,0,3421,3420,1,0,0,0,3421,3422,1,0,0,
		0,3422,3423,1,0,0,0,3423,3425,3,542,271,0,3424,3421,1,0,0,0,3424,3425,
		1,0,0,0,3425,3426,1,0,0,0,3426,3427,5,147,0,0,3427,3432,3,196,98,0,3428,
		3429,5,1098,0,0,3429,3431,3,196,98,0,3430,3428,1,0,0,0,3431,3434,1,0,0,
		0,3432,3430,1,0,0,0,3432,3433,1,0,0,0,3433,3437,1,0,0,0,3434,3432,1,0,
		0,0,3435,3436,5,181,0,0,3436,3438,3,640,320,0,3437,3435,1,0,0,0,3437,3438,
		1,0,0,0,3438,3440,1,0,0,0,3439,3441,3,218,109,0,3440,3439,1,0,0,0,3440,
		3441,1,0,0,0,3441,3443,1,0,0,0,3442,3444,3,268,134,0,3443,3442,1,0,0,0,
		3443,3444,1,0,0,0,3444,215,1,0,0,0,3445,3447,5,175,0,0,3446,3448,5,101,
		0,0,3447,3446,1,0,0,0,3447,3448,1,0,0,0,3448,3450,1,0,0,0,3449,3451,5,
		75,0,0,3450,3449,1,0,0,0,3450,3451,1,0,0,0,3451,3452,1,0,0,0,3452,3453,
		3,222,111,0,3453,3454,5,147,0,0,3454,3459,3,196,98,0,3455,3456,5,1098,
		0,0,3456,3458,3,196,98,0,3457,3455,1,0,0,0,3458,3461,1,0,0,0,3459,3457,
		1,0,0,0,3459,3460,1,0,0,0,3460,3464,1,0,0,0,3461,3459,1,0,0,0,3462,3463,
		5,181,0,0,3463,3465,3,640,320,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,
		217,1,0,0,0,3466,3467,5,118,0,0,3467,3468,5,18,0,0,3468,3473,3,220,110,
		0,3469,3470,5,1098,0,0,3470,3472,3,220,110,0,3471,3469,1,0,0,0,3472,3475,
		1,0,0,0,3473,3471,1,0,0,0,3473,3474,1,0,0,0,3474,219,1,0,0,0,3475,3473,
		1,0,0,0,3476,3478,3,640,320,0,3477,3479,7,47,0,0,3478,3477,1,0,0,0,3478,
		3479,1,0,0,0,3479,221,1,0,0,0,3480,3485,3,224,112,0,3481,3482,5,1098,0,
		0,3482,3484,3,224,112,0,3483,3481,1,0,0,0,3484,3487,1,0,0,0,3485,3483,
		1,0,0,0,3485,3486,1,0,0,0,3486,223,1,0,0,0,3487,3485,1,0,0,0,3488,3492,
		3,226,113,0,3489,3491,3,232,116,0,3490,3489,1,0,0,0,3491,3494,1,0,0,0,
		3492,3490,1,0,0,0,3492,3493,1,0,0,0,3493,3506,1,0,0,0,3494,3492,1,0,0,
		0,3495,3496,5,1096,0,0,3496,3500,3,226,113,0,3497,3499,3,232,116,0,3498,
		3497,1,0,0,0,3499,3502,1,0,0,0,3500,3498,1,0,0,0,3500,3501,1,0,0,0,3501,
		3503,1,0,0,0,3502,3500,1,0,0,0,3503,3504,5,1097,0,0,3504,3506,1,0,0,0,
		3505,3488,1,0,0,0,3505,3495,1,0,0,0,3506,225,1,0,0,0,3507,3513,3,518,259,
		0,3508,3509,5,123,0,0,3509,3510,5,1096,0,0,3510,3511,3,574,287,0,3511,
		3512,5,1097,0,0,3512,3514,1,0,0,0,3513,3508,1,0,0,0,3513,3514,1,0,0,0,
		3514,3519,1,0,0,0,3515,3517,5,12,0,0,3516,3515,1,0,0,0,3516,3517,1,0,0,
		0,3517,3518,1,0,0,0,3518,3520,3,542,271,0,3519,3516,1,0,0,0,3519,3520,
		1,0,0,0,3520,3529,1,0,0,0,3521,3526,3,228,114,0,3522,3523,5,1098,0,0,3523,
		3525,3,228,114,0,3524,3522,1,0,0,0,3525,3528,1,0,0,0,3526,3524,1,0,0,0,
		3526,3527,1,0,0,0,3527,3530,1,0,0,0,3528,3526,1,0,0,0,3529,3521,1,0,0,
		0,3529,3530,1,0,0,0,3530,3548,1,0,0,0,3531,3537,3,190,95,0,3532,3533,5,
		1096,0,0,3533,3534,3,190,95,0,3534,3535,5,1097,0,0,3535,3537,1,0,0,0,3536,
		3531,1,0,0,0,3536,3532,1,0,0,0,3537,3539,1,0,0,0,3538,3540,5,12,0,0,3539,
		3538,1,0,0,0,3539,3540,1,0,0,0,3540,3541,1,0,0,0,3541,3542,3,542,271,0,
		3542,3548,1,0,0,0,3543,3544,5,1096,0,0,3544,3545,3,222,111,0,3545,3546,
		5,1097,0,0,3546,3548,1,0,0,0,3547,3507,1,0,0,0,3547,3536,1,0,0,0,3547,
		3543,1,0,0,0,3548,227,1,0,0,0,3549,3550,7,48,0,0,3550,3553,7,20,0,0,3551,
		3552,5,62,0,0,3552,3554,3,230,115,0,3553,3551,1,0,0,0,3553,3554,1,0,0,
		0,3554,3555,1,0,0,0,3555,3556,5,1096,0,0,3556,3557,3,574,287,0,3557,3558,
		5,1097,0,0,3558,229,1,0,0,0,3559,3565,5,87,0,0,3560,3561,5,118,0,0,3561,
		3565,5,18,0,0,3562,3563,5,70,0,0,3563,3565,5,18,0,0,3564,3559,1,0,0,0,
		3564,3560,1,0,0,0,3564,3562,1,0,0,0,3565,231,1,0,0,0,3566,3568,7,49,0,
		0,3567,3566,1,0,0,0,3567,3568,1,0,0,0,3568,3569,1,0,0,0,3569,3570,5,87,
		0,0,3570,3578,3,226,113,0,3571,3572,5,112,0,0,3572,3579,3,640,320,0,3573,
		3574,5,178,0,0,3574,3575,5,1096,0,0,3575,3576,3,574,287,0,3576,3577,5,
		1097,0,0,3577,3579,1,0,0,0,3578,3571,1,0,0,0,3578,3573,1,0,0,0,3578,3579,
		1,0,0,0,3579,3611,1,0,0,0,3580,3581,5,162,0,0,3581,3584,3,226,113,0,3582,
		3583,5,112,0,0,3583,3585,3,640,320,0,3584,3582,1,0,0,0,3584,3585,1,0,0,
		0,3585,3611,1,0,0,0,3586,3588,7,50,0,0,3587,3589,5,121,0,0,3588,3587,1,
		0,0,0,3588,3589,1,0,0,0,3589,3590,1,0,0,0,3590,3591,5,87,0,0,3591,3599,
		3,226,113,0,3592,3593,5,112,0,0,3593,3600,3,640,320,0,3594,3595,5,178,
		0,0,3595,3596,5,1096,0,0,3596,3597,3,574,287,0,3597,3598,5,1097,0,0,3598,
		3600,1,0,0,0,3599,3592,1,0,0,0,3599,3594,1,0,0,0,3600,3611,1,0,0,0,3601,
		3606,5,107,0,0,3602,3604,7,50,0,0,3603,3605,5,121,0,0,3604,3603,1,0,0,
		0,3604,3605,1,0,0,0,3605,3607,1,0,0,0,3606,3602,1,0,0,0,3606,3607,1,0,
		0,0,3607,3608,1,0,0,0,3608,3609,5,87,0,0,3609,3611,3,226,113,0,3610,3567,
		1,0,0,0,3610,3580,1,0,0,0,3610,3586,1,0,0,0,3610,3601,1,0,0,0,3611,233,
		1,0,0,0,3612,3613,5,1096,0,0,3613,3614,3,238,119,0,3614,3615,5,1097,0,
		0,3615,3621,1,0,0,0,3616,3617,5,1096,0,0,3617,3618,3,234,117,0,3618,3619,
		5,1097,0,0,3619,3621,1,0,0,0,3620,3612,1,0,0,0,3620,3616,1,0,0,0,3621,
		235,1,0,0,0,3622,3623,5,1096,0,0,3623,3624,3,240,120,0,3624,3625,5,1097,
		0,0,3625,3631,1,0,0,0,3626,3627,5,1096,0,0,3627,3628,3,236,118,0,3628,
		3629,5,1097,0,0,3629,3631,1,0,0,0,3630,3622,1,0,0,0,3630,3626,1,0,0,0,
		3631,237,1,0,0,0,3632,3636,5,146,0,0,3633,3635,3,246,123,0,3634,3633,1,
		0,0,0,3635,3638,1,0,0,0,3636,3634,1,0,0,0,3636,3637,1,0,0,0,3637,3639,
		1,0,0,0,3638,3636,1,0,0,0,3639,3641,3,248,124,0,3640,3642,3,252,126,0,
		3641,3640,1,0,0,0,3641,3642,1,0,0,0,3642,3644,1,0,0,0,3643,3645,3,258,
		129,0,3644,3643,1,0,0,0,3644,3645,1,0,0,0,3645,3647,1,0,0,0,3646,3648,
		3,260,130,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3650,1,0,0,0,3649,
		3651,3,262,131,0,3650,3649,1,0,0,0,3650,3651,1,0,0,0,3651,3653,1,0,0,0,
		3652,3654,3,264,132,0,3653,3652,1,0,0,0,3653,3654,1,0,0,0,3654,3656,1,
		0,0,0,3655,3657,3,218,109,0,3656,3655,1,0,0,0,3656,3657,1,0,0,0,3657,3659,
		1,0,0,0,3658,3660,3,268,134,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,3660,
		3691,1,0,0,0,3661,3665,5,146,0,0,3662,3664,3,246,123,0,3663,3662,1,0,0,
		0,3664,3667,1,0,0,0,3665,3663,1,0,0,0,3665,3666,1,0,0,0,3666,3668,1,0,
		0,0,3667,3665,1,0,0,0,3668,3670,3,248,124,0,3669,3671,3,258,129,0,3670,
		3669,1,0,0,0,3670,3671,1,0,0,0,3671,3673,1,0,0,0,3672,3674,3,260,130,0,
		3673,3672,1,0,0,0,3673,3674,1,0,0,0,3674,3676,1,0,0,0,3675,3677,3,262,
		131,0,3676,3675,1,0,0,0,3676,3677,1,0,0,0,3677,3679,1,0,0,0,3678,3680,
		3,264,132,0,3679,3678,1,0,0,0,3679,3680,1,0,0,0,3680,3682,1,0,0,0,3681,
		3683,3,218,109,0,3682,3681,1,0,0,0,3682,3683,1,0,0,0,3683,3685,1,0,0,0,
		3684,3686,3,268,134,0,3685,3684,1,0,0,0,3685,3686,1,0,0,0,3686,3688,1,
		0,0,0,3687,3689,3,252,126,0,3688,3687,1,0,0,0,3688,3689,1,0,0,0,3689,3691,
		1,0,0,0,3690,3632,1,0,0,0,3690,3661,1,0,0,0,3691,239,1,0,0,0,3692,3696,
		5,146,0,0,3693,3695,3,246,123,0,3694,3693,1,0,0,0,3695,3698,1,0,0,0,3696,
		3694,1,0,0,0,3696,3697,1,0,0,0,3697,3699,1,0,0,0,3698,3696,1,0,0,0,3699,
		3701,3,248,124,0,3700,3702,3,258,129,0,3701,3700,1,0,0,0,3701,3702,1,0,
		0,0,3702,3704,1,0,0,0,3703,3705,3,260,130,0,3704,3703,1,0,0,0,3704,3705,
		1,0,0,0,3705,3707,1,0,0,0,3706,3708,3,262,131,0,3707,3706,1,0,0,0,3707,
		3708,1,0,0,0,3708,3710,1,0,0,0,3709,3711,3,264,132,0,3710,3709,1,0,0,0,
		3710,3711,1,0,0,0,3711,3713,1,0,0,0,3712,3714,3,218,109,0,3713,3712,1,
		0,0,0,3713,3714,1,0,0,0,3714,3716,1,0,0,0,3715,3717,3,268,134,0,3716,3715,
		1,0,0,0,3716,3717,1,0,0,0,3717,241,1,0,0,0,3718,3720,5,171,0,0,3719,3721,
		7,43,0,0,3720,3719,1,0,0,0,3720,3721,1,0,0,0,3721,3722,1,0,0,0,3722,3723,
		3,236,118,0,3723,243,1,0,0,0,3724,3726,5,171,0,0,3725,3727,7,43,0,0,3726,
		3725,1,0,0,0,3726,3727,1,0,0,0,3727,3730,1,0,0,0,3728,3731,3,240,120,0,
		3729,3731,3,236,118,0,3730,3728,1,0,0,0,3730,3729,1,0,0,0,3731,245,1,0,
		0,0,3732,3741,7,51,0,0,3733,3741,5,72,0,0,3734,3741,5,162,0,0,3735,3741,
		5,158,0,0,3736,3741,5,156,0,0,3737,3741,5,597,0,0,3738,3741,7,52,0,0,3739,
		3741,5,157,0,0,3740,3732,1,0,0,0,3740,3733,1,0,0,0,3740,3734,1,0,0,0,3740,
		3735,1,0,0,0,3740,3736,1,0,0,0,3740,3737,1,0,0,0,3740,3738,1,0,0,0,3740,
		3739,1,0,0,0,3741,247,1,0,0,0,3742,3745,5,1080,0,0,3743,3745,3,250,125,
		0,3744,3742,1,0,0,0,3744,3743,1,0,0,0,3745,3750,1,0,0,0,3746,3747,5,1098,
		0,0,3747,3749,3,250,125,0,3748,3746,1,0,0,0,3749,3752,1,0,0,0,3750,3748,
		1,0,0,0,3750,3751,1,0,0,0,3751,249,1,0,0,0,3752,3750,1,0,0,0,3753,3754,
		3,516,258,0,3754,3755,5,1095,0,0,3755,3756,5,1080,0,0,3756,3783,1,0,0,
		0,3757,3762,3,520,260,0,3758,3760,5,12,0,0,3759,3758,1,0,0,0,3759,3760,
		1,0,0,0,3760,3761,1,0,0,0,3761,3763,3,542,271,0,3762,3759,1,0,0,0,3762,
		3763,1,0,0,0,3763,3783,1,0,0,0,3764,3769,3,600,300,0,3765,3767,5,12,0,
		0,3766,3765,1,0,0,0,3766,3767,1,0,0,0,3767,3768,1,0,0,0,3768,3770,3,542,
		271,0,3769,3766,1,0,0,0,3769,3770,1,0,0,0,3770,3783,1,0,0,0,3771,3772,
		5,1123,0,0,3772,3774,5,1071,0,0,3773,3771,1,0,0,0,3773,3774,1,0,0,0,3774,
		3775,1,0,0,0,3775,3780,3,640,320,0,3776,3778,5,12,0,0,3777,3776,1,0,0,
		0,3777,3778,1,0,0,0,3778,3779,1,0,0,0,3779,3781,3,542,271,0,3780,3777,
		1,0,0,0,3780,3781,1,0,0,0,3781,3783,1,0,0,0,3782,3753,1,0,0,0,3782,3757,
		1,0,0,0,3782,3764,1,0,0,0,3782,3773,1,0,0,0,3783,251,1,0,0,0,3784,3785,
		5,84,0,0,3785,3790,3,198,99,0,3786,3787,5,1098,0,0,3787,3789,3,198,99,
		0,3788,3786,1,0,0,0,3789,3792,1,0,0,0,3790,3788,1,0,0,0,3790,3791,1,0,
		0,0,3791,3821,1,0,0,0,3792,3790,1,0,0,0,3793,3794,5,84,0,0,3794,3795,5,
		387,0,0,3795,3821,5,1111,0,0,3796,3797,5,84,0,0,3797,3798,5,122,0,0,3798,
		3802,5,1111,0,0,3799,3800,5,24,0,0,3800,3801,5,147,0,0,3801,3803,3,528,
		264,0,3802,3799,1,0,0,0,3802,3803,1,0,0,0,3803,3810,1,0,0,0,3804,3806,
		7,40,0,0,3805,3807,3,254,127,0,3806,3805,1,0,0,0,3807,3808,1,0,0,0,3808,
		3806,1,0,0,0,3808,3809,1,0,0,0,3809,3811,1,0,0,0,3810,3804,1,0,0,0,3810,
		3811,1,0,0,0,3811,3818,1,0,0,0,3812,3814,5,97,0,0,3813,3815,3,256,128,
		0,3814,3813,1,0,0,0,3815,3816,1,0,0,0,3816,3814,1,0,0,0,3816,3817,1,0,
		0,0,3817,3819,1,0,0,0,3818,3812,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,
		0,0,0,3820,3784,1,0,0,0,3820,3793,1,0,0,0,3820,3796,1,0,0,0,3821,253,1,
		0,0,0,3822,3823,5,164,0,0,3823,3824,5,18,0,0,3824,3835,5,1111,0,0,3825,
		3827,5,116,0,0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,3827,3828,1,0,0,0,3828,
		3829,5,54,0,0,3829,3830,5,18,0,0,3830,3835,5,1111,0,0,3831,3832,5,55,0,
		0,3832,3833,5,18,0,0,3833,3835,5,1111,0,0,3834,3822,1,0,0,0,3834,3826,
		1,0,0,0,3834,3831,1,0,0,0,3835,255,1,0,0,0,3836,3837,5,161,0,0,3837,3838,
		5,18,0,0,3838,3843,5,1111,0,0,3839,3840,5,164,0,0,3840,3841,5,18,0,0,3841,
		3843,5,1111,0,0,3842,3836,1,0,0,0,3842,3839,1,0,0,0,3843,257,1,0,0,0,3844,
		3845,5,65,0,0,3845,3847,3,222,111,0,3846,3844,1,0,0,0,3846,3847,1,0,0,
		0,3847,3850,1,0,0,0,3848,3849,5,181,0,0,3849,3851,3,640,320,0,3850,3848,
		1,0,0,0,3850,3851,1,0,0,0,3851,259,1,0,0,0,3852,3853,5,70,0,0,3853,3854,
		5,18,0,0,3854,3859,3,266,133,0,3855,3856,5,1098,0,0,3856,3858,3,266,133,
		0,3857,3855,1,0,0,0,3858,3861,1,0,0,0,3859,3857,1,0,0,0,3859,3860,1,0,
		0,0,3860,3864,1,0,0,0,3861,3859,1,0,0,0,3862,3863,5,183,0,0,3863,3865,
		5,571,0,0,3864,3862,1,0,0,0,3864,3865,1,0,0,0,3865,261,1,0,0,0,3866,3867,
		5,71,0,0,3867,3868,3,640,320,0,3868,263,1,0,0,0,3869,3870,5,648,0,0,3870,
		3871,3,618,309,0,3871,3872,5,12,0,0,3872,3873,5,1096,0,0,3873,3874,3,616,
		308,0,3874,3884,5,1097,0,0,3875,3876,5,1098,0,0,3876,3877,3,618,309,0,
		3877,3878,5,12,0,0,3878,3879,5,1096,0,0,3879,3880,3,616,308,0,3880,3881,
		5,1097,0,0,3881,3883,1,0,0,0,3882,3875,1,0,0,0,3883,3886,1,0,0,0,3884,
		3882,1,0,0,0,3884,3885,1,0,0,0,3885,265,1,0,0,0,3886,3884,1,0,0,0,3887,
		3889,3,640,320,0,3888,3890,7,47,0,0,3889,3888,1,0,0,0,3889,3890,1,0,0,
		0,3890,267,1,0,0,0,3891,3902,5,95,0,0,3892,3893,3,270,135,0,3893,3894,
		5,1098,0,0,3894,3896,1,0,0,0,3895,3892,1,0,0,0,3895,3896,1,0,0,0,3896,
		3897,1,0,0,0,3897,3903,3,270,135,0,3898,3899,3,270,135,0,3899,3900,5,510,
		0,0,3900,3901,3,270,135,0,3901,3903,1,0,0,0,3902,3895,1,0,0,0,3902,3898,
		1,0,0,0,3903,269,1,0,0,0,3904,3908,3,548,274,0,3905,3908,3,526,263,0,3906,
		3908,3,544,272,0,3907,3904,1,0,0,0,3907,3905,1,0,0,0,3907,3906,1,0,0,0,
		3908,271,1,0,0,0,3909,3910,5,601,0,0,3910,3919,5,625,0,0,3911,3916,3,294,
		147,0,3912,3913,5,1098,0,0,3913,3915,3,294,147,0,3914,3912,1,0,0,0,3915,
		3918,1,0,0,0,3916,3914,1,0,0,0,3916,3917,1,0,0,0,3917,3920,1,0,0,0,3918,
		3916,1,0,0,0,3919,3911,1,0,0,0,3919,3920,1,0,0,0,3920,273,1,0,0,0,3921,
		3923,5,332,0,0,3922,3924,5,650,0,0,3923,3922,1,0,0,0,3923,3924,1,0,0,0,
		3924,275,1,0,0,0,3925,3927,5,357,0,0,3926,3928,5,650,0,0,3927,3926,1,0,
		0,0,3927,3928,1,0,0,0,3928,3934,1,0,0,0,3929,3931,5,10,0,0,3930,3932,5,
		503,0,0,3931,3930,1,0,0,0,3931,3932,1,0,0,0,3932,3933,1,0,0,0,3933,3935,
		5,341,0,0,3934,3929,1,0,0,0,3934,3935,1,0,0,0,3935,3940,1,0,0,0,3936,3938,
		5,503,0,0,3937,3936,1,0,0,0,3937,3938,1,0,0,0,3938,3939,1,0,0,0,3939,3941,
		5,132,0,0,3940,3937,1,0,0,0,3940,3941,1,0,0,0,3941,277,1,0,0,0,3942,3944,
		5,570,0,0,3943,3945,5,650,0,0,3944,3943,1,0,0,0,3944,3945,1,0,0,0,3945,
		3951,1,0,0,0,3946,3948,5,10,0,0,3947,3949,5,503,0,0,3948,3947,1,0,0,0,
		3948,3949,1,0,0,0,3949,3950,1,0,0,0,3950,3952,5,341,0,0,3951,3946,1,0,
		0,0,3951,3952,1,0,0,0,3952,3957,1,0,0,0,3953,3955,5,503,0,0,3954,3953,
		1,0,0,0,3954,3955,1,0,0,0,3955,3956,1,0,0,0,3956,3958,5,132,0,0,3957,3954,
		1,0,0,0,3957,3958,1,0,0,0,3958,279,1,0,0,0,3959,3960,5,577,0,0,3960,3961,
		3,542,271,0,3961,281,1,0,0,0,3962,3964,5,570,0,0,3963,3965,5,650,0,0,3964,
		3963,1,0,0,0,3964,3965,1,0,0,0,3965,3966,1,0,0,0,3966,3968,5,166,0,0,3967,
		3969,5,577,0,0,3968,3967,1,0,0,0,3968,3969,1,0,0,0,3969,3970,1,0,0,0,3970,
		3971,3,542,271,0,3971,283,1,0,0,0,3972,3973,5,132,0,0,3973,3974,5,577,
		0,0,3974,3975,3,542,271,0,3975,285,1,0,0,0,3976,3977,5,99,0,0,3977,3978,
		5,669,0,0,3978,3983,3,296,148,0,3979,3980,5,1098,0,0,3980,3982,3,296,148,
		0,3981,3979,1,0,0,0,3982,3985,1,0,0,0,3983,3981,1,0,0,0,3983,3984,1,0,
		0,0,3984,287,1,0,0,0,3985,3983,1,0,0,0,3986,3987,5,173,0,0,3987,3988,5,
		669,0,0,3988,289,1,0,0,0,3989,3990,5,147,0,0,3990,3991,5,328,0,0,3991,
		3992,5,1087,0,0,3992,3993,7,24,0,0,3993,291,1,0,0,0,3994,3996,5,147,0,
		0,3995,3997,7,53,0,0,3996,3995,1,0,0,0,3996,3997,1,0,0,0,3997,3998,1,0,
		0,0,3998,3999,5,625,0,0,3999,4004,3,300,150,0,4000,4001,5,1098,0,0,4001,
		4003,3,300,150,0,4002,4000,1,0,0,0,4003,4006,1,0,0,0,4004,4002,1,0,0,0,
		4004,4005,1,0,0,0,4005,293,1,0,0,0,4006,4004,1,0,0,0,4007,4008,5,183,0,
		0,4008,4009,5,365,0,0,4009,4015,5,588,0,0,4010,4011,5,128,0,0,4011,4015,
		5,184,0,0,4012,4013,5,128,0,0,4013,4015,5,516,0,0,4014,4007,1,0,0,0,4014,
		4010,1,0,0,0,4014,4012,1,0,0,0,4015,295,1,0,0,0,4016,4021,3,518,259,0,
		4017,4019,5,12,0,0,4018,4017,1,0,0,0,4018,4019,1,0,0,0,4019,4020,1,0,0,
		0,4020,4022,3,542,271,0,4021,4018,1,0,0,0,4021,4022,1,0,0,0,4022,4023,
		1,0,0,0,4023,4024,3,298,149,0,4024,297,1,0,0,0,4025,4027,5,128,0,0,4026,
		4028,5,456,0,0,4027,4026,1,0,0,0,4027,4028,1,0,0,0,4028,4034,1,0,0,0,4029,
		4031,5,101,0,0,4030,4029,1,0,0,0,4030,4031,1,0,0,0,4031,4032,1,0,0,0,4032,
		4034,5,184,0,0,4033,4025,1,0,0,0,4033,4030,1,0,0,0,4034,299,1,0,0,0,4035,
		4036,5,446,0,0,4036,4037,5,454,0,0,4037,4043,3,302,151,0,4038,4039,5,128,
		0,0,4039,4043,5,184,0,0,4040,4041,5,128,0,0,4041,4043,5,516,0,0,4042,4035,
		1,0,0,0,4042,4038,1,0,0,0,4042,4040,1,0,0,0,4043,301,1,0,0,0,4044,4045,
		5,764,0,0,4045,4052,5,128,0,0,4046,4047,5,128,0,0,4047,4052,5,765,0,0,
		4048,4049,5,128,0,0,4049,4052,5,766,0,0,4050,4052,5,767,0,0,4051,4044,
		1,0,0,0,4051,4046,1,0,0,0,4051,4048,1,0,0,0,4051,4050,1,0,0,0,4052,303,
		1,0,0,0,4053,4054,5,23,0,0,4054,4055,5,459,0,0,4055,4056,5,166,0,0,4056,
		4061,3,322,161,0,4057,4058,5,1098,0,0,4058,4060,3,322,161,0,4059,4057,
		1,0,0,0,4060,4063,1,0,0,0,4061,4059,1,0,0,0,4061,4062,1,0,0,0,4062,4065,
		1,0,0,0,4063,4061,1,0,0,0,4064,4066,3,330,165,0,4065,4064,1,0,0,0,4065,
		4066,1,0,0,0,4066,305,1,0,0,0,4067,4068,5,23,0,0,4068,4069,5,563,0,0,4069,
		4070,5,413,0,0,4070,4075,3,332,166,0,4071,4072,5,1098,0,0,4072,4074,3,
		332,166,0,4073,4071,1,0,0,0,4074,4077,1,0,0,0,4075,4073,1,0,0,0,4075,4076,
		1,0,0,0,4076,307,1,0,0,0,4077,4075,1,0,0,0,4078,4079,5,126,0,0,4079,4080,
		7,54,0,0,4080,4085,5,458,0,0,4081,4082,5,166,0,0,4082,4086,5,1111,0,0,
		4083,4084,5,14,0,0,4084,4086,5,1111,0,0,4085,4081,1,0,0,0,4085,4083,1,
		0,0,0,4086,309,1,0,0,0,4087,4088,5,564,0,0,4088,4089,5,459,0,0,4089,311,
		1,0,0,0,4090,4091,5,564,0,0,4091,4093,5,586,0,0,4092,4094,5,6,0,0,4093,
		4092,1,0,0,0,4093,4094,1,0,0,0,4094,4096,1,0,0,0,4095,4097,3,330,165,0,
		4096,4095,1,0,0,0,4096,4097,1,0,0,0,4097,313,1,0,0,0,4098,4099,5,601,0,
		0,4099,4108,5,586,0,0,4100,4105,3,336,168,0,4101,4102,5,1098,0,0,4102,
		4104,3,336,168,0,4103,4101,1,0,0,0,4104,4107,1,0,0,0,4105,4103,1,0,0,0,
		4105,4106,1,0,0,0,4106,4109,1,0,0,0,4107,4105,1,0,0,0,4108,4100,1,0,0,
		0,4108,4109,1,0,0,0,4109,4112,1,0,0,0,4110,4111,5,635,0,0,4111,4113,3,
		338,169,0,4112,4110,1,0,0,0,4112,4113,1,0,0,0,4113,4117,1,0,0,0,4114,4116,
		3,340,170,0,4115,4114,1,0,0,0,4116,4119,1,0,0,0,4117,4115,1,0,0,0,4117,
		4118,1,0,0,0,4118,4121,1,0,0,0,4119,4117,1,0,0,0,4120,4122,3,330,165,0,
		4121,4120,1,0,0,0,4121,4122,1,0,0,0,4122,315,1,0,0,0,4123,4124,5,607,0,
		0,4124,4133,5,586,0,0,4125,4130,3,336,168,0,4126,4127,5,1098,0,0,4127,
		4129,3,336,168,0,4128,4126,1,0,0,0,4129,4132,1,0,0,0,4130,4128,1,0,0,0,
		4130,4131,1,0,0,0,4131,4134,1,0,0,0,4132,4130,1,0,0,0,4133,4125,1,0,0,
		0,4133,4134,1,0,0,0,4134,317,1,0,0,0,4135,4136,5,601,0,0,4136,4137,5,425,
		0,0,4137,319,1,0,0,0,4138,4139,5,607,0,0,4139,4140,5,425,0,0,4140,321,
		1,0,0,0,4141,4142,3,324,162,0,4142,4143,5,1087,0,0,4143,4144,5,1111,0,
		0,4144,4171,1,0,0,0,4145,4146,3,326,163,0,4146,4147,5,1087,0,0,4147,4148,
		3,548,274,0,4148,4171,1,0,0,0,4149,4150,3,328,164,0,4150,4151,5,1087,0,
		0,4151,4152,7,24,0,0,4152,4171,1,0,0,0,4153,4154,5,463,0,0,4154,4155,5,
		1087,0,0,4155,4171,5,1114,0,0,4156,4157,5,432,0,0,4157,4158,5,1087,0,0,
		4158,4167,5,1096,0,0,4159,4164,3,542,271,0,4160,4161,5,1098,0,0,4161,4163,
		3,542,271,0,4162,4160,1,0,0,0,4163,4166,1,0,0,0,4164,4162,1,0,0,0,4164,
		4165,1,0,0,0,4165,4168,1,0,0,0,4166,4164,1,0,0,0,4167,4159,1,0,0,0,4167,
		4168,1,0,0,0,4168,4169,1,0,0,0,4169,4171,5,1097,0,0,4170,4141,1,0,0,0,
		4170,4145,1,0,0,0,4170,4149,1,0,0,0,4170,4153,1,0,0,0,4170,4156,1,0,0,
		0,4171,323,1,0,0,0,4172,4173,7,55,0,0,4173,325,1,0,0,0,4174,4175,7,56,
		0,0,4175,327,1,0,0,0,4176,4177,7,57,0,0,4177,329,1,0,0,0,4178,4179,5,62,
		0,0,4179,4180,5,343,0,0,4180,4181,5,1111,0,0,4181,331,1,0,0,0,4182,4183,
		5,556,0,0,4183,4184,5,1087,0,0,4184,4185,5,1096,0,0,4185,4186,3,574,287,
		0,4186,4187,5,1097,0,0,4187,4232,1,0,0,0,4188,4189,5,558,0,0,4189,4190,
		5,1087,0,0,4190,4191,5,1096,0,0,4191,4192,3,574,287,0,4192,4193,5,1097,
		0,0,4193,4232,1,0,0,0,4194,4195,5,557,0,0,4195,4196,5,1087,0,0,4196,4197,
		5,1096,0,0,4197,4198,3,576,288,0,4198,4199,5,1097,0,0,4199,4232,1,0,0,
		0,4200,4201,5,559,0,0,4201,4202,5,1087,0,0,4202,4203,5,1096,0,0,4203,4204,
		3,576,288,0,4204,4205,5,1097,0,0,4205,4232,1,0,0,0,4206,4207,5,561,0,0,
		4207,4208,5,1087,0,0,4208,4209,5,1096,0,0,4209,4210,3,586,293,0,4210,4211,
		5,1097,0,0,4211,4232,1,0,0,0,4212,4213,5,562,0,0,4213,4214,5,1087,0,0,
		4214,4215,5,1096,0,0,4215,4216,3,586,293,0,4216,4217,5,1097,0,0,4217,4232,
		1,0,0,0,4218,4219,5,560,0,0,4219,4220,5,1087,0,0,4220,4221,5,1096,0,0,
		4221,4226,3,334,167,0,4222,4223,5,1098,0,0,4223,4225,3,334,167,0,4224,
		4222,1,0,0,0,4225,4228,1,0,0,0,4226,4224,1,0,0,0,4226,4227,1,0,0,0,4227,
		4229,1,0,0,0,4228,4226,1,0,0,0,4229,4230,5,1097,0,0,4230,4232,1,0,0,0,
		4231,4182,1,0,0,0,4231,4188,1,0,0,0,4231,4194,1,0,0,0,4231,4200,1,0,0,
		0,4231,4206,1,0,0,0,4231,4212,1,0,0,0,4231,4218,1,0,0,0,4232,333,1,0,0,
		0,4233,4234,5,1096,0,0,4234,4235,3,518,259,0,4235,4236,5,1098,0,0,4236,
		4237,3,518,259,0,4237,4238,5,1097,0,0,4238,335,1,0,0,0,4239,4240,7,58,
		0,0,4240,337,1,0,0,0,4241,4242,7,59,0,0,4242,4243,5,1087,0,0,4243,4260,
		3,342,171,0,4244,4245,5,465,0,0,4245,4246,5,1087,0,0,4246,4247,5,1111,
		0,0,4247,4248,5,1098,0,0,4248,4249,5,466,0,0,4249,4250,5,1087,0,0,4250,
		4260,3,548,274,0,4251,4252,5,550,0,0,4252,4253,5,1087,0,0,4253,4254,5,
		1111,0,0,4254,4255,5,1098,0,0,4255,4256,5,551,0,0,4256,4257,5,1087,0,0,
		4257,4260,3,548,274,0,4258,4260,5,595,0,0,4259,4241,1,0,0,0,4259,4244,
		1,0,0,0,4259,4251,1,0,0,0,4259,4258,1,0,0,0,4260,339,1,0,0,0,4261,4262,
		5,637,0,0,4262,4263,5,1087,0,0,4263,4274,5,1111,0,0,4264,4265,5,527,0,
		0,4265,4266,5,1087,0,0,4266,4274,5,1111,0,0,4267,4268,5,378,0,0,4268,4269,
		5,1087,0,0,4269,4274,5,1111,0,0,4270,4271,5,530,0,0,4271,4272,5,1087,0,
		0,4272,4274,5,1111,0,0,4273,4261,1,0,0,0,4273,4264,1,0,0,0,4273,4267,1,
		0,0,0,4273,4270,1,0,0,0,4274,341,1,0,0,0,4275,4280,3,534,267,0,4276,4277,
		5,1098,0,0,4277,4279,3,534,267,0,4278,4276,1,0,0,0,4279,4282,1,0,0,0,4280,
		4278,1,0,0,0,4280,4281,1,0,0,0,4281,4285,1,0,0,0,4282,4280,1,0,0,0,4283,
		4285,5,1111,0,0,4284,4275,1,0,0,0,4284,4283,1,0,0,0,4285,343,1,0,0,0,4286,
		4287,5,653,0,0,4287,4288,7,60,0,0,4288,4290,3,536,268,0,4289,4291,7,61,
		0,0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,345,1,0,0,0,4292,4293,5,653,
		0,0,4293,4294,5,392,0,0,4294,4300,3,536,268,0,4295,4298,5,615,0,0,4296,
		4297,5,62,0,0,4297,4299,5,491,0,0,4298,4296,1,0,0,0,4298,4299,1,0,0,0,
		4299,4301,1,0,0,0,4300,4295,1,0,0,0,4300,4301,1,0,0,0,4301,347,1,0,0,0,
		4302,4303,5,653,0,0,4303,4304,5,535,0,0,4304,4305,3,536,268,0,4305,349,
		1,0,0,0,4306,4307,5,653,0,0,4307,4308,5,357,0,0,4308,4311,3,536,268,0,
		4309,4310,5,514,0,0,4310,4312,5,528,0,0,4311,4309,1,0,0,0,4311,4312,1,
		0,0,0,4312,351,1,0,0,0,4313,4314,5,653,0,0,4314,4315,5,570,0,0,4315,4316,
		3,536,268,0,4316,353,1,0,0,0,4317,4318,5,653,0,0,4318,4321,5,545,0,0,4319,
		4320,5,31,0,0,4320,4322,3,536,268,0,4321,4319,1,0,0,0,4321,4322,1,0,0,
		0,4322,355,1,0,0,0,4323,4324,5,535,0,0,4324,4325,3,542,271,0,4325,4328,
		5,65,0,0,4326,4329,5,1111,0,0,4327,4329,5,1123,0,0,4328,4326,1,0,0,0,4328,
		4327,1,0,0,0,4329,357,1,0,0,0,4330,4331,5,671,0,0,4331,4334,3,542,271,
		0,4332,4333,5,178,0,0,4333,4335,3,588,294,0,4334,4332,1,0,0,0,4334,4335,
		1,0,0,0,4335,359,1,0,0,0,4336,4337,7,62,0,0,4337,4338,5,535,0,0,4338,4339,
		3,542,271,0,4339,361,1,0,0,0,4340,4343,3,364,182,0,4341,4343,3,4,2,0,4342,
		4340,1,0,0,0,4342,4341,1,0,0,0,4343,363,1,0,0,0,4344,4345,3,542,271,0,
		4345,4346,5,1107,0,0,4346,4348,1,0,0,0,4347,4344,1,0,0,0,4347,4348,1,0,
		0,0,4348,4349,1,0,0,0,4349,4388,5,332,0,0,4350,4351,3,384,192,0,4351,4352,
		5,1099,0,0,4352,4354,1,0,0,0,4353,4350,1,0,0,0,4354,4357,1,0,0,0,4355,
		4353,1,0,0,0,4355,4356,1,0,0,0,4356,4363,1,0,0,0,4357,4355,1,0,0,0,4358,
		4359,3,386,193,0,4359,4360,5,1099,0,0,4360,4362,1,0,0,0,4361,4358,1,0,
		0,0,4362,4365,1,0,0,0,4363,4361,1,0,0,0,4363,4364,1,0,0,0,4364,4371,1,
		0,0,0,4365,4363,1,0,0,0,4366,4367,3,388,194,0,4367,4368,5,1099,0,0,4368,
		4370,1,0,0,0,4369,4366,1,0,0,0,4370,4373,1,0,0,0,4371,4369,1,0,0,0,4371,
		4372,1,0,0,0,4372,4379,1,0,0,0,4373,4371,1,0,0,0,4374,4375,3,390,195,0,
		4375,4376,5,1099,0,0,4376,4378,1,0,0,0,4377,4374,1,0,0,0,4378,4381,1,0,
		0,0,4379,4377,1,0,0,0,4379,4380,1,0,0,0,4380,4385,1,0,0,0,4381,4379,1,
		0,0,0,4382,4384,3,394,197,0,4383,4382,1,0,0,0,4384,4387,1,0,0,0,4385,4383,
		1,0,0,0,4385,4386,1,0,0,0,4386,4389,1,0,0,0,4387,4385,1,0,0,0,4388,4355,
		1,0,0,0,4388,4389,1,0,0,0,4389,4390,1,0,0,0,4390,4392,5,392,0,0,4391,4393,
		3,542,271,0,4392,4391,1,0,0,0,4392,4393,1,0,0,0,4393,365,1,0,0,0,4394,
		4397,5,21,0,0,4395,4398,3,542,271,0,4396,4398,3,640,320,0,4397,4395,1,
		0,0,0,4397,4396,1,0,0,0,4397,4398,1,0,0,0,4398,4400,1,0,0,0,4399,4401,
		3,396,198,0,4400,4399,1,0,0,0,4401,4402,1,0,0,0,4402,4400,1,0,0,0,4402,
		4403,1,0,0,0,4403,4410,1,0,0,0,4404,4406,5,51,0,0,4405,4407,3,394,197,
		0,4406,4405,1,0,0,0,4407,4408,1,0,0,0,4408,4406,1,0,0,0,4408,4409,1,0,
		0,0,4409,4411,1,0,0,0,4410,4404,1,0,0,0,4410,4411,1,0,0,0,4411,4412,1,
		0,0,0,4412,4413,5,392,0,0,4413,4414,5,21,0,0,4414,367,1,0,0,0,4415,4416,
		5,74,0,0,4416,4417,3,640,320,0,4417,4419,5,165,0,0,4418,4420,3,394,197,
		0,4419,4418,1,0,0,0,4420,4421,1,0,0,0,4421,4419,1,0,0,0,4421,4422,1,0,
		0,0,4422,4426,1,0,0,0,4423,4425,3,398,199,0,4424,4423,1,0,0,0,4425,4428,
		1,0,0,0,4426,4424,1,0,0,0,4426,4427,1,0,0,0,4427,4435,1,0,0,0,4428,4426,
		1,0,0,0,4429,4431,5,51,0,0,4430,4432,3,394,197,0,4431,4430,1,0,0,0,4432,
		4433,1,0,0,0,4433,4431,1,0,0,0,4433,4434,1,0,0,0,4434,4436,1,0,0,0,4435,
		4429,1,0,0,0,4435,4436,1,0,0,0,4436,4437,1,0,0,0,4437,4438,5,392,0,0,4438,
		4439,5,74,0,0,4439,369,1,0,0,0,4440,4441,5,86,0,0,4441,4442,3,542,271,
		0,4442,371,1,0,0,0,4443,4444,5,92,0,0,4444,4445,3,542,271,0,4445,373,1,
		0,0,0,4446,4447,3,542,271,0,4447,4448,5,1107,0,0,4448,4450,1,0,0,0,4449,
		4446,1,0,0,0,4449,4450,1,0,0,0,4450,4451,1,0,0,0,4451,4453,5,100,0,0,4452,
		4454,3,394,197,0,4453,4452,1,0,0,0,4454,4455,1,0,0,0,4455,4453,1,0,0,0,
		4455,4456,1,0,0,0,4456,4457,1,0,0,0,4457,4458,5,392,0,0,4458,4460,5,100,
		0,0,4459,4461,3,542,271,0,4460,4459,1,0,0,0,4460,4461,1,0,0,0,4461,375,
		1,0,0,0,4462,4463,3,542,271,0,4463,4464,5,1107,0,0,4464,4466,1,0,0,0,4465,
		4462,1,0,0,0,4465,4466,1,0,0,0,4466,4467,1,0,0,0,4467,4469,5,134,0,0,4468,
		4470,3,394,197,0,4469,4468,1,0,0,0,4470,4471,1,0,0,0,4471,4469,1,0,0,0,
		4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4474,5,635,0,0,4474,4475,3,640,
		320,0,4475,4476,5,392,0,0,4476,4478,5,134,0,0,4477,4479,3,542,271,0,4478,
		4477,1,0,0,0,4478,4479,1,0,0,0,4479,377,1,0,0,0,4480,4481,5,140,0,0,4481,
		4482,3,640,320,0,4482,379,1,0,0,0,4483,4484,3,542,271,0,4484,4485,5,1107,
		0,0,4485,4487,1,0,0,0,4486,4483,1,0,0,0,4486,4487,1,0,0,0,4487,4488,1,
		0,0,0,4488,4489,5,182,0,0,4489,4490,3,640,320,0,4490,4492,5,386,0,0,4491,
		4493,3,394,197,0,4492,4491,1,0,0,0,4493,4494,1,0,0,0,4494,4492,1,0,0,0,
		4494,4495,1,0,0,0,4495,4496,1,0,0,0,4496,4497,5,392,0,0,4497,4499,5,182,
		0,0,4498,4500,3,542,271,0,4499,4498,1,0,0,0,4499,4500,1,0,0,0,4500,381,
		1,0,0,0,4501,4502,5,349,0,0,4502,4517,3,542,271,0,4503,4508,5,61,0,0,4504,
		4506,5,502,0,0,4505,4504,1,0,0,0,4505,4506,1,0,0,0,4506,4507,1,0,0,0,4507,
		4509,5,65,0,0,4508,4505,1,0,0,0,4508,4509,1,0,0,0,4509,4510,1,0,0,0,4510,
		4511,3,542,271,0,4511,4512,5,84,0,0,4512,4513,3,574,287,0,4513,4517,1,
		0,0,0,4514,4515,5,517,0,0,4515,4517,3,542,271,0,4516,4501,1,0,0,0,4516,
		4503,1,0,0,0,4516,4514,1,0,0,0,4517,383,1,0,0,0,4518,4519,5,39,0,0,4519,
		4520,3,574,287,0,4520,4523,3,562,281,0,4521,4522,5,40,0,0,4522,4524,3,
		640,320,0,4523,4521,1,0,0,0,4523,4524,1,0,0,0,4524,385,1,0,0,0,4525,4526,
		5,39,0,0,4526,4527,3,542,271,0,4527,4528,5,28,0,0,4528,4535,5,62,0,0,4529,
		4536,3,548,274,0,4530,4532,5,154,0,0,4531,4533,5,641,0,0,4532,4531,1,0,
		0,0,4532,4533,1,0,0,0,4533,4534,1,0,0,0,4534,4536,5,1111,0,0,4535,4529,
		1,0,0,0,4535,4530,1,0,0,0,4536,387,1,0,0,0,4537,4538,5,39,0,0,4538,4539,
		3,542,271,0,4539,4540,5,36,0,0,4540,4541,5,62,0,0,4541,4542,3,190,95,0,
		4542,389,1,0,0,0,4543,4544,5,39,0,0,4544,4545,7,63,0,0,4545,4546,5,426,
		0,0,4546,4547,5,62,0,0,4547,4552,3,392,196,0,4548,4549,5,1098,0,0,4549,
		4551,3,392,196,0,4550,4548,1,0,0,0,4551,4554,1,0,0,0,4552,4550,1,0,0,0,
		4552,4553,1,0,0,0,4553,4555,1,0,0,0,4554,4552,1,0,0,0,4555,4556,3,362,
		181,0,4556,391,1,0,0,0,4557,4569,3,548,274,0,4558,4560,5,154,0,0,4559,
		4561,5,641,0,0,4560,4559,1,0,0,0,4560,4561,1,0,0,0,4561,4562,1,0,0,0,4562,
		4569,5,1111,0,0,4563,4569,3,542,271,0,4564,4569,5,155,0,0,4565,4566,5,
		108,0,0,4566,4569,5,419,0,0,4567,4569,5,153,0,0,4568,4557,1,0,0,0,4568,
		4558,1,0,0,0,4568,4563,1,0,0,0,4568,4564,1,0,0,0,4568,4565,1,0,0,0,4568,
		4567,1,0,0,0,4569,393,1,0,0,0,4570,4573,3,18,9,0,4571,4573,3,4,2,0,4572,
		4570,1,0,0,0,4572,4571,1,0,0,0,4573,4574,1,0,0,0,4574,4575,5,1099,0,0,
		4575,395,1,0,0,0,4576,4579,5,180,0,0,4577,4580,3,560,280,0,4578,4580,3,
		640,320,0,4579,4577,1,0,0,0,4579,4578,1,0,0,0,4580,4581,1,0,0,0,4581,4583,
		5,165,0,0,4582,4584,3,394,197,0,4583,4582,1,0,0,0,4584,4585,1,0,0,0,4585,
		4583,1,0,0,0,4585,4586,1,0,0,0,4586,397,1,0,0,0,4587,4588,5,52,0,0,4588,
		4589,3,640,320,0,4589,4591,5,165,0,0,4590,4592,3,394,197,0,4591,4590,1,
		0,0,0,4592,4593,1,0,0,0,4593,4591,1,0,0,0,4593,4594,1,0,0,0,4594,399,1,
		0,0,0,4595,4596,5,7,0,0,4596,4597,5,637,0,0,4597,4602,3,420,210,0,4598,
		4599,5,1098,0,0,4599,4601,3,420,210,0,4600,4598,1,0,0,0,4601,4604,1,0,
		0,0,4602,4600,1,0,0,0,4602,4603,1,0,0,0,4603,4650,1,0,0,0,4604,4602,1,
		0,0,0,4605,4606,5,7,0,0,4606,4608,5,637,0,0,4607,4609,3,596,298,0,4608,
		4607,1,0,0,0,4608,4609,1,0,0,0,4609,4610,1,0,0,0,4610,4615,3,422,211,0,
		4611,4612,5,1098,0,0,4612,4614,3,422,211,0,4613,4611,1,0,0,0,4614,4617,
		1,0,0,0,4615,4613,1,0,0,0,4615,4616,1,0,0,0,4616,4632,1,0,0,0,4617,4615,
		1,0,0,0,4618,4630,5,136,0,0,4619,4631,5,507,0,0,4620,4627,3,424,212,0,
		4621,4623,5,10,0,0,4622,4621,1,0,0,0,4622,4623,1,0,0,0,4623,4624,1,0,0,
		0,4624,4626,3,424,212,0,4625,4622,1,0,0,0,4626,4629,1,0,0,0,4627,4625,
		1,0,0,0,4627,4628,1,0,0,0,4628,4631,1,0,0,0,4629,4627,1,0,0,0,4630,4619,
		1,0,0,0,4630,4620,1,0,0,0,4631,4633,1,0,0,0,4632,4618,1,0,0,0,4632,4633,
		1,0,0,0,4633,4640,1,0,0,0,4634,4636,5,183,0,0,4635,4637,3,426,213,0,4636,
		4635,1,0,0,0,4637,4638,1,0,0,0,4638,4636,1,0,0,0,4638,4639,1,0,0,0,4639,
		4641,1,0,0,0,4640,4634,1,0,0,0,4640,4641,1,0,0,0,4641,4646,1,0,0,0,4642,
		4645,3,428,214,0,4643,4645,3,430,215,0,4644,4642,1,0,0,0,4644,4643,1,0,
		0,0,4645,4648,1,0,0,0,4646,4644,1,0,0,0,4646,4647,1,0,0,0,4647,4650,1,
		0,0,0,4648,4646,1,0,0,0,4649,4595,1,0,0,0,4649,4605,1,0,0,0,4650,401,1,
		0,0,0,4651,4652,5,32,0,0,4652,4653,5,637,0,0,4653,4658,3,422,211,0,4654,
		4655,5,1098,0,0,4655,4657,3,422,211,0,4656,4654,1,0,0,0,4657,4660,1,0,
		0,0,4658,4656,1,0,0,0,4658,4659,1,0,0,0,4659,4706,1,0,0,0,4660,4658,1,
		0,0,0,4661,4662,5,32,0,0,4662,4664,5,637,0,0,4663,4665,3,598,299,0,4664,
		4663,1,0,0,0,4664,4665,1,0,0,0,4665,4666,1,0,0,0,4666,4671,3,422,211,0,
		4667,4668,5,1098,0,0,4668,4670,3,422,211,0,4669,4667,1,0,0,0,4670,4673,
		1,0,0,0,4671,4669,1,0,0,0,4671,4672,1,0,0,0,4672,4688,1,0,0,0,4673,4671,
		1,0,0,0,4674,4686,5,136,0,0,4675,4687,5,507,0,0,4676,4683,3,424,212,0,
		4677,4679,5,10,0,0,4678,4677,1,0,0,0,4678,4679,1,0,0,0,4679,4680,1,0,0,
		0,4680,4682,3,424,212,0,4681,4678,1,0,0,0,4682,4685,1,0,0,0,4683,4681,
		1,0,0,0,4683,4684,1,0,0,0,4684,4687,1,0,0,0,4685,4683,1,0,0,0,4686,4675,
		1,0,0,0,4686,4676,1,0,0,0,4687,4689,1,0,0,0,4688,4674,1,0,0,0,4688,4689,
		1,0,0,0,4689,4696,1,0,0,0,4690,4692,5,183,0,0,4691,4693,3,426,213,0,4692,
		4691,1,0,0,0,4693,4694,1,0,0,0,4694,4692,1,0,0,0,4694,4695,1,0,0,0,4695,
		4697,1,0,0,0,4696,4690,1,0,0,0,4696,4697,1,0,0,0,4697,4702,1,0,0,0,4698,
		4701,3,428,214,0,4699,4701,3,430,215,0,4700,4698,1,0,0,0,4700,4699,1,0,
		0,0,4701,4704,1,0,0,0,4702,4700,1,0,0,0,4702,4703,1,0,0,0,4703,4706,1,
		0,0,0,4704,4702,1,0,0,0,4705,4651,1,0,0,0,4705,4661,1,0,0,0,4706,403,1,
		0,0,0,4707,4708,5,49,0,0,4708,4710,5,637,0,0,4709,4711,3,596,298,0,4710,
		4709,1,0,0,0,4710,4711,1,0,0,0,4711,4712,1,0,0,0,4712,4717,3,524,262,0,
		4713,4714,5,1098,0,0,4714,4716,3,524,262,0,4715,4713,1,0,0,0,4716,4719,
		1,0,0,0,4717,4715,1,0,0,0,4717,4718,1,0,0,0,4718,405,1,0,0,0,4719,4717,
		1,0,0,0,4720,4721,5,69,0,0,4721,4726,3,432,216,0,4722,4723,5,1098,0,0,
		4723,4725,3,432,216,0,4724,4722,1,0,0,0,4725,4728,1,0,0,0,4726,4724,1,
		0,0,0,4726,4727,1,0,0,0,4727,4729,1,0,0,0,4728,4726,1,0,0,0,4729,4731,
		5,112,0,0,4730,4732,7,64,0,0,4731,4730,1,0,0,0,4731,4732,1,0,0,0,4732,
		4733,1,0,0,0,4733,4734,3,436,218,0,4734,4735,5,166,0,0,4735,4740,3,422,
		211,0,4736,4737,5,1098,0,0,4737,4739,3,422,211,0,4738,4736,1,0,0,0,4739,
		4742,1,0,0,0,4740,4738,1,0,0,0,4740,4741,1,0,0,0,4741,4757,1,0,0,0,4742,
		4740,1,0,0,0,4743,4755,5,136,0,0,4744,4756,5,507,0,0,4745,4752,3,424,212,
		0,4746,4748,5,10,0,0,4747,4746,1,0,0,0,4747,4748,1,0,0,0,4748,4749,1,0,
		0,0,4749,4751,3,424,212,0,4750,4747,1,0,0,0,4751,4754,1,0,0,0,4752,4750,
		1,0,0,0,4752,4753,1,0,0,0,4753,4756,1,0,0,0,4754,4752,1,0,0,0,4755,4744,
		1,0,0,0,4755,4745,1,0,0,0,4756,4758,1,0,0,0,4757,4743,1,0,0,0,4757,4758,
		1,0,0,0,4758,4768,1,0,0,0,4759,4765,5,183,0,0,4760,4761,5,69,0,0,4761,
		4764,5,114,0,0,4762,4764,3,426,213,0,4763,4760,1,0,0,0,4763,4762,1,0,0,
		0,4764,4767,1,0,0,0,4765,4763,1,0,0,0,4765,4766,1,0,0,0,4766,4769,1,0,
		0,0,4767,4765,1,0,0,0,4768,4759,1,0,0,0,4768,4769,1,0,0,0,4769,4776,1,
		0,0,0,4770,4771,5,12,0,0,4771,4772,3,524,262,0,4772,4773,5,183,0,0,4773,
		4774,5,569,0,0,4774,4775,3,408,204,0,4775,4777,1,0,0,0,4776,4770,1,0,0,
		0,4776,4777,1,0,0,0,4777,4814,1,0,0,0,4778,4781,5,69,0,0,4779,4782,3,524,
		262,0,4780,4782,3,542,271,0,4781,4779,1,0,0,0,4781,4780,1,0,0,0,4782,4790,
		1,0,0,0,4783,4786,5,1098,0,0,4784,4787,3,524,262,0,4785,4787,3,542,271,
		0,4786,4784,1,0,0,0,4786,4785,1,0,0,0,4787,4789,1,0,0,0,4788,4783,1,0,
		0,0,4789,4792,1,0,0,0,4790,4788,1,0,0,0,4790,4791,1,0,0,0,4791,4793,1,
		0,0,0,4792,4790,1,0,0,0,4793,4796,5,166,0,0,4794,4797,3,524,262,0,4795,
		4797,3,542,271,0,4796,4794,1,0,0,0,4796,4795,1,0,0,0,4797,4805,1,0,0,0,
		4798,4801,5,1098,0,0,4799,4802,3,524,262,0,4800,4802,3,542,271,0,4801,
		4799,1,0,0,0,4801,4800,1,0,0,0,4802,4804,1,0,0,0,4803,4798,1,0,0,0,4804,
		4807,1,0,0,0,4805,4803,1,0,0,0,4805,4806,1,0,0,0,4806,4811,1,0,0,0,4807,
		4805,1,0,0,0,4808,4809,5,183,0,0,4809,4810,5,692,0,0,4810,4812,5,114,0,
		0,4811,4808,1,0,0,0,4811,4812,1,0,0,0,4812,4814,1,0,0,0,4813,4720,1,0,
		0,0,4813,4778,1,0,0,0,4814,407,1,0,0,0,4815,4838,5,40,0,0,4816,4838,5,
		507,0,0,4817,4827,5,6,0,0,4818,4819,5,56,0,0,4819,4824,3,524,262,0,4820,
		4821,5,1098,0,0,4821,4823,3,524,262,0,4822,4820,1,0,0,0,4823,4826,1,0,
		0,0,4824,4822,1,0,0,0,4824,4825,1,0,0,0,4825,4828,1,0,0,0,4826,4824,1,
		0,0,0,4827,4818,1,0,0,0,4827,4828,1,0,0,0,4828,4838,1,0,0,0,4829,4834,
		3,524,262,0,4830,4831,5,1098,0,0,4831,4833,3,524,262,0,4832,4830,1,0,0,
		0,4833,4836,1,0,0,0,4834,4832,1,0,0,0,4834,4835,1,0,0,0,4835,4838,1,0,
		0,0,4836,4834,1,0,0,0,4837,4815,1,0,0,0,4837,4816,1,0,0,0,4837,4817,1,
		0,0,0,4837,4829,1,0,0,0,4838,409,1,0,0,0,4839,4840,5,69,0,0,4840,4841,
		5,541,0,0,4841,4842,5,112,0,0,4842,4843,3,524,262,0,4843,4844,5,166,0,
		0,4844,4849,3,524,262,0,4845,4846,5,1098,0,0,4846,4848,3,524,262,0,4847,
		4845,1,0,0,0,4848,4851,1,0,0,0,4849,4847,1,0,0,0,4849,4850,1,0,0,0,4850,
		4855,1,0,0,0,4851,4849,1,0,0,0,4852,4853,5,183,0,0,4853,4854,5,69,0,0,
		4854,4856,5,114,0,0,4855,4852,1,0,0,0,4855,4856,1,0,0,0,4856,411,1,0,0,
		0,4857,4858,5,133,0,0,4858,4859,5,637,0,0,4859,4864,3,438,219,0,4860,4861,
		5,1098,0,0,4861,4863,3,438,219,0,4862,4860,1,0,0,0,4863,4866,1,0,0,0,4864,
		4862,1,0,0,0,4864,4865,1,0,0,0,4865,413,1,0,0,0,4866,4864,1,0,0,0,4867,
		4868,5,141,0,0,4868,4873,3,432,216,0,4869,4870,5,1098,0,0,4870,4872,3,
		432,216,0,4871,4869,1,0,0,0,4872,4875,1,0,0,0,4873,4871,1,0,0,0,4873,4874,
		1,0,0,0,4874,4876,1,0,0,0,4875,4873,1,0,0,0,4876,4878,5,112,0,0,4877,4879,
		7,64,0,0,4878,4877,1,0,0,0,4878,4879,1,0,0,0,4879,4880,1,0,0,0,4880,4881,
		3,436,218,0,4881,4882,5,65,0,0,4882,4887,3,524,262,0,4883,4884,5,1098,
		0,0,4884,4886,3,524,262,0,4885,4883,1,0,0,0,4886,4889,1,0,0,0,4887,4885,
		1,0,0,0,4887,4888,1,0,0,0,4888,4932,1,0,0,0,4889,4887,1,0,0,0,4890,4891,
		5,141,0,0,4891,4893,5,6,0,0,4892,4894,5,677,0,0,4893,4892,1,0,0,0,4893,
		4894,1,0,0,0,4894,4895,1,0,0,0,4895,4896,5,1098,0,0,4896,4897,5,69,0,0,
		4897,4898,5,114,0,0,4898,4899,5,65,0,0,4899,4904,3,524,262,0,4900,4901,
		5,1098,0,0,4901,4903,3,524,262,0,4902,4900,1,0,0,0,4903,4906,1,0,0,0,4904,
		4902,1,0,0,0,4904,4905,1,0,0,0,4905,4932,1,0,0,0,4906,4904,1,0,0,0,4907,
		4908,5,141,0,0,4908,4913,3,542,271,0,4909,4910,5,1098,0,0,4910,4912,3,
		542,271,0,4911,4909,1,0,0,0,4912,4915,1,0,0,0,4913,4911,1,0,0,0,4913,4914,
		1,0,0,0,4914,4916,1,0,0,0,4915,4913,1,0,0,0,4916,4919,5,65,0,0,4917,4920,
		3,524,262,0,4918,4920,3,542,271,0,4919,4917,1,0,0,0,4919,4918,1,0,0,0,
		4920,4928,1,0,0,0,4921,4924,5,1098,0,0,4922,4925,3,524,262,0,4923,4925,
		3,542,271,0,4924,4922,1,0,0,0,4924,4923,1,0,0,0,4925,4927,1,0,0,0,4926,
		4921,1,0,0,0,4927,4930,1,0,0,0,4928,4926,1,0,0,0,4928,4929,1,0,0,0,4929,
		4932,1,0,0,0,4930,4928,1,0,0,0,4931,4867,1,0,0,0,4931,4890,1,0,0,0,4931,
		4907,1,0,0,0,4932,415,1,0,0,0,4933,4934,5,141,0,0,4934,4935,5,541,0,0,
		4935,4936,5,112,0,0,4936,4937,3,524,262,0,4937,4938,5,65,0,0,4938,4943,
		3,524,262,0,4939,4940,5,1098,0,0,4940,4942,3,524,262,0,4941,4939,1,0,0,
		0,4942,4945,1,0,0,0,4943,4941,1,0,0,0,4943,4944,1,0,0,0,4944,417,1,0,0,
		0,4945,4943,1,0,0,0,4946,4947,5,147,0,0,4947,4950,5,527,0,0,4948,4949,
		5,62,0,0,4949,4951,3,524,262,0,4950,4948,1,0,0,0,4950,4951,1,0,0,0,4951,
		4952,1,0,0,0,4952,4955,5,1087,0,0,4953,4956,3,634,317,0,4954,4956,5,1111,
		0,0,4955,4953,1,0,0,0,4955,4954,1,0,0,0,4956,419,1,0,0,0,4957,4958,3,524,
		262,0,4958,4959,3,428,214,0,4959,421,1,0,0,0,4960,4961,3,524,262,0,4961,
		4962,5,431,0,0,4962,4963,5,18,0,0,4963,4964,5,527,0,0,4964,4965,5,1111,
		0,0,4965,4989,1,0,0,0,4966,4967,3,524,262,0,4967,4970,5,431,0,0,4968,4969,
		5,183,0,0,4969,4971,3,540,270,0,4970,4968,1,0,0,0,4970,4971,1,0,0,0,4971,
		4972,1,0,0,0,4972,4973,5,18,0,0,4973,4977,5,1111,0,0,4974,4975,5,139,0,
		0,4975,4976,5,34,0,0,4976,4978,5,527,0,0,4977,4974,1,0,0,0,4977,4978,1,
		0,0,0,4978,4989,1,0,0,0,4979,4980,3,524,262,0,4980,4981,5,431,0,0,4981,
		4982,5,183,0,0,4982,4985,3,540,270,0,4983,4984,5,12,0,0,4984,4986,5,1111,
		0,0,4985,4983,1,0,0,0,4985,4986,1,0,0,0,4986,4989,1,0,0,0,4987,4989,3,
		524,262,0,4988,4960,1,0,0,0,4988,4966,1,0,0,0,4988,4979,1,0,0,0,4988,4987,
		1,0,0,0,4989,423,1,0,0,0,4990,4999,5,159,0,0,4991,4999,5,652,0,0,4992,
		4993,5,346,0,0,4993,4999,5,1111,0,0,4994,4995,5,447,0,0,4995,4999,5,1111,
		0,0,4996,4997,5,612,0,0,4997,4999,5,1111,0,0,4998,4990,1,0,0,0,4998,4991,
		1,0,0,0,4998,4992,1,0,0,0,4998,4994,1,0,0,0,4998,4996,1,0,0,0,4999,425,
		1,0,0,0,5000,5001,5,481,0,0,5001,5009,3,548,274,0,5002,5003,5,484,0,0,
		5003,5009,3,548,274,0,5004,5005,5,480,0,0,5005,5009,3,548,274,0,5006,5007,
		5,485,0,0,5007,5009,3,548,274,0,5008,5000,1,0,0,0,5008,5002,1,0,0,0,5008,
		5004,1,0,0,0,5008,5006,1,0,0,0,5009,427,1,0,0,0,5010,5011,5,527,0,0,5011,
		5018,5,405,0,0,5012,5019,5,40,0,0,5013,5019,5,501,0,0,5014,5015,5,83,0,
		0,5015,5016,3,548,274,0,5016,5017,5,663,0,0,5017,5019,1,0,0,0,5018,5012,
		1,0,0,0,5018,5013,1,0,0,0,5018,5014,1,0,0,0,5018,5019,1,0,0,0,5019,429,
		1,0,0,0,5020,5021,5,320,0,0,5021,5022,7,65,0,0,5022,431,1,0,0,0,5023,5028,
		3,434,217,0,5024,5025,5,1096,0,0,5025,5026,3,574,287,0,5026,5027,5,1097,
		0,0,5027,5029,1,0,0,0,5028,5024,1,0,0,0,5028,5029,1,0,0,0,5029,433,1,0,
		0,0,5030,5032,5,6,0,0,5031,5033,5,677,0,0,5032,5031,1,0,0,0,5032,5033,
		1,0,0,0,5033,5110,1,0,0,0,5034,5036,5,7,0,0,5035,5037,5,670,0,0,5036,5035,
		1,0,0,0,5036,5037,1,0,0,0,5037,5110,1,0,0,0,5038,5046,5,32,0,0,5039,5040,
		5,621,0,0,5040,5047,5,669,0,0,5041,5047,5,670,0,0,5042,5047,5,643,0,0,
		5043,5047,5,637,0,0,5044,5047,5,619,0,0,5045,5047,5,569,0,0,5046,5039,
		1,0,0,0,5046,5041,1,0,0,0,5046,5042,1,0,0,0,5046,5043,1,0,0,0,5046,5044,
		1,0,0,0,5046,5045,1,0,0,0,5046,5047,1,0,0,0,5047,5110,1,0,0,0,5048,5110,
		5,42,0,0,5049,5051,5,49,0,0,5050,5052,5,569,0,0,5051,5050,1,0,0,0,5051,
		5052,1,0,0,0,5052,5110,1,0,0,0,5053,5110,5,400,0,0,5054,5110,5,671,0,0,
		5055,5110,5,672,0,0,5056,5057,5,69,0,0,5057,5110,5,114,0,0,5058,5110,5,
		78,0,0,5059,5110,5,82,0,0,5060,5061,5,99,0,0,5061,5110,5,669,0,0,5062,
		5110,5,673,0,0,5063,5110,5,541,0,0,5064,5110,5,130,0,0,5065,5110,5,674,
		0,0,5066,5067,5,563,0,0,5067,5110,7,66,0,0,5068,5110,5,146,0,0,5069,5070,
		5,149,0,0,5070,5110,7,67,0,0,5071,5110,5,675,0,0,5072,5110,5,676,0,0,5073,
		5110,5,168,0,0,5074,5110,5,175,0,0,5075,5110,5,176,0,0,5076,5110,5,678,
		0,0,5077,5110,5,679,0,0,5078,5110,5,680,0,0,5079,5110,5,681,0,0,5080,5110,
		5,682,0,0,5081,5110,5,683,0,0,5082,5110,5,684,0,0,5083,5110,5,685,0,0,
		5084,5110,5,686,0,0,5085,5110,5,687,0,0,5086,5110,5,688,0,0,5087,5110,
		5,689,0,0,5088,5110,5,690,0,0,5089,5110,5,691,0,0,5090,5110,5,693,0,0,
		5091,5110,5,694,0,0,5092,5110,5,695,0,0,5093,5110,5,696,0,0,5094,5110,
		5,697,0,0,5095,5110,5,698,0,0,5096,5110,5,699,0,0,5097,5110,5,700,0,0,
		5098,5110,5,701,0,0,5099,5110,5,702,0,0,5100,5110,5,703,0,0,5101,5110,
		5,704,0,0,5102,5110,5,705,0,0,5103,5110,5,706,0,0,5104,5110,5,1041,0,0,
		5105,5110,5,707,0,0,5106,5110,5,708,0,0,5107,5110,5,709,0,0,5108,5110,
		5,710,0,0,5109,5030,1,0,0,0,5109,5034,1,0,0,0,5109,5038,1,0,0,0,5109,5048,
		1,0,0,0,5109,5049,1,0,0,0,5109,5053,1,0,0,0,5109,5054,1,0,0,0,5109,5055,
		1,0,0,0,5109,5056,1,0,0,0,5109,5058,1,0,0,0,5109,5059,1,0,0,0,5109,5060,
		1,0,0,0,5109,5062,1,0,0,0,5109,5063,1,0,0,0,5109,5064,1,0,0,0,5109,5065,
		1,0,0,0,5109,5066,1,0,0,0,5109,5068,1,0,0,0,5109,5069,1,0,0,0,5109,5071,
		1,0,0,0,5109,5072,1,0,0,0,5109,5073,1,0,0,0,5109,5074,1,0,0,0,5109,5075,
		1,0,0,0,5109,5076,1,0,0,0,5109,5077,1,0,0,0,5109,5078,1,0,0,0,5109,5079,
		1,0,0,0,5109,5080,1,0,0,0,5109,5081,1,0,0,0,5109,5082,1,0,0,0,5109,5083,
		1,0,0,0,5109,5084,1,0,0,0,5109,5085,1,0,0,0,5109,5086,1,0,0,0,5109,5087,
		1,0,0,0,5109,5088,1,0,0,0,5109,5089,1,0,0,0,5109,5090,1,0,0,0,5109,5091,
		1,0,0,0,5109,5092,1,0,0,0,5109,5093,1,0,0,0,5109,5094,1,0,0,0,5109,5095,
		1,0,0,0,5109,5096,1,0,0,0,5109,5097,1,0,0,0,5109,5098,1,0,0,0,5109,5099,
		1,0,0,0,5109,5100,1,0,0,0,5109,5101,1,0,0,0,5109,5102,1,0,0,0,5109,5103,
		1,0,0,0,5109,5104,1,0,0,0,5109,5105,1,0,0,0,5109,5106,1,0,0,0,5109,5107,
		1,0,0,0,5109,5108,1,0,0,0,5110,435,1,0,0,0,5111,5128,5,1080,0,0,5112,5113,
		5,1080,0,0,5113,5114,5,1095,0,0,5114,5128,5,1080,0,0,5115,5116,3,542,271,
		0,5116,5117,5,1095,0,0,5117,5118,5,1080,0,0,5118,5128,1,0,0,0,5119,5120,
		3,542,271,0,5120,5121,5,1095,0,0,5121,5122,3,542,271,0,5122,5128,1,0,0,
		0,5123,5124,3,542,271,0,5124,5125,3,546,273,0,5125,5128,1,0,0,0,5126,5128,
		3,542,271,0,5127,5111,1,0,0,0,5127,5112,1,0,0,0,5127,5115,1,0,0,0,5127,
		5119,1,0,0,0,5127,5123,1,0,0,0,5127,5126,1,0,0,0,5128,437,1,0,0,0,5129,
		5130,3,524,262,0,5130,5131,5,166,0,0,5131,5132,3,524,262,0,5132,439,1,
		0,0,0,5133,5135,5,9,0,0,5134,5136,7,68,0,0,5135,5134,1,0,0,0,5135,5136,
		1,0,0,0,5136,5137,1,0,0,0,5137,5138,7,69,0,0,5138,5156,3,576,288,0,5139,
		5140,5,175,0,0,5140,5141,5,73,0,0,5141,5142,5,112,0,0,5142,5147,3,520,
		260,0,5143,5144,5,1098,0,0,5144,5146,3,520,260,0,5145,5143,1,0,0,0,5146,
		5149,1,0,0,0,5147,5145,1,0,0,0,5147,5148,1,0,0,0,5148,5154,1,0,0,0,5149,
		5147,1,0,0,0,5150,5151,5,183,0,0,5151,5152,3,548,274,0,5152,5153,5,17,
		0,0,5153,5155,1,0,0,0,5154,5150,1,0,0,0,5154,5155,1,0,0,0,5155,5157,1,
		0,0,0,5156,5139,1,0,0,0,5156,5157,1,0,0,0,5157,5169,1,0,0,0,5158,5159,
		5,49,0,0,5159,5160,5,73,0,0,5160,5161,5,112,0,0,5161,5166,3,520,260,0,
		5162,5163,5,1098,0,0,5163,5165,3,520,260,0,5164,5162,1,0,0,0,5165,5168,
		1,0,0,0,5166,5164,1,0,0,0,5166,5167,1,0,0,0,5167,5170,1,0,0,0,5168,5166,
		1,0,0,0,5169,5158,1,0,0,0,5169,5170,1,0,0,0,5170,441,1,0,0,0,5171,5172,
		5,25,0,0,5172,5173,5,163,0,0,5173,5177,3,576,288,0,5174,5176,3,450,225,
		0,5175,5174,1,0,0,0,5176,5179,1,0,0,0,5177,5175,1,0,0,0,5177,5178,1,0,
		0,0,5178,443,1,0,0,0,5179,5177,1,0,0,0,5180,5181,5,344,0,0,5181,5182,5,
		163,0,0,5182,5184,3,576,288,0,5183,5185,7,70,0,0,5184,5183,1,0,0,0,5184,
		5185,1,0,0,0,5185,445,1,0,0,0,5186,5188,5,113,0,0,5187,5189,7,68,0,0,5188,
		5187,1,0,0,0,5188,5189,1,0,0,0,5189,5190,1,0,0,0,5190,5191,7,69,0,0,5191,
		5192,3,576,288,0,5192,447,1,0,0,0,5193,5195,5,555,0,0,5194,5196,7,68,0,
		0,5195,5194,1,0,0,0,5195,5196,1,0,0,0,5196,5197,1,0,0,0,5197,5198,5,163,
		0,0,5198,5200,3,576,288,0,5199,5201,5,543,0,0,5200,5199,1,0,0,0,5200,5201,
		1,0,0,0,5201,5203,1,0,0,0,5202,5204,5,407,0,0,5203,5202,1,0,0,0,5203,5204,
		1,0,0,0,5204,5206,1,0,0,0,5205,5207,5,638,0,0,5206,5205,1,0,0,0,5206,5207,
		1,0,0,0,5207,449,1,0,0,0,5208,5209,5,62,0,0,5209,5216,5,636,0,0,5210,5216,
		5,543,0,0,5211,5216,5,409,0,0,5212,5216,5,486,0,0,5213,5216,5,407,0,0,
		5214,5216,5,342,0,0,5215,5208,1,0,0,0,5215,5210,1,0,0,0,5215,5211,1,0,
		0,0,5215,5212,1,0,0,0,5215,5213,1,0,0,0,5215,5214,1,0,0,0,5216,451,1,0,
		0,0,5217,5219,5,32,0,0,5218,5220,5,323,0,0,5219,5218,1,0,0,0,5219,5220,
		1,0,0,0,5220,5221,1,0,0,0,5221,5222,5,421,0,0,5222,5223,3,542,271,0,5223,
		5224,5,568,0,0,5224,5225,7,71,0,0,5225,5226,5,591,0,0,5226,5227,5,1111,
		0,0,5227,453,1,0,0,0,5228,5229,5,438,0,0,5229,5230,5,529,0,0,5230,5231,
		3,542,271,0,5231,5232,5,591,0,0,5232,5233,5,1111,0,0,5233,455,1,0,0,0,
		5234,5235,5,633,0,0,5235,5236,5,529,0,0,5236,5237,3,542,271,0,5237,457,
		1,0,0,0,5238,5239,5,147,0,0,5239,5240,3,462,231,0,5240,5243,7,72,0,0,5241,
		5244,3,640,320,0,5242,5244,5,112,0,0,5243,5241,1,0,0,0,5243,5242,1,0,0,
		0,5244,5254,1,0,0,0,5245,5246,5,1098,0,0,5246,5247,3,462,231,0,5247,5250,
		7,72,0,0,5248,5251,3,640,320,0,5249,5251,5,112,0,0,5250,5248,1,0,0,0,5250,
		5249,1,0,0,0,5251,5253,1,0,0,0,5252,5245,1,0,0,0,5253,5256,1,0,0,0,5254,
		5252,1,0,0,0,5254,5255,1,0,0,0,5255,5291,1,0,0,0,5256,5254,1,0,0,0,5257,
		5258,5,147,0,0,5258,5261,3,58,29,0,5259,5262,3,528,264,0,5260,5262,5,40,
		0,0,5261,5259,1,0,0,0,5261,5260,1,0,0,0,5262,5291,1,0,0,0,5263,5264,5,
		147,0,0,5264,5271,5,499,0,0,5265,5268,3,528,264,0,5266,5267,5,26,0,0,5267,
		5269,3,530,265,0,5268,5266,1,0,0,0,5268,5269,1,0,0,0,5269,5272,1,0,0,0,
		5270,5272,5,40,0,0,5271,5265,1,0,0,0,5271,5270,1,0,0,0,5272,5291,1,0,0,
		0,5273,5291,3,418,209,0,5274,5291,3,292,146,0,5275,5291,3,290,145,0,5276,
		5277,5,147,0,0,5277,5278,3,516,258,0,5278,5279,7,72,0,0,5279,5287,3,640,
		320,0,5280,5281,5,1098,0,0,5281,5282,3,516,258,0,5282,5283,7,72,0,0,5283,
		5284,3,640,320,0,5284,5286,1,0,0,0,5285,5280,1,0,0,0,5286,5289,1,0,0,0,
		5287,5285,1,0,0,0,5287,5288,1,0,0,0,5288,5291,1,0,0,0,5289,5287,1,0,0,
		0,5290,5238,1,0,0,0,5290,5257,1,0,0,0,5290,5263,1,0,0,0,5290,5273,1,0,
		0,0,5290,5274,1,0,0,0,5290,5275,1,0,0,0,5290,5276,1,0,0,0,5291,459,1,0,
		0,0,5292,5293,5,149,0,0,5293,5294,7,54,0,0,5294,5446,5,458,0,0,5295,5296,
		5,149,0,0,5296,5297,7,73,0,0,5297,5300,5,401,0,0,5298,5299,5,77,0,0,5299,
		5301,5,1111,0,0,5300,5298,1,0,0,0,5300,5301,1,0,0,0,5301,5304,1,0,0,0,
		5302,5303,5,65,0,0,5303,5305,3,548,274,0,5304,5302,1,0,0,0,5304,5305,1,
		0,0,0,5305,5313,1,0,0,0,5306,5310,5,95,0,0,5307,5308,3,548,274,0,5308,
		5309,5,1098,0,0,5309,5311,1,0,0,0,5310,5307,1,0,0,0,5310,5311,1,0,0,0,
		5311,5312,1,0,0,0,5312,5314,3,548,274,0,5313,5306,1,0,0,0,5313,5314,1,
		0,0,0,5314,5446,1,0,0,0,5315,5316,5,149,0,0,5316,5318,3,464,232,0,5317,
		5319,3,466,233,0,5318,5317,1,0,0,0,5318,5319,1,0,0,0,5319,5446,1,0,0,0,
		5320,5322,5,149,0,0,5321,5323,5,420,0,0,5322,5321,1,0,0,0,5322,5323,1,
		0,0,0,5323,5324,1,0,0,0,5324,5325,7,40,0,0,5325,5326,7,74,0,0,5326,5329,
		3,518,259,0,5327,5328,7,74,0,0,5328,5330,3,542,271,0,5329,5327,1,0,0,0,
		5329,5330,1,0,0,0,5330,5332,1,0,0,0,5331,5333,3,466,233,0,5332,5331,1,
		0,0,0,5332,5333,1,0,0,0,5333,5446,1,0,0,0,5334,5335,5,149,0,0,5335,5336,
		5,32,0,0,5336,5338,7,0,0,0,5337,5339,3,598,299,0,5338,5337,1,0,0,0,5338,
		5339,1,0,0,0,5339,5340,1,0,0,0,5340,5446,3,542,271,0,5341,5342,5,149,0,
		0,5342,5343,5,32,0,0,5343,5344,7,75,0,0,5344,5446,3,516,258,0,5345,5346,
		5,149,0,0,5346,5347,5,32,0,0,5347,5348,5,637,0,0,5348,5446,3,524,262,0,
		5349,5350,5,149,0,0,5350,5351,5,394,0,0,5351,5352,3,532,266,0,5352,5353,
		7,76,0,0,5353,5446,1,0,0,0,5354,5355,5,149,0,0,5355,5446,3,468,234,0,5356,
		5357,5,149,0,0,5357,5365,7,77,0,0,5358,5362,5,95,0,0,5359,5360,3,548,274,
		0,5360,5361,5,1098,0,0,5361,5363,1,0,0,0,5362,5359,1,0,0,0,5362,5363,1,
		0,0,0,5363,5364,1,0,0,0,5364,5366,3,548,274,0,5365,5358,1,0,0,0,5365,5366,
		1,0,0,0,5366,5446,1,0,0,0,5367,5368,5,149,0,0,5368,5369,5,278,0,0,5369,
		5370,5,1096,0,0,5370,5371,5,1080,0,0,5371,5372,5,1097,0,0,5372,5446,7,
		77,0,0,5373,5374,5,149,0,0,5374,5377,3,470,235,0,5375,5376,7,74,0,0,5376,
		5378,3,542,271,0,5377,5375,1,0,0,0,5377,5378,1,0,0,0,5378,5380,1,0,0,0,
		5379,5381,3,466,233,0,5380,5379,1,0,0,0,5380,5381,1,0,0,0,5381,5446,1,
		0,0,0,5382,5383,5,149,0,0,5383,5384,7,78,0,0,5384,5385,5,352,0,0,5385,
		5446,3,516,258,0,5386,5387,5,149,0,0,5387,5390,5,424,0,0,5388,5389,5,62,
		0,0,5389,5391,3,524,262,0,5390,5388,1,0,0,0,5390,5391,1,0,0,0,5391,5446,
		1,0,0,0,5392,5393,5,149,0,0,5393,5394,7,79,0,0,5394,5395,7,74,0,0,5395,
		5398,3,518,259,0,5396,5397,7,74,0,0,5397,5399,3,542,271,0,5398,5396,1,
		0,0,0,5398,5399,1,0,0,0,5399,5402,1,0,0,0,5400,5401,5,181,0,0,5401,5403,
		3,640,320,0,5402,5400,1,0,0,0,5402,5403,1,0,0,0,5403,5446,1,0,0,0,5404,
		5405,5,149,0,0,5405,5406,5,517,0,0,5406,5409,5,669,0,0,5407,5408,7,74,
		0,0,5408,5410,3,542,271,0,5409,5407,1,0,0,0,5409,5410,1,0,0,0,5410,5412,
		1,0,0,0,5411,5413,3,466,233,0,5412,5411,1,0,0,0,5412,5413,1,0,0,0,5413,
		5446,1,0,0,0,5414,5415,5,149,0,0,5415,5416,5,539,0,0,5416,5421,3,472,236,
		0,5417,5418,5,1098,0,0,5418,5420,3,472,236,0,5419,5417,1,0,0,0,5420,5423,
		1,0,0,0,5421,5419,1,0,0,0,5421,5422,1,0,0,0,5422,5427,1,0,0,0,5423,5421,
		1,0,0,0,5424,5425,5,62,0,0,5425,5426,5,542,0,0,5426,5428,3,548,274,0,5427,
		5424,1,0,0,0,5427,5428,1,0,0,0,5428,5429,1,0,0,0,5429,5433,5,95,0,0,5430,
		5431,3,548,274,0,5431,5432,5,1098,0,0,5432,5434,1,0,0,0,5433,5430,1,0,
		0,0,5433,5434,1,0,0,0,5434,5435,1,0,0,0,5435,5436,3,548,274,0,5436,5446,
		1,0,0,0,5437,5438,5,149,0,0,5438,5439,5,586,0,0,5439,5443,5,606,0,0,5440,
		5441,5,62,0,0,5441,5442,5,343,0,0,5442,5444,5,1111,0,0,5443,5440,1,0,0,
		0,5443,5444,1,0,0,0,5444,5446,1,0,0,0,5445,5292,1,0,0,0,5445,5295,1,0,
		0,0,5445,5315,1,0,0,0,5445,5320,1,0,0,0,5445,5334,1,0,0,0,5445,5341,1,
		0,0,0,5445,5345,1,0,0,0,5445,5349,1,0,0,0,5445,5354,1,0,0,0,5445,5356,
		1,0,0,0,5445,5367,1,0,0,0,5445,5373,1,0,0,0,5445,5382,1,0,0,0,5445,5386,
		1,0,0,0,5445,5392,1,0,0,0,5445,5404,1,0,0,0,5445,5414,1,0,0,0,5445,5437,
		1,0,0,0,5446,461,1,0,0,0,5447,5458,5,1123,0,0,5448,5458,5,1124,0,0,5449,
		5450,5,1100,0,0,5450,5452,5,1100,0,0,5451,5449,1,0,0,0,5451,5452,1,0,0,
		0,5452,5453,1,0,0,0,5453,5455,7,80,0,0,5454,5451,1,0,0,0,5454,5455,1,0,
		0,0,5455,5456,1,0,0,0,5456,5458,3,542,271,0,5457,5447,1,0,0,0,5457,5448,
		1,0,0,0,5457,5454,1,0,0,0,5458,463,1,0,0,0,5459,5460,5,24,0,0,5460,5473,
		5,147,0,0,5461,5473,5,809,0,0,5462,5473,5,38,0,0,5463,5473,5,145,0,0,5464,
		5465,5,421,0,0,5465,5473,5,606,0,0,5466,5467,5,125,0,0,5467,5473,5,606,
		0,0,5468,5470,7,53,0,0,5469,5468,1,0,0,0,5469,5470,1,0,0,0,5470,5471,1,
		0,0,0,5471,5473,7,81,0,0,5472,5459,1,0,0,0,5472,5461,1,0,0,0,5472,5462,
		1,0,0,0,5472,5463,1,0,0,0,5472,5464,1,0,0,0,5472,5466,1,0,0,0,5472,5469,
		1,0,0,0,5473,465,1,0,0,0,5474,5475,5,94,0,0,5475,5479,5,1111,0,0,5476,
		5477,5,181,0,0,5477,5479,3,640,320,0,5478,5474,1,0,0,0,5478,5476,1,0,0,
		0,5479,467,1,0,0,0,5480,5482,5,608,0,0,5481,5480,1,0,0,0,5481,5482,1,0,
		0,0,5482,5483,1,0,0,0,5483,5498,5,395,0,0,5484,5485,5,459,0,0,5485,5498,
		5,606,0,0,5486,5498,5,531,0,0,5487,5498,5,677,0,0,5488,5490,5,420,0,0,
		5489,5488,1,0,0,0,5489,5490,1,0,0,0,5490,5491,1,0,0,0,5491,5498,5,538,
		0,0,5492,5498,5,540,0,0,5493,5494,5,586,0,0,5494,5498,5,430,0,0,5495,5498,
		5,327,0,0,5496,5498,5,371,0,0,5497,5481,1,0,0,0,5497,5484,1,0,0,0,5497,
		5486,1,0,0,0,5497,5487,1,0,0,0,5497,5489,1,0,0,0,5497,5492,1,0,0,0,5497,
		5493,1,0,0,0,5497,5495,1,0,0,0,5497,5496,1,0,0,0,5498,469,1,0,0,0,5499,
		5508,5,401,0,0,5500,5501,5,163,0,0,5501,5508,5,606,0,0,5502,5504,5,420,
		0,0,5503,5502,1,0,0,0,5503,5504,1,0,0,0,5504,5505,1,0,0,0,5505,5508,5,
		669,0,0,5506,5508,5,627,0,0,5507,5499,1,0,0,0,5507,5500,1,0,0,0,5507,5503,
		1,0,0,0,5507,5506,1,0,0,0,5508,471,1,0,0,0,5509,5522,5,6,0,0,5510,5511,
		5,335,0,0,5511,5522,5,443,0,0,5512,5513,5,370,0,0,5513,5522,5,617,0,0,
		5514,5522,5,373,0,0,5515,5522,5,445,0,0,5516,5522,5,757,0,0,5517,5518,
		5,522,0,0,5518,5522,5,410,0,0,5519,5522,5,593,0,0,5520,5522,5,616,0,0,
		5521,5509,1,0,0,0,5521,5510,1,0,0,0,5521,5512,1,0,0,0,5521,5514,1,0,0,
		0,5521,5515,1,0,0,0,5521,5516,1,0,0,0,5521,5517,1,0,0,0,5521,5519,1,0,
		0,0,5521,5520,1,0,0,0,5522,473,1,0,0,0,5523,5524,5,333,0,0,5524,5525,5,
		1111,0,0,5525,475,1,0,0,0,5526,5527,5,339,0,0,5527,5528,5,78,0,0,5528,
		5533,3,488,244,0,5529,5530,5,1098,0,0,5530,5532,3,488,244,0,5531,5529,
		1,0,0,0,5532,5535,1,0,0,0,5533,5531,1,0,0,0,5533,5534,1,0,0,0,5534,5543,
		1,0,0,0,5535,5533,1,0,0,0,5536,5537,5,123,0,0,5537,5540,5,1096,0,0,5538,
		5541,3,574,287,0,5539,5541,5,6,0,0,5540,5538,1,0,0,0,5540,5539,1,0,0,0,
		5541,5542,1,0,0,0,5542,5544,5,1097,0,0,5543,5536,1,0,0,0,5543,5544,1,0,
		0,0,5544,5545,1,0,0,0,5545,5546,5,77,0,0,5546,5547,3,542,271,0,5547,477,
		1,0,0,0,5548,5550,5,416,0,0,5549,5551,7,68,0,0,5550,5549,1,0,0,0,5550,
		5551,1,0,0,0,5551,5552,1,0,0,0,5552,5557,3,490,245,0,5553,5554,5,1098,
		0,0,5554,5556,3,490,245,0,5555,5553,1,0,0,0,5556,5559,1,0,0,0,5557,5555,
		1,0,0,0,5557,5558,1,0,0,0,5558,479,1,0,0,0,5559,5557,1,0,0,0,5560,5562,
		5,90,0,0,5561,5563,7,82,0,0,5562,5561,1,0,0,0,5562,5563,1,0,0,0,5563,5565,
		1,0,0,0,5564,5566,3,548,274,0,5565,5564,1,0,0,0,5566,5567,1,0,0,0,5567,
		5565,1,0,0,0,5567,5568,1,0,0,0,5568,481,1,0,0,0,5569,5570,5,98,0,0,5570,
		5571,5,78,0,0,5571,5572,5,84,0,0,5572,5573,5,339,0,0,5573,5578,3,494,247,
		0,5574,5575,5,1098,0,0,5575,5577,3,494,247,0,5576,5574,1,0,0,0,5577,5580,
		1,0,0,0,5578,5576,1,0,0,0,5578,5579,1,0,0,0,5579,483,1,0,0,0,5580,5578,
		1,0,0,0,5581,5582,5,564,0,0,5582,5583,5,542,0,0,5583,5584,5,339,0,0,5584,
		485,1,0,0,0,5585,5586,5,675,0,0,5586,487,1,0,0,0,5587,5595,3,518,259,0,
		5588,5590,7,20,0,0,5589,5588,1,0,0,0,5589,5590,1,0,0,0,5590,5591,1,0,0,
		0,5591,5592,5,1096,0,0,5592,5593,3,574,287,0,5593,5594,5,1097,0,0,5594,
		5596,1,0,0,0,5595,5589,1,0,0,0,5595,5596,1,0,0,0,5596,489,1,0,0,0,5597,
		5616,5,381,0,0,5598,5616,5,430,0,0,5599,5601,7,83,0,0,5600,5599,1,0,0,
		0,5600,5601,1,0,0,0,5601,5602,1,0,0,0,5602,5616,5,458,0,0,5603,5616,5,
		518,0,0,5604,5616,5,677,0,0,5605,5606,5,542,0,0,5606,5616,5,339,0,0,5607,
		5616,5,606,0,0,5608,5616,5,639,0,0,5609,5613,5,669,0,0,5610,5611,5,183,
		0,0,5611,5612,5,128,0,0,5612,5614,5,99,0,0,5613,5610,1,0,0,0,5613,5614,
		1,0,0,0,5614,5616,1,0,0,0,5615,5597,1,0,0,0,5615,5598,1,0,0,0,5615,5600,
		1,0,0,0,5615,5603,1,0,0,0,5615,5604,1,0,0,0,5615,5605,1,0,0,0,5615,5607,
		1,0,0,0,5615,5608,1,0,0,0,5615,5609,1,0,0,0,5616,5630,1,0,0,0,5617,5618,
		5,549,0,0,5618,5620,5,458,0,0,5619,5621,3,330,165,0,5620,5619,1,0,0,0,
		5620,5621,1,0,0,0,5621,5630,1,0,0,0,5622,5624,7,69,0,0,5623,5625,3,576,
		288,0,5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5627,1,0,0,0,5626,5628,
		3,492,246,0,5627,5626,1,0,0,0,5627,5628,1,0,0,0,5628,5630,1,0,0,0,5629,
		5615,1,0,0,0,5629,5617,1,0,0,0,5629,5622,1,0,0,0,5630,491,1,0,0,0,5631,
		5632,5,183,0,0,5632,5633,5,128,0,0,5633,5637,5,99,0,0,5634,5635,5,62,0,
		0,5635,5637,5,406,0,0,5636,5631,1,0,0,0,5636,5634,1,0,0,0,5637,493,1,0,
		0,0,5638,5646,3,518,259,0,5639,5640,5,123,0,0,5640,5643,5,1096,0,0,5641,
		5644,3,574,287,0,5642,5644,5,6,0,0,5643,5641,1,0,0,0,5643,5642,1,0,0,0,
		5644,5645,1,0,0,0,5645,5647,5,1097,0,0,5646,5639,1,0,0,0,5646,5647,1,0,
		0,0,5647,5655,1,0,0,0,5648,5650,7,20,0,0,5649,5648,1,0,0,0,5649,5650,1,
		0,0,0,5650,5651,1,0,0,0,5651,5652,5,1096,0,0,5652,5653,3,574,287,0,5653,
		5654,5,1097,0,0,5654,5656,1,0,0,0,5655,5649,1,0,0,0,5655,5656,1,0,0,0,
		5656,5659,1,0,0,0,5657,5658,5,75,0,0,5658,5660,5,452,0,0,5659,5657,1,0,
		0,0,5659,5660,1,0,0,0,5660,495,1,0,0,0,5661,5662,7,84,0,0,5662,5665,3,
		518,259,0,5663,5666,3,542,271,0,5664,5666,5,1111,0,0,5665,5663,1,0,0,0,
		5665,5664,1,0,0,0,5665,5666,1,0,0,0,5666,497,1,0,0,0,5667,5671,7,84,0,
		0,5668,5669,7,85,0,0,5669,5670,5,1087,0,0,5670,5672,7,86,0,0,5671,5668,
		1,0,0,0,5671,5672,1,0,0,0,5672,5673,1,0,0,0,5673,5674,3,514,257,0,5674,
		499,1,0,0,0,5675,5676,5,428,0,0,5676,5677,5,1111,0,0,5677,501,1,0,0,0,
		5678,5679,5,177,0,0,5679,5680,3,542,271,0,5680,503,1,0,0,0,5681,5689,5,
		150,0,0,5682,5684,5,154,0,0,5683,5685,5,641,0,0,5684,5683,1,0,0,0,5684,
		5685,1,0,0,0,5685,5686,1,0,0,0,5686,5690,3,552,276,0,5687,5690,5,1119,
		0,0,5688,5690,5,1120,0,0,5689,5682,1,0,0,0,5689,5687,1,0,0,0,5689,5688,
		1,0,0,0,5690,5700,1,0,0,0,5691,5692,5,147,0,0,5692,5697,3,508,254,0,5693,
		5694,5,1098,0,0,5694,5696,3,508,254,0,5695,5693,1,0,0,0,5696,5699,1,0,
		0,0,5697,5695,1,0,0,0,5697,5698,1,0,0,0,5698,5701,1,0,0,0,5699,5697,1,
		0,0,0,5700,5691,1,0,0,0,5700,5701,1,0,0,0,5701,505,1,0,0,0,5702,5710,5,
		137,0,0,5703,5705,5,154,0,0,5704,5706,5,641,0,0,5705,5704,1,0,0,0,5705,
		5706,1,0,0,0,5706,5707,1,0,0,0,5707,5711,3,552,276,0,5708,5711,5,1119,
		0,0,5709,5711,5,1120,0,0,5710,5703,1,0,0,0,5710,5708,1,0,0,0,5710,5709,
		1,0,0,0,5710,5711,1,0,0,0,5711,5721,1,0,0,0,5712,5713,5,147,0,0,5713,5718,
		3,508,254,0,5714,5715,5,1098,0,0,5715,5717,3,508,254,0,5716,5714,1,0,0,
		0,5717,5720,1,0,0,0,5718,5716,1,0,0,0,5718,5719,1,0,0,0,5719,5722,1,0,
		0,0,5720,5718,1,0,0,0,5721,5712,1,0,0,0,5721,5722,1,0,0,0,5722,507,1,0,
		0,0,5723,5724,7,87,0,0,5724,5729,5,1087,0,0,5725,5730,3,552,276,0,5726,
		5730,5,1112,0,0,5727,5730,3,526,263,0,5728,5730,3,544,272,0,5729,5725,
		1,0,0,0,5729,5726,1,0,0,0,5729,5727,1,0,0,0,5729,5728,1,0,0,0,5730,509,
		1,0,0,0,5731,5733,5,68,0,0,5732,5734,7,88,0,0,5733,5732,1,0,0,0,5733,5734,
		1,0,0,0,5734,5735,1,0,0,0,5735,5767,5,46,0,0,5736,5737,3,462,231,0,5737,
		5738,5,1087,0,0,5738,5746,7,89,0,0,5739,5740,5,1098,0,0,5740,5741,3,462,
		231,0,5741,5742,5,1087,0,0,5742,5743,7,89,0,0,5743,5745,1,0,0,0,5744,5739,
		1,0,0,0,5745,5748,1,0,0,0,5746,5744,1,0,0,0,5746,5747,1,0,0,0,5747,5768,
		1,0,0,0,5748,5746,1,0,0,0,5749,5752,5,28,0,0,5750,5753,3,548,274,0,5751,
		5753,3,462,231,0,5752,5750,1,0,0,0,5752,5751,1,0,0,0,5753,5754,1,0,0,0,
		5754,5755,3,462,231,0,5755,5756,5,1087,0,0,5756,5764,3,512,256,0,5757,
		5758,5,1098,0,0,5758,5759,3,462,231,0,5759,5760,5,1087,0,0,5760,5761,3,
		512,256,0,5761,5763,1,0,0,0,5762,5757,1,0,0,0,5763,5766,1,0,0,0,5764,5762,
		1,0,0,0,5764,5765,1,0,0,0,5765,5768,1,0,0,0,5766,5764,1,0,0,0,5767,5736,
		1,0,0,0,5767,5749,1,0,0,0,5768,511,1,0,0,0,5769,5770,7,90,0,0,5770,513,
		1,0,0,0,5771,5777,3,190,95,0,5772,5777,3,176,88,0,5773,5777,3,182,91,0,
		5774,5777,3,188,94,0,5775,5777,3,192,96,0,5776,5771,1,0,0,0,5776,5772,
		1,0,0,0,5776,5773,1,0,0,0,5776,5774,1,0,0,0,5776,5775,1,0,0,0,5777,5782,
		1,0,0,0,5778,5779,5,62,0,0,5779,5780,5,364,0,0,5780,5782,3,542,271,0,5781,
		5776,1,0,0,0,5781,5778,1,0,0,0,5782,515,1,0,0,0,5783,5787,3,542,271,0,
		5784,5788,5,1118,0,0,5785,5786,5,1095,0,0,5786,5788,3,542,271,0,5787,5784,
		1,0,0,0,5787,5785,1,0,0,0,5787,5788,1,0,0,0,5788,517,1,0,0,0,5789,5790,
		3,516,258,0,5790,519,1,0,0,0,5791,5796,3,542,271,0,5792,5794,3,546,273,
		0,5793,5795,3,546,273,0,5794,5793,1,0,0,0,5794,5795,1,0,0,0,5795,5797,
		1,0,0,0,5796,5792,1,0,0,0,5796,5797,1,0,0,0,5797,5804,1,0,0,0,5798,5799,
		9,0,0,0,5799,5801,3,546,273,0,5800,5802,3,546,273,0,5801,5800,1,0,0,0,
		5801,5802,1,0,0,0,5802,5804,1,0,0,0,5803,5791,1,0,0,0,5803,5798,1,0,0,
		0,5804,521,1,0,0,0,5805,5808,3,542,271,0,5806,5808,5,1111,0,0,5807,5805,
		1,0,0,0,5807,5806,1,0,0,0,5808,5813,1,0,0,0,5809,5810,5,1096,0,0,5810,
		5811,3,548,274,0,5811,5812,5,1097,0,0,5812,5814,1,0,0,0,5813,5809,1,0,
		0,0,5813,5814,1,0,0,0,5814,5817,1,0,0,0,5815,5817,3,640,320,0,5816,5807,
		1,0,0,0,5816,5815,1,0,0,0,5817,5819,1,0,0,0,5818,5820,7,47,0,0,5819,5818,
		1,0,0,0,5819,5820,1,0,0,0,5820,523,1,0,0,0,5821,5822,7,91,0,0,5822,525,
		1,0,0,0,5823,5824,7,92,0,0,5824,527,1,0,0,0,5825,5830,5,217,0,0,5826,5830,
		3,658,329,0,5827,5830,5,1111,0,0,5828,5830,5,1108,0,0,5829,5825,1,0,0,
		0,5829,5826,1,0,0,0,5829,5827,1,0,0,0,5829,5828,1,0,0,0,5830,529,1,0,0,
		0,5831,5834,3,542,271,0,5832,5834,5,1111,0,0,5833,5831,1,0,0,0,5833,5832,
		1,0,0,0,5834,531,1,0,0,0,5835,5836,7,93,0,0,5836,533,1,0,0,0,5837,5838,
		3,548,274,0,5838,5839,5,1084,0,0,5839,5840,3,548,274,0,5840,5841,5,1084,
		0,0,5841,5842,3,548,274,0,5842,5843,5,1084,0,0,5843,5844,3,548,274,0,5844,
		5845,5,1084,0,0,5845,5851,3,548,274,0,5846,5847,5,1107,0,0,5847,5848,3,
		548,274,0,5848,5849,5,1084,0,0,5849,5850,3,548,274,0,5850,5852,1,0,0,0,
		5851,5846,1,0,0,0,5852,5853,1,0,0,0,5853,5851,1,0,0,0,5853,5854,1,0,0,
		0,5854,535,1,0,0,0,5855,5862,3,538,269,0,5856,5857,5,1098,0,0,5857,5860,
		3,538,269,0,5858,5859,5,1098,0,0,5859,5861,3,548,274,0,5860,5858,1,0,0,
		0,5860,5861,1,0,0,0,5861,5863,1,0,0,0,5862,5856,1,0,0,0,5862,5863,1,0,
		0,0,5863,537,1,0,0,0,5864,5872,5,1111,0,0,5865,5872,5,1116,0,0,5866,5868,
		5,1113,0,0,5867,5866,1,0,0,0,5868,5869,1,0,0,0,5869,5867,1,0,0,0,5869,
		5870,1,0,0,0,5870,5872,1,0,0,0,5871,5864,1,0,0,0,5871,5865,1,0,0,0,5871,
		5867,1,0,0,0,5872,539,1,0,0,0,5873,5876,3,542,271,0,5874,5876,5,1111,0,
		0,5875,5873,1,0,0,0,5875,5874,1,0,0,0,5876,541,1,0,0,0,5877,5881,3,544,
		272,0,5878,5881,5,1120,0,0,5879,5881,5,1108,0,0,5880,5877,1,0,0,0,5880,
		5878,1,0,0,0,5880,5879,1,0,0,0,5881,543,1,0,0,0,5882,5892,5,1119,0,0,5883,
		5892,3,658,329,0,5884,5892,3,660,330,0,5885,5892,3,532,266,0,5886,5892,
		3,662,331,0,5887,5892,3,664,332,0,5888,5892,3,666,333,0,5889,5892,3,668,
		334,0,5890,5892,3,670,335,0,5891,5882,1,0,0,0,5891,5883,1,0,0,0,5891,5884,
		1,0,0,0,5891,5885,1,0,0,0,5891,5886,1,0,0,0,5891,5887,1,0,0,0,5891,5888,
		1,0,0,0,5891,5889,1,0,0,0,5891,5890,1,0,0,0,5892,545,1,0,0,0,5893,5897,
		5,1118,0,0,5894,5895,5,1095,0,0,5895,5897,3,542,271,0,5896,5893,1,0,0,
		0,5896,5894,1,0,0,0,5897,547,1,0,0,0,5898,5899,7,94,0,0,5899,549,1,0,0,
		0,5900,5903,5,1109,0,0,5901,5903,3,548,274,0,5902,5900,1,0,0,0,5902,5901,
		1,0,0,0,5903,551,1,0,0,0,5904,5906,5,1117,0,0,5905,5904,1,0,0,0,5905,5906,
		1,0,0,0,5906,5907,1,0,0,0,5907,5910,5,1111,0,0,5908,5910,5,1110,0,0,5909,
		5905,1,0,0,0,5909,5908,1,0,0,0,5910,5912,1,0,0,0,5911,5913,5,1111,0,0,
		5912,5911,1,0,0,0,5913,5914,1,0,0,0,5914,5912,1,0,0,0,5914,5915,1,0,0,
		0,5915,5928,1,0,0,0,5916,5918,5,1117,0,0,5917,5916,1,0,0,0,5917,5918,1,
		0,0,0,5918,5919,1,0,0,0,5919,5922,5,1111,0,0,5920,5922,5,1110,0,0,5921,
		5917,1,0,0,0,5921,5920,1,0,0,0,5922,5925,1,0,0,0,5923,5924,5,26,0,0,5924,
		5926,3,530,265,0,5925,5923,1,0,0,0,5925,5926,1,0,0,0,5926,5928,1,0,0,0,
		5927,5909,1,0,0,0,5927,5921,1,0,0,0,5928,553,1,0,0,0,5929,5930,7,95,0,
		0,5930,555,1,0,0,0,5931,5933,5,1117,0,0,5932,5931,1,0,0,0,5932,5933,1,
		0,0,0,5933,5934,1,0,0,0,5934,5935,5,1113,0,0,5935,557,1,0,0,0,5936,5938,
		5,108,0,0,5937,5936,1,0,0,0,5937,5938,1,0,0,0,5938,5939,1,0,0,0,5939,5940,
		7,96,0,0,5940,559,1,0,0,0,5941,5954,3,552,276,0,5942,5954,3,548,274,0,
		5943,5944,5,1084,0,0,5944,5954,3,548,274,0,5945,5954,3,556,278,0,5946,
		5954,3,554,277,0,5947,5954,5,1114,0,0,5948,5954,5,1116,0,0,5949,5951,5,
		108,0,0,5950,5949,1,0,0,0,5950,5951,1,0,0,0,5951,5952,1,0,0,0,5952,5954,
		7,96,0,0,5953,5941,1,0,0,0,5953,5942,1,0,0,0,5953,5943,1,0,0,0,5953,5945,
		1,0,0,0,5953,5946,1,0,0,0,5953,5947,1,0,0,0,5953,5948,1,0,0,0,5953,5950,
		1,0,0,0,5954,561,1,0,0,0,5955,5957,7,97,0,0,5956,5958,5,229,0,0,5957,5956,
		1,0,0,0,5957,5958,1,0,0,0,5958,5960,1,0,0,0,5959,5961,3,568,284,0,5960,
		5959,1,0,0,0,5960,5961,1,0,0,0,5961,5963,1,0,0,0,5962,5964,5,217,0,0,5963,
		5962,1,0,0,0,5963,5964,1,0,0,0,5964,5968,1,0,0,0,5965,5966,3,58,29,0,5966,
		5967,3,528,264,0,5967,5969,1,0,0,0,5968,5965,1,0,0,0,5968,5969,1,0,0,0,
		5969,5973,1,0,0,0,5970,5971,5,26,0,0,5971,5974,3,530,265,0,5972,5974,5,
		217,0,0,5973,5970,1,0,0,0,5973,5972,1,0,0,0,5973,5974,1,0,0,0,5974,6078,
		1,0,0,0,5975,5976,5,216,0,0,5976,5978,7,98,0,0,5977,5979,3,568,284,0,5978,
		5977,1,0,0,0,5978,5979,1,0,0,0,5979,5981,1,0,0,0,5980,5982,5,217,0,0,5981,
		5980,1,0,0,0,5981,5982,1,0,0,0,5982,6078,1,0,0,0,5983,5984,5,500,0,0,5984,
		5986,5,214,0,0,5985,5987,3,568,284,0,5986,5985,1,0,0,0,5986,5987,1,0,0,
		0,5987,5989,1,0,0,0,5988,5990,5,217,0,0,5989,5988,1,0,0,0,5989,5990,1,
		0,0,0,5990,6078,1,0,0,0,5991,5992,5,216,0,0,5992,5993,7,99,0,0,5993,5995,
		5,229,0,0,5994,5996,3,568,284,0,5995,5994,1,0,0,0,5995,5996,1,0,0,0,5996,
		5998,1,0,0,0,5997,5999,5,217,0,0,5998,5997,1,0,0,0,5998,5999,1,0,0,0,5999,
		6078,1,0,0,0,6000,6002,7,100,0,0,6001,6003,3,568,284,0,6002,6001,1,0,0,
		0,6002,6003,1,0,0,0,6003,6007,1,0,0,0,6004,6006,7,101,0,0,6005,6004,1,
		0,0,0,6006,6009,1,0,0,0,6007,6005,1,0,0,0,6007,6008,1,0,0,0,6008,6078,
		1,0,0,0,6009,6007,1,0,0,0,6010,6012,5,199,0,0,6011,6013,3,570,285,0,6012,
		6011,1,0,0,0,6012,6013,1,0,0,0,6013,6017,1,0,0,0,6014,6016,7,101,0,0,6015,
		6014,1,0,0,0,6016,6019,1,0,0,0,6017,6015,1,0,0,0,6017,6018,1,0,0,0,6018,
		6078,1,0,0,0,6019,6017,1,0,0,0,6020,6022,5,200,0,0,6021,6023,5,201,0,0,
		6022,6021,1,0,0,0,6022,6023,1,0,0,0,6023,6025,1,0,0,0,6024,6026,3,570,
		285,0,6025,6024,1,0,0,0,6025,6026,1,0,0,0,6026,6030,1,0,0,0,6027,6029,
		7,101,0,0,6028,6027,1,0,0,0,6029,6032,1,0,0,0,6030,6028,1,0,0,0,6030,6031,
		1,0,0,0,6031,6078,1,0,0,0,6032,6030,1,0,0,0,6033,6035,7,102,0,0,6034,6036,
		3,572,286,0,6035,6034,1,0,0,0,6035,6036,1,0,0,0,6036,6040,1,0,0,0,6037,
		6039,7,101,0,0,6038,6037,1,0,0,0,6039,6042,1,0,0,0,6040,6038,1,0,0,0,6040,
		6041,1,0,0,0,6041,6078,1,0,0,0,6042,6040,1,0,0,0,6043,6078,7,103,0,0,6044,
		6046,7,104,0,0,6045,6047,3,568,284,0,6046,6045,1,0,0,0,6046,6047,1,0,0,
		0,6047,6078,1,0,0,0,6048,6049,7,105,0,0,6049,6051,3,564,282,0,6050,6052,
		5,217,0,0,6051,6050,1,0,0,0,6051,6052,1,0,0,0,6052,6056,1,0,0,0,6053,6054,
		3,58,29,0,6054,6055,3,528,264,0,6055,6057,1,0,0,0,6056,6053,1,0,0,0,6056,
		6057,1,0,0,0,6057,6078,1,0,0,0,6058,6078,7,106,0,0,6059,6061,5,222,0,0,
		6060,6062,5,214,0,0,6061,6060,1,0,0,0,6061,6062,1,0,0,0,6062,6064,1,0,
		0,0,6063,6065,5,217,0,0,6064,6063,1,0,0,0,6064,6065,1,0,0,0,6065,6069,
		1,0,0,0,6066,6067,3,58,29,0,6067,6068,3,528,264,0,6068,6070,1,0,0,0,6069,
		6066,1,0,0,0,6069,6070,1,0,0,0,6070,6073,1,0,0,0,6071,6072,5,26,0,0,6072,
		6074,3,530,265,0,6073,6071,1,0,0,0,6073,6074,1,0,0,0,6074,6078,1,0,0,0,
		6075,6076,5,222,0,0,6076,6078,5,218,0,0,6077,5955,1,0,0,0,6077,5975,1,
		0,0,0,6077,5983,1,0,0,0,6077,5991,1,0,0,0,6077,6000,1,0,0,0,6077,6010,
		1,0,0,0,6077,6020,1,0,0,0,6077,6033,1,0,0,0,6077,6043,1,0,0,0,6077,6044,
		1,0,0,0,6077,6048,1,0,0,0,6077,6058,1,0,0,0,6077,6059,1,0,0,0,6077,6075,
		1,0,0,0,6078,563,1,0,0,0,6079,6080,5,1096,0,0,6080,6085,5,1111,0,0,6081,
		6082,5,1098,0,0,6082,6084,5,1111,0,0,6083,6081,1,0,0,0,6084,6087,1,0,0,
		0,6085,6083,1,0,0,0,6085,6086,1,0,0,0,6086,6088,1,0,0,0,6087,6085,1,0,
		0,0,6088,6089,5,1097,0,0,6089,565,1,0,0,0,6090,6092,7,107,0,0,6091,6093,
		3,568,284,0,6092,6091,1,0,0,0,6092,6093,1,0,0,0,6093,6113,1,0,0,0,6094,
		6096,5,213,0,0,6095,6097,3,568,284,0,6096,6095,1,0,0,0,6096,6097,1,0,0,
		0,6097,6101,1,0,0,0,6098,6099,3,58,29,0,6099,6100,3,528,264,0,6100,6102,
		1,0,0,0,6101,6098,1,0,0,0,6101,6102,1,0,0,0,6102,6113,1,0,0,0,6103,6113,
		7,108,0,0,6104,6106,5,205,0,0,6105,6107,3,572,286,0,6106,6105,1,0,0,0,
		6106,6107,1,0,0,0,6107,6113,1,0,0,0,6108,6110,7,109,0,0,6109,6111,5,197,
		0,0,6110,6109,1,0,0,0,6110,6111,1,0,0,0,6111,6113,1,0,0,0,6112,6090,1,
		0,0,0,6112,6094,1,0,0,0,6112,6103,1,0,0,0,6112,6104,1,0,0,0,6112,6108,
		1,0,0,0,6113,6115,1,0,0,0,6114,6116,5,11,0,0,6115,6114,1,0,0,0,6115,6116,
		1,0,0,0,6116,567,1,0,0,0,6117,6118,5,1096,0,0,6118,6119,3,548,274,0,6119,
		6120,5,1097,0,0,6120,569,1,0,0,0,6121,6122,5,1096,0,0,6122,6123,3,548,
		274,0,6123,6124,5,1098,0,0,6124,6125,3,548,274,0,6125,6126,5,1097,0,0,
		6126,571,1,0,0,0,6127,6128,5,1096,0,0,6128,6131,3,548,274,0,6129,6130,
		5,1098,0,0,6130,6132,3,548,274,0,6131,6129,1,0,0,0,6131,6132,1,0,0,0,6132,
		6133,1,0,0,0,6133,6134,5,1097,0,0,6134,573,1,0,0,0,6135,6140,3,542,271,
		0,6136,6137,5,1098,0,0,6137,6139,3,542,271,0,6138,6136,1,0,0,0,6139,6142,
		1,0,0,0,6140,6138,1,0,0,0,6140,6141,1,0,0,0,6141,575,1,0,0,0,6142,6140,
		1,0,0,0,6143,6148,3,518,259,0,6144,6145,5,1098,0,0,6145,6147,3,518,259,
		0,6146,6144,1,0,0,0,6147,6150,1,0,0,0,6148,6146,1,0,0,0,6148,6149,1,0,
		0,0,6149,577,1,0,0,0,6150,6148,1,0,0,0,6151,6152,5,1096,0,0,6152,6157,
		3,522,261,0,6153,6154,5,1098,0,0,6154,6156,3,522,261,0,6155,6153,1,0,0,
		0,6156,6159,1,0,0,0,6157,6155,1,0,0,0,6157,6158,1,0,0,0,6158,6160,1,0,
		0,0,6159,6157,1,0,0,0,6160,6161,5,1097,0,0,6161,579,1,0,0,0,6162,6167,
		3,640,320,0,6163,6164,5,1098,0,0,6164,6166,3,640,320,0,6165,6163,1,0,0,
		0,6166,6169,1,0,0,0,6167,6165,1,0,0,0,6167,6168,1,0,0,0,6168,581,1,0,0,
		0,6169,6167,1,0,0,0,6170,6175,3,594,297,0,6171,6172,5,1098,0,0,6172,6174,
		3,594,297,0,6173,6171,1,0,0,0,6174,6177,1,0,0,0,6175,6173,1,0,0,0,6175,
		6176,1,0,0,0,6176,583,1,0,0,0,6177,6175,1,0,0,0,6178,6183,3,560,280,0,
		6179,6180,5,1098,0,0,6180,6182,3,560,280,0,6181,6179,1,0,0,0,6182,6185,
		1,0,0,0,6183,6181,1,0,0,0,6183,6184,1,0,0,0,6184,585,1,0,0,0,6185,6183,
		1,0,0,0,6186,6191,5,1111,0,0,6187,6188,5,1098,0,0,6188,6190,5,1111,0,0,
		6189,6187,1,0,0,0,6190,6193,1,0,0,0,6191,6189,1,0,0,0,6191,6192,1,0,0,
		0,6192,587,1,0,0,0,6193,6191,1,0,0,0,6194,6199,5,1123,0,0,6195,6196,5,
		1098,0,0,6196,6198,5,1123,0,0,6197,6195,1,0,0,0,6198,6201,1,0,0,0,6199,
		6197,1,0,0,0,6199,6200,1,0,0,0,6200,589,1,0,0,0,6201,6199,1,0,0,0,6202,
		6213,5,110,0,0,6203,6205,3,646,323,0,6204,6203,1,0,0,0,6204,6205,1,0,0,
		0,6205,6206,1,0,0,0,6206,6213,3,560,280,0,6207,6213,3,592,296,0,6208,6209,
		5,1096,0,0,6209,6210,3,640,320,0,6210,6211,5,1097,0,0,6211,6213,1,0,0,
		0,6212,6202,1,0,0,0,6212,6204,1,0,0,0,6212,6207,1,0,0,0,6212,6208,1,0,
		0,0,6213,6217,1,0,0,0,6214,6215,5,112,0,0,6215,6216,5,175,0,0,6216,6218,
		3,592,296,0,6217,6214,1,0,0,0,6217,6218,1,0,0,0,6218,591,1,0,0,0,6219,
		6225,7,110,0,0,6220,6222,5,1096,0,0,6221,6223,3,548,274,0,6222,6221,1,
		0,0,0,6222,6223,1,0,0,0,6223,6224,1,0,0,0,6224,6226,5,1097,0,0,6225,6220,
		1,0,0,0,6225,6226,1,0,0,0,6226,6234,1,0,0,0,6227,6228,5,311,0,0,6228,6230,
		5,1096,0,0,6229,6231,3,548,274,0,6230,6229,1,0,0,0,6230,6231,1,0,0,0,6231,
		6232,1,0,0,0,6232,6234,5,1097,0,0,6233,6219,1,0,0,0,6233,6227,1,0,0,0,
		6234,593,1,0,0,0,6235,6238,3,640,320,0,6236,6238,5,40,0,0,6237,6235,1,
		0,0,0,6237,6236,1,0,0,0,6238,595,1,0,0,0,6239,6240,5,74,0,0,6240,6241,
		5,57,0,0,6241,597,1,0,0,0,6242,6243,5,74,0,0,6243,6244,5,108,0,0,6244,
		6245,5,57,0,0,6245,599,1,0,0,0,6246,6265,3,602,301,0,6247,6265,3,610,305,
		0,6248,6265,3,612,306,0,6249,6250,3,632,316,0,6250,6252,5,1096,0,0,6251,
		6253,3,636,318,0,6252,6251,1,0,0,0,6252,6253,1,0,0,0,6253,6254,1,0,0,0,
		6254,6255,5,1097,0,0,6255,6265,1,0,0,0,6256,6257,3,516,258,0,6257,6259,
		5,1096,0,0,6258,6260,3,636,318,0,6259,6258,1,0,0,0,6259,6260,1,0,0,0,6260,
		6261,1,0,0,0,6261,6262,5,1097,0,0,6262,6265,1,0,0,0,6263,6265,3,634,317,
		0,6264,6246,1,0,0,0,6264,6247,1,0,0,0,6264,6248,1,0,0,0,6264,6249,1,0,
		0,0,6264,6256,1,0,0,0,6264,6263,1,0,0,0,6265,601,1,0,0,0,6266,6269,7,111,
		0,0,6267,6268,5,1096,0,0,6268,6270,5,1097,0,0,6269,6267,1,0,0,0,6269,6270,
		1,0,0,0,6270,6459,1,0,0,0,6271,6272,5,31,0,0,6272,6273,5,1096,0,0,6273,
		6274,3,640,320,0,6274,6275,5,1098,0,0,6275,6276,3,566,283,0,6276,6277,
		5,1097,0,0,6277,6459,1,0,0,0,6278,6279,5,31,0,0,6279,6280,5,1096,0,0,6280,
		6281,3,640,320,0,6281,6282,5,178,0,0,6282,6283,3,528,264,0,6283,6284,5,
		1097,0,0,6284,6459,1,0,0,0,6285,6286,5,22,0,0,6286,6287,5,1096,0,0,6287,
		6288,3,640,320,0,6288,6289,5,12,0,0,6289,6290,3,566,283,0,6290,6291,5,
		1097,0,0,6291,6459,1,0,0,0,6292,6293,5,179,0,0,6293,6294,5,1096,0,0,6294,
		6295,3,520,260,0,6295,6296,5,1097,0,0,6296,6459,1,0,0,0,6297,6298,5,21,
		0,0,6298,6300,3,640,320,0,6299,6301,3,604,302,0,6300,6299,1,0,0,0,6301,
		6302,1,0,0,0,6302,6300,1,0,0,0,6302,6303,1,0,0,0,6303,6306,1,0,0,0,6304,
		6305,5,51,0,0,6305,6307,3,638,319,0,6306,6304,1,0,0,0,6306,6307,1,0,0,
		0,6307,6308,1,0,0,0,6308,6309,5,392,0,0,6309,6459,1,0,0,0,6310,6312,5,
		21,0,0,6311,6313,3,604,302,0,6312,6311,1,0,0,0,6313,6314,1,0,0,0,6314,
		6312,1,0,0,0,6314,6315,1,0,0,0,6315,6318,1,0,0,0,6316,6317,5,51,0,0,6317,
		6319,3,638,319,0,6318,6316,1,0,0,0,6318,6319,1,0,0,0,6319,6320,1,0,0,0,
		6320,6321,5,392,0,0,6321,6459,1,0,0,0,6322,6323,5,213,0,0,6323,6324,5,
		1096,0,0,6324,6327,3,636,318,0,6325,6326,5,178,0,0,6326,6328,3,528,264,
		0,6327,6325,1,0,0,0,6327,6328,1,0,0,0,6328,6329,1,0,0,0,6329,6330,5,1097,
		0,0,6330,6459,1,0,0,0,6331,6332,5,312,0,0,6332,6335,5,1096,0,0,6333,6336,
		3,552,276,0,6334,6336,3,640,320,0,6335,6333,1,0,0,0,6335,6334,1,0,0,0,
		6336,6337,1,0,0,0,6337,6340,5,77,0,0,6338,6341,3,552,276,0,6339,6341,3,
		640,320,0,6340,6338,1,0,0,0,6340,6339,1,0,0,0,6341,6342,1,0,0,0,6342,6343,
		5,1097,0,0,6343,6459,1,0,0,0,6344,6345,7,112,0,0,6345,6348,5,1096,0,0,
		6346,6349,3,552,276,0,6347,6349,3,640,320,0,6348,6346,1,0,0,0,6348,6347,
		1,0,0,0,6349,6350,1,0,0,0,6350,6353,5,65,0,0,6351,6354,3,548,274,0,6352,
		6354,3,640,320,0,6353,6351,1,0,0,0,6353,6352,1,0,0,0,6354,6360,1,0,0,0,
		6355,6358,5,62,0,0,6356,6359,3,548,274,0,6357,6359,3,640,320,0,6358,6356,
		1,0,0,0,6358,6357,1,0,0,0,6359,6361,1,0,0,0,6360,6355,1,0,0,0,6360,6361,
		1,0,0,0,6361,6362,1,0,0,0,6362,6363,5,1097,0,0,6363,6459,1,0,0,0,6364,
		6365,5,316,0,0,6365,6366,5,1096,0,0,6366,6369,7,113,0,0,6367,6370,3,552,
		276,0,6368,6370,3,640,320,0,6369,6367,1,0,0,0,6369,6368,1,0,0,0,6369,6370,
		1,0,0,0,6370,6371,1,0,0,0,6371,6374,5,65,0,0,6372,6375,3,552,276,0,6373,
		6375,3,640,320,0,6374,6372,1,0,0,0,6374,6373,1,0,0,0,6375,6376,1,0,0,0,
		6376,6377,5,1097,0,0,6377,6459,1,0,0,0,6378,6379,5,316,0,0,6379,6382,5,
		1096,0,0,6380,6383,3,552,276,0,6381,6383,3,640,320,0,6382,6380,1,0,0,0,
		6382,6381,1,0,0,0,6383,6384,1,0,0,0,6384,6387,5,65,0,0,6385,6388,3,552,
		276,0,6386,6388,3,640,320,0,6387,6385,1,0,0,0,6387,6386,1,0,0,0,6388,6389,
		1,0,0,0,6389,6390,5,1097,0,0,6390,6459,1,0,0,0,6391,6392,5,1066,0,0,6392,
		6395,5,1096,0,0,6393,6396,3,552,276,0,6394,6396,3,640,320,0,6395,6393,
		1,0,0,0,6395,6394,1,0,0,0,6396,6403,1,0,0,0,6397,6398,5,12,0,0,6398,6399,
		7,114,0,0,6399,6400,5,1096,0,0,6400,6401,3,548,274,0,6401,6402,5,1097,
		0,0,6402,6404,1,0,0,0,6403,6397,1,0,0,0,6403,6404,1,0,0,0,6404,6406,1,
		0,0,0,6405,6407,3,606,303,0,6406,6405,1,0,0,0,6406,6407,1,0,0,0,6407,6408,
		1,0,0,0,6408,6409,5,1097,0,0,6409,6459,1,0,0,0,6410,6411,5,309,0,0,6411,
		6412,5,1096,0,0,6412,6413,3,68,34,0,6413,6416,5,65,0,0,6414,6417,3,552,
		276,0,6415,6417,3,640,320,0,6416,6414,1,0,0,0,6416,6415,1,0,0,0,6417,6418,
		1,0,0,0,6418,6419,5,1097,0,0,6419,6459,1,0,0,0,6420,6421,5,865,0,0,6421,
		6422,5,1096,0,0,6422,6423,7,115,0,0,6423,6424,5,1098,0,0,6424,6425,3,552,
		276,0,6425,6426,5,1097,0,0,6426,6459,1,0,0,0,6427,6428,5,251,0,0,6428,
		6429,5,1096,0,0,6429,6430,3,640,320,0,6430,6431,5,1098,0,0,6431,6434,3,
		640,320,0,6432,6433,5,567,0,0,6433,6435,3,566,283,0,6434,6432,1,0,0,0,
		6434,6435,1,0,0,0,6435,6444,1,0,0,0,6436,6441,5,110,0,0,6437,6441,5,396,
		0,0,6438,6439,5,40,0,0,6439,6441,3,590,295,0,6440,6436,1,0,0,0,6440,6437,
		1,0,0,0,6440,6438,1,0,0,0,6441,6442,1,0,0,0,6442,6443,5,112,0,0,6443,6445,
		5,53,0,0,6444,6440,1,0,0,0,6444,6445,1,0,0,0,6445,6454,1,0,0,0,6446,6451,
		5,110,0,0,6447,6451,5,396,0,0,6448,6449,5,40,0,0,6449,6451,3,590,295,0,
		6450,6446,1,0,0,0,6450,6447,1,0,0,0,6450,6448,1,0,0,0,6451,6452,1,0,0,
		0,6452,6453,5,112,0,0,6453,6455,5,396,0,0,6454,6450,1,0,0,0,6454,6455,
		1,0,0,0,6455,6456,1,0,0,0,6456,6457,5,1097,0,0,6457,6459,1,0,0,0,6458,
		6266,1,0,0,0,6458,6271,1,0,0,0,6458,6278,1,0,0,0,6458,6285,1,0,0,0,6458,
		6292,1,0,0,0,6458,6297,1,0,0,0,6458,6310,1,0,0,0,6458,6322,1,0,0,0,6458,
		6331,1,0,0,0,6458,6344,1,0,0,0,6458,6364,1,0,0,0,6458,6378,1,0,0,0,6458,
		6391,1,0,0,0,6458,6410,1,0,0,0,6458,6420,1,0,0,0,6458,6427,1,0,0,0,6459,
		603,1,0,0,0,6460,6461,5,180,0,0,6461,6462,3,638,319,0,6462,6463,5,165,
		0,0,6463,6464,3,638,319,0,6464,605,1,0,0,0,6465,6466,5,454,0,0,6466,6471,
		3,608,304,0,6467,6468,5,1098,0,0,6468,6470,3,608,304,0,6469,6467,1,0,0,
		0,6470,6473,1,0,0,0,6471,6469,1,0,0,0,6471,6472,1,0,0,0,6472,6480,1,0,
		0,0,6473,6471,1,0,0,0,6474,6475,5,454,0,0,6475,6476,3,548,274,0,6476,6477,
		5,1084,0,0,6477,6478,3,548,274,0,6478,6480,1,0,0,0,6479,6465,1,0,0,0,6479,
		6474,1,0,0,0,6480,607,1,0,0,0,6481,6483,3,548,274,0,6482,6484,7,116,0,
		0,6483,6482,1,0,0,0,6483,6484,1,0,0,0,6484,609,1,0,0,0,6485,6486,7,117,
		0,0,6486,6488,5,1096,0,0,6487,6489,7,43,0,0,6488,6487,1,0,0,0,6488,6489,
		1,0,0,0,6489,6490,1,0,0,0,6490,6491,3,638,319,0,6491,6493,5,1097,0,0,6492,
		6494,3,614,307,0,6493,6492,1,0,0,0,6493,6494,1,0,0,0,6494,6545,1,0,0,0,
		6495,6496,5,278,0,0,6496,6504,5,1096,0,0,6497,6505,5,1080,0,0,6498,6500,
		5,6,0,0,6499,6498,1,0,0,0,6499,6500,1,0,0,0,6500,6501,1,0,0,0,6501,6505,
		3,638,319,0,6502,6503,5,47,0,0,6503,6505,3,636,318,0,6504,6497,1,0,0,0,
		6504,6499,1,0,0,0,6504,6502,1,0,0,0,6505,6506,1,0,0,0,6506,6508,5,1097,
		0,0,6507,6509,3,614,307,0,6508,6507,1,0,0,0,6508,6509,1,0,0,0,6509,6545,
		1,0,0,0,6510,6511,7,118,0,0,6511,6513,5,1096,0,0,6512,6514,5,6,0,0,6513,
		6512,1,0,0,0,6513,6514,1,0,0,0,6514,6515,1,0,0,0,6515,6516,3,638,319,0,
		6516,6518,5,1097,0,0,6517,6519,3,614,307,0,6518,6517,1,0,0,0,6518,6519,
		1,0,0,0,6519,6545,1,0,0,0,6520,6521,5,282,0,0,6521,6523,5,1096,0,0,6522,
		6524,5,47,0,0,6523,6522,1,0,0,0,6523,6524,1,0,0,0,6524,6525,1,0,0,0,6525,
		6536,3,636,318,0,6526,6527,5,118,0,0,6527,6528,5,18,0,0,6528,6533,3,220,
		110,0,6529,6530,5,1098,0,0,6530,6532,3,220,110,0,6531,6529,1,0,0,0,6532,
		6535,1,0,0,0,6533,6531,1,0,0,0,6533,6534,1,0,0,0,6534,6537,1,0,0,0,6535,
		6533,1,0,0,0,6536,6526,1,0,0,0,6536,6537,1,0,0,0,6537,6540,1,0,0,0,6538,
		6539,5,148,0,0,6539,6541,5,1111,0,0,6540,6538,1,0,0,0,6540,6541,1,0,0,
		0,6541,6542,1,0,0,0,6542,6543,5,1097,0,0,6543,6545,1,0,0,0,6544,6485,1,
		0,0,0,6544,6495,1,0,0,0,6544,6510,1,0,0,0,6544,6520,1,0,0,0,6545,611,1,
		0,0,0,6546,6547,7,119,0,0,6547,6548,5,1096,0,0,6548,6551,3,640,320,0,6549,
		6550,5,1098,0,0,6550,6552,3,548,274,0,6551,6549,1,0,0,0,6551,6552,1,0,
		0,0,6552,6555,1,0,0,0,6553,6554,5,1098,0,0,6554,6556,3,548,274,0,6555,
		6553,1,0,0,0,6555,6556,1,0,0,0,6556,6557,1,0,0,0,6557,6558,5,1097,0,0,
		6558,6559,3,614,307,0,6559,6585,1,0,0,0,6560,6561,7,120,0,0,6561,6562,
		5,1096,0,0,6562,6563,3,640,320,0,6563,6564,5,1097,0,0,6564,6565,3,614,
		307,0,6565,6585,1,0,0,0,6566,6567,7,121,0,0,6567,6568,5,1096,0,0,6568,
		6569,5,1097,0,0,6569,6585,3,614,307,0,6570,6571,5,289,0,0,6571,6572,5,
		1096,0,0,6572,6573,3,640,320,0,6573,6574,5,1098,0,0,6574,6575,3,548,274,
		0,6575,6576,5,1097,0,0,6576,6577,3,614,307,0,6577,6585,1,0,0,0,6578,6579,
		5,288,0,0,6579,6580,5,1096,0,0,6580,6581,3,548,274,0,6581,6582,5,1097,
		0,0,6582,6583,3,614,307,0,6583,6585,1,0,0,0,6584,6546,1,0,0,0,6584,6560,
		1,0,0,0,6584,6566,1,0,0,0,6584,6570,1,0,0,0,6584,6578,1,0,0,0,6585,613,
		1,0,0,0,6586,6593,5,120,0,0,6587,6589,5,1096,0,0,6588,6590,3,616,308,0,
		6589,6588,1,0,0,0,6589,6590,1,0,0,0,6590,6591,1,0,0,0,6591,6594,5,1097,
		0,0,6592,6594,3,618,309,0,6593,6587,1,0,0,0,6593,6592,1,0,0,0,6594,615,
		1,0,0,0,6595,6597,3,618,309,0,6596,6595,1,0,0,0,6596,6597,1,0,0,0,6597,
		6599,1,0,0,0,6598,6600,3,630,315,0,6599,6598,1,0,0,0,6599,6600,1,0,0,0,
		6600,6602,1,0,0,0,6601,6603,3,218,109,0,6602,6601,1,0,0,0,6602,6603,1,
		0,0,0,6603,6605,1,0,0,0,6604,6606,3,620,310,0,6605,6604,1,0,0,0,6605,6606,
		1,0,0,0,6606,617,1,0,0,0,6607,6608,3,542,271,0,6608,619,1,0,0,0,6609,6610,
		3,622,311,0,6610,6611,3,624,312,0,6611,621,1,0,0,0,6612,6613,7,122,0,0,
		6613,623,1,0,0,0,6614,6617,3,628,314,0,6615,6617,3,626,313,0,6616,6614,
		1,0,0,0,6616,6615,1,0,0,0,6617,625,1,0,0,0,6618,6619,5,15,0,0,6619,6620,
		3,628,314,0,6620,6621,5,10,0,0,6621,6622,3,628,314,0,6622,627,1,0,0,0,
		6623,6624,5,34,0,0,6624,6631,5,573,0,0,6625,6626,5,629,0,0,6626,6631,7,
		123,0,0,6627,6628,3,640,320,0,6628,6629,7,123,0,0,6629,6631,1,0,0,0,6630,
		6623,1,0,0,0,6630,6625,1,0,0,0,6630,6627,1,0,0,0,6631,629,1,0,0,0,6632,
		6633,5,123,0,0,6633,6634,5,18,0,0,6634,6639,3,640,320,0,6635,6636,5,1098,
		0,0,6636,6638,3,640,320,0,6637,6635,1,0,0,0,6638,6641,1,0,0,0,6639,6637,
		1,0,0,0,6639,6640,1,0,0,0,6640,631,1,0,0,0,6641,6639,1,0,0,0,6642,6666,
		3,670,335,0,6643,6666,5,712,0,0,6644,6666,5,305,0,0,6645,6666,5,301,0,
		0,6646,6666,5,302,0,0,6647,6666,5,303,0,0,6648,6666,5,306,0,0,6649,6666,
		5,307,0,0,6650,6666,5,308,0,0,6651,6666,5,74,0,0,6652,6666,5,82,0,0,6653,
		6666,5,304,0,0,6654,6666,5,310,0,0,6655,6666,5,490,0,0,6656,6666,5,311,
		0,0,6657,6666,5,135,0,0,6658,6666,5,313,0,0,6659,6666,5,314,0,0,6660,6666,
		5,315,0,0,6661,6666,5,316,0,0,6662,6666,5,317,0,0,6663,6666,5,318,0,0,
		6664,6666,5,319,0,0,6665,6642,1,0,0,0,6665,6643,1,0,0,0,6665,6644,1,0,
		0,0,6665,6645,1,0,0,0,6665,6646,1,0,0,0,6665,6647,1,0,0,0,6665,6648,1,
		0,0,0,6665,6649,1,0,0,0,6665,6650,1,0,0,0,6665,6651,1,0,0,0,6665,6652,
		1,0,0,0,6665,6653,1,0,0,0,6665,6654,1,0,0,0,6665,6655,1,0,0,0,6665,6656,
		1,0,0,0,6665,6657,1,0,0,0,6665,6658,1,0,0,0,6665,6659,1,0,0,0,6665,6660,
		1,0,0,0,6665,6661,1,0,0,0,6665,6662,1,0,0,0,6665,6663,1,0,0,0,6665,6664,
		1,0,0,0,6666,633,1,0,0,0,6667,6668,7,124,0,0,6668,6669,5,1096,0,0,6669,
		6670,3,638,319,0,6670,6671,5,1097,0,0,6671,635,1,0,0,0,6672,6677,3,560,
		280,0,6673,6677,3,520,260,0,6674,6677,3,600,300,0,6675,6677,3,640,320,
		0,6676,6672,1,0,0,0,6676,6673,1,0,0,0,6676,6674,1,0,0,0,6676,6675,1,0,
		0,0,6677,6687,1,0,0,0,6678,6683,5,1098,0,0,6679,6684,3,560,280,0,6680,
		6684,3,520,260,0,6681,6684,3,600,300,0,6682,6684,3,640,320,0,6683,6679,
		1,0,0,0,6683,6680,1,0,0,0,6683,6681,1,0,0,0,6683,6682,1,0,0,0,6684,6686,
		1,0,0,0,6685,6678,1,0,0,0,6686,6689,1,0,0,0,6687,6685,1,0,0,0,6687,6688,
		1,0,0,0,6688,637,1,0,0,0,6689,6687,1,0,0,0,6690,6695,3,560,280,0,6691,
		6695,3,520,260,0,6692,6695,3,600,300,0,6693,6695,3,640,320,0,6694,6690,
		1,0,0,0,6694,6691,1,0,0,0,6694,6692,1,0,0,0,6694,6693,1,0,0,0,6695,639,
		1,0,0,0,6696,6697,6,320,-1,0,6697,6698,7,125,0,0,6698,6708,3,640,320,4,
		6699,6700,3,642,321,0,6700,6702,5,85,0,0,6701,6703,5,108,0,0,6702,6701,
		1,0,0,0,6702,6703,1,0,0,0,6703,6704,1,0,0,0,6704,6705,7,126,0,0,6705,6708,
		1,0,0,0,6706,6708,3,642,321,0,6707,6696,1,0,0,0,6707,6699,1,0,0,0,6707,
		6706,1,0,0,0,6708,6715,1,0,0,0,6709,6710,10,3,0,0,6710,6711,3,650,325,
		0,6711,6712,3,640,320,4,6712,6714,1,0,0,0,6713,6709,1,0,0,0,6714,6717,
		1,0,0,0,6715,6713,1,0,0,0,6715,6716,1,0,0,0,6716,641,1,0,0,0,6717,6715,
		1,0,0,0,6718,6721,6,321,-1,0,6719,6720,5,1123,0,0,6720,6722,5,1071,0,0,
		6721,6719,1,0,0,0,6721,6722,1,0,0,0,6722,6723,1,0,0,0,6723,6724,3,644,
		322,0,6724,6789,1,0,0,0,6725,6726,10,8,0,0,6726,6727,3,648,324,0,6727,
		6728,3,642,321,9,6728,6788,1,0,0,0,6729,6731,10,6,0,0,6730,6732,5,108,
		0,0,6731,6730,1,0,0,0,6731,6732,1,0,0,0,6732,6733,1,0,0,0,6733,6734,5,
		15,0,0,6734,6735,3,642,321,0,6735,6736,5,10,0,0,6736,6737,3,642,321,7,
		6737,6788,1,0,0,0,6738,6739,10,5,0,0,6739,6740,5,592,0,0,6740,6741,5,94,
		0,0,6741,6788,3,642,321,6,6742,6744,10,3,0,0,6743,6745,5,108,0,0,6744,
		6743,1,0,0,0,6744,6745,1,0,0,0,6745,6746,1,0,0,0,6746,6747,7,127,0,0,6747,
		6788,3,642,321,4,6748,6750,10,10,0,0,6749,6751,5,108,0,0,6750,6749,1,0,
		0,0,6750,6751,1,0,0,0,6751,6752,1,0,0,0,6752,6753,5,77,0,0,6753,6756,5,
		1096,0,0,6754,6757,3,190,95,0,6755,6757,3,580,290,0,6756,6754,1,0,0,0,
		6756,6755,1,0,0,0,6757,6758,1,0,0,0,6758,6759,5,1097,0,0,6759,6788,1,0,
		0,0,6760,6761,10,9,0,0,6761,6762,5,85,0,0,6762,6788,3,558,279,0,6763,6764,
		10,7,0,0,6764,6765,3,648,324,0,6765,6766,7,128,0,0,6766,6767,5,1096,0,
		0,6767,6768,3,190,95,0,6768,6769,5,1097,0,0,6769,6788,1,0,0,0,6770,6772,
		10,4,0,0,6771,6773,5,108,0,0,6772,6771,1,0,0,0,6772,6773,1,0,0,0,6773,
		6774,1,0,0,0,6774,6775,5,94,0,0,6775,6778,3,642,321,0,6776,6777,5,398,
		0,0,6777,6779,5,1111,0,0,6778,6776,1,0,0,0,6778,6779,1,0,0,0,6779,6788,
		1,0,0,0,6780,6781,10,1,0,0,6781,6782,5,487,0,0,6782,6783,5,511,0,0,6783,
		6784,5,1096,0,0,6784,6785,3,642,321,0,6785,6786,5,1097,0,0,6786,6788,1,
		0,0,0,6787,6725,1,0,0,0,6787,6729,1,0,0,0,6787,6738,1,0,0,0,6787,6742,
		1,0,0,0,6787,6748,1,0,0,0,6787,6760,1,0,0,0,6787,6763,1,0,0,0,6787,6770,
		1,0,0,0,6787,6780,1,0,0,0,6788,6791,1,0,0,0,6789,6787,1,0,0,0,6789,6790,
		1,0,0,0,6790,643,1,0,0,0,6791,6789,1,0,0,0,6792,6793,6,322,-1,0,6793,6838,
		3,560,280,0,6794,6838,3,520,260,0,6795,6838,3,600,300,0,6796,6838,3,526,
		263,0,6797,6798,3,646,323,0,6798,6799,3,644,322,10,6799,6838,1,0,0,0,6800,
		6801,5,217,0,0,6801,6838,3,644,322,9,6802,6803,5,1096,0,0,6803,6808,3,
		640,320,0,6804,6805,5,1098,0,0,6805,6807,3,640,320,0,6806,6804,1,0,0,0,
		6807,6810,1,0,0,0,6808,6806,1,0,0,0,6808,6809,1,0,0,0,6809,6811,1,0,0,
		0,6810,6808,1,0,0,0,6811,6812,5,1097,0,0,6812,6838,1,0,0,0,6813,6814,5,
		573,0,0,6814,6815,5,1096,0,0,6815,6818,3,640,320,0,6816,6817,5,1098,0,
		0,6817,6819,3,640,320,0,6818,6816,1,0,0,0,6819,6820,1,0,0,0,6820,6818,
		1,0,0,0,6820,6821,1,0,0,0,6821,6822,1,0,0,0,6822,6823,5,1097,0,0,6823,
		6838,1,0,0,0,6824,6825,5,57,0,0,6825,6826,5,1096,0,0,6826,6827,3,190,95,
		0,6827,6828,5,1097,0,0,6828,6838,1,0,0,0,6829,6830,5,1096,0,0,6830,6831,
		3,190,95,0,6831,6832,5,1097,0,0,6832,6838,1,0,0,0,6833,6834,5,83,0,0,6834,
		6835,3,640,320,0,6835,6836,3,68,34,0,6836,6838,1,0,0,0,6837,6792,1,0,0,
		0,6837,6794,1,0,0,0,6837,6795,1,0,0,0,6837,6796,1,0,0,0,6837,6797,1,0,
		0,0,6837,6800,1,0,0,0,6837,6802,1,0,0,0,6837,6813,1,0,0,0,6837,6824,1,
		0,0,0,6837,6829,1,0,0,0,6837,6833,1,0,0,0,6838,6856,1,0,0,0,6839,6840,
		10,3,0,0,6840,6841,3,652,326,0,6841,6842,3,644,322,4,6842,6855,1,0,0,0,
		6843,6844,10,2,0,0,6844,6845,3,654,327,0,6845,6846,3,644,322,3,6846,6855,
		1,0,0,0,6847,6848,10,1,0,0,6848,6849,3,656,328,0,6849,6850,3,644,322,2,
		6850,6855,1,0,0,0,6851,6852,10,12,0,0,6852,6853,5,26,0,0,6853,6855,3,530,
		265,0,6854,6839,1,0,0,0,6854,6843,1,0,0,0,6854,6847,1,0,0,0,6854,6851,
		1,0,0,0,6855,6858,1,0,0,0,6856,6854,1,0,0,0,6856,6857,1,0,0,0,6857,645,
		1,0,0,0,6858,6856,1,0,0,0,6859,6860,7,129,0,0,6860,647,1,0,0,0,6861,6876,
		5,1087,0,0,6862,6876,5,1088,0,0,6863,6876,5,1089,0,0,6864,6865,5,1089,
		0,0,6865,6876,5,1087,0,0,6866,6867,5,1088,0,0,6867,6876,5,1087,0,0,6868,
		6869,5,1089,0,0,6869,6876,5,1088,0,0,6870,6871,5,1090,0,0,6871,6876,5,
		1087,0,0,6872,6873,5,1089,0,0,6873,6874,5,1087,0,0,6874,6876,5,1088,0,
		0,6875,6861,1,0,0,0,6875,6862,1,0,0,0,6875,6863,1,0,0,0,6875,6864,1,0,
		0,0,6875,6866,1,0,0,0,6875,6868,1,0,0,0,6875,6870,1,0,0,0,6875,6872,1,
		0,0,0,6876,649,1,0,0,0,6877,6885,5,10,0,0,6878,6879,5,1093,0,0,6879,6885,
		5,1093,0,0,6880,6885,5,185,0,0,6881,6885,5,117,0,0,6882,6883,5,1092,0,
		0,6883,6885,5,1092,0,0,6884,6877,1,0,0,0,6884,6878,1,0,0,0,6884,6880,1,
		0,0,0,6884,6881,1,0,0,0,6884,6882,1,0,0,0,6885,651,1,0,0,0,6886,6887,5,
		1089,0,0,6887,6894,5,1089,0,0,6888,6889,5,1088,0,0,6889,6894,5,1088,0,
		0,6890,6894,5,1093,0,0,6891,6894,5,1094,0,0,6892,6894,5,1092,0,0,6893,
		6886,1,0,0,0,6893,6888,1,0,0,0,6893,6890,1,0,0,0,6893,6891,1,0,0,0,6893,
		6892,1,0,0,0,6894,653,1,0,0,0,6895,6896,7,130,0,0,6896,655,1,0,0,0,6897,
		6898,5,1084,0,0,6898,6903,5,1088,0,0,6899,6900,5,1084,0,0,6900,6901,5,
		1088,0,0,6901,6903,5,1088,0,0,6902,6897,1,0,0,0,6902,6899,1,0,0,0,6903,
		657,1,0,0,0,6904,6905,7,131,0,0,6905,659,1,0,0,0,6906,6907,7,132,0,0,6907,
		661,1,0,0,0,6908,6909,7,133,0,0,6909,663,1,0,0,0,6910,6911,7,134,0,0,6911,
		665,1,0,0,0,6912,6913,7,135,0,0,6913,667,1,0,0,0,6914,6915,7,136,0,0,6915,
		669,1,0,0,0,6916,6917,7,137,0,0,6917,671,1,0,0,0,1010,673,677,684,687,
		690,692,698,701,704,713,752,764,775,792,797,809,836,845,850,856,861,865,
		874,877,880,884,892,895,898,904,908,916,921,926,931,934,936,948,951,955,
		958,962,965,969,972,975,979,982,986,992,998,1004,1011,1018,1024,1030,1039,
		1044,1060,1068,1071,1075,1085,1090,1093,1097,1101,1105,1110,1113,1116,
		1119,1122,1129,1132,1136,1142,1147,1150,1153,1155,1166,1170,1173,1187,
		1190,1194,1197,1201,1204,1208,1211,1215,1218,1221,1225,1228,1232,1239,
		1242,1255,1261,1272,1277,1285,1294,1299,1302,1307,1315,1319,1324,1328,
		1331,1335,1339,1342,1346,1349,1356,1364,1366,1373,1379,1387,1390,1397,
		1400,1402,1408,1414,1431,1438,1445,1457,1462,1471,1473,1476,1489,1502,
		1507,1523,1531,1541,1547,1559,1562,1567,1580,1587,1594,1596,1603,1607,
		1609,1614,1617,1623,1628,1630,1634,1637,1640,1646,1651,1653,1658,1665,
		1667,1674,1679,1683,1686,1694,1702,1704,1712,1716,1719,1725,1730,1733,
		1739,1742,1746,1749,1753,1758,1762,1766,1770,1774,1778,1782,1787,1792,
		1797,1803,1808,1813,1819,1824,1829,1834,1839,1844,1849,1854,1859,1864,
		1869,1875,1883,1889,1901,1908,1910,1918,1923,1926,1934,1940,1956,1968,
		1970,1973,1981,1987,1993,2006,2013,2022,2027,2038,2047,2052,2064,2071,
		2080,2085,2097,2104,2113,2118,2125,2134,2139,2141,2146,2154,2163,2167,
		2170,2174,2179,2185,2191,2196,2201,2206,2211,2214,2219,2224,2234,2238,
		2245,2250,2253,2258,2261,2265,2269,2277,2296,2299,2302,2306,2316,2329,
		2336,2339,2348,2351,2354,2365,2368,2372,2380,2383,2388,2396,2402,2406,
		2410,2415,2420,2423,2430,2434,2437,2448,2456,2459,2462,2468,2474,2476,
		2481,2484,2490,2496,2498,2502,2505,2508,2514,2520,2523,2529,2535,2537,
		2542,2545,2553,2555,2564,2569,2577,2581,2584,2592,2602,2607,2610,2617,
		2621,2624,2628,2633,2653,2660,2669,2673,2685,2688,2697,2709,2717,2725,
		2732,2739,2746,2761,2774,2780,2786,2792,2798,2804,2810,2815,2822,2829,
		2836,2841,2844,2846,2860,2867,2874,2880,2884,2888,2895,2898,2903,2910,
		2917,2921,2930,2939,2948,2951,2955,2964,2968,2971,2974,2980,2983,2989,
		2998,3001,3012,3015,3020,3023,3028,3038,3043,3049,3051,3057,3059,3065,
		3073,3078,3086,3089,3094,3097,3102,3110,3118,3124,3132,3137,3145,3148,
		3152,3155,3163,3169,3178,3181,3185,3189,3195,3199,3203,3205,3208,3211,
		3214,3220,3224,3227,3230,3233,3236,3238,3242,3248,3254,3259,3262,3268,
		3272,3280,3284,3287,3290,3299,3303,3306,3310,3314,3317,3320,3325,3331,
		3335,3345,3351,3355,3361,3365,3371,3374,3386,3390,3394,3402,3406,3414,
		3417,3421,3424,3432,3437,3440,3443,3447,3450,3459,3464,3473,3478,3485,
		3492,3500,3505,3513,3516,3519,3526,3529,3536,3539,3547,3553,3564,3567,
		3578,3584,3588,3599,3604,3606,3610,3620,3630,3636,3641,3644,3647,3650,
		3653,3656,3659,3665,3670,3673,3676,3679,3682,3685,3688,3690,3696,3701,
		3704,3707,3710,3713,3716,3720,3726,3730,3740,3744,3750,3759,3762,3766,
		3769,3773,3777,3780,3782,3790,3802,3808,3810,3816,3818,3820,3826,3834,
		3842,3846,3850,3859,3864,3884,3889,3895,3902,3907,3916,3919,3923,3927,
		3931,3934,3937,3940,3944,3948,3951,3954,3957,3964,3968,3983,3996,4004,
		4014,4018,4021,4027,4030,4033,4042,4051,4061,4065,4075,4085,4093,4096,
		4105,4108,4112,4117,4121,4130,4133,4164,4167,4170,4226,4231,4259,4273,
		4280,4284,4290,4298,4300,4311,4321,4328,4334,4342,4347,4355,4363,4371,
		4379,4385,4388,4392,4397,4402,4408,4410,4421,4426,4433,4435,4449,4455,
		4460,4465,4471,4478,4486,4494,4499,4505,4508,4516,4523,4532,4535,4552,
		4560,4568,4572,4579,4585,4593,4602,4608,4615,4622,4627,4630,4632,4638,
		4640,4644,4646,4649,4658,4664,4671,4678,4683,4686,4688,4694,4696,4700,
		4702,4705,4710,4717,4726,4731,4740,4747,4752,4755,4757,4763,4765,4768,
		4776,4781,4786,4790,4796,4801,4805,4811,4813,4824,4827,4834,4837,4849,
		4855,4864,4873,4878,4887,4893,4904,4913,4919,4924,4928,4931,4943,4950,
		4955,4970,4977,4985,4988,4998,5008,5018,5028,5032,5036,5046,5051,5109,
		5127,5135,5147,5154,5156,5166,5169,5177,5184,5188,5195,5200,5203,5206,
		5215,5219,5243,5250,5254,5261,5268,5271,5287,5290,5300,5304,5310,5313,
		5318,5322,5329,5332,5338,5362,5365,5377,5380,5390,5398,5402,5409,5412,
		5421,5427,5433,5443,5445,5451,5454,5457,5469,5472,5478,5481,5489,5497,
		5503,5507,5521,5533,5540,5543,5550,5557,5562,5567,5578,5589,5595,5600,
		5613,5615,5620,5624,5627,5629,5636,5643,5646,5649,5655,5659,5665,5671,
		5684,5689,5697,5700,5705,5710,5718,5721,5729,5733,5746,5752,5764,5767,
		5776,5781,5787,5794,5796,5801,5803,5807,5813,5816,5819,5829,5833,5853,
		5860,5862,5869,5871,5875,5880,5891,5896,5902,5905,5909,5914,5917,5921,
		5925,5927,5932,5937,5950,5953,5957,5960,5963,5968,5973,5978,5981,5986,
		5989,5995,5998,6002,6007,6012,6017,6022,6025,6030,6035,6040,6046,6051,
		6056,6061,6064,6069,6073,6077,6085,6092,6096,6101,6106,6110,6112,6115,
		6131,6140,6148,6157,6167,6175,6183,6191,6199,6204,6212,6217,6222,6225,
		6230,6233,6237,6252,6259,6264,6269,6302,6306,6314,6318,6327,6335,6340,
		6348,6353,6358,6360,6369,6374,6382,6387,6395,6403,6406,6416,6434,6440,
		6444,6450,6454,6458,6471,6479,6483,6488,6493,6499,6504,6508,6513,6518,
		6523,6533,6536,6540,6544,6551,6555,6584,6589,6593,6596,6599,6602,6605,
		6616,6630,6639,6665,6676,6683,6687,6694,6702,6707,6715,6721,6731,6744,
		6750,6756,6772,6778,6787,6789,6808,6820,6837,6854,6856,6875,6884,6893,
		6902
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TestAntlr.Parser
