//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SQLiteParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestAntlr.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, ABORT_=25, 
		ACTION_=26, ADD_=27, AFTER_=28, ALL_=29, ALTER_=30, ANALYZE_=31, AND_=32, 
		AS_=33, ASC_=34, ATTACH_=35, AUTOINCREMENT_=36, BEFORE_=37, BEGIN_=38, 
		BETWEEN_=39, BY_=40, CASCADE_=41, CASE_=42, CAST_=43, CHECK_=44, COLLATE_=45, 
		COLUMN_=46, COMMIT_=47, CONFLICT_=48, CONSTRAINT_=49, CREATE_=50, CROSS_=51, 
		CURRENT_DATE_=52, CURRENT_TIME_=53, CURRENT_TIMESTAMP_=54, DATABASE_=55, 
		DEFAULT_=56, DEFERRABLE_=57, DEFERRED_=58, DELETE_=59, DESC_=60, DETACH_=61, 
		DISTINCT_=62, DROP_=63, EACH_=64, ELSE_=65, END_=66, ESCAPE_=67, EXCEPT_=68, 
		EXCLUSIVE_=69, EXISTS_=70, EXPLAIN_=71, FAIL_=72, FOR_=73, FOREIGN_=74, 
		FROM_=75, FULL_=76, GLOB_=77, GROUP_=78, HAVING_=79, IF_=80, IGNORE_=81, 
		IMMEDIATE_=82, IN_=83, INDEX_=84, INDEXED_=85, INITIALLY_=86, INNER_=87, 
		INSERT_=88, INSTEAD_=89, INTERSECT_=90, INTO_=91, IS_=92, ISNULL_=93, 
		JOIN_=94, KEY_=95, LEFT_=96, LIKE_=97, LIMIT_=98, MATCH_=99, NATURAL_=100, 
		NO_=101, NOT_=102, NOTNULL_=103, NULL_=104, OF_=105, OFFSET_=106, ON_=107, 
		OR_=108, ORDER_=109, OUTER_=110, PLAN_=111, PRAGMA_=112, PRIMARY_=113, 
		QUERY_=114, RAISE_=115, RECURSIVE_=116, REFERENCES_=117, REGEXP_=118, 
		REINDEX_=119, RELEASE_=120, RENAME_=121, REPLACE_=122, RESTRICT_=123, 
		RIGHT_=124, ROLLBACK_=125, ROW_=126, ROWS_=127, SAVEPOINT_=128, SELECT_=129, 
		SET_=130, TABLE_=131, TEMP_=132, TEMPORARY_=133, THEN_=134, TO_=135, TRANSACTION_=136, 
		TRIGGER_=137, UNION_=138, UNIQUE_=139, UPDATE_=140, USING_=141, VACUUM_=142, 
		VALUES_=143, VIEW_=144, VIRTUAL_=145, WHEN_=146, WHERE_=147, WITH_=148, 
		WITHOUT_=149, FIRST_VALUE_=150, OVER_=151, PARTITION_=152, RANGE_=153, 
		PRECEDING_=154, UNBOUNDED_=155, CURRENT_=156, FOLLOWING_=157, CUME_DIST_=158, 
		DENSE_RANK_=159, LAG_=160, LAST_VALUE_=161, LEAD_=162, NTH_VALUE_=163, 
		NTILE_=164, PERCENT_RANK_=165, RANK_=166, ROW_NUMBER_=167, GENERATED_=168, 
		ALWAYS_=169, STORED_=170, TRUE_=171, FALSE_=172, WINDOW_=173, NULLS_=174, 
		FIRST_=175, LAST_=176, FILTER_=177, GROUPS_=178, EXCLUDE_=179, TIES_=180, 
		OTHERS_=181, DO_=182, NOTHING_=183, IDENTIFIER=184, NUMERIC_LITERAL=185, 
		BIND_PARAMETER=186, STRING_LITERAL=187, BLOB_LITERAL=188, SINGLE_LINE_COMMENT=189, 
		MULTILINE_COMMENT=190, SPACES=191, UNEXPECTED_CHAR=192;
	public const int
		RULE_parse = 0, RULE_sql_stmt_list = 1, RULE_sql_stmt = 2, RULE_alter_table_stmt = 3, 
		RULE_analyze_stmt = 4, RULE_attach_stmt = 5, RULE_begin_stmt = 6, RULE_commit_stmt = 7, 
		RULE_rollback_stmt = 8, RULE_savepoint_stmt = 9, RULE_release_stmt = 10, 
		RULE_create_index_stmt = 11, RULE_indexed_column = 12, RULE_create_table_stmt = 13, 
		RULE_column_def = 14, RULE_type_name = 15, RULE_column_constraint = 16, 
		RULE_signed_number = 17, RULE_table_constraint = 18, RULE_foreign_key_clause = 19, 
		RULE_conflict_clause = 20, RULE_create_trigger_stmt = 21, RULE_create_view_stmt = 22, 
		RULE_create_virtual_table_stmt = 23, RULE_with_clause = 24, RULE_cte_table_name = 25, 
		RULE_recursive_cte = 26, RULE_common_table_expression = 27, RULE_delete_stmt = 28, 
		RULE_delete_stmt_limited = 29, RULE_detach_stmt = 30, RULE_drop_stmt = 31, 
		RULE_expr = 32, RULE_raise_function = 33, RULE_literal_value = 34, RULE_insert_stmt = 35, 
		RULE_upsert_clause = 36, RULE_pragma_stmt = 37, RULE_pragma_value = 38, 
		RULE_reindex_stmt = 39, RULE_select_stmt = 40, RULE_join_clause = 41, 
		RULE_select_core = 42, RULE_factored_select_stmt = 43, RULE_simple_select_stmt = 44, 
		RULE_compound_select_stmt = 45, RULE_table_or_subquery = 46, RULE_result_column = 47, 
		RULE_join_operator = 48, RULE_join_constraint = 49, RULE_compound_operator = 50, 
		RULE_update_stmt = 51, RULE_column_name_list = 52, RULE_update_stmt_limited = 53, 
		RULE_qualified_table_name = 54, RULE_vacuum_stmt = 55, RULE_filter_clause = 56, 
		RULE_window_defn = 57, RULE_over_clause = 58, RULE_frame_spec = 59, RULE_frame_clause = 60, 
		RULE_simple_function_invocation = 61, RULE_aggregate_function_invocation = 62, 
		RULE_window_function_invocation = 63, RULE_common_table_stmt = 64, RULE_order_by_stmt = 65, 
		RULE_limit_stmt = 66, RULE_ordering_term = 67, RULE_asc_desc = 68, RULE_frame_left = 69, 
		RULE_frame_right = 70, RULE_frame_single = 71, RULE_window_function = 72, 
		RULE_of_OF_fset = 73, RULE_default_DEFAULT__value = 74, RULE_partition_by = 75, 
		RULE_order_by_expr = 76, RULE_order_by_expr_asc_desc = 77, RULE_expr_asc_desc = 78, 
		RULE_initial_select = 79, RULE_recursive__select = 80, RULE_unary_operator = 81, 
		RULE_error_message = 82, RULE_module_argument = 83, RULE_column_alias = 84, 
		RULE_keyword = 85, RULE_name = 86, RULE_function_name = 87, RULE_schema_name = 88, 
		RULE_table_name = 89, RULE_table_or_index_name = 90, RULE_new_table_name = 91, 
		RULE_column_name = 92, RULE_collation_name = 93, RULE_foreign_table = 94, 
		RULE_index_name = 95, RULE_trigger_name = 96, RULE_view_name = 97, RULE_module_name = 98, 
		RULE_pragma_name = 99, RULE_savepoint_name = 100, RULE_table_alias = 101, 
		RULE_transaction_name = 102, RULE_window_name = 103, RULE_alias = 104, 
		RULE_filename = 105, RULE_base_window_name = 106, RULE_simple_func = 107, 
		RULE_aggregate_func = 108, RULE_table_function_name = 109, RULE_any_name = 110;
	public static readonly string[] ruleNames = {
		"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "savepoint_stmt", 
		"release_stmt", "create_index_stmt", "indexed_column", "create_table_stmt", 
		"column_def", "type_name", "column_constraint", "signed_number", "table_constraint", 
		"foreign_key_clause", "conflict_clause", "create_trigger_stmt", "create_view_stmt", 
		"create_virtual_table_stmt", "with_clause", "cte_table_name", "recursive_cte", 
		"common_table_expression", "delete_stmt", "delete_stmt_limited", "detach_stmt", 
		"drop_stmt", "expr", "raise_function", "literal_value", "insert_stmt", 
		"upsert_clause", "pragma_stmt", "pragma_value", "reindex_stmt", "select_stmt", 
		"join_clause", "select_core", "factored_select_stmt", "simple_select_stmt", 
		"compound_select_stmt", "table_or_subquery", "result_column", "join_operator", 
		"join_constraint", "compound_operator", "update_stmt", "column_name_list", 
		"update_stmt_limited", "qualified_table_name", "vacuum_stmt", "filter_clause", 
		"window_defn", "over_clause", "frame_spec", "frame_clause", "simple_function_invocation", 
		"aggregate_function_invocation", "window_function_invocation", "common_table_stmt", 
		"order_by_stmt", "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
		"frame_right", "frame_single", "window_function", "of_OF_fset", "default_DEFAULT__value", 
		"partition_by", "order_by_expr", "order_by_expr_asc_desc", "expr_asc_desc", 
		"initial_select", "recursive__select", "unary_operator", "error_message", 
		"module_argument", "column_alias", "keyword", "name", "function_name", 
		"schema_name", "table_name", "table_or_index_name", "new_table_name", 
		"column_name", "collation_name", "foreign_table", "index_name", "trigger_name", 
		"view_name", "module_name", "pragma_name", "savepoint_name", "table_alias", 
		"transaction_name", "window_name", "alias", "filename", "base_window_name", 
		"simple_func", "aggregate_func", "table_function_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT_", 
		"ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", "AND_", "AS_", 
		"ASC_", "ATTACH_", "AUTOINCREMENT_", "BEFORE_", "BEGIN_", "BETWEEN_", 
		"BY_", "CASCADE_", "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
		"COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", "CROSS_", "CURRENT_DATE_", 
		"CURRENT_TIME_", "CURRENT_TIMESTAMP_", "DATABASE_", "DEFAULT_", "DEFERRABLE_", 
		"DEFERRED_", "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", "EACH_", 
		"ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", "EXISTS_", "EXPLAIN_", 
		"FAIL_", "FOR_", "FOREIGN_", "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", 
		"IF_", "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", "INITIALLY_", 
		"INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", "INTO_", "IS_", "ISNULL_", 
		"JOIN_", "KEY_", "LEFT_", "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", 
		"NOT_", "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", "ORDER_", 
		"OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", "QUERY_", "RAISE_", "RECURSIVE_", 
		"REFERENCES_", "REGEXP_", "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", 
		"RESTRICT_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_", "SELECT_", 
		"SET_", "TABLE_", "TEMP_", "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", 
		"TRIGGER_", "UNION_", "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", "VALUES_", 
		"VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", "WITH_", "WITHOUT_", "FIRST_VALUE_", 
		"OVER_", "PARTITION_", "RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", 
		"FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", 
		"NTH_VALUE_", "NTILE_", "PERCENT_RANK_", "RANK_", "ROW_NUMBER_", "GENERATED_", 
		"ALWAYS_", "STORED_", "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
		"LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", "DO_", 
		"NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLiteParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SQLiteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SQLiteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SQLiteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << ATTACH_) | (1L << BEGIN_) | (1L << COMMIT_) | (1L << CREATE_) | (1L << DEFAULT_) | (1L << DELETE_) | (1L << DETACH_) | (1L << DROP_))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (END_ - 66)) | (1L << (EXPLAIN_ - 66)) | (1L << (INSERT_ - 66)) | (1L << (PRAGMA_ - 66)) | (1L << (REINDEX_ - 66)) | (1L << (RELEASE_ - 66)) | (1L << (REPLACE_ - 66)) | (1L << (ROLLBACK_ - 66)) | (1L << (SAVEPOINT_ - 66)) | (1L << (SELECT_ - 66)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (UPDATE_ - 140)) | (1L << (VACUUM_ - 140)) | (1L << (VALUES_ - 140)) | (1L << (WITH_ - 140)))) != 0)) {
				{
				{
				State = 222;
				sql_stmt_list();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 230;
				Match(SCOL);
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			sql_stmt();
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 237;
						Match(SCOL);
						}
						}
						State = 240;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 242;
					sql_stmt();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 248;
					Match(SCOL);
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_stmtContext drop_stmt() {
			return GetRuleContext<Drop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_() { return GetToken(SQLiteParser.EXPLAIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_() { return GetToken(SQLiteParser.QUERY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN_() { return GetToken(SQLiteParser.PLAN_, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN_) {
				{
				State = 254;
				Match(EXPLAIN_);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY_) {
					{
					State = 255;
					Match(QUERY_);
					State = 256;
					Match(PLAN_);
					}
				}

				}
			}

			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 261;
				alter_table_stmt();
				}
				break;
			case 2:
				{
				State = 262;
				analyze_stmt();
				}
				break;
			case 3:
				{
				State = 263;
				attach_stmt();
				}
				break;
			case 4:
				{
				State = 264;
				begin_stmt();
				}
				break;
			case 5:
				{
				State = 265;
				commit_stmt();
				}
				break;
			case 6:
				{
				State = 266;
				create_index_stmt();
				}
				break;
			case 7:
				{
				State = 267;
				create_table_stmt();
				}
				break;
			case 8:
				{
				State = 268;
				create_trigger_stmt();
				}
				break;
			case 9:
				{
				State = 269;
				create_view_stmt();
				}
				break;
			case 10:
				{
				State = 270;
				create_virtual_table_stmt();
				}
				break;
			case 11:
				{
				State = 271;
				delete_stmt();
				}
				break;
			case 12:
				{
				State = 272;
				delete_stmt_limited();
				}
				break;
			case 13:
				{
				State = 273;
				detach_stmt();
				}
				break;
			case 14:
				{
				State = 274;
				drop_stmt();
				}
				break;
			case 15:
				{
				State = 275;
				insert_stmt();
				}
				break;
			case 16:
				{
				State = 276;
				pragma_stmt();
				}
				break;
			case 17:
				{
				State = 277;
				reindex_stmt();
				}
				break;
			case 18:
				{
				State = 278;
				release_stmt();
				}
				break;
			case 19:
				{
				State = 279;
				rollback_stmt();
				}
				break;
			case 20:
				{
				State = 280;
				savepoint_stmt();
				}
				break;
			case 21:
				{
				State = 281;
				select_stmt();
				}
				break;
			case 22:
				{
				State = 282;
				update_stmt();
				}
				break;
			case 23:
				{
				State = 283;
				update_stmt_limited();
				}
				break;
			case 24:
				{
				State = 284;
				vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public Column_nameContext old_column_name;
		public Column_nameContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_() { return GetToken(SQLiteParser.ALTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_() { return GetToken(SQLiteParser.RENAME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_() { return GetToken(SQLiteParser.ADD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_() { return GetToken(SQLiteParser.COLUMN_, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(ALTER_);
			State = 288;
			Match(TABLE_);
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 289;
				schema_name();
				State = 290;
				Match(DOT);
				}
				break;
			}
			State = 294;
			table_name();
			State = 312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RENAME_:
				{
				State = 295;
				Match(RENAME_);
				State = 305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 296;
					Match(TO_);
					State = 297;
					new_table_name();
					}
					break;
				case 2:
					{
					State = 299;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 298;
						Match(COLUMN_);
						}
						break;
					}
					State = 301;
					_localctx.old_column_name = column_name();
					State = 302;
					Match(TO_);
					State = 303;
					_localctx.new_column_name = column_name();
					}
					break;
				}
				}
				break;
			case ADD_:
				{
				State = 307;
				Match(ADD_);
				State = 309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 308;
					Match(COLUMN_);
					}
					break;
				}
				State = 311;
				column_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_() { return GetToken(SQLiteParser.ANALYZE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(ANALYZE_);
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 315;
				schema_name();
				}
				break;
			case 2:
				{
				State = 319;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 316;
					schema_name();
					State = 317;
					Match(DOT);
					}
					break;
				}
				State = 321;
				table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH_() { return GetToken(SQLiteParser.ATTACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(ATTACH_);
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 325;
				Match(DATABASE_);
				}
				break;
			}
			State = 328;
			expr(0);
			State = 329;
			Match(AS_);
			State = 330;
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE_() { return GetToken(SQLiteParser.EXCLUSIVE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(BEGIN_);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (DEFERRED_ - 58)) | (1L << (EXCLUSIVE_ - 58)) | (1L << (IMMEDIATE_ - 58)))) != 0)) {
				{
				State = 333;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (DEFERRED_ - 58)) | (1L << (EXCLUSIVE_ - 58)) | (1L << (IMMEDIATE_ - 58)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 336;
				Match(TRANSACTION_);
				State = 338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 337;
					transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_() { return GetToken(SQLiteParser.COMMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMIT_ || _la==END_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 343;
				Match(TRANSACTION_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(ROLLBACK_);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 347;
				Match(TRANSACTION_);
				}
			}

			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO_) {
				{
				State = 350;
				Match(TO_);
				State = 352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 351;
					Match(SAVEPOINT_);
					}
					break;
				}
				State = 354;
				savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(SAVEPOINT_);
			State = 358;
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_() { return GetToken(SQLiteParser.RELEASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(RELEASE_);
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 361;
				Match(SAVEPOINT_);
				}
				break;
			}
			State = 364;
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(CREATE_);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE_) {
				{
				State = 367;
				Match(UNIQUE_);
				}
			}

			State = 370;
			Match(INDEX_);
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 371;
				Match(IF_);
				State = 372;
				Match(NOT_);
				State = 373;
				Match(EXISTS_);
				}
				break;
			}
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 376;
				schema_name();
				State = 377;
				Match(DOT);
				}
				break;
			}
			State = 381;
			index_name();
			State = 382;
			Match(ON_);
			State = 383;
			table_name();
			State = 384;
			Match(OPEN_PAR);
			State = 385;
			indexed_column();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 386;
				Match(COMMA);
				State = 387;
				indexed_column();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 393;
			Match(CLOSE_PAR);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 394;
				Match(WHERE_);
				State = 395;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(Context, State);
		EnterRule(_localctx, 24, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 398;
				column_name();
				}
				break;
			case 2:
				{
				State = 399;
				expr(0);
				}
				break;
			}
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_) {
				{
				State = 402;
				Match(COLLATE_);
				State = 403;
				collation_name();
				}
			}

			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 406;
				asc_desc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public IToken row_ROW_ID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_() { return GetToken(SQLiteParser.WITHOUT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(CREATE_);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 410;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 413;
			Match(TABLE_);
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 414;
				Match(IF_);
				State = 415;
				Match(NOT_);
				State = 416;
				Match(EXISTS_);
				}
				break;
			}
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 419;
				schema_name();
				State = 420;
				Match(DOT);
				}
				break;
			}
			State = 424;
			table_name();
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				State = 425;
				Match(OPEN_PAR);
				State = 426;
				column_def();
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 427;
						Match(COMMA);
						State = 428;
						column_def();
						}
						} 
					}
					State = 433;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 434;
					Match(COMMA);
					State = 435;
					table_constraint();
					}
					}
					State = 440;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 441;
				Match(CLOSE_PAR);
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITHOUT_) {
					{
					State = 442;
					Match(WITHOUT_);
					State = 443;
					_localctx.row_ROW_ID = Match(IDENTIFIER);
					}
				}

				}
				break;
			case AS_:
				{
				State = 446;
				Match(AS_);
				State = 447;
				select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 28, RULE_column_def);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			column_name();
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 451;
				type_name();
				}
				break;
			}
			State = 457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 454;
					column_constraint();
					}
					} 
				}
				State = 459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 460;
					name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 463;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 465;
				Match(OPEN_PAR);
				State = 466;
				signed_number();
				State = 467;
				Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 469;
				Match(OPEN_PAR);
				State = 470;
				signed_number();
				State = 471;
				Match(COMMA);
				State = 472;
				signed_number();
				State = 473;
				Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED_() { return GetToken(SQLiteParser.GENERATED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_() { return GetToken(SQLiteParser.ALWAYS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED_() { return GetToken(SQLiteParser.STORED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT_() { return GetToken(SQLiteParser.AUTOINCREMENT_, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT_) {
				{
				State = 477;
				Match(CONSTRAINT_);
				State = 478;
				name();
				}
			}

			State = 528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
				{
				{
				State = 481;
				Match(PRIMARY_);
				State = 482;
				Match(KEY_);
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_ || _la==DESC_) {
					{
					State = 483;
					asc_desc();
					}
				}

				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 486;
					conflict_clause();
					}
				}

				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOINCREMENT_) {
					{
					State = 489;
					Match(AUTOINCREMENT_);
					}
				}

				}
				}
				break;
			case NOT_:
			case UNIQUE_:
				{
				State = 495;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT_:
					{
					State = 492;
					Match(NOT_);
					State = 493;
					Match(NULL_);
					}
					break;
				case UNIQUE_:
					{
					State = 494;
					Match(UNIQUE_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 497;
					conflict_clause();
					}
				}

				}
				break;
			case CHECK_:
				{
				State = 500;
				Match(CHECK_);
				State = 501;
				Match(OPEN_PAR);
				State = 502;
				expr(0);
				State = 503;
				Match(CLOSE_PAR);
				}
				break;
			case DEFAULT_:
				{
				State = 505;
				Match(DEFAULT_);
				State = 512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 506;
					signed_number();
					}
					break;
				case 2:
					{
					State = 507;
					literal_value();
					}
					break;
				case 3:
					{
					State = 508;
					Match(OPEN_PAR);
					State = 509;
					expr(0);
					State = 510;
					Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case COLLATE_:
				{
				State = 514;
				Match(COLLATE_);
				State = 515;
				collation_name();
				}
				break;
			case REFERENCES_:
				{
				State = 516;
				foreign_key_clause();
				}
				break;
			case AS_:
			case GENERATED_:
				{
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_) {
					{
					State = 517;
					Match(GENERATED_);
					State = 518;
					Match(ALWAYS_);
					}
				}

				State = 521;
				Match(AS_);
				State = 522;
				Match(OPEN_PAR);
				State = 523;
				expr(0);
				State = 524;
				Match(CLOSE_PAR);
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIRTUAL_ || _la==STORED_) {
					{
					State = 525;
					_la = TokenStream.LA(1);
					if ( !(_la==VIRTUAL_ || _la==STORED_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 34, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 530;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 533;
			Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_() { return GetToken(SQLiteParser.FOREIGN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT_) {
				{
				State = 535;
				Match(CONSTRAINT_);
				State = 536;
				name();
				}
			}

			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
			case UNIQUE_:
				{
				State = 542;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_:
					{
					State = 539;
					Match(PRIMARY_);
					State = 540;
					Match(KEY_);
					}
					break;
				case UNIQUE_:
					{
					State = 541;
					Match(UNIQUE_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 544;
				Match(OPEN_PAR);
				State = 545;
				indexed_column();
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 546;
					Match(COMMA);
					State = 547;
					indexed_column();
					}
					}
					State = 552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 553;
				Match(CLOSE_PAR);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 554;
					conflict_clause();
					}
				}

				}
				break;
			case CHECK_:
				{
				State = 557;
				Match(CHECK_);
				State = 558;
				Match(OPEN_PAR);
				State = 559;
				expr(0);
				State = 560;
				Match(CLOSE_PAR);
				}
				break;
			case FOREIGN_:
				{
				State = 562;
				Match(FOREIGN_);
				State = 563;
				Match(KEY_);
				State = 564;
				Match(OPEN_PAR);
				State = 565;
				column_name();
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 566;
					Match(COMMA);
					State = 567;
					column_name();
					}
					}
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 573;
				Match(CLOSE_PAR);
				State = 574;
				foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_() { return GetToken(SQLiteParser.REFERENCES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_() { return GetTokens(SQLiteParser.ON_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_(int i) {
			return GetToken(SQLiteParser.ON_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MATCH_() { return GetTokens(SQLiteParser.MATCH_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_(int i) {
			return GetToken(SQLiteParser.MATCH_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE_() { return GetToken(SQLiteParser.DEFERRABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DELETE_() { return GetTokens(SQLiteParser.DELETE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_(int i) {
			return GetToken(SQLiteParser.DELETE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UPDATE_() { return GetTokens(SQLiteParser.UPDATE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_(int i) {
			return GetToken(SQLiteParser.UPDATE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET_() { return GetTokens(SQLiteParser.SET_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_(int i) {
			return GetToken(SQLiteParser.SET_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASCADE_() { return GetTokens(SQLiteParser.CASCADE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_(int i) {
			return GetToken(SQLiteParser.CASCADE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESTRICT_() { return GetTokens(SQLiteParser.RESTRICT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_(int i) {
			return GetToken(SQLiteParser.RESTRICT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_() { return GetTokens(SQLiteParser.NO_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_(int i) {
			return GetToken(SQLiteParser.NO_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_() { return GetTokens(SQLiteParser.ACTION_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_(int i) {
			return GetToken(SQLiteParser.ACTION_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_() { return GetTokens(SQLiteParser.NULL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_(int i) {
			return GetToken(SQLiteParser.NULL_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_() { return GetTokens(SQLiteParser.DEFAULT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_(int i) {
			return GetToken(SQLiteParser.DEFAULT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY_() { return GetToken(SQLiteParser.INITIALLY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(REFERENCES_);
			State = 579;
			foreign_table();
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 580;
				Match(OPEN_PAR);
				State = 581;
				column_name();
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 582;
					Match(COMMA);
					State = 583;
					column_name();
					}
					}
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 589;
				Match(CLOSE_PAR);
				}
			}

			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH_ || _la==ON_) {
				{
				State = 605;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_:
					{
					State = 593;
					Match(ON_);
					State = 594;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE_ || _la==UPDATE_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 601;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SET_:
						{
						State = 595;
						Match(SET_);
						State = 596;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_ || _la==NULL_) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case CASCADE_:
						{
						State = 597;
						Match(CASCADE_);
						}
						break;
					case RESTRICT_:
						{
						State = 598;
						Match(RESTRICT_);
						}
						break;
					case NO_:
						{
						State = 599;
						Match(NO_);
						State = 600;
						Match(ACTION_);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MATCH_:
					{
					State = 603;
					Match(MATCH_);
					State = 604;
					name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_) {
					{
					State = 610;
					Match(NOT_);
					}
				}

				State = 613;
				Match(DEFERRABLE_);
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIALLY_) {
					{
					State = 614;
					Match(INITIALLY_);
					State = 615;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFERRED_ || _la==IMMEDIATE_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(ON_);
			State = 621;
			Match(CONFLICT_);
			State = 622;
			_la = TokenStream.LA(1);
			if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_() { return GetToken(SQLiteParser.BEFORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_() { return GetToken(SQLiteParser.AFTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD_() { return GetToken(SQLiteParser.INSTEAD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF_() { return GetTokens(SQLiteParser.OF_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_(int i) {
			return GetToken(SQLiteParser.OF_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_() { return GetToken(SQLiteParser.FOR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH_() { return GetToken(SQLiteParser.EACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_() { return GetToken(SQLiteParser.WHEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(CREATE_);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 625;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 628;
			Match(TRIGGER_);
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 629;
				Match(IF_);
				State = 630;
				Match(NOT_);
				State = 631;
				Match(EXISTS_);
				}
				break;
			}
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 634;
				schema_name();
				State = 635;
				Match(DOT);
				}
				break;
			}
			State = 639;
			trigger_name();
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE_:
				{
				State = 640;
				Match(BEFORE_);
				}
				break;
			case AFTER_:
				{
				State = 641;
				Match(AFTER_);
				}
				break;
			case INSTEAD_:
				{
				State = 642;
				Match(INSTEAD_);
				State = 643;
				Match(OF_);
				}
				break;
			case DELETE_:
			case INSERT_:
			case UPDATE_:
				break;
			default:
				break;
			}
			State = 660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE_:
				{
				State = 646;
				Match(DELETE_);
				}
				break;
			case INSERT_:
				{
				State = 647;
				Match(INSERT_);
				}
				break;
			case UPDATE_:
				{
				State = 648;
				Match(UPDATE_);
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_) {
					{
					State = 649;
					Match(OF_);
					State = 650;
					column_name();
					State = 655;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 651;
						Match(COMMA);
						State = 652;
						column_name();
						}
						}
						State = 657;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 662;
			Match(ON_);
			State = 663;
			table_name();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_) {
				{
				State = 664;
				Match(FOR_);
				State = 665;
				Match(EACH_);
				State = 666;
				Match(ROW_);
				}
			}

			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN_) {
				{
				State = 669;
				Match(WHEN_);
				State = 670;
				expr(0);
				}
			}

			State = 673;
			Match(BEGIN_);
			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 678;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 674;
					update_stmt();
					}
					break;
				case 2:
					{
					State = 675;
					insert_stmt();
					}
					break;
				case 3:
					{
					State = 676;
					delete_stmt();
					}
					break;
				case 4:
					{
					State = 677;
					select_stmt();
					}
					break;
				}
				State = 680;
				Match(SCOL);
				}
				}
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DEFAULT_ || _la==DELETE_ || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (INSERT_ - 88)) | (1L << (REPLACE_ - 88)) | (1L << (SELECT_ - 88)) | (1L << (UPDATE_ - 88)) | (1L << (VALUES_ - 88)) | (1L << (WITH_ - 88)))) != 0) );
			State = 686;
			Match(END_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(CREATE_);
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 689;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 692;
			Match(VIEW_);
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 693;
				Match(IF_);
				State = 694;
				Match(NOT_);
				State = 695;
				Match(EXISTS_);
				}
				break;
			}
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 698;
				schema_name();
				State = 699;
				Match(DOT);
				}
				break;
			}
			State = 703;
			view_name();
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 704;
				Match(OPEN_PAR);
				State = 705;
				column_name();
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 706;
					Match(COMMA);
					State = 707;
					column_name();
					}
					}
					State = 712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 713;
				Match(CLOSE_PAR);
				}
			}

			State = 717;
			Match(AS_);
			State = 718;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			Match(CREATE_);
			State = 721;
			Match(VIRTUAL_);
			State = 722;
			Match(TABLE_);
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 723;
				Match(IF_);
				State = 724;
				Match(NOT_);
				State = 725;
				Match(EXISTS_);
				}
				break;
			}
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 728;
				schema_name();
				State = 729;
				Match(DOT);
				}
				break;
			}
			State = 733;
			table_name();
			State = 734;
			Match(USING_);
			State = 735;
			module_name();
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 736;
				Match(OPEN_PAR);
				State = 737;
				module_argument();
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 738;
					Match(COMMA);
					State = 739;
					module_argument();
					}
					}
					State = 744;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 745;
				Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS_() { return GetTokens(SQLiteParser.AS_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_(int i) {
			return GetToken(SQLiteParser.AS_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(WITH_);
			State = 751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 750;
				Match(RECURSIVE_);
				}
				break;
			}
			State = 753;
			cte_table_name();
			State = 754;
			Match(AS_);
			State = 755;
			Match(OPEN_PAR);
			State = 756;
			select_stmt();
			State = 757;
			Match(CLOSE_PAR);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 758;
				Match(COMMA);
				State = 759;
				cte_table_name();
				State = 760;
				Match(AS_);
				State = 761;
				Match(OPEN_PAR);
				State = 762;
				select_stmt();
				State = 763;
				Match(CLOSE_PAR);
				}
				}
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			table_name();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 771;
				Match(OPEN_PAR);
				State = 772;
				column_name();
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 773;
					Match(COMMA);
					State = 774;
					column_name();
					}
					}
					State = 779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 780;
				Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext cte_table_name() {
			return GetRuleContext<Cte_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initial_selectContext initial_select() {
			return GetRuleContext<Initial_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Recursive__selectContext recursive__select() {
			return GetRuleContext<Recursive__selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 52, RULE_recursive_cte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			cte_table_name();
			State = 785;
			Match(AS_);
			State = 786;
			Match(OPEN_PAR);
			State = 787;
			initial_select();
			State = 788;
			Match(UNION_);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_) {
				{
				State = 789;
				Match(ALL_);
				}
			}

			State = 792;
			recursive__select();
			State = 793;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			table_name();
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 796;
				Match(OPEN_PAR);
				State = 797;
				column_name();
				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 798;
					Match(COMMA);
					State = 799;
					column_name();
					}
					}
					State = 804;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 805;
				Match(CLOSE_PAR);
				}
			}

			State = 809;
			Match(AS_);
			State = 810;
			Match(OPEN_PAR);
			State = 811;
			select_stmt();
			State = 812;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 814;
				with_clause();
				}
			}

			State = 817;
			Match(DELETE_);
			State = 818;
			Match(FROM_);
			State = 819;
			qualified_table_name();
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 820;
				Match(WHERE_);
				State = 821;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 58, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 824;
				with_clause();
				}
			}

			State = 827;
			Match(DELETE_);
			State = 828;
			Match(FROM_);
			State = 829;
			qualified_table_name();
			State = 832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 830;
				Match(WHERE_);
				State = 831;
				expr(0);
				}
			}

			State = 838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_ || _la==ORDER_) {
				{
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 834;
					order_by_stmt();
					}
				}

				State = 837;
				limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH_() { return GetToken(SQLiteParser.DETACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			Match(DETACH_);
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 841;
				Match(DATABASE_);
				}
				break;
			}
			State = 844;
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_stmtContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(SQLiteParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Drop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_stmtContext drop_stmt() {
		Drop_stmtContext _localctx = new Drop_stmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_drop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(DROP_);
			State = 847;
			_localctx.@object = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (INDEX_ - 84)) | (1L << (TABLE_ - 84)) | (1L << (TRIGGER_ - 84)) | (1L << (VIEW_ - 84)))) != 0)) ) {
				_localctx.@object = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 848;
				Match(IF_);
				State = 849;
				Match(EXISTS_);
				}
				break;
			}
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 852;
				schema_name();
				State = 853;
				Match(DOT);
				}
				break;
			}
			State = 857;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SQLiteParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SQLiteParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_() { return GetToken(SQLiteParser.CAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_() { return GetToken(SQLiteParser.CASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN_() { return GetTokens(SQLiteParser.WHEN_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_(int i) {
			return GetToken(SQLiteParser.WHEN_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN_() { return GetTokens(SQLiteParser.THEN_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_(int i) {
			return GetToken(SQLiteParser.THEN_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_() { return GetToken(SQLiteParser.ELSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE2() { return GetToken(SQLiteParser.PIPE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SQLiteParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SQLiteParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT2() { return GetToken(SQLiteParser.LT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT2() { return GetToken(SQLiteParser.GT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(SQLiteParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(SQLiteParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SQLiteParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(SQLiteParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SQLiteParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(SQLiteParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SQLiteParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(SQLiteParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(SQLiteParser.NOT_EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_() { return GetToken(SQLiteParser.IS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_() { return GetToken(SQLiteParser.IN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_() { return GetToken(SQLiteParser.LIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB_() { return GetToken(SQLiteParser.GLOB_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_() { return GetToken(SQLiteParser.MATCH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_() { return GetToken(SQLiteParser.REGEXP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_() { return GetToken(SQLiteParser.ESCAPE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL_() { return GetToken(SQLiteParser.ISNULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL_() { return GetToken(SQLiteParser.NOTNULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 860;
				literal_value();
				}
				break;
			case 2:
				{
				State = 861;
				Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 870;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 865;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
					case 1:
						{
						State = 862;
						schema_name();
						State = 863;
						Match(DOT);
						}
						break;
					}
					State = 867;
					table_name();
					State = 868;
					Match(DOT);
					}
					break;
				}
				State = 872;
				column_name();
				}
				break;
			case 4:
				{
				State = 873;
				unary_operator();
				State = 874;
				expr(21);
				}
				break;
			case 5:
				{
				State = 876;
				function_name();
				State = 877;
				Match(OPEN_PAR);
				State = 890;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case ABORT_:
				case ACTION_:
				case ADD_:
				case AFTER_:
				case ALL_:
				case ALTER_:
				case ANALYZE_:
				case AND_:
				case AS_:
				case ASC_:
				case ATTACH_:
				case AUTOINCREMENT_:
				case BEFORE_:
				case BEGIN_:
				case BETWEEN_:
				case BY_:
				case CASCADE_:
				case CASE_:
				case CAST_:
				case CHECK_:
				case COLLATE_:
				case COLUMN_:
				case COMMIT_:
				case CONFLICT_:
				case CONSTRAINT_:
				case CREATE_:
				case CROSS_:
				case CURRENT_DATE_:
				case CURRENT_TIME_:
				case CURRENT_TIMESTAMP_:
				case DATABASE_:
				case DEFAULT_:
				case DEFERRABLE_:
				case DEFERRED_:
				case DELETE_:
				case DESC_:
				case DETACH_:
				case DISTINCT_:
				case DROP_:
				case EACH_:
				case ELSE_:
				case END_:
				case ESCAPE_:
				case EXCEPT_:
				case EXCLUSIVE_:
				case EXISTS_:
				case EXPLAIN_:
				case FAIL_:
				case FOR_:
				case FOREIGN_:
				case FROM_:
				case FULL_:
				case GLOB_:
				case GROUP_:
				case HAVING_:
				case IF_:
				case IGNORE_:
				case IMMEDIATE_:
				case IN_:
				case INDEX_:
				case INDEXED_:
				case INITIALLY_:
				case INNER_:
				case INSERT_:
				case INSTEAD_:
				case INTERSECT_:
				case INTO_:
				case IS_:
				case ISNULL_:
				case JOIN_:
				case KEY_:
				case LEFT_:
				case LIKE_:
				case LIMIT_:
				case MATCH_:
				case NATURAL_:
				case NO_:
				case NOT_:
				case NOTNULL_:
				case NULL_:
				case OF_:
				case OFFSET_:
				case ON_:
				case OR_:
				case ORDER_:
				case OUTER_:
				case PLAN_:
				case PRAGMA_:
				case PRIMARY_:
				case QUERY_:
				case RAISE_:
				case RECURSIVE_:
				case REFERENCES_:
				case REGEXP_:
				case REINDEX_:
				case RELEASE_:
				case RENAME_:
				case REPLACE_:
				case RESTRICT_:
				case RIGHT_:
				case ROLLBACK_:
				case ROW_:
				case ROWS_:
				case SAVEPOINT_:
				case SELECT_:
				case SET_:
				case TABLE_:
				case TEMP_:
				case TEMPORARY_:
				case THEN_:
				case TO_:
				case TRANSACTION_:
				case TRIGGER_:
				case UNION_:
				case UNIQUE_:
				case UPDATE_:
				case USING_:
				case VACUUM_:
				case VALUES_:
				case VIEW_:
				case VIRTUAL_:
				case WHEN_:
				case WHERE_:
				case WITH_:
				case WITHOUT_:
				case FIRST_VALUE_:
				case OVER_:
				case PARTITION_:
				case RANGE_:
				case PRECEDING_:
				case UNBOUNDED_:
				case CURRENT_:
				case FOLLOWING_:
				case CUME_DIST_:
				case DENSE_RANK_:
				case LAG_:
				case LAST_VALUE_:
				case LEAD_:
				case NTH_VALUE_:
				case NTILE_:
				case PERCENT_RANK_:
				case RANK_:
				case ROW_NUMBER_:
				case GENERATED_:
				case ALWAYS_:
				case STORED_:
				case TRUE_:
				case FALSE_:
				case WINDOW_:
				case NULLS_:
				case FIRST_:
				case LAST_:
				case FILTER_:
				case GROUPS_:
				case EXCLUDE_:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					{
					State = 879;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
					case 1:
						{
						State = 878;
						Match(DISTINCT_);
						}
						break;
					}
					State = 881;
					expr(0);
					State = 886;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 882;
						Match(COMMA);
						State = 883;
						expr(0);
						}
						}
						State = 888;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				case STAR:
					{
					State = 889;
					Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 892;
				Match(CLOSE_PAR);
				State = 894;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 893;
					filter_clause();
					}
					break;
				}
				State = 897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 896;
					over_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 899;
				Match(OPEN_PAR);
				State = 900;
				expr(0);
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 901;
					Match(COMMA);
					State = 902;
					expr(0);
					}
					}
					State = 907;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 908;
				Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 910;
				Match(CAST_);
				State = 911;
				Match(OPEN_PAR);
				State = 912;
				expr(0);
				State = 913;
				Match(AS_);
				State = 914;
				type_name();
				State = 915;
				Match(CLOSE_PAR);
				}
				break;
			case 8:
				{
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_ || _la==NOT_) {
					{
					State = 918;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT_) {
						{
						State = 917;
						Match(NOT_);
						}
					}

					State = 920;
					Match(EXISTS_);
					}
				}

				State = 923;
				Match(OPEN_PAR);
				State = 924;
				select_stmt();
				State = 925;
				Match(CLOSE_PAR);
				}
				break;
			case 9:
				{
				State = 927;
				Match(CASE_);
				State = 929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 928;
					expr(0);
					}
					break;
				}
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 931;
					Match(WHEN_);
					State = 932;
					expr(0);
					State = 933;
					Match(THEN_);
					State = 934;
					expr(0);
					}
					}
					State = 938;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_ );
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_) {
					{
					State = 940;
					Match(ELSE_);
					State = 941;
					expr(0);
					}
				}

				State = 944;
				Match(END_);
				}
				break;
			case 10:
				{
				State = 946;
				raise_function();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1068;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1066;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 949;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 950;
						Match(PIPE2);
						State = 951;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 952;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 953;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 954;
						expr(20);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 955;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 956;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 957;
						expr(19);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 958;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 959;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 960;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 961;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 962;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 963;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 964;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 977;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
						case 1:
							{
							State = 965;
							Match(ASSIGN);
							}
							break;
						case 2:
							{
							State = 966;
							Match(EQ);
							}
							break;
						case 3:
							{
							State = 967;
							Match(NOT_EQ1);
							}
							break;
						case 4:
							{
							State = 968;
							Match(NOT_EQ2);
							}
							break;
						case 5:
							{
							State = 969;
							Match(IS_);
							}
							break;
						case 6:
							{
							State = 970;
							Match(IS_);
							State = 971;
							Match(NOT_);
							}
							break;
						case 7:
							{
							State = 972;
							Match(IN_);
							}
							break;
						case 8:
							{
							State = 973;
							Match(LIKE_);
							}
							break;
						case 9:
							{
							State = 974;
							Match(GLOB_);
							}
							break;
						case 10:
							{
							State = 975;
							Match(MATCH_);
							}
							break;
						case 11:
							{
							State = 976;
							Match(REGEXP_);
							}
							break;
						}
						State = 979;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 980;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 981;
						Match(AND_);
						State = 982;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 983;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 984;
						Match(OR_);
						State = 985;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 986;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 987;
						Match(IS_);
						State = 989;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
						case 1:
							{
							State = 988;
							Match(NOT_);
							}
							break;
						}
						State = 991;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 992;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 994;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 993;
							Match(NOT_);
							}
						}

						State = 996;
						Match(BETWEEN_);
						State = 997;
						expr(0);
						State = 998;
						Match(AND_);
						State = 999;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1001;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1002;
						Match(COLLATE_);
						State = 1003;
						collation_name();
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1004;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1006;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 1005;
							Match(NOT_);
							}
						}

						State = 1008;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (GLOB_ - 77)) | (1L << (LIKE_ - 77)) | (1L << (MATCH_ - 77)) | (1L << (REGEXP_ - 77)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1009;
						expr(0);
						State = 1012;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
						case 1:
							{
							State = 1010;
							Match(ESCAPE_);
							State = 1011;
							expr(0);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1014;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1019;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ISNULL_:
							{
							State = 1015;
							Match(ISNULL_);
							}
							break;
						case NOTNULL_:
							{
							State = 1016;
							Match(NOTNULL_);
							}
							break;
						case NOT_:
							{
							State = 1017;
							Match(NOT_);
							State = 1018;
							Match(NULL_);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1021;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1023;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 1022;
							Match(NOT_);
							}
						}

						State = 1025;
						Match(IN_);
						State = 1064;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
						case 1:
							{
							State = 1026;
							Match(OPEN_PAR);
							State = 1036;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
							case 1:
								{
								State = 1027;
								select_stmt();
								}
								break;
							case 2:
								{
								State = 1028;
								expr(0);
								State = 1033;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1029;
									Match(COMMA);
									State = 1030;
									expr(0);
									}
									}
									State = 1035;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
								break;
							}
							State = 1038;
							Match(CLOSE_PAR);
							}
							break;
						case 2:
							{
							State = 1042;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
							case 1:
								{
								State = 1039;
								schema_name();
								State = 1040;
								Match(DOT);
								}
								break;
							}
							State = 1044;
							table_name();
							}
							break;
						case 3:
							{
							State = 1048;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
							case 1:
								{
								State = 1045;
								schema_name();
								State = 1046;
								Match(DOT);
								}
								break;
							}
							State = 1050;
							table_function_name();
							State = 1051;
							Match(OPEN_PAR);
							State = 1060;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)) | (1L << (ROWS_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0)) {
								{
								State = 1052;
								expr(0);
								State = 1057;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1053;
									Match(COMMA);
									State = 1054;
									expr(0);
									}
									}
									State = 1059;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
							}

							State = 1062;
							Match(CLOSE_PAR);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1070;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE_() { return GetToken(SQLiteParser.RAISE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(Context, State);
		EnterRule(_localctx, 66, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			Match(RAISE_);
			State = 1072;
			Match(OPEN_PAR);
			State = 1077;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE_:
				{
				State = 1073;
				Match(IGNORE_);
				}
				break;
			case ABORT_:
			case FAIL_:
			case ROLLBACK_:
				{
				State = 1074;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || _la==FAIL_ || _la==ROLLBACK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1075;
				Match(COMMA);
				State = 1076;
				error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1079;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_() { return GetToken(SQLiteParser.TRUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_() { return GetToken(SQLiteParser.FALSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME_() { return GetToken(SQLiteParser.CURRENT_TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE_() { return GetToken(SQLiteParser.CURRENT_DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP_, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (CURRENT_DATE_ - 52)) | (1L << (CURRENT_TIME_ - 52)) | (1L << (CURRENT_TIMESTAMP_ - 52)) | (1L << (NULL_ - 52)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TRUE_ - 171)) | (1L << (FALSE_ - 171)) | (1L << (NUMERIC_LITERAL - 171)) | (1L << (STRING_LITERAL - 171)) | (1L << (BLOB_LITERAL - 171)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upsert_clauseContext upsert_clause() {
			return GetRuleContext<Upsert_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_insert_stmt);
		int _la;
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSERT_:
			case REPLACE_:
			case WITH_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_) {
					{
					State = 1083;
					with_clause();
					}
				}

				State = 1091;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
				case 1:
					{
					State = 1086;
					Match(INSERT_);
					}
					break;
				case 2:
					{
					State = 1087;
					Match(REPLACE_);
					}
					break;
				case 3:
					{
					State = 1088;
					Match(INSERT_);
					State = 1089;
					Match(OR_);
					State = 1090;
					_la = TokenStream.LA(1);
					if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1093;
				Match(INTO_);
				State = 1097;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
				case 1:
					{
					State = 1094;
					schema_name();
					State = 1095;
					Match(DOT);
					}
					break;
				}
				State = 1099;
				table_name();
				State = 1102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_) {
					{
					State = 1100;
					Match(AS_);
					State = 1101;
					table_alias();
					}
				}

				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 1104;
					Match(OPEN_PAR);
					State = 1105;
					column_name();
					State = 1110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1106;
						Match(COMMA);
						State = 1107;
						column_name();
						}
						}
						State = 1112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1113;
					Match(CLOSE_PAR);
					}
				}

				{
				State = 1146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
				case 1:
					{
					State = 1117;
					Match(VALUES_);
					State = 1118;
					Match(OPEN_PAR);
					State = 1119;
					expr(0);
					State = 1124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1120;
						Match(COMMA);
						State = 1121;
						expr(0);
						}
						}
						State = 1126;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1127;
					Match(CLOSE_PAR);
					State = 1142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1128;
						Match(COMMA);
						State = 1129;
						Match(OPEN_PAR);
						State = 1130;
						expr(0);
						State = 1135;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 1131;
							Match(COMMA);
							State = 1132;
							expr(0);
							}
							}
							State = 1137;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1138;
						Match(CLOSE_PAR);
						}
						}
						State = 1144;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1145;
					select_stmt();
					}
					break;
				}
				State = 1149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_) {
					{
					State = 1148;
					upsert_clause();
					}
				}

				}
				}
				break;
			case DEFAULT_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151;
				Match(DEFAULT_);
				State = 1152;
				Match(VALUES_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_() { return GetToken(SQLiteParser.DO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING_() { return GetToken(SQLiteParser.NOTHING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(SQLiteParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(SQLiteParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHERE_() { return GetTokens(SQLiteParser.WHERE_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_(int i) {
			return GetToken(SQLiteParser.WHERE_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public Upsert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpsert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_clauseContext upsert_clause() {
		Upsert_clauseContext _localctx = new Upsert_clauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_upsert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(ON_);
			State = 1156;
			Match(CONFLICT_);
			State = 1171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1157;
				Match(OPEN_PAR);
				State = 1158;
				indexed_column();
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1159;
					Match(COMMA);
					State = 1160;
					indexed_column();
					}
					}
					State = 1165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1166;
				Match(CLOSE_PAR);
				State = 1169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1167;
					Match(WHERE_);
					State = 1168;
					expr(0);
					}
				}

				}
			}

			State = 1173;
			Match(DO_);
			State = 1200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING_:
				{
				State = 1174;
				Match(NOTHING_);
				}
				break;
			case UPDATE_:
				{
				State = 1175;
				Match(UPDATE_);
				State = 1176;
				Match(SET_);
				{
				State = 1179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1177;
					column_name();
					}
					break;
				case 2:
					{
					State = 1178;
					column_name_list();
					}
					break;
				}
				State = 1181;
				Match(EQ);
				State = 1182;
				expr(0);
				State = 1193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1183;
					Match(COMMA);
					State = 1186;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
					case 1:
						{
						State = 1184;
						column_name();
						}
						break;
					case 2:
						{
						State = 1185;
						column_name_list();
						}
						break;
					}
					State = 1188;
					Match(EQ);
					State = 1189;
					expr(0);
					}
					}
					State = 1195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1196;
					Match(WHERE_);
					State = 1197;
					expr(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_() { return GetToken(SQLiteParser.PRAGMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			Match(PRAGMA_);
			State = 1206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1203;
				schema_name();
				State = 1204;
				Match(DOT);
				}
				break;
			}
			State = 1208;
			pragma_name();
			State = 1215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 1209;
				Match(ASSIGN);
				State = 1210;
				pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 1211;
				Match(OPEN_PAR);
				State = 1212;
				pragma_value();
				State = 1213;
				Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER_:
			case ANALYZE_:
			case ATTACH_:
			case BEGIN_:
			case COMMIT_:
			case CREATE_:
			case DEFAULT_:
			case DELETE_:
			case DETACH_:
			case DROP_:
			case END_:
			case EXPLAIN_:
			case INSERT_:
			case PRAGMA_:
			case REINDEX_:
			case RELEASE_:
			case REPLACE_:
			case ROLLBACK_:
			case SAVEPOINT_:
			case SELECT_:
			case UPDATE_:
			case VACUUM_:
			case VALUES_:
			case WITH_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 76, RULE_pragma_value);
		try {
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1217;
				signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1219;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX_() { return GetToken(SQLiteParser.REINDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(REINDEX_);
			State = 1233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1223;
				collation_name();
				}
				break;
			case 2:
				{
				State = 1227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1224;
					schema_name();
					State = 1225;
					Match(DOT);
					}
					break;
				}
				State = 1231;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1229;
					table_name();
					}
					break;
				case 2:
					{
					State = 1230;
					index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1235;
				common_table_stmt();
				}
			}

			State = 1238;
			select_core();
			State = 1244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1239;
					compound_operator();
					State = 1240;
					select_core();
					}
					} 
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			State = 1248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1247;
				order_by_stmt();
				}
			}

			State = 1251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1250;
				limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			table_or_subquery();
			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==CROSS_ || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INNER_ - 87)) | (1L << (JOIN_ - 87)) | (1L << (LEFT_ - 87)) | (1L << (NATURAL_ - 87)))) != 0)) {
				{
				{
				State = 1254;
				join_operator();
				State = 1255;
				table_or_subquery();
				State = 1257;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 1256;
					join_constraint();
					}
					break;
				}
				}
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_() { return GetToken(SQLiteParser.SELECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW_() { return GetToken(SQLiteParser.WINDOW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext[] window_name() {
			return GetRuleContexts<Window_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name(int i) {
			return GetRuleContext<Window_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS_() { return GetTokens(SQLiteParser.AS_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_(int i) {
			return GetToken(SQLiteParser.AS_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext[] window_defn() {
			return GetRuleContexts<Window_defnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext window_defn(int i) {
			return GetRuleContext<Window_defnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_() { return GetToken(SQLiteParser.HAVING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 84, RULE_select_core);
		int _la;
		try {
			State = 1354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1264;
				Match(SELECT_);
				State = 1266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1265;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL_ || _la==DISTINCT_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1268;
				result_column();
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1269;
					Match(COMMA);
					State = 1270;
					result_column();
					}
					}
					State = 1275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_) {
					{
					State = 1276;
					Match(FROM_);
					State = 1286;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
					case 1:
						{
						State = 1277;
						table_or_subquery();
						State = 1282;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 1278;
							Match(COMMA);
							State = 1279;
							table_or_subquery();
							}
							}
							State = 1284;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 1285;
						join_clause();
						}
						break;
					}
					}
				}

				State = 1292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 1290;
					Match(WHERE_);
					State = 1291;
					expr(0);
					}
				}

				State = 1308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP_) {
					{
					State = 1294;
					Match(GROUP_);
					State = 1295;
					Match(BY_);
					State = 1296;
					expr(0);
					State = 1301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1297;
						Match(COMMA);
						State = 1298;
						expr(0);
						}
						}
						State = 1303;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HAVING_) {
						{
						State = 1304;
						Match(HAVING_);
						State = 1305;
						expr(0);
						}
					}

					}
				}

				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW_) {
					{
					State = 1310;
					Match(WINDOW_);
					State = 1311;
					window_name();
					State = 1312;
					Match(AS_);
					State = 1313;
					window_defn();
					State = 1321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1314;
						Match(COMMA);
						State = 1315;
						window_name();
						State = 1316;
						Match(AS_);
						State = 1317;
						window_defn();
						}
						}
						State = 1323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				}
				break;
			case VALUES_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1326;
				Match(VALUES_);
				State = 1327;
				Match(OPEN_PAR);
				State = 1328;
				expr(0);
				State = 1333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1329;
					Match(COMMA);
					State = 1330;
					expr(0);
					}
					}
					State = 1335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1336;
				Match(CLOSE_PAR);
				State = 1351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1337;
					Match(COMMA);
					State = 1338;
					Match(OPEN_PAR);
					State = 1339;
					expr(0);
					State = 1344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1340;
						Match(COMMA);
						State = 1341;
						expr(0);
						}
						}
						State = 1346;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1347;
					Match(CLOSE_PAR);
					}
					}
					State = 1353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_factored_select_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1358;
				common_table_stmt();
				}
			}

			State = 1361;
			select_core();
			State = 1363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1362;
				order_by_stmt();
				}
			}

			State = 1366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1365;
				limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_() { return GetTokens(SQLiteParser.UNION_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_(int i) {
			return GetToken(SQLiteParser.UNION_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT_() { return GetTokens(SQLiteParser.INTERSECT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_(int i) {
			return GetToken(SQLiteParser.INTERSECT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT_() { return GetTokens(SQLiteParser.EXCEPT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_(int i) {
			return GetToken(SQLiteParser.EXCEPT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL_() { return GetTokens(SQLiteParser.ALL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_(int i) {
			return GetToken(SQLiteParser.ALL_, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1368;
				common_table_stmt();
				}
			}

			State = 1371;
			select_core();
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1378;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNION_:
					{
					State = 1372;
					Match(UNION_);
					State = 1374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_) {
						{
						State = 1373;
						Match(ALL_);
						}
					}

					}
					break;
				case INTERSECT_:
					{
					State = 1376;
					Match(INTERSECT_);
					}
					break;
				case EXCEPT_:
					{
					State = 1377;
					Match(EXCEPT_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1380;
				select_core();
				}
				}
				State = 1383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXCEPT_ || _la==INTERSECT_ || _la==UNION_ );
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_) {
				{
				State = 1385;
				order_by_stmt();
				}
			}

			State = 1389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_) {
				{
				State = 1388;
				limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 92, RULE_table_or_subquery);
		int _la;
		try {
			State = 1455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1391;
					schema_name();
					State = 1392;
					Match(DOT);
					}
					break;
				}
				State = 1396;
				table_name();
				State = 1401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1398;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
					case 1:
						{
						State = 1397;
						Match(AS_);
						}
						break;
					}
					State = 1400;
					table_alias();
					}
					break;
				}
				State = 1408;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEXED_:
					{
					State = 1403;
					Match(INDEXED_);
					State = 1404;
					Match(BY_);
					State = 1405;
					index_name();
					}
					break;
				case NOT_:
					{
					State = 1406;
					Match(NOT_);
					State = 1407;
					Match(INDEXED_);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case ALTER_:
				case ANALYZE_:
				case ATTACH_:
				case BEGIN_:
				case COMMIT_:
				case CREATE_:
				case CROSS_:
				case DEFAULT_:
				case DELETE_:
				case DETACH_:
				case DROP_:
				case END_:
				case EXCEPT_:
				case EXPLAIN_:
				case GROUP_:
				case INNER_:
				case INSERT_:
				case INTERSECT_:
				case JOIN_:
				case LEFT_:
				case LIMIT_:
				case NATURAL_:
				case ON_:
				case ORDER_:
				case PRAGMA_:
				case REINDEX_:
				case RELEASE_:
				case REPLACE_:
				case ROLLBACK_:
				case SAVEPOINT_:
				case SELECT_:
				case UNION_:
				case UPDATE_:
				case USING_:
				case VACUUM_:
				case VALUES_:
				case WHERE_:
				case WITH_:
				case WINDOW_:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1410;
					schema_name();
					State = 1411;
					Match(DOT);
					}
					break;
				}
				State = 1415;
				table_function_name();
				State = 1416;
				Match(OPEN_PAR);
				State = 1417;
				expr(0);
				State = 1422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1418;
					Match(COMMA);
					State = 1419;
					expr(0);
					}
					}
					State = 1424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1425;
				Match(CLOSE_PAR);
				State = 1430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1427;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
					case 1:
						{
						State = 1426;
						Match(AS_);
						}
						break;
					}
					State = 1429;
					table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1432;
				Match(OPEN_PAR);
				State = 1442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
				case 1:
					{
					State = 1433;
					table_or_subquery();
					State = 1438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1434;
						Match(COMMA);
						State = 1435;
						table_or_subquery();
						}
						}
						State = 1440;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1441;
					join_clause();
					}
					break;
				}
				State = 1444;
				Match(CLOSE_PAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1446;
				Match(OPEN_PAR);
				State = 1447;
				select_stmt();
				State = 1448;
				Match(CLOSE_PAR);
				State = 1453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1450;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
					case 1:
						{
						State = 1449;
						Match(AS_);
						}
						break;
					}
					State = 1452;
					table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 94, RULE_result_column);
		int _la;
		try {
			State = 1469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458;
				table_name();
				State = 1459;
				Match(DOT);
				State = 1460;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462;
				expr(0);
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_ || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS_) {
						{
						State = 1463;
						Match(AS_);
						}
					}

					State = 1466;
					column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_() { return GetToken(SQLiteParser.JOIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_() { return GetToken(SQLiteParser.NATURAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_() { return GetToken(SQLiteParser.LEFT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_() { return GetToken(SQLiteParser.INNER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS_() { return GetToken(SQLiteParser.CROSS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_() { return GetToken(SQLiteParser.OUTER_, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 96, RULE_join_operator);
		int _la;
		try {
			State = 1484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1471;
				Match(COMMA);
				}
				break;
			case CROSS_:
			case INNER_:
			case JOIN_:
			case LEFT_:
			case NATURAL_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL_) {
					{
					State = 1472;
					Match(NATURAL_);
					}
				}

				State = 1481;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_:
					{
					State = 1475;
					Match(LEFT_);
					State = 1477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER_) {
						{
						State = 1476;
						Match(OUTER_);
						}
					}

					}
					break;
				case INNER_:
					{
					State = 1479;
					Match(INNER_);
					}
					break;
				case CROSS_:
					{
					State = 1480;
					Match(CROSS_);
					}
					break;
				case JOIN_:
					break;
				default:
					break;
				}
				State = 1483;
				Match(JOIN_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 98, RULE_join_constraint);
		int _la;
		try {
			State = 1500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1486;
				Match(ON_);
				State = 1487;
				expr(0);
				}
				break;
			case USING_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1488;
				Match(USING_);
				State = 1489;
				Match(OPEN_PAR);
				State = 1490;
				column_name();
				State = 1495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1491;
					Match(COMMA);
					State = 1492;
					column_name();
					}
					}
					State = 1497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1498;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_() { return GetToken(SQLiteParser.INTERSECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_() { return GetToken(SQLiteParser.EXCEPT_, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_compound_operator);
		int _la;
		try {
			State = 1508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502;
				Match(UNION_);
				State = 1504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_) {
					{
					State = 1503;
					Match(ALL_);
					}
				}

				}
				break;
			case INTERSECT_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1506;
				Match(INTERSECT_);
				}
				break;
			case EXCEPT_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1507;
				Match(EXCEPT_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1510;
				with_clause();
				}
			}

			State = 1513;
			Match(UPDATE_);
			State = 1516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 1514;
				Match(OR_);
				State = 1515;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1518;
			qualified_table_name();
			State = 1519;
			Match(SET_);
			State = 1522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 1520;
				column_name();
				}
				break;
			case 2:
				{
				State = 1521;
				column_name_list();
				}
				break;
			}
			State = 1524;
			Match(ASSIGN);
			State = 1525;
			expr(0);
			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1526;
				Match(COMMA);
				State = 1529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 1527;
					column_name();
					}
					break;
				case 2:
					{
					State = 1528;
					column_name_list();
					}
					break;
				}
				State = 1531;
				Match(ASSIGN);
				State = 1532;
				expr(0);
				}
				}
				State = 1538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1539;
				Match(WHERE_);
				State = 1540;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 104, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543;
			Match(OPEN_PAR);
			State = 1544;
			column_name();
			State = 1549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1545;
				Match(COMMA);
				State = 1546;
				column_name();
				}
				}
				State = 1551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1552;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Limit_stmtContext limit_stmt() {
			return GetRuleContext<Limit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_stmtContext order_by_stmt() {
			return GetRuleContext<Order_by_stmtContext>(0);
		}
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 106, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 1554;
				with_clause();
				}
			}

			State = 1557;
			Match(UPDATE_);
			State = 1560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				{
				State = 1558;
				Match(OR_);
				State = 1559;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT_ || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FAIL_ - 72)) | (1L << (IGNORE_ - 72)) | (1L << (REPLACE_ - 72)) | (1L << (ROLLBACK_ - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1562;
			qualified_table_name();
			State = 1563;
			Match(SET_);
			State = 1566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				{
				State = 1564;
				column_name();
				}
				break;
			case 2:
				{
				State = 1565;
				column_name_list();
				}
				break;
			}
			State = 1568;
			Match(ASSIGN);
			State = 1569;
			expr(0);
			State = 1580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1570;
				Match(COMMA);
				State = 1573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1571;
					column_name();
					}
					break;
				case 2:
					{
					State = 1572;
					column_name_list();
					}
					break;
				}
				State = 1575;
				Match(ASSIGN);
				State = 1576;
				expr(0);
				}
				}
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1583;
				Match(WHERE_);
				State = 1584;
				expr(0);
				}
			}

			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_ || _la==ORDER_) {
				{
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1587;
					order_by_stmt();
					}
				}

				State = 1590;
				limit_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(Context, State);
		EnterRule(_localctx, 108, RULE_qualified_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1593;
				schema_name();
				State = 1594;
				Match(DOT);
				}
				break;
			}
			State = 1598;
			table_name();
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS_) {
				{
				State = 1599;
				Match(AS_);
				State = 1600;
				alias();
				}
			}

			State = 1608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEXED_:
				{
				State = 1603;
				Match(INDEXED_);
				State = 1604;
				Match(BY_);
				State = 1605;
				index_name();
				}
				break;
			case NOT_:
				{
				State = 1606;
				Match(NOT_);
				State = 1607;
				Match(INDEXED_);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER_:
			case ANALYZE_:
			case ATTACH_:
			case BEGIN_:
			case COMMIT_:
			case CREATE_:
			case DEFAULT_:
			case DELETE_:
			case DETACH_:
			case DROP_:
			case END_:
			case EXPLAIN_:
			case INSERT_:
			case LIMIT_:
			case ORDER_:
			case PRAGMA_:
			case REINDEX_:
			case RELEASE_:
			case REPLACE_:
			case ROLLBACK_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case UPDATE_:
			case VACUUM_:
			case VALUES_:
			case WHERE_:
			case WITH_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM_() { return GetToken(SQLiteParser.VACUUM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilenameContext filename() {
			return GetRuleContext<FilenameContext>(0);
		}
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_vacuum_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610;
			Match(VACUUM_);
			State = 1612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 1611;
				schema_name();
				}
				break;
			}
			State = 1616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO_) {
				{
				State = 1614;
				Match(INTO_);
				State = 1615;
				filename();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_() { return GetToken(SQLiteParser.FILTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			Match(FILTER_);
			State = 1619;
			Match(OPEN_PAR);
			State = 1620;
			Match(WHERE_);
			State = 1621;
			expr(0);
			State = 1622;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_defnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY_() { return GetTokens(SQLiteParser.BY_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_(int i) {
			return GetToken(SQLiteParser.BY_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_defn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_defnContext window_defn() {
		Window_defnContext _localctx = new Window_defnContext(Context, State);
		EnterRule(_localctx, 114, RULE_window_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			Match(OPEN_PAR);
			State = 1626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				State = 1625;
				base_window_name();
				}
				break;
			}
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_) {
				{
				State = 1628;
				Match(PARTITION_);
				State = 1629;
				Match(BY_);
				State = 1630;
				expr(0);
				State = 1635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1631;
					Match(COMMA);
					State = 1632;
					expr(0);
					}
					}
					State = 1637;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			{
			State = 1640;
			Match(ORDER_);
			State = 1641;
			Match(BY_);
			State = 1642;
			ordering_term();
			State = 1647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1643;
				Match(COMMA);
				State = 1644;
				ordering_term();
				}
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS_ - 127)) | (1L << (RANGE_ - 127)) | (1L << (GROUPS_ - 127)))) != 0)) {
				{
				State = 1650;
				frame_spec();
				}
			}

			State = 1653;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY_() { return GetTokens(SQLiteParser.BY_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_(int i) {
			return GetToken(SQLiteParser.BY_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 116, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			Match(OVER_);
			State = 1689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				{
				State = 1656;
				window_name();
				}
				break;
			case 2:
				{
				State = 1657;
				Match(OPEN_PAR);
				State = 1659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
				case 1:
					{
					State = 1658;
					base_window_name();
					}
					break;
				}
				State = 1671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1661;
					Match(PARTITION_);
					State = 1662;
					Match(BY_);
					State = 1663;
					expr(0);
					State = 1668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1664;
						Match(COMMA);
						State = 1665;
						expr(0);
						}
						}
						State = 1670;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1673;
					Match(ORDER_);
					State = 1674;
					Match(BY_);
					State = 1675;
					ordering_term();
					State = 1680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1676;
						Match(COMMA);
						State = 1677;
						ordering_term();
						}
						}
						State = 1682;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS_ - 127)) | (1L << (RANGE_ - 127)) | (1L << (GROUPS_ - 127)))) != 0)) {
					{
					State = 1685;
					frame_spec();
					}
				}

				State = 1688;
				Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_() { return GetToken(SQLiteParser.EXCLUDE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_() { return GetToken(SQLiteParser.TIES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_() { return GetToken(SQLiteParser.NO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_() { return GetToken(SQLiteParser.OTHERS_, 0); }
		public Frame_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_specContext frame_spec() {
		Frame_specContext _localctx = new Frame_specContext(Context, State);
		EnterRule(_localctx, 118, RULE_frame_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			frame_clause();
			State = 1699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCLUDE_:
				{
				State = 1692;
				Match(EXCLUDE_);
				{
				State = 1693;
				Match(NO_);
				State = 1694;
				Match(OTHERS_);
				}
				}
				break;
			case CURRENT_:
				{
				State = 1695;
				Match(CURRENT_);
				State = 1696;
				Match(ROW_);
				}
				break;
			case GROUP_:
				{
				State = 1697;
				Match(GROUP_);
				}
				break;
			case TIES_:
				{
				State = 1698;
				Match(TIES_);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_() { return GetToken(SQLiteParser.RANGE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_() { return GetToken(SQLiteParser.ROWS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS_() { return GetToken(SQLiteParser.GROUPS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_singleContext frame_single() {
			return GetRuleContext<Frame_singleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_leftContext frame_left() {
			return GetRuleContext<Frame_leftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_rightContext frame_right() {
			return GetRuleContext<Frame_rightContext>(0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_clauseContext frame_clause() {
		Frame_clauseContext _localctx = new Frame_clauseContext(Context, State);
		EnterRule(_localctx, 120, RULE_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1701;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS_ - 127)) | (1L << (RANGE_ - 127)) | (1L << (GROUPS_ - 127)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				State = 1702;
				frame_single();
				}
				break;
			case 2:
				{
				State = 1703;
				Match(BETWEEN_);
				State = 1704;
				frame_left();
				State = 1705;
				Match(AND_);
				State = 1706;
				frame_right();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_funcContext simple_func() {
			return GetRuleContext<Simple_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Simple_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_function_invocationContext simple_function_invocation() {
		Simple_function_invocationContext _localctx = new Simple_function_invocationContext(Context, State);
		EnterRule(_localctx, 122, RULE_simple_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			simple_func();
			State = 1711;
			Match(OPEN_PAR);
			State = 1721;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1712;
				expr(0);
				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1713;
					Match(COMMA);
					State = 1714;
					expr(0);
					}
					}
					State = 1719;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1720;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1723;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_funcContext aggregate_func() {
			return GetRuleContext<Aggregate_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Aggregate_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_invocationContext aggregate_function_invocation() {
		Aggregate_function_invocationContext _localctx = new Aggregate_function_invocationContext(Context, State);
		EnterRule(_localctx, 124, RULE_aggregate_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			aggregate_func();
			State = 1726;
			Match(OPEN_PAR);
			State = 1739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 1727;
					Match(DISTINCT_);
					}
					break;
				}
				State = 1730;
				expr(0);
				State = 1735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1731;
					Match(COMMA);
					State = 1732;
					expr(0);
					}
					}
					State = 1737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1738;
				Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1741;
			Match(CLOSE_PAR);
			State = 1743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER_) {
				{
				State = 1742;
				filter_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext window_defn() {
			return GetRuleContext<Window_defnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_function_invocationContext window_function_invocation() {
		Window_function_invocationContext _localctx = new Window_function_invocationContext(Context, State);
		EnterRule(_localctx, 126, RULE_window_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			window_function();
			State = 1746;
			Match(OPEN_PAR);
			State = 1756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1747;
				expr(0);
				State = 1752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1748;
					Match(COMMA);
					State = 1749;
					expr(0);
					}
					}
					State = 1754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1755;
				Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1758;
			Match(CLOSE_PAR);
			State = 1760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER_) {
				{
				State = 1759;
				filter_clause();
				}
			}

			State = 1762;
			Match(OVER_);
			State = 1765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				{
				State = 1763;
				window_defn();
				}
				break;
			case 2:
				{
				State = 1764;
				window_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_stmtContext common_table_stmt() {
		Common_table_stmtContext _localctx = new Common_table_stmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_common_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			Match(WITH_);
			State = 1769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				{
				State = 1768;
				Match(RECURSIVE_);
				}
				break;
			}
			State = 1771;
			common_table_expression();
			State = 1776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1772;
				Match(COMMA);
				State = 1773;
				common_table_expression();
				}
				}
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Order_by_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_stmtContext order_by_stmt() {
		Order_by_stmtContext _localctx = new Order_by_stmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_order_by_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779;
			Match(ORDER_);
			State = 1780;
			Match(BY_);
			State = 1781;
			ordering_term();
			State = 1786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1782;
				Match(COMMA);
				State = 1783;
				ordering_term();
				}
				}
				State = 1788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_() { return GetToken(SQLiteParser.LIMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_() { return GetToken(SQLiteParser.OFFSET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Limit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_stmtContext limit_stmt() {
		Limit_stmtContext _localctx = new Limit_stmtContext(Context, State);
		EnterRule(_localctx, 132, RULE_limit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			Match(LIMIT_);
			State = 1790;
			expr(0);
			State = 1793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==OFFSET_) {
				{
				State = 1791;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==OFFSET_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1792;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_() { return GetToken(SQLiteParser.NULLS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_() { return GetToken(SQLiteParser.FIRST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_() { return GetToken(SQLiteParser.LAST_, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 134, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			expr(0);
			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_) {
				{
				State = 1796;
				Match(COLLATE_);
				State = 1797;
				collation_name();
				}
			}

			State = 1801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 1800;
				asc_desc();
				}
			}

			State = 1805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS_) {
				{
				State = 1803;
				Match(NULLS_);
				State = 1804;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_ || _la==LAST_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_() { return GetToken(SQLiteParser.ASC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_() { return GetToken(SQLiteParser.DESC_, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asc_descContext asc_desc() {
		Asc_descContext _localctx = new Asc_descContext(Context, State);
		EnterRule(_localctx, 136, RULE_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_ || _la==DESC_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_leftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public Frame_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_leftContext frame_left() {
		Frame_leftContext _localctx = new Frame_leftContext(Context, State);
		EnterRule(_localctx, 138, RULE_frame_left);
		try {
			State = 1819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1809;
				expr(0);
				State = 1810;
				Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1812;
				expr(0);
				State = 1813;
				Match(FOLLOWING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1815;
				Match(CURRENT_);
				State = 1816;
				Match(ROW_);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1817;
				Match(UNBOUNDED_);
				State = 1818;
				Match(PRECEDING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		public Frame_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_rightContext frame_right() {
		Frame_rightContext _localctx = new Frame_rightContext(Context, State);
		EnterRule(_localctx, 140, RULE_frame_right);
		try {
			State = 1831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1821;
				expr(0);
				State = 1822;
				Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1824;
				expr(0);
				State = 1825;
				Match(FOLLOWING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1827;
				Match(CURRENT_);
				State = 1828;
				Match(ROW_);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1829;
				Match(UNBOUNDED_);
				State = 1830;
				Match(FOLLOWING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_singleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		public Frame_singleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_single; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_single(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_singleContext frame_single() {
		Frame_singleContext _localctx = new Frame_singleContext(Context, State);
		EnterRule(_localctx, 142, RULE_frame_single);
		try {
			State = 1840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833;
				expr(0);
				State = 1834;
				Match(PRECEDING_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1836;
				Match(UNBOUNDED_);
				State = 1837;
				Match(PRECEDING_);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1838;
				Match(CURRENT_);
				State = 1839;
				Match(ROW_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE_() { return GetToken(SQLiteParser.FIRST_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE_() { return GetToken(SQLiteParser.LAST_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Partition_byContext partition_by() {
			return GetRuleContext<Partition_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST_() { return GetToken(SQLiteParser.CUME_DIST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK_() { return GetToken(SQLiteParser.PERCENT_RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_exprContext order_by_expr() {
			return GetRuleContext<Order_by_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK_() { return GetToken(SQLiteParser.DENSE_RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK_() { return GetToken(SQLiteParser.RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER_() { return GetToken(SQLiteParser.ROW_NUMBER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG_() { return GetToken(SQLiteParser.LAG_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD_() { return GetToken(SQLiteParser.LEAD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Of_OF_fsetContext of_OF_fset() {
			return GetRuleContext<Of_OF_fsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_DEFAULT__valueContext default_DEFAULT__value() {
			return GetRuleContext<Default_DEFAULT__valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE_() { return GetToken(SQLiteParser.NTH_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE_() { return GetToken(SQLiteParser.NTILE_, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 144, RULE_window_function);
		int _la;
		try {
			State = 1927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE_:
			case LAST_VALUE_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1842;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_ || _la==LAST_VALUE_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1843;
				Match(OPEN_PAR);
				State = 1844;
				expr(0);
				State = 1845;
				Match(CLOSE_PAR);
				State = 1846;
				Match(OVER_);
				State = 1847;
				Match(OPEN_PAR);
				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1848;
					partition_by();
					}
				}

				State = 1851;
				order_by_expr_asc_desc();
				State = 1853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS_ - 127)) | (1L << (RANGE_ - 127)) | (1L << (GROUPS_ - 127)))) != 0)) {
					{
					State = 1852;
					frame_clause();
					}
				}

				State = 1855;
				Match(CLOSE_PAR);
				}
				break;
			case CUME_DIST_:
			case PERCENT_RANK_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1857;
				_la = TokenStream.LA(1);
				if ( !(_la==CUME_DIST_ || _la==PERCENT_RANK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1858;
				Match(OPEN_PAR);
				State = 1859;
				Match(CLOSE_PAR);
				State = 1860;
				Match(OVER_);
				State = 1861;
				Match(OPEN_PAR);
				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1862;
					partition_by();
					}
				}

				State = 1866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 1865;
					order_by_expr();
					}
				}

				State = 1868;
				Match(CLOSE_PAR);
				}
				break;
			case DENSE_RANK_:
			case RANK_:
			case ROW_NUMBER_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1869;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (DENSE_RANK_ - 159)) | (1L << (RANK_ - 159)) | (1L << (ROW_NUMBER_ - 159)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1870;
				Match(OPEN_PAR);
				State = 1871;
				Match(CLOSE_PAR);
				State = 1872;
				Match(OVER_);
				State = 1873;
				Match(OPEN_PAR);
				State = 1875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1874;
					partition_by();
					}
				}

				State = 1877;
				order_by_expr_asc_desc();
				State = 1878;
				Match(CLOSE_PAR);
				}
				break;
			case LAG_:
			case LEAD_:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1880;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_ || _la==LEAD_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1881;
				Match(OPEN_PAR);
				State = 1882;
				expr(0);
				State = 1884;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 1883;
					of_OF_fset();
					}
					break;
				}
				State = 1887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1886;
					default_DEFAULT__value();
					}
				}

				State = 1889;
				Match(CLOSE_PAR);
				State = 1890;
				Match(OVER_);
				State = 1891;
				Match(OPEN_PAR);
				State = 1893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1892;
					partition_by();
					}
				}

				State = 1895;
				order_by_expr_asc_desc();
				State = 1896;
				Match(CLOSE_PAR);
				}
				break;
			case NTH_VALUE_:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1898;
				Match(NTH_VALUE_);
				State = 1899;
				Match(OPEN_PAR);
				State = 1900;
				expr(0);
				State = 1901;
				Match(COMMA);
				State = 1902;
				signed_number();
				State = 1903;
				Match(CLOSE_PAR);
				State = 1904;
				Match(OVER_);
				State = 1905;
				Match(OPEN_PAR);
				State = 1907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1906;
					partition_by();
					}
				}

				State = 1909;
				order_by_expr_asc_desc();
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (ROWS_ - 127)) | (1L << (RANGE_ - 127)) | (1L << (GROUPS_ - 127)))) != 0)) {
					{
					State = 1910;
					frame_clause();
					}
				}

				State = 1913;
				Match(CLOSE_PAR);
				}
				break;
			case NTILE_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1915;
				Match(NTILE_);
				State = 1916;
				Match(OPEN_PAR);
				State = 1917;
				expr(0);
				State = 1918;
				Match(CLOSE_PAR);
				State = 1919;
				Match(OVER_);
				State = 1920;
				Match(OPEN_PAR);
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION_) {
					{
					State = 1921;
					partition_by();
					}
				}

				State = 1924;
				order_by_expr_asc_desc();
				State = 1925;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Of_OF_fsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Of_OF_fsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_of_OF_fset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOf_OF_fset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Of_OF_fsetContext of_OF_fset() {
		Of_OF_fsetContext _localctx = new Of_OF_fsetContext(Context, State);
		EnterRule(_localctx, 146, RULE_of_OF_fset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1929;
			Match(COMMA);
			State = 1930;
			signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_DEFAULT__valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Default_DEFAULT__valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_DEFAULT__value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_DEFAULT__value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_DEFAULT__valueContext default_DEFAULT__value() {
		Default_DEFAULT__valueContext _localctx = new Default_DEFAULT__valueContext(Context, State);
		EnterRule(_localctx, 148, RULE_default_DEFAULT__value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932;
			Match(COMMA);
			State = 1933;
			signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_byContext partition_by() {
		Partition_byContext _localctx = new Partition_byContext(Context, State);
		EnterRule(_localctx, 150, RULE_partition_by);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1935;
			Match(PARTITION_);
			State = 1936;
			Match(BY_);
			State = 1938;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1937;
					expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Order_by_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_exprContext order_by_expr() {
		Order_by_exprContext _localctx = new Order_by_exprContext(Context, State);
		EnterRule(_localctx, 152, RULE_order_by_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942;
			Match(ORDER_);
			State = 1943;
			Match(BY_);
			State = 1945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1944;
				expr(0);
				}
				}
				State = 1947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)) | (1L << (ROWS_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expr_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		public Order_by_expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
		Order_by_expr_asc_descContext _localctx = new Order_by_expr_asc_descContext(Context, State);
		EnterRule(_localctx, 154, RULE_order_by_expr_asc_desc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949;
			Match(ORDER_);
			State = 1950;
			Match(BY_);
			State = 1951;
			order_by_expr_asc_desc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext[] asc_desc() {
			return GetRuleContexts<Asc_descContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc(int i) {
			return GetRuleContext<Asc_descContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_asc_descContext expr_asc_desc() {
		Expr_asc_descContext _localctx = new Expr_asc_descContext(Context, State);
		EnterRule(_localctx, 156, RULE_expr_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953;
			expr(0);
			State = 1955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 1954;
				asc_desc();
				}
			}

			State = 1964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1957;
				Match(COMMA);
				State = 1958;
				expr(0);
				State = 1960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_ || _la==DESC_) {
					{
					State = 1959;
					asc_desc();
					}
				}

				}
				}
				State = 1966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Initial_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initial_selectContext initial_select() {
		Initial_selectContext _localctx = new Initial_selectContext(Context, State);
		EnterRule(_localctx, 158, RULE_initial_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive__selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Recursive__selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive__select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive__select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive__selectContext recursive__select() {
		Recursive__selectContext _localctx = new Recursive__selectContext(Context, State);
		EnterRule(_localctx, 160, RULE_recursive__select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1969;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(SQLiteParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 162, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==NOT_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 164, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(Context, State);
		EnterRule(_localctx, 166, RULE_module_argument);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976;
				column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 168, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_() { return GetToken(SQLiteParser.ABORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_() { return GetToken(SQLiteParser.ACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_() { return GetToken(SQLiteParser.ADD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_() { return GetToken(SQLiteParser.AFTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(SQLiteParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_() { return GetToken(SQLiteParser.ALTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_() { return GetToken(SQLiteParser.ANALYZE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_() { return GetToken(SQLiteParser.AND_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(SQLiteParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_() { return GetToken(SQLiteParser.ASC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH_() { return GetToken(SQLiteParser.ATTACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT_() { return GetToken(SQLiteParser.AUTOINCREMENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_() { return GetToken(SQLiteParser.BEFORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_() { return GetToken(SQLiteParser.BEGIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_() { return GetToken(SQLiteParser.BETWEEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(SQLiteParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_() { return GetToken(SQLiteParser.CASCADE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_() { return GetToken(SQLiteParser.CASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_() { return GetToken(SQLiteParser.CAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(SQLiteParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_() { return GetToken(SQLiteParser.COLLATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_() { return GetToken(SQLiteParser.COLUMN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_() { return GetToken(SQLiteParser.COMMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT_() { return GetToken(SQLiteParser.CONFLICT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(SQLiteParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(SQLiteParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS_() { return GetToken(SQLiteParser.CROSS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE_() { return GetToken(SQLiteParser.CURRENT_DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME_() { return GetToken(SQLiteParser.CURRENT_TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_() { return GetToken(SQLiteParser.DATABASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_() { return GetToken(SQLiteParser.DEFAULT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE_() { return GetToken(SQLiteParser.DEFERRABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED_() { return GetToken(SQLiteParser.DEFERRED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(SQLiteParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_() { return GetToken(SQLiteParser.DESC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH_() { return GetToken(SQLiteParser.DETACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(SQLiteParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(SQLiteParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH_() { return GetToken(SQLiteParser.EACH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_() { return GetToken(SQLiteParser.ELSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(SQLiteParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_() { return GetToken(SQLiteParser.ESCAPE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_() { return GetToken(SQLiteParser.EXCEPT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE_() { return GetToken(SQLiteParser.EXCLUSIVE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(SQLiteParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_() { return GetToken(SQLiteParser.EXPLAIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL_() { return GetToken(SQLiteParser.FAIL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_() { return GetToken(SQLiteParser.FOR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_() { return GetToken(SQLiteParser.FOREIGN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(SQLiteParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_() { return GetToken(SQLiteParser.FULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB_() { return GetToken(SQLiteParser.GLOB_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(SQLiteParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_() { return GetToken(SQLiteParser.HAVING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_() { return GetToken(SQLiteParser.IF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(SQLiteParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE_() { return GetToken(SQLiteParser.IMMEDIATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_() { return GetToken(SQLiteParser.IN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(SQLiteParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED_() { return GetToken(SQLiteParser.INDEXED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY_() { return GetToken(SQLiteParser.INITIALLY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_() { return GetToken(SQLiteParser.INNER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(SQLiteParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD_() { return GetToken(SQLiteParser.INSTEAD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_() { return GetToken(SQLiteParser.INTERSECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(SQLiteParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_() { return GetToken(SQLiteParser.IS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL_() { return GetToken(SQLiteParser.ISNULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_() { return GetToken(SQLiteParser.JOIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(SQLiteParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_() { return GetToken(SQLiteParser.LEFT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_() { return GetToken(SQLiteParser.LIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_() { return GetToken(SQLiteParser.LIMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_() { return GetToken(SQLiteParser.MATCH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_() { return GetToken(SQLiteParser.NATURAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_() { return GetToken(SQLiteParser.NO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(SQLiteParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL_() { return GetToken(SQLiteParser.NOTNULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(SQLiteParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_() { return GetToken(SQLiteParser.OF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_() { return GetToken(SQLiteParser.OFFSET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(SQLiteParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(SQLiteParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(SQLiteParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_() { return GetToken(SQLiteParser.OUTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN_() { return GetToken(SQLiteParser.PLAN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_() { return GetToken(SQLiteParser.PRAGMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(SQLiteParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_() { return GetToken(SQLiteParser.QUERY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE_() { return GetToken(SQLiteParser.RAISE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_() { return GetToken(SQLiteParser.RECURSIVE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_() { return GetToken(SQLiteParser.REFERENCES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_() { return GetToken(SQLiteParser.REGEXP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX_() { return GetToken(SQLiteParser.REINDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_() { return GetToken(SQLiteParser.RELEASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_() { return GetToken(SQLiteParser.RENAME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_() { return GetToken(SQLiteParser.REPLACE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_() { return GetToken(SQLiteParser.RESTRICT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_() { return GetToken(SQLiteParser.RIGHT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(SQLiteParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_() { return GetToken(SQLiteParser.ROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_() { return GetToken(SQLiteParser.ROWS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_() { return GetToken(SQLiteParser.SAVEPOINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_() { return GetToken(SQLiteParser.SELECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(SQLiteParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(SQLiteParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(SQLiteParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(SQLiteParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_() { return GetToken(SQLiteParser.THEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(SQLiteParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(SQLiteParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_() { return GetToken(SQLiteParser.TRIGGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_() { return GetToken(SQLiteParser.UNION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(SQLiteParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(SQLiteParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_() { return GetToken(SQLiteParser.USING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM_() { return GetToken(SQLiteParser.VACUUM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_() { return GetToken(SQLiteParser.VALUES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(SQLiteParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_() { return GetToken(SQLiteParser.VIRTUAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_() { return GetToken(SQLiteParser.WHEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(SQLiteParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(SQLiteParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_() { return GetToken(SQLiteParser.WITHOUT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE_() { return GetToken(SQLiteParser.FIRST_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_() { return GetToken(SQLiteParser.OVER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_() { return GetToken(SQLiteParser.PARTITION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_() { return GetToken(SQLiteParser.RANGE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_() { return GetToken(SQLiteParser.PRECEDING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_() { return GetToken(SQLiteParser.UNBOUNDED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_() { return GetToken(SQLiteParser.CURRENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_() { return GetToken(SQLiteParser.FOLLOWING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST_() { return GetToken(SQLiteParser.CUME_DIST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK_() { return GetToken(SQLiteParser.DENSE_RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG_() { return GetToken(SQLiteParser.LAG_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE_() { return GetToken(SQLiteParser.LAST_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD_() { return GetToken(SQLiteParser.LEAD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE_() { return GetToken(SQLiteParser.NTH_VALUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE_() { return GetToken(SQLiteParser.NTILE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK_() { return GetToken(SQLiteParser.PERCENT_RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK_() { return GetToken(SQLiteParser.RANK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER_() { return GetToken(SQLiteParser.ROW_NUMBER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED_() { return GetToken(SQLiteParser.GENERATED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_() { return GetToken(SQLiteParser.ALWAYS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED_() { return GetToken(SQLiteParser.STORED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_() { return GetToken(SQLiteParser.TRUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_() { return GetToken(SQLiteParser.FALSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW_() { return GetToken(SQLiteParser.WINDOW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_() { return GetToken(SQLiteParser.NULLS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_() { return GetToken(SQLiteParser.FIRST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_() { return GetToken(SQLiteParser.LAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_() { return GetToken(SQLiteParser.FILTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS_() { return GetToken(SQLiteParser.GROUPS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_() { return GetToken(SQLiteParser.EXCLUDE_, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 170, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT_) | (1L << ACTION_) | (1L << ADD_) | (1L << AFTER_) | (1L << ALL_) | (1L << ALTER_) | (1L << ANALYZE_) | (1L << AND_) | (1L << AS_) | (1L << ASC_) | (1L << ATTACH_) | (1L << AUTOINCREMENT_) | (1L << BEFORE_) | (1L << BEGIN_) | (1L << BETWEEN_) | (1L << BY_) | (1L << CASCADE_) | (1L << CASE_) | (1L << CAST_) | (1L << CHECK_) | (1L << COLLATE_) | (1L << COLUMN_) | (1L << COMMIT_) | (1L << CONFLICT_) | (1L << CONSTRAINT_) | (1L << CREATE_) | (1L << CROSS_) | (1L << CURRENT_DATE_) | (1L << CURRENT_TIME_) | (1L << CURRENT_TIMESTAMP_) | (1L << DATABASE_) | (1L << DEFAULT_) | (1L << DEFERRABLE_) | (1L << DEFERRED_) | (1L << DELETE_) | (1L << DESC_) | (1L << DETACH_) | (1L << DISTINCT_) | (1L << DROP_))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EACH_ - 64)) | (1L << (ELSE_ - 64)) | (1L << (END_ - 64)) | (1L << (ESCAPE_ - 64)) | (1L << (EXCEPT_ - 64)) | (1L << (EXCLUSIVE_ - 64)) | (1L << (EXISTS_ - 64)) | (1L << (EXPLAIN_ - 64)) | (1L << (FAIL_ - 64)) | (1L << (FOR_ - 64)) | (1L << (FOREIGN_ - 64)) | (1L << (FROM_ - 64)) | (1L << (FULL_ - 64)) | (1L << (GLOB_ - 64)) | (1L << (GROUP_ - 64)) | (1L << (HAVING_ - 64)) | (1L << (IF_ - 64)) | (1L << (IGNORE_ - 64)) | (1L << (IMMEDIATE_ - 64)) | (1L << (IN_ - 64)) | (1L << (INDEX_ - 64)) | (1L << (INDEXED_ - 64)) | (1L << (INITIALLY_ - 64)) | (1L << (INNER_ - 64)) | (1L << (INSERT_ - 64)) | (1L << (INSTEAD_ - 64)) | (1L << (INTERSECT_ - 64)) | (1L << (INTO_ - 64)) | (1L << (IS_ - 64)) | (1L << (ISNULL_ - 64)) | (1L << (JOIN_ - 64)) | (1L << (KEY_ - 64)) | (1L << (LEFT_ - 64)) | (1L << (LIKE_ - 64)) | (1L << (LIMIT_ - 64)) | (1L << (MATCH_ - 64)) | (1L << (NATURAL_ - 64)) | (1L << (NO_ - 64)) | (1L << (NOT_ - 64)) | (1L << (NOTNULL_ - 64)) | (1L << (NULL_ - 64)) | (1L << (OF_ - 64)) | (1L << (OFFSET_ - 64)) | (1L << (ON_ - 64)) | (1L << (OR_ - 64)) | (1L << (ORDER_ - 64)) | (1L << (OUTER_ - 64)) | (1L << (PLAN_ - 64)) | (1L << (PRAGMA_ - 64)) | (1L << (PRIMARY_ - 64)) | (1L << (QUERY_ - 64)) | (1L << (RAISE_ - 64)) | (1L << (RECURSIVE_ - 64)) | (1L << (REFERENCES_ - 64)) | (1L << (REGEXP_ - 64)) | (1L << (REINDEX_ - 64)) | (1L << (RELEASE_ - 64)) | (1L << (RENAME_ - 64)) | (1L << (REPLACE_ - 64)) | (1L << (RESTRICT_ - 64)) | (1L << (RIGHT_ - 64)) | (1L << (ROLLBACK_ - 64)) | (1L << (ROW_ - 64)) | (1L << (ROWS_ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT_ - 128)) | (1L << (SELECT_ - 128)) | (1L << (SET_ - 128)) | (1L << (TABLE_ - 128)) | (1L << (TEMP_ - 128)) | (1L << (TEMPORARY_ - 128)) | (1L << (THEN_ - 128)) | (1L << (TO_ - 128)) | (1L << (TRANSACTION_ - 128)) | (1L << (TRIGGER_ - 128)) | (1L << (UNION_ - 128)) | (1L << (UNIQUE_ - 128)) | (1L << (UPDATE_ - 128)) | (1L << (USING_ - 128)) | (1L << (VACUUM_ - 128)) | (1L << (VALUES_ - 128)) | (1L << (VIEW_ - 128)) | (1L << (VIRTUAL_ - 128)) | (1L << (WHEN_ - 128)) | (1L << (WHERE_ - 128)) | (1L << (WITH_ - 128)) | (1L << (WITHOUT_ - 128)) | (1L << (FIRST_VALUE_ - 128)) | (1L << (OVER_ - 128)) | (1L << (PARTITION_ - 128)) | (1L << (RANGE_ - 128)) | (1L << (PRECEDING_ - 128)) | (1L << (UNBOUNDED_ - 128)) | (1L << (CURRENT_ - 128)) | (1L << (FOLLOWING_ - 128)) | (1L << (CUME_DIST_ - 128)) | (1L << (DENSE_RANK_ - 128)) | (1L << (LAG_ - 128)) | (1L << (LAST_VALUE_ - 128)) | (1L << (LEAD_ - 128)) | (1L << (NTH_VALUE_ - 128)) | (1L << (NTILE_ - 128)) | (1L << (PERCENT_RANK_ - 128)) | (1L << (RANK_ - 128)) | (1L << (ROW_NUMBER_ - 128)) | (1L << (GENERATED_ - 128)) | (1L << (ALWAYS_ - 128)) | (1L << (STORED_ - 128)) | (1L << (TRUE_ - 128)) | (1L << (FALSE_ - 128)) | (1L << (WINDOW_ - 128)) | (1L << (NULLS_ - 128)) | (1L << (FIRST_ - 128)) | (1L << (LAST_ - 128)) | (1L << (FILTER_ - 128)) | (1L << (GROUPS_ - 128)) | (1L << (EXCLUDE_ - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 172, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1983;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 174, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 176, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 178, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(Context, State);
		EnterRule(_localctx, 182, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1993;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 184, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 186, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(Context, State);
		EnterRule(_localctx, 188, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 190, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 192, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 194, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 196, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2007;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(Context, State);
		EnterRule(_localctx, 198, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 200, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 202, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2013;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(Context, State);
		EnterRule(_localctx, 204, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 206, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 208, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2019;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public FilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilenameContext filename() {
		FilenameContext _localctx = new FilenameContext(Context, State);
		EnterRule(_localctx, 210, RULE_filename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Base_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_window_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_window_nameContext base_window_name() {
		Base_window_nameContext _localctx = new Base_window_nameContext(Context, State);
		EnterRule(_localctx, 212, RULE_base_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Simple_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_funcContext simple_func() {
		Simple_funcContext _localctx = new Simple_funcContext(Context, State);
		EnterRule(_localctx, 214, RULE_simple_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Aggregate_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_funcContext aggregate_func() {
		Aggregate_funcContext _localctx = new Aggregate_funcContext(Context, State);
		EnterRule(_localctx, 216, RULE_aggregate_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_nameContext table_function_name() {
		Table_function_nameContext _localctx = new Table_function_nameContext(Context, State);
		EnterRule(_localctx, 218, RULE_table_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2029;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 220, RULE_any_name);
		try {
			State = 2038;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2031;
				Match(IDENTIFIER);
				}
				break;
			case ABORT_:
			case ACTION_:
			case ADD_:
			case AFTER_:
			case ALL_:
			case ALTER_:
			case ANALYZE_:
			case AND_:
			case AS_:
			case ASC_:
			case ATTACH_:
			case AUTOINCREMENT_:
			case BEFORE_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLLATE_:
			case COLUMN_:
			case COMMIT_:
			case CONFLICT_:
			case CONSTRAINT_:
			case CREATE_:
			case CROSS_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DEFERRABLE_:
			case DEFERRED_:
			case DELETE_:
			case DESC_:
			case DETACH_:
			case DISTINCT_:
			case DROP_:
			case EACH_:
			case ELSE_:
			case END_:
			case ESCAPE_:
			case EXCEPT_:
			case EXCLUSIVE_:
			case EXISTS_:
			case EXPLAIN_:
			case FAIL_:
			case FOR_:
			case FOREIGN_:
			case FROM_:
			case FULL_:
			case GLOB_:
			case GROUP_:
			case HAVING_:
			case IF_:
			case IGNORE_:
			case IMMEDIATE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INITIALLY_:
			case INNER_:
			case INSERT_:
			case INSTEAD_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case ISNULL_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case LIKE_:
			case LIMIT_:
			case MATCH_:
			case NATURAL_:
			case NO_:
			case NOT_:
			case NOTNULL_:
			case NULL_:
			case OF_:
			case OFFSET_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PLAN_:
			case PRAGMA_:
			case PRIMARY_:
			case QUERY_:
			case RAISE_:
			case RECURSIVE_:
			case REFERENCES_:
			case REGEXP_:
			case REINDEX_:
			case RELEASE_:
			case RENAME_:
			case REPLACE_:
			case RESTRICT_:
			case RIGHT_:
			case ROLLBACK_:
			case ROW_:
			case ROWS_:
			case SAVEPOINT_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case TRIGGER_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case USING_:
			case VACUUM_:
			case VALUES_:
			case VIEW_:
			case VIRTUAL_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case WITHOUT_:
			case FIRST_VALUE_:
			case OVER_:
			case PARTITION_:
			case RANGE_:
			case PRECEDING_:
			case UNBOUNDED_:
			case CURRENT_:
			case FOLLOWING_:
			case CUME_DIST_:
			case DENSE_RANK_:
			case LAG_:
			case LAST_VALUE_:
			case LEAD_:
			case NTH_VALUE_:
			case NTILE_:
			case PERCENT_RANK_:
			case RANK_:
			case ROW_NUMBER_:
			case GENERATED_:
			case ALWAYS_:
			case STORED_:
			case TRUE_:
			case FALSE_:
			case WINDOW_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case FILTER_:
			case GROUPS_:
			case EXCLUDE_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2032;
				keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2033;
				Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2034;
				Match(OPEN_PAR);
				State = 2035;
				any_name();
				State = 2036;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC2', '\x7FB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x3', '\x2', '\a', '\x2', '\xE2', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xE5', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\a', '\x3', '\xEA', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xED', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\xF1', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xF2', '\x3', '\x3', '\a', '\x3', '\xF6', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xF9', '\v', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\xFC', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xFF', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x104', 
		'\n', '\x4', '\x5', '\x4', '\x106', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x120', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x127', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x12E', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x134', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x138', 
		'\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x13B', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x142', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x145', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x149', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x151', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x155', '\n', '\b', '\x5', '\b', '\x157', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x15B', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x15F', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x163', 
		'\n', '\n', '\x3', '\n', '\x5', '\n', '\x166', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x16D', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x173', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x179', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x17E', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\x187', '\n', '\r', '\f', '\r', '\xE', '\r', '\x18A', '\v', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x18F', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x193', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x197', '\n', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x19A', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x19E', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x1A4', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x1A9', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x1B0', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x1B3', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x1B7', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x1BA', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x1BF', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x1C3', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1C7', 
		'\n', '\x10', '\x3', '\x10', '\a', '\x10', '\x1CA', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x1CD', '\v', '\x10', '\x3', '\x11', '\x6', '\x11', 
		'\x1D0', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x1D1', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x1DE', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1E2', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x1E7', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1EA', '\n', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x1ED', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x1F2', '\n', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x1F5', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x203', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x20A', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x211', '\n', '\x12', '\x5', '\x12', '\x213', '\n', '\x12', '\x3', 
		'\x13', '\x5', '\x13', '\x216', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x21C', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x221', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x227', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x22A', '\v', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x22E', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\a', '\x14', '\x23B', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 
		'\x23E', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x243', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x24B', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x24E', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x252', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x25C', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\x260', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x263', '\v', '\x15', '\x3', '\x15', '\x5', '\x15', '\x266', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x26B', '\n', '\x15', '\x5', '\x15', '\x26D', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x275', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x27B', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x280', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x287', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x290', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x293', '\v', '\x17', 
		'\x5', '\x17', '\x295', '\n', '\x17', '\x5', '\x17', '\x297', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x29E', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x2A2', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x2A9', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x6', '\x17', '\x2AD', '\n', '\x17', '\r', '\x17', 
		'\xE', '\x17', '\x2AE', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x2B5', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2BB', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2C0', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x2C7', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x2CA', 
		'\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2CE', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x2D9', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x2DE', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x2E7', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x2EA', '\v', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x2EE', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x2F2', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x300', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x303', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x30A', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\x30D', '\v', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x311', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x319', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x323', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x326', '\v', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x32A', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x5', '\x1E', '\x332', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x339', 
		'\n', '\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x33C', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x343', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x346', 
		'\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x349', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x34D', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x355', '\n', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x35A', '\n', '!', 
		'\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x364', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x369', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x372', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\a', '\"', '\x377', '\n', '\"', '\f', '\"', '\xE', '\"', 
		'\x37A', '\v', '\"', '\x3', '\"', '\x5', '\"', '\x37D', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x381', '\n', '\"', '\x3', '\"', '\x5', 
		'\"', '\x384', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x38A', '\n', '\"', '\f', '\"', '\xE', '\"', '\x38D', 
		'\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x399', '\n', '\"', '\x3', '\"', '\x5', '\"', '\x39C', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x3A4', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x6', '\"', '\x3AB', '\n', '\"', 
		'\r', '\"', '\xE', '\"', '\x3AC', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x3B1', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x3B6', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3D4', '\n', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3E0', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3E5', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x3F1', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x3F7', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3FE', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x402', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x40A', '\n', '\"', '\f', '\"', '\xE', '\"', '\x40D', '\v', '\"', '\x5', 
		'\"', '\x40F', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x415', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x41B', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x422', '\n', 
		'\"', '\f', '\"', '\xE', '\"', '\x425', '\v', '\"', '\x5', '\"', '\x427', 
		'\n', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x42B', '\n', '\"', 
		'\a', '\"', '\x42D', '\n', '\"', '\f', '\"', '\xE', '\"', '\x430', '\v', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x438', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x5', '%', '\x43F', '\n', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x446', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x44C', '\n', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x451', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x457', '\n', 
		'%', '\f', '%', '\xE', '%', '\x45A', '\v', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x45E', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\a', '%', '\x465', '\n', '%', '\f', '%', '\xE', '%', 
		'\x468', '\v', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\a', '%', '\x470', '\n', '%', '\f', '%', '\xE', '%', 
		'\x473', '\v', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x477', '\n', 
		'%', '\f', '%', '\xE', '%', '\x47A', '\v', '%', '\x3', '%', '\x5', '%', 
		'\x47D', '\n', '%', '\x3', '%', '\x5', '%', '\x480', '\n', '%', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x484', '\n', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x48C', '\n', 
		'&', '\f', '&', '\xE', '&', '\x48F', '\v', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x494', '\n', '&', '\x5', '&', '\x496', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x49E', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x5', '&', '\x4A5', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\a', '&', '\x4AA', '\n', '&', '\f', '&', '\xE', '&', 
		'\x4AD', '\v', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x4B1', '\n', 
		'&', '\x5', '&', '\x4B3', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x4B9', '\n', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x4C2', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x4C7', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x4CE', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x4D2', '\n', ')', '\x5', ')', '\x4D4', '\n', ')', '\x3', 
		'*', '\x5', '*', '\x4D7', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\a', '*', '\x4DD', '\n', '*', '\f', '*', '\xE', '*', '\x4E0', 
		'\v', '*', '\x3', '*', '\x5', '*', '\x4E3', '\n', '*', '\x3', '*', '\x5', 
		'*', '\x4E6', '\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x5', '+', '\x4EC', '\n', '+', '\a', '+', '\x4EE', '\n', '+', '\f', '+', 
		'\xE', '+', '\x4F1', '\v', '+', '\x3', ',', '\x3', ',', '\x5', ',', '\x4F5', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x4FA', '\n', 
		',', '\f', ',', '\xE', ',', '\x4FD', '\v', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\a', ',', '\x503', '\n', ',', '\f', ',', '\xE', 
		',', '\x506', '\v', ',', '\x3', ',', '\x5', ',', '\x509', '\n', ',', '\x5', 
		',', '\x50B', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x50F', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\a', ',', '\x516', '\n', ',', '\f', ',', '\xE', ',', '\x519', '\v', ',', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x51D', '\n', ',', '\x5', ',', '\x51F', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x52A', '\n', 
		',', '\f', ',', '\xE', ',', '\x52D', '\v', ',', '\x5', ',', '\x52F', '\n', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x536', '\n', ',', '\f', ',', '\xE', ',', '\x539', '\v', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x541', '\n', ',', '\f', ',', '\xE', ',', '\x544', '\v', ',', '\x3', 
		',', '\x3', ',', '\a', ',', '\x548', '\n', ',', '\f', ',', '\xE', ',', 
		'\x54B', '\v', ',', '\x5', ',', '\x54D', '\n', ',', '\x3', '-', '\x3', 
		'-', '\x3', '.', '\x5', '.', '\x552', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x556', '\n', '.', '\x3', '.', '\x5', '.', '\x559', '\n', 
		'.', '\x3', '/', '\x5', '/', '\x55C', '\n', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x5', '/', '\x561', '\n', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x565', '\n', '/', '\x3', '/', '\x6', '/', '\x568', '\n', '/', '\r', 
		'/', '\xE', '/', '\x569', '\x3', '/', '\x5', '/', '\x56D', '\n', '/', 
		'\x3', '/', '\x5', '/', '\x570', '\n', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x575', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x579', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x57C', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x583', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x588', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', 
		'\x30', '\x58F', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x592', '\v', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x596', '\n', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x599', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x59F', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x5A2', '\v', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x5A5', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x5AD', '\n', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x5B0', '\n', '\x30', '\x5', '\x30', 
		'\x5B2', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x5BB', 
		'\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x5BE', '\n', '\x31', '\x5', 
		'\x31', '\x5C0', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x5C4', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x5C8', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x5CC', '\n', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x5CF', '\n', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\a', '\x33', '\x5D8', '\n', '\x33', '\f', '\x33', '\xE', 
		'\x33', '\x5DB', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x5DF', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x5E3', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x5E7', '\n', 
		'\x34', '\x3', '\x35', '\x5', '\x35', '\x5EA', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x5EF', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x5F5', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x5FC', '\n', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\a', '\x35', '\x601', '\n', '\x35', '\f', '\x35', 
		'\xE', '\x35', '\x604', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x608', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\a', '\x36', '\x60E', '\n', '\x36', '\f', '\x36', '\xE', 
		'\x36', '\x611', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x5', '\x37', '\x616', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x61B', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x621', '\n', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x628', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\a', '\x37', '\x62D', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x630', 
		'\v', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x634', '\n', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x637', '\n', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x63A', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x63F', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x644', '\n', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x64B', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x64F', '\n', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x653', '\n', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ';', '\x3', ';', '\x5', ';', '\x65D', '\n', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x664', '\n', ';', 
		'\f', ';', '\xE', ';', '\x667', '\v', ';', '\x5', ';', '\x669', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', 
		';', '\x670', '\n', ';', '\f', ';', '\xE', ';', '\x673', '\v', ';', '\x3', 
		';', '\x5', ';', '\x676', '\n', ';', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x67E', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x685', 
		'\n', '<', '\f', '<', '\xE', '<', '\x688', '\v', '<', '\x5', '<', '\x68A', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\a', '<', '\x691', '\n', '<', '\f', '<', '\xE', '<', '\x694', '\v', '<', 
		'\x5', '<', '\x696', '\n', '<', '\x3', '<', '\x5', '<', '\x699', '\n', 
		'<', '\x3', '<', '\x5', '<', '\x69C', '\n', '<', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x5', '=', '\x6A6', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x6AF', '\n', '>', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', 
		'\x6B6', '\n', '?', '\f', '?', '\xE', '?', '\x6B9', '\v', '?', '\x3', 
		'?', '\x5', '?', '\x6BC', '\n', '?', '\x3', '?', '\x3', '?', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x5', '@', '\x6C3', '\n', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\a', '@', '\x6C8', '\n', '@', '\f', '@', '\xE', '@', 
		'\x6CB', '\v', '@', '\x3', '@', '\x5', '@', '\x6CE', '\n', '@', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x6D2', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x6D9', 
		'\n', '\x41', '\f', '\x41', '\xE', '\x41', '\x6DC', '\v', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x6DF', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x6E3', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x6E8', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x6EC', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\a', '\x42', '\x6F1', '\n', '\x42', '\f', '\x42', '\xE', '\x42', 
		'\x6F4', '\v', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\a', '\x43', '\x6FB', '\n', '\x43', '\f', '\x43', 
		'\xE', '\x43', '\x6FE', '\v', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x704', '\n', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x709', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x70C', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x710', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x71E', '\n', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x72A', '\n', 
		'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x5', 'I', '\x733', '\n', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x73C', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x740', '\n', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x74A', '\n', 'J', '\x3', 'J', 
		'\x5', 'J', '\x74D', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x756', '\n', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x5', 'J', '\x75F', '\n', 'J', '\x3', 'J', '\x5', 'J', '\x762', 
		'\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x768', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x5', 'J', '\x776', '\n', 'J', '\x3', 'J', '\x3', 'J', 
		'\x5', 'J', '\x77A', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x785', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x78A', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x6', 'M', '\x795', 
		'\n', 'M', '\r', 'M', '\xE', 'M', '\x796', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x6', 'N', '\x79C', '\n', 'N', '\r', 'N', '\xE', 'N', '\x79D', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x5', 
		'P', '\x7A6', '\n', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', 
		'\x7AB', '\n', 'P', '\a', 'P', '\x7AD', '\n', 'P', '\f', 'P', '\xE', 'P', 
		'\x7B0', '\v', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x7BC', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', 
		'\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', 
		'\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 
		'k', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 
		'n', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x7F9', '\n', 'p', 
		'\x3', 'p', '\x4', '\x1B1', '\x1D1', '\x3', '\x42', 'q', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\xDA', '\xDC', '\xDE', '\x2', '\x1E', '\x5', '\x2', '<', '<', 'G', 'G', 
		'T', 'T', '\x4', '\x2', '\x31', '\x31', '\x44', '\x44', '\x3', '\x2', 
		'\x86', '\x87', '\x4', '\x2', '\x93', '\x93', '\xAC', '\xAC', '\x3', '\x2', 
		'\n', '\v', '\x4', '\x2', '=', '=', '\x8E', '\x8E', '\x4', '\x2', ':', 
		':', 'j', 'j', '\x4', '\x2', '<', '<', 'T', 'T', '\a', '\x2', '\x1B', 
		'\x1B', 'J', 'J', 'S', 'S', '|', '|', '\x7F', '\x7F', '\x6', '\x2', 'V', 
		'V', '\x85', '\x85', '\x8B', '\x8B', '\x92', '\x92', '\x4', '\x2', '\t', 
		'\t', '\xE', '\xF', '\x3', '\x2', '\x10', '\x13', '\x3', '\x2', '\x14', 
		'\x17', '\x6', '\x2', 'O', 'O', '\x63', '\x63', '\x65', '\x65', 'x', 'x', 
		'\x5', '\x2', '\x1B', '\x1B', 'J', 'J', '\x7F', '\x7F', '\a', '\x2', '\x36', 
		'\x38', 'j', 'j', '\xAD', '\xAE', '\xBB', '\xBB', '\xBD', '\xBE', '\x4', 
		'\x2', '\x1F', '\x1F', '@', '@', '\x5', '\x2', '\x81', '\x81', '\x9B', 
		'\x9B', '\xB4', '\xB4', '\x4', '\x2', '\a', '\a', 'l', 'l', '\x3', '\x2', 
		'\xB1', '\xB2', '\x4', '\x2', '$', '$', '>', '>', '\x4', '\x2', '\x98', 
		'\x98', '\xA3', '\xA3', '\x4', '\x2', '\xA0', '\xA0', '\xA7', '\xA7', 
		'\x4', '\x2', '\xA1', '\xA1', '\xA8', '\xA9', '\x4', '\x2', '\xA2', '\xA2', 
		'\xA4', '\xA4', '\x4', '\x2', '\n', '\f', 'h', 'h', '\x4', '\x2', '\xBA', 
		'\xBA', '\xBD', '\xBD', '\x3', '\x2', '\x1B', '\xB5', '\x2', '\x90F', 
		'\x2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x105', '\x3', '\x2', '\x2', '\x2', '\b', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x146', '\x3', '\x2', '\x2', '\x2', '\xE', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x158', '\x3', '\x2', '\x2', '\x2', '\x12', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x170', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x192', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\"', '\x1E1', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x215', '\x3', '\x2', '\x2', '\x2', '&', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x26E', '\x3', '\x2', '\x2', '\x2', ',', '\x272', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x30', '\x2D2', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x304', '\x3', '\x2', '\x2', '\x2', '\x36', '\x312', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x31D', '\x3', '\x2', '\x2', '\x2', ':', '\x331', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x33B', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x34A', '\x3', '\x2', '\x2', '\x2', '@', '\x350', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x431', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x43B', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x483', '\x3', '\x2', '\x2', '\x2', 'J', '\x485', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x4B4', '\x3', '\x2', '\x2', '\x2', 'N', '\x4C6', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x4D6', '\x3', '\x2', '\x2', '\x2', 'T', '\x4E7', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x54C', '\x3', '\x2', '\x2', '\x2', 'X', '\x54E', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x551', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x55B', '\x3', '\x2', '\x2', '\x2', '^', '\x5B1', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x5CE', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x5E6', '\x3', '\x2', '\x2', '\x2', 'h', '\x5E9', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x609', '\x3', '\x2', '\x2', '\x2', 'l', '\x615', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x63E', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x64C', '\x3', '\x2', '\x2', '\x2', 'r', '\x654', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x65A', '\x3', '\x2', '\x2', '\x2', 'v', '\x679', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x69D', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x6A7', '\x3', '\x2', '\x2', '\x2', '|', '\x6B0', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x80', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x6E9', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x86', '\x6FF', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x705', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x711', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x71D', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x729', '\x3', '\x2', '\x2', '\x2', '\x90', '\x732', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x789', '\x3', '\x2', '\x2', '\x2', '\x94', '\x78B', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x78E', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x791', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x798', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x7A3', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x7B1', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x7B3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x7B5', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x7BB', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x7BD', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x7C1', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x7C3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x7C5', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x7C7', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x7CB', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x7CF', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x7D1', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x7D3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x7D5', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x7D9', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x7DB', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x7DF', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x7E3', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\x7E5', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x7E9', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x7ED', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\x7EF', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', '\x4', 
		'\x3', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\a', '\x2', '\x2', '\x3', '\xE7', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEA', '\a', '\x3', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF7', '\x5', '\x6', '\x4', '\x2', '\xEF', '\xF1', 
		'\a', '\x3', '\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x6', '\x4', '\x2', 
		'\xF5', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\x3', 
		'\x2', '\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', 
		'\a', 'I', '\x2', '\x2', '\x101', '\x102', '\a', 't', '\x2', '\x2', '\x102', 
		'\x104', '\a', 'q', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x120', '\x5', '\b', '\x5', '\x2', '\x108', 
		'\x120', '\x5', '\n', '\x6', '\x2', '\x109', '\x120', '\x5', '\f', '\a', 
		'\x2', '\x10A', '\x120', '\x5', '\xE', '\b', '\x2', '\x10B', '\x120', 
		'\x5', '\x10', '\t', '\x2', '\x10C', '\x120', '\x5', '\x18', '\r', '\x2', 
		'\x10D', '\x120', '\x5', '\x1C', '\xF', '\x2', '\x10E', '\x120', '\x5', 
		',', '\x17', '\x2', '\x10F', '\x120', '\x5', '.', '\x18', '\x2', '\x110', 
		'\x120', '\x5', '\x30', '\x19', '\x2', '\x111', '\x120', '\x5', ':', '\x1E', 
		'\x2', '\x112', '\x120', '\x5', '<', '\x1F', '\x2', '\x113', '\x120', 
		'\x5', '>', ' ', '\x2', '\x114', '\x120', '\x5', '@', '!', '\x2', '\x115', 
		'\x120', '\x5', 'H', '%', '\x2', '\x116', '\x120', '\x5', 'L', '\'', '\x2', 
		'\x117', '\x120', '\x5', 'P', ')', '\x2', '\x118', '\x120', '\x5', '\x16', 
		'\f', '\x2', '\x119', '\x120', '\x5', '\x12', '\n', '\x2', '\x11A', '\x120', 
		'\x5', '\x14', '\v', '\x2', '\x11B', '\x120', '\x5', 'R', '*', '\x2', 
		'\x11C', '\x120', '\x5', 'h', '\x35', '\x2', '\x11D', '\x120', '\x5', 
		'l', '\x37', '\x2', '\x11E', '\x120', '\x5', 'p', '\x39', '\x2', '\x11F', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x109', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x114', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', ' ', '\x2', 
		'\x2', '\x122', '\x126', '\a', '\x85', '\x2', '\x2', '\x123', '\x124', 
		'\x5', '\xB2', 'Z', '\x2', '\x124', '\x125', '\a', '\x4', '\x2', '\x2', 
		'\x125', '\x127', '\x3', '\x2', '\x2', '\x2', '\x126', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x13A', '\x5', '\xB4', 
		'[', '\x2', '\x129', '\x133', '\a', '{', '\x2', '\x2', '\x12A', '\x12B', 
		'\a', '\x89', '\x2', '\x2', '\x12B', '\x134', '\x5', '\xB8', ']', '\x2', 
		'\x12C', '\x12E', '\a', '\x30', '\x2', '\x2', '\x12D', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x5', '\xBA', 
		'^', '\x2', '\x130', '\x131', '\a', '\x89', '\x2', '\x2', '\x131', '\x132', 
		'\x5', '\xBA', '^', '\x2', '\x132', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x133', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x137', '\a', '\x1D', '\x2', '\x2', '\x136', '\x138', '\a', '\x30', '\x2', 
		'\x2', '\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13B', '\x5', '\x1E', '\x10', '\x2', '\x13A', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x144', '\a', '!', '\x2', 
		'\x2', '\x13D', '\x145', '\x5', '\xB2', 'Z', '\x2', '\x13E', '\x13F', 
		'\x5', '\xB2', 'Z', '\x2', '\x13F', '\x140', '\a', '\x4', '\x2', '\x2', 
		'\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', '\x5', '\xB6', 
		'\\', '\x2', '\x144', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x144', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\v', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', '\a', '%', 
		'\x2', '\x2', '\x147', '\x149', '\a', '\x39', '\x2', '\x2', '\x148', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x5', 
		'\x42', '\"', '\x2', '\x14B', '\x14C', '\a', '#', '\x2', '\x2', '\x14C', 
		'\x14D', '\x5', '\xB2', 'Z', '\x2', '\x14D', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x150', '\a', '(', '\x2', '\x2', '\x14F', '\x151', '\t', 
		'\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x154', '\a', '\x8A', '\x2', '\x2', '\x153', '\x155', 
		'\x5', '\xCE', 'h', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x152', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x15A', '\t', '\x3', '\x2', '\x2', '\x159', '\x15B', 
		'\a', '\x8A', '\x2', '\x2', '\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15E', '\a', '\x7F', '\x2', '\x2', '\x15D', 
		'\x15F', '\a', '\x8A', '\x2', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\a', '\x89', '\x2', '\x2', 
		'\x161', '\x163', '\a', '\x82', '\x2', '\x2', '\x162', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x166', '\x5', '\xCA', 
		'\x66', '\x2', '\x165', '\x160', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x168', '\a', '\x82', '\x2', '\x2', '\x168', '\x169', 
		'\x5', '\xCA', '\x66', '\x2', '\x169', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16C', '\a', 'z', '\x2', '\x2', '\x16B', '\x16D', '\a', '\x82', 
		'\x2', '\x2', '\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x5', '\xCA', '\x66', '\x2', '\x16F', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x172', '\a', '\x34', '\x2', '\x2', '\x171', 
		'\x173', '\a', '\x8D', '\x2', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x178', '\a', 'V', '\x2', '\x2', 
		'\x175', '\x176', '\a', 'R', '\x2', '\x2', '\x176', '\x177', '\a', 'h', 
		'\x2', '\x2', '\x177', '\x179', '\a', 'H', '\x2', '\x2', '\x178', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x5', 
		'\xB2', 'Z', '\x2', '\x17B', '\x17C', '\a', '\x4', '\x2', '\x2', '\x17C', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x5', '\xC0', '\x61', '\x2', 
		'\x180', '\x181', '\a', 'm', '\x2', '\x2', '\x181', '\x182', '\x5', '\xB4', 
		'[', '\x2', '\x182', '\x183', '\a', '\x5', '\x2', '\x2', '\x183', '\x188', 
		'\x5', '\x1A', '\xE', '\x2', '\x184', '\x185', '\a', '\a', '\x2', '\x2', 
		'\x185', '\x187', '\x5', '\x1A', '\xE', '\x2', '\x186', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18E', '\a', '\x6', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '\x95', '\x2', '\x2', '\x18D', '\x18F', '\x5', 
		'\x42', '\"', '\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x193', '\x5', '\xBA', '^', '\x2', '\x191', '\x193', 
		'\x5', '\x42', '\"', '\x2', '\x192', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x195', '\a', '/', '\x2', '\x2', '\x195', 
		'\x197', '\x5', '\xBC', '_', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x19A', '\x5', '\x8A', '\x46', '\x2', 
		'\x199', '\x198', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19D', '\a', '\x34', '\x2', '\x2', '\x19C', '\x19E', '\t', '\x4', '\x2', 
		'\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A3', '\a', '\x85', '\x2', '\x2', '\x1A0', '\x1A1', '\a', 
		'R', '\x2', '\x2', '\x1A1', '\x1A2', '\a', 'h', '\x2', '\x2', '\x1A2', 
		'\x1A4', '\a', 'H', '\x2', '\x2', '\x1A3', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\xB2', 'Z', '\x2', 
		'\x1A6', '\x1A7', '\a', '\x4', '\x2', '\x2', '\x1A7', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1C2', '\x5', '\xB4', '[', '\x2', '\x1AB', '\x1AC', 
		'\a', '\x5', '\x2', '\x2', '\x1AC', '\x1B1', '\x5', '\x1E', '\x10', '\x2', 
		'\x1AD', '\x1AE', '\a', '\a', '\x2', '\x2', '\x1AE', '\x1B0', '\x5', '\x1E', 
		'\x10', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B0', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\a', '\a', '\x2', '\x2', '\x1B5', '\x1B7', '\x5', '&', 
		'\x14', '\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BE', '\a', '\x6', '\x2', '\x2', '\x1BC', '\x1BD', '\a', '\x97', 
		'\x2', '\x2', '\x1BD', '\x1BF', '\a', '\xBA', '\x2', '\x2', '\x1BE', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', 
		'#', '\x2', '\x2', '\x1C1', '\x1C3', '\x5', 'R', '*', '\x2', '\x1C2', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C6', 
		'\x5', '\xBA', '^', '\x2', '\x1C5', '\x1C7', '\x5', ' ', '\x11', '\x2', 
		'\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1CA', '\x5', '\"', '\x12', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '\xAE', 'X', '\x2', '\x1CF', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\a', '\x5', '\x2', '\x2', '\x1D4', '\x1D5', '\x5', 
		'$', '\x13', '\x2', '\x1D5', '\x1D6', '\a', '\x6', '\x2', '\x2', '\x1D6', 
		'\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x5', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x5', '$', '\x13', '\x2', '\x1D9', '\x1DA', 
		'\a', '\a', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', '$', '\x13', '\x2', 
		'\x1DB', '\x1DC', '\a', '\x6', '\x2', '\x2', '\x1DC', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '!', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', 
		'\x33', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', '\xAE', 'X', '\x2', '\x1E1', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x212', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\a', 's', '\x2', '\x2', '\x1E4', '\x1E6', '\a', '\x61', '\x2', '\x2', 
		'\x1E5', '\x1E7', '\x5', '\x8A', '\x46', '\x2', '\x1E6', '\x1E5', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', '*', '\x16', 
		'\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1ED', '\a', '&', '\x2', '\x2', '\x1EC', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', 'h', '\x2', '\x2', 
		'\x1EF', '\x1F2', '\a', 'j', '\x2', '\x2', '\x1F0', '\x1F2', '\a', '\x8D', 
		'\x2', '\x2', '\x1F1', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F5', '\x5', '*', '\x16', '\x2', '\x1F4', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '.', '\x2', 
		'\x2', '\x1F7', '\x1F8', '\a', '\x5', '\x2', '\x2', '\x1F8', '\x1F9', 
		'\x5', '\x42', '\"', '\x2', '\x1F9', '\x1FA', '\a', '\x6', '\x2', '\x2', 
		'\x1FA', '\x213', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x202', '\a', 
		':', '\x2', '\x2', '\x1FC', '\x203', '\x5', '$', '\x13', '\x2', '\x1FD', 
		'\x203', '\x5', '\x46', '$', '\x2', '\x1FE', '\x1FF', '\a', '\x5', '\x2', 
		'\x2', '\x1FF', '\x200', '\x5', '\x42', '\"', '\x2', '\x200', '\x201', 
		'\a', '\x6', '\x2', '\x2', '\x201', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x202', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\a', '/', '\x2', 
		'\x2', '\x205', '\x213', '\x5', '\xBC', '_', '\x2', '\x206', '\x213', 
		'\x5', '(', '\x15', '\x2', '\x207', '\x208', '\a', '\xAA', '\x2', '\x2', 
		'\x208', '\x20A', '\a', '\xAB', '\x2', '\x2', '\x209', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '#', '\x2', 
		'\x2', '\x20C', '\x20D', '\a', '\x5', '\x2', '\x2', '\x20D', '\x20E', 
		'\x5', '\x42', '\"', '\x2', '\x20E', '\x210', '\a', '\x6', '\x2', '\x2', 
		'\x20F', '\x211', '\t', '\x5', '\x2', '\x2', '\x210', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x212', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x212', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x204', '\x3', '\x2', '\x2', '\x2', '\x212', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x209', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216', '\t', '\x6', '\x2', 
		'\x2', '\x215', '\x214', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x218', '\a', '\xBB', '\x2', '\x2', '\x218', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x219', '\x21A', '\a', '\x33', '\x2', '\x2', '\x21A', '\x21C', 
		'\x5', '\xAE', 'X', '\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x242', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21E', '\a', 's', '\x2', '\x2', '\x21E', 
		'\x221', '\a', '\x61', '\x2', '\x2', '\x21F', '\x221', '\a', '\x8D', '\x2', 
		'\x2', '\x220', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\a', '\x5', '\x2', '\x2', '\x223', '\x228', '\x5', 
		'\x1A', '\xE', '\x2', '\x224', '\x225', '\a', '\a', '\x2', '\x2', '\x225', 
		'\x227', '\x5', '\x1A', '\xE', '\x2', '\x226', '\x224', '\x3', '\x2', 
		'\x2', '\x2', '\x227', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x228', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x22D', '\a', '\x6', '\x2', '\x2', '\x22C', 
		'\x22E', '\x5', '*', '\x16', '\x2', '\x22D', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', '.', '\x2', '\x2', 
		'\x230', '\x231', '\a', '\x5', '\x2', '\x2', '\x231', '\x232', '\x5', 
		'\x42', '\"', '\x2', '\x232', '\x233', '\a', '\x6', '\x2', '\x2', '\x233', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', 'L', '\x2', 
		'\x2', '\x235', '\x236', '\a', '\x61', '\x2', '\x2', '\x236', '\x237', 
		'\a', '\x5', '\x2', '\x2', '\x237', '\x23C', '\x5', '\xBA', '^', '\x2', 
		'\x238', '\x239', '\a', '\a', '\x2', '\x2', '\x239', '\x23B', '\x5', '\xBA', 
		'^', '\x2', '\x23A', '\x238', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23E', 
		'\x3', '\x2', '\x2', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23F', 
		'\x240', '\a', '\x6', '\x2', '\x2', '\x240', '\x241', '\x5', '(', '\x15', 
		'\x2', '\x241', '\x243', '\x3', '\x2', '\x2', '\x2', '\x242', '\x220', 
		'\x3', '\x2', '\x2', '\x2', '\x242', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x234', '\x3', '\x2', '\x2', '\x2', '\x243', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x245', '\a', 'w', '\x2', '\x2', '\x245', '\x251', 
		'\x5', '\xBE', '`', '\x2', '\x246', '\x247', '\a', '\x5', '\x2', '\x2', 
		'\x247', '\x24C', '\x5', '\xBA', '^', '\x2', '\x248', '\x249', '\a', '\a', 
		'\x2', '\x2', '\x249', '\x24B', '\x5', '\xBA', '^', '\x2', '\x24A', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x24C', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', '\x6', '\x2', 
		'\x2', '\x250', '\x252', '\x3', '\x2', '\x2', '\x2', '\x251', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x261', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\a', 
		'm', '\x2', '\x2', '\x254', '\x25B', '\t', '\a', '\x2', '\x2', '\x255', 
		'\x256', '\a', '\x84', '\x2', '\x2', '\x256', '\x25C', '\t', '\b', '\x2', 
		'\x2', '\x257', '\x25C', '\a', '+', '\x2', '\x2', '\x258', '\x25C', '\a', 
		'}', '\x2', '\x2', '\x259', '\x25A', '\a', 'g', '\x2', '\x2', '\x25A', 
		'\x25C', '\a', '\x1C', '\x2', '\x2', '\x25B', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x257', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x260', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\a', 
		'\x65', '\x2', '\x2', '\x25E', '\x260', '\x5', '\xAE', 'X', '\x2', '\x25F', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x260', '\x263', '\x3', '\x2', '\x2', '\x2', '\x261', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x262', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x263', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x266', '\a', 'h', '\x2', '\x2', '\x265', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267', '\x26A', 
		'\a', ';', '\x2', '\x2', '\x268', '\x269', '\a', 'X', '\x2', '\x2', '\x269', 
		'\x26B', '\t', '\t', '\x2', '\x2', '\x26A', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26D', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x26E', '\x26F', '\a', 'm', '\x2', '\x2', '\x26F', '\x270', 
		'\a', '\x32', '\x2', '\x2', '\x270', '\x271', '\t', '\n', '\x2', '\x2', 
		'\x271', '+', '\x3', '\x2', '\x2', '\x2', '\x272', '\x274', '\a', '\x34', 
		'\x2', '\x2', '\x273', '\x275', '\t', '\x4', '\x2', '\x2', '\x274', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x27A', '\a', 
		'\x8B', '\x2', '\x2', '\x277', '\x278', '\a', 'R', '\x2', '\x2', '\x278', 
		'\x279', '\a', 'h', '\x2', '\x2', '\x279', '\x27B', '\a', 'H', '\x2', 
		'\x2', '\x27A', '\x277', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x27C', '\x27D', '\x5', '\xB2', 'Z', '\x2', '\x27D', '\x27E', '\a', '\x4', 
		'\x2', '\x2', '\x27E', '\x280', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x281', '\x3', '\x2', '\x2', '\x2', '\x281', '\x286', '\x5', 
		'\xC2', '\x62', '\x2', '\x282', '\x287', '\a', '\'', '\x2', '\x2', '\x283', 
		'\x287', '\a', '\x1E', '\x2', '\x2', '\x284', '\x285', '\a', '[', '\x2', 
		'\x2', '\x285', '\x287', '\a', 'k', '\x2', '\x2', '\x286', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x283', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x286', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x296', '\x3', '\x2', '\x2', '\x2', '\x288', '\x297', 
		'\a', '=', '\x2', '\x2', '\x289', '\x297', '\a', 'Z', '\x2', '\x2', '\x28A', 
		'\x294', '\a', '\x8E', '\x2', '\x2', '\x28B', '\x28C', '\a', 'k', '\x2', 
		'\x2', '\x28C', '\x291', '\x5', '\xBA', '^', '\x2', '\x28D', '\x28E', 
		'\a', '\a', '\x2', '\x2', '\x28E', '\x290', '\x5', '\xBA', '^', '\x2', 
		'\x28F', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x290', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x291', '\x3', '\x2', '\x2', '\x2', '\x294', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\x295', '\x297', '\x3', '\x2', '\x2', '\x2', '\x296', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x289', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\x3', '\x2', '\x2', 
		'\x2', '\x298', '\x299', '\a', 'm', '\x2', '\x2', '\x299', '\x29D', '\x5', 
		'\xB4', '[', '\x2', '\x29A', '\x29B', '\a', 'K', '\x2', '\x2', '\x29B', 
		'\x29C', '\a', '\x42', '\x2', '\x2', '\x29C', '\x29E', '\a', '\x80', '\x2', 
		'\x2', '\x29D', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A0', '\a', '\x94', '\x2', '\x2', '\x2A0', '\x2A2', '\x5', 
		'\x42', '\"', '\x2', '\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2AC', '\a', '(', '\x2', '\x2', '\x2A4', '\x2A9', '\x5', 
		'h', '\x35', '\x2', '\x2A5', '\x2A9', '\x5', 'H', '%', '\x2', '\x2A6', 
		'\x2A9', '\x5', ':', '\x1E', '\x2', '\x2A7', '\x2A9', '\x5', 'R', '*', 
		'\x2', '\x2A8', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\x3', '\x2', '\x2', '\x2AB', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2AF', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B1', '\a', 
		'\x44', '\x2', '\x2', '\x2B1', '-', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x2B4', '\a', '\x34', '\x2', '\x2', '\x2B3', '\x2B5', '\t', '\x4', '\x2', 
		'\x2', '\x2B4', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2BA', '\a', '\x92', '\x2', '\x2', '\x2B7', '\x2B8', '\a', 
		'R', '\x2', '\x2', '\x2B8', '\x2B9', '\a', 'h', '\x2', '\x2', '\x2B9', 
		'\x2BB', '\a', 'H', '\x2', '\x2', '\x2BA', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x5', '\xB2', 'Z', '\x2', 
		'\x2BD', '\x2BE', '\a', '\x4', '\x2', '\x2', '\x2BE', '\x2C0', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BF', 
		'\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2CD', '\x5', '\xC4', '\x63', '\x2', '\x2C2', '\x2C3', 
		'\a', '\x5', '\x2', '\x2', '\x2C3', '\x2C8', '\x5', '\xBA', '^', '\x2', 
		'\x2C4', '\x2C5', '\a', '\a', '\x2', '\x2', '\x2C5', '\x2C7', '\x5', '\xBA', 
		'^', '\x2', '\x2C6', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2CA', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CB', 
		'\x2CC', '\a', '\x6', '\x2', '\x2', '\x2CC', '\x2CE', '\x3', '\x2', '\x2', 
		'\x2', '\x2CD', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', 
		'\x2CF', '\x2D0', '\a', '#', '\x2', '\x2', '\x2D0', '\x2D1', '\x5', 'R', 
		'*', '\x2', '\x2D1', '/', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D3', 
		'\a', '\x34', '\x2', '\x2', '\x2D3', '\x2D4', '\a', '\x93', '\x2', '\x2', 
		'\x2D4', '\x2D8', '\a', '\x85', '\x2', '\x2', '\x2D5', '\x2D6', '\a', 
		'R', '\x2', '\x2', '\x2D6', '\x2D7', '\a', 'h', '\x2', '\x2', '\x2D7', 
		'\x2D9', '\a', 'H', '\x2', '\x2', '\x2D8', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x5', '\xB2', 'Z', '\x2', 
		'\x2DB', '\x2DC', '\a', '\x4', '\x2', '\x2', '\x2DC', '\x2DE', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2DF', '\x2E0', '\x5', '\xB4', '[', '\x2', '\x2E0', '\x2E1', 
		'\a', '\x8F', '\x2', '\x2', '\x2E1', '\x2ED', '\x5', '\xC6', '\x64', '\x2', 
		'\x2E2', '\x2E3', '\a', '\x5', '\x2', '\x2', '\x2E3', '\x2E8', '\x5', 
		'\xA8', 'U', '\x2', '\x2E4', '\x2E5', '\a', '\a', '\x2', '\x2', '\x2E5', 
		'\x2E7', '\x5', '\xA8', 'U', '\x2', '\x2E6', '\x2E4', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E6', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2E9', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2EC', '\a', '\x6', '\x2', '\x2', '\x2EC', 
		'\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E2', '\x3', '\x2', '\x2', 
		'\x2', '\x2ED', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F1', '\a', '\x96', '\x2', '\x2', 
		'\x2F0', '\x2F2', '\a', 'v', '\x2', '\x2', '\x2F1', '\x2F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2F1', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\x5', '\x34', '\x1B', '\x2', 
		'\x2F4', '\x2F5', '\a', '#', '\x2', '\x2', '\x2F5', '\x2F6', '\a', '\x5', 
		'\x2', '\x2', '\x2F6', '\x2F7', '\x5', 'R', '*', '\x2', '\x2F7', '\x301', 
		'\a', '\x6', '\x2', '\x2', '\x2F8', '\x2F9', '\a', '\a', '\x2', '\x2', 
		'\x2F9', '\x2FA', '\x5', '\x34', '\x1B', '\x2', '\x2FA', '\x2FB', '\a', 
		'#', '\x2', '\x2', '\x2FB', '\x2FC', '\a', '\x5', '\x2', '\x2', '\x2FC', 
		'\x2FD', '\x5', 'R', '*', '\x2', '\x2FD', '\x2FE', '\a', '\x6', '\x2', 
		'\x2', '\x2FE', '\x300', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x301', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x302', '\x33', '\x3', '\x2', '\x2', '\x2', '\x303', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x304', '\x310', '\x5', '\xB4', 
		'[', '\x2', '\x305', '\x306', '\a', '\x5', '\x2', '\x2', '\x306', '\x30B', 
		'\x5', '\xBA', '^', '\x2', '\x307', '\x308', '\a', '\a', '\x2', '\x2', 
		'\x308', '\x30A', '\x5', '\xBA', '^', '\x2', '\x309', '\x307', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30C', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30B', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\a', '\x6', '\x2', '\x2', 
		'\x30F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x310', '\x305', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x311', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', '\x5', '\x34', '\x1B', 
		'\x2', '\x313', '\x314', '\a', '#', '\x2', '\x2', '\x314', '\x315', '\a', 
		'\x5', '\x2', '\x2', '\x315', '\x316', '\x5', '\xA0', 'Q', '\x2', '\x316', 
		'\x318', '\a', '\x8C', '\x2', '\x2', '\x317', '\x319', '\a', '\x1F', '\x2', 
		'\x2', '\x318', '\x317', '\x3', '\x2', '\x2', '\x2', '\x318', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x31B', '\x5', '\xA2', 'R', '\x2', '\x31B', '\x31C', '\a', '\x6', 
		'\x2', '\x2', '\x31C', '\x37', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x329', 
		'\x5', '\xB4', '[', '\x2', '\x31E', '\x31F', '\a', '\x5', '\x2', '\x2', 
		'\x31F', '\x324', '\x5', '\xBA', '^', '\x2', '\x320', '\x321', '\a', '\a', 
		'\x2', '\x2', '\x321', '\x323', '\x5', '\xBA', '^', '\x2', '\x322', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x323', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x324', '\x322', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x327', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x324', '\x3', '\x2', '\x2', '\x2', '\x327', '\x328', '\a', '\x6', '\x2', 
		'\x2', '\x328', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x329', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', '\x3', '\x2', '\x2', '\x2', 
		'\x32A', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', 
		'#', '\x2', '\x2', '\x32C', '\x32D', '\a', '\x5', '\x2', '\x2', '\x32D', 
		'\x32E', '\x5', 'R', '*', '\x2', '\x32E', '\x32F', '\a', '\x6', '\x2', 
		'\x2', '\x32F', '\x39', '\x3', '\x2', '\x2', '\x2', '\x330', '\x332', 
		'\x5', '\x32', '\x1A', '\x2', '\x331', '\x330', '\x3', '\x2', '\x2', '\x2', 
		'\x331', '\x332', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x333', '\x334', '\a', '=', '\x2', '\x2', '\x334', 
		'\x335', '\a', 'M', '\x2', '\x2', '\x335', '\x338', '\x5', 'n', '\x38', 
		'\x2', '\x336', '\x337', '\a', '\x95', '\x2', '\x2', '\x337', '\x339', 
		'\x5', '\x42', '\"', '\x2', '\x338', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x339', '\x3', '\x2', '\x2', '\x2', '\x339', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x33A', '\x33C', '\x5', '\x32', '\x1A', '\x2', '\x33B', 
		'\x33A', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', 
		'\a', '=', '\x2', '\x2', '\x33E', '\x33F', '\a', 'M', '\x2', '\x2', '\x33F', 
		'\x342', '\x5', 'n', '\x38', '\x2', '\x340', '\x341', '\a', '\x95', '\x2', 
		'\x2', '\x341', '\x343', '\x5', '\x42', '\"', '\x2', '\x342', '\x340', 
		'\x3', '\x2', '\x2', '\x2', '\x342', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x348', '\x3', '\x2', '\x2', '\x2', '\x344', '\x346', '\x5', 
		'\x84', '\x43', '\x2', '\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x345', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', 
		'\x2', '\x347', '\x349', '\x5', '\x86', '\x44', '\x2', '\x348', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', 
		'\x349', '=', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34C', '\a', '?', 
		'\x2', '\x2', '\x34B', '\x34D', '\a', '\x39', '\x2', '\x2', '\x34C', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\x5', 
		'\xB2', 'Z', '\x2', '\x34F', '?', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x351', '\a', '\x41', '\x2', '\x2', '\x351', '\x354', '\t', '\v', '\x2', 
		'\x2', '\x352', '\x353', '\a', 'R', '\x2', '\x2', '\x353', '\x355', '\a', 
		'H', '\x2', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x355', '\x359', '\x3', '\x2', '\x2', 
		'\x2', '\x356', '\x357', '\x5', '\xB2', 'Z', '\x2', '\x357', '\x358', 
		'\a', '\x4', '\x2', '\x2', '\x358', '\x35A', '\x3', '\x2', '\x2', '\x2', 
		'\x359', '\x356', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', 
		'\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\x5', '\xDE', 'p', '\x2', '\x35C', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x35E', '\b', '\"', '\x1', '\x2', '\x35E', '\x3B6', '\x5', 
		'\x46', '$', '\x2', '\x35F', '\x3B6', '\a', '\xBC', '\x2', '\x2', '\x360', 
		'\x361', '\x5', '\xB2', 'Z', '\x2', '\x361', '\x362', '\a', '\x4', '\x2', 
		'\x2', '\x362', '\x364', '\x3', '\x2', '\x2', '\x2', '\x363', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x363', '\x364', '\x3', '\x2', '\x2', '\x2', 
		'\x364', '\x365', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x5', 
		'\xB4', '[', '\x2', '\x366', '\x367', '\a', '\x4', '\x2', '\x2', '\x367', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x368', '\x363', '\x3', '\x2', '\x2', 
		'\x2', '\x368', '\x369', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', 
		'\x3', '\x2', '\x2', '\x2', '\x36A', '\x3B6', '\x5', '\xBA', '^', '\x2', 
		'\x36B', '\x36C', '\x5', '\xA4', 'S', '\x2', '\x36C', '\x36D', '\x5', 
		'\x42', '\"', '\x17', '\x36D', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36F', '\x5', '\xB0', 'Y', '\x2', '\x36F', '\x37C', '\a', '\x5', '\x2', 
		'\x2', '\x370', '\x372', '\a', '@', '\x2', '\x2', '\x371', '\x370', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x372', '\x3', '\x2', '\x2', '\x2', '\x372', 
		'\x373', '\x3', '\x2', '\x2', '\x2', '\x373', '\x378', '\x5', '\x42', 
		'\"', '\x2', '\x374', '\x375', '\a', '\a', '\x2', '\x2', '\x375', '\x377', 
		'\x5', '\x42', '\"', '\x2', '\x376', '\x374', '\x3', '\x2', '\x2', '\x2', 
		'\x377', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x378', '\x376', '\x3', 
		'\x2', '\x2', '\x2', '\x378', '\x379', '\x3', '\x2', '\x2', '\x2', '\x379', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x378', '\x3', '\x2', '\x2', 
		'\x2', '\x37B', '\x37D', '\a', '\t', '\x2', '\x2', '\x37C', '\x371', '\x3', 
		'\x2', '\x2', '\x2', '\x37C', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', 
		'\x2', '\x37E', '\x380', '\a', '\x6', '\x2', '\x2', '\x37F', '\x381', 
		'\x5', 'r', ':', '\x2', '\x380', '\x37F', '\x3', '\x2', '\x2', '\x2', 
		'\x380', '\x381', '\x3', '\x2', '\x2', '\x2', '\x381', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x382', '\x384', '\x5', 'v', '<', '\x2', '\x383', 
		'\x382', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', '\x3', '\x2', '\x2', 
		'\x2', '\x384', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', 
		'\a', '\x5', '\x2', '\x2', '\x386', '\x38B', '\x5', '\x42', '\"', '\x2', 
		'\x387', '\x388', '\a', '\a', '\x2', '\x2', '\x388', '\x38A', '\x5', '\x42', 
		'\"', '\x2', '\x389', '\x387', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38E', '\x3', 
		'\x2', '\x2', '\x2', '\x38D', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38E', 
		'\x38F', '\a', '\x6', '\x2', '\x2', '\x38F', '\x3B6', '\x3', '\x2', '\x2', 
		'\x2', '\x390', '\x391', '\a', '-', '\x2', '\x2', '\x391', '\x392', '\a', 
		'\x5', '\x2', '\x2', '\x392', '\x393', '\x5', '\x42', '\"', '\x2', '\x393', 
		'\x394', '\a', '#', '\x2', '\x2', '\x394', '\x395', '\x5', ' ', '\x11', 
		'\x2', '\x395', '\x396', '\a', '\x6', '\x2', '\x2', '\x396', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x397', '\x399', '\a', 'h', '\x2', '\x2', 
		'\x398', '\x397', '\x3', '\x2', '\x2', '\x2', '\x398', '\x399', '\x3', 
		'\x2', '\x2', '\x2', '\x399', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x39C', '\a', 'H', '\x2', '\x2', '\x39B', '\x398', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\a', '\x5', '\x2', '\x2', 
		'\x39E', '\x39F', '\x5', 'R', '*', '\x2', '\x39F', '\x3A0', '\a', '\x6', 
		'\x2', '\x2', '\x3A0', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A3', 
		'\a', ',', '\x2', '\x2', '\x3A2', '\x3A4', '\x5', '\x42', '\"', '\x2', 
		'\x3A3', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A6', '\a', '\x94', '\x2', '\x2', '\x3A6', '\x3A7', '\x5', '\x42', 
		'\"', '\x2', '\x3A7', '\x3A8', '\a', '\x88', '\x2', '\x2', '\x3A8', '\x3A9', 
		'\x5', '\x42', '\"', '\x2', '\x3A9', '\x3AB', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', '\x3', 
		'\x2', '\x2', '\x2', '\x3AC', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3B0', '\x3', '\x2', '\x2', 
		'\x2', '\x3AE', '\x3AF', '\a', '\x43', '\x2', '\x2', '\x3AF', '\x3B1', 
		'\x5', '\x42', '\"', '\x2', '\x3B0', '\x3AE', '\x3', '\x2', '\x2', '\x2', 
		'\x3B0', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\a', '\x44', '\x2', '\x2', '\x3B3', 
		'\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B6', '\x5', '\x44', 
		'#', '\x2', '\x3B5', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x35F', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x368', '\x3', '\x2', '\x2', '\x2', 
		'\x3B5', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x36E', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x385', '\x3', '\x2', '\x2', '\x2', '\x3B5', 
		'\x390', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x39B', '\x3', '\x2', '\x2', 
		'\x2', '\x3B5', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B4', 
		'\x3', '\x2', '\x2', '\x2', '\x3B6', '\x42E', '\x3', '\x2', '\x2', '\x2', 
		'\x3B7', '\x3B8', '\f', '\x16', '\x2', '\x2', '\x3B8', '\x3B9', '\a', 
		'\r', '\x2', '\x2', '\x3B9', '\x42D', '\x5', '\x42', '\"', '\x17', '\x3BA', 
		'\x3BB', '\f', '\x15', '\x2', '\x2', '\x3BB', '\x3BC', '\t', '\f', '\x2', 
		'\x2', '\x3BC', '\x42D', '\x5', '\x42', '\"', '\x16', '\x3BD', '\x3BE', 
		'\f', '\x14', '\x2', '\x2', '\x3BE', '\x3BF', '\t', '\x6', '\x2', '\x2', 
		'\x3BF', '\x42D', '\x5', '\x42', '\"', '\x15', '\x3C0', '\x3C1', '\f', 
		'\x13', '\x2', '\x2', '\x3C1', '\x3C2', '\t', '\r', '\x2', '\x2', '\x3C2', 
		'\x42D', '\x5', '\x42', '\"', '\x14', '\x3C3', '\x3C4', '\f', '\x12', 
		'\x2', '\x2', '\x3C4', '\x3C5', '\t', '\xE', '\x2', '\x2', '\x3C5', '\x42D', 
		'\x5', '\x42', '\"', '\x13', '\x3C6', '\x3D3', '\f', '\x11', '\x2', '\x2', 
		'\x3C7', '\x3D4', '\a', '\b', '\x2', '\x2', '\x3C8', '\x3D4', '\a', '\x18', 
		'\x2', '\x2', '\x3C9', '\x3D4', '\a', '\x19', '\x2', '\x2', '\x3CA', '\x3D4', 
		'\a', '\x1A', '\x2', '\x2', '\x3CB', '\x3D4', '\a', '^', '\x2', '\x2', 
		'\x3CC', '\x3CD', '\a', '^', '\x2', '\x2', '\x3CD', '\x3D4', '\a', 'h', 
		'\x2', '\x2', '\x3CE', '\x3D4', '\a', 'U', '\x2', '\x2', '\x3CF', '\x3D4', 
		'\a', '\x63', '\x2', '\x2', '\x3D0', '\x3D4', '\a', 'O', '\x2', '\x2', 
		'\x3D1', '\x3D4', '\a', '\x65', '\x2', '\x2', '\x3D2', '\x3D4', '\a', 
		'x', '\x2', '\x2', '\x3D3', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3D3', 
		'\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3C9', '\x3', '\x2', '\x2', 
		'\x2', '\x3D3', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3CC', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3CF', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D3', 
		'\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D2', '\x3', '\x2', '\x2', 
		'\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x42D', 
		'\x5', '\x42', '\"', '\x12', '\x3D6', '\x3D7', '\f', '\x10', '\x2', '\x2', 
		'\x3D7', '\x3D8', '\a', '\"', '\x2', '\x2', '\x3D8', '\x42D', '\x5', '\x42', 
		'\"', '\x11', '\x3D9', '\x3DA', '\f', '\xF', '\x2', '\x2', '\x3DA', '\x3DB', 
		'\a', 'n', '\x2', '\x2', '\x3DB', '\x42D', '\x5', '\x42', '\"', '\x10', 
		'\x3DC', '\x3DD', '\f', '\b', '\x2', '\x2', '\x3DD', '\x3DF', '\a', '^', 
		'\x2', '\x2', '\x3DE', '\x3E0', '\a', 'h', '\x2', '\x2', '\x3DF', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3E0', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x42D', '\x5', 
		'\x42', '\"', '\t', '\x3E2', '\x3E4', '\f', '\a', '\x2', '\x2', '\x3E3', 
		'\x3E5', '\a', 'h', '\x2', '\x2', '\x3E4', '\x3E3', '\x3', '\x2', '\x2', 
		'\x2', '\x3E4', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E6', 
		'\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E7', '\a', ')', '\x2', '\x2', 
		'\x3E7', '\x3E8', '\x5', '\x42', '\"', '\x2', '\x3E8', '\x3E9', '\a', 
		'\"', '\x2', '\x2', '\x3E9', '\x3EA', '\x5', '\x42', '\"', '\b', '\x3EA', 
		'\x42D', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3EC', '\f', '\v', '\x2', 
		'\x2', '\x3EC', '\x3ED', '\a', '/', '\x2', '\x2', '\x3ED', '\x42D', '\x5', 
		'\xBC', '_', '\x2', '\x3EE', '\x3F0', '\f', '\n', '\x2', '\x2', '\x3EF', 
		'\x3F1', '\a', 'h', '\x2', '\x2', '\x3F0', '\x3EF', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\t', '\xF', '\x2', '\x2', 
		'\x3F3', '\x3F6', '\x5', '\x42', '\"', '\x2', '\x3F4', '\x3F5', '\a', 
		'\x45', '\x2', '\x2', '\x3F5', '\x3F7', '\x5', '\x42', '\"', '\x2', '\x3F6', 
		'\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', 
		'\x2', '\x3F7', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3FD', 
		'\f', '\t', '\x2', '\x2', '\x3F9', '\x3FE', '\a', '_', '\x2', '\x2', '\x3FA', 
		'\x3FE', '\a', 'i', '\x2', '\x2', '\x3FB', '\x3FC', '\a', 'h', '\x2', 
		'\x2', '\x3FC', '\x3FE', '\a', 'j', '\x2', '\x2', '\x3FD', '\x3F9', '\x3', 
		'\x2', '\x2', '\x2', '\x3FD', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x42D', '\x3', '\x2', '\x2', 
		'\x2', '\x3FF', '\x401', '\f', '\x6', '\x2', '\x2', '\x400', '\x402', 
		'\a', 'h', '\x2', '\x2', '\x401', '\x400', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x403', '\x42A', '\a', 'U', '\x2', '\x2', '\x404', 
		'\x40E', '\a', '\x5', '\x2', '\x2', '\x405', '\x40F', '\x5', 'R', '*', 
		'\x2', '\x406', '\x40B', '\x5', '\x42', '\"', '\x2', '\x407', '\x408', 
		'\a', '\a', '\x2', '\x2', '\x408', '\x40A', '\x5', '\x42', '\"', '\x2', 
		'\x409', '\x407', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40D', '\x3', 
		'\x2', '\x2', '\x2', '\x40B', '\x409', '\x3', '\x2', '\x2', '\x2', '\x40B', 
		'\x40C', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40F', '\x3', '\x2', '\x2', 
		'\x2', '\x40D', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x405', 
		'\x3', '\x2', '\x2', '\x2', '\x40E', '\x406', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x410', '\x3', 
		'\x2', '\x2', '\x2', '\x410', '\x42B', '\a', '\x6', '\x2', '\x2', '\x411', 
		'\x412', '\x5', '\xB2', 'Z', '\x2', '\x412', '\x413', '\a', '\x4', '\x2', 
		'\x2', '\x413', '\x415', '\x3', '\x2', '\x2', '\x2', '\x414', '\x411', 
		'\x3', '\x2', '\x2', '\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x42B', '\x5', 
		'\xB4', '[', '\x2', '\x417', '\x418', '\x5', '\xB2', 'Z', '\x2', '\x418', 
		'\x419', '\a', '\x4', '\x2', '\x2', '\x419', '\x41B', '\x3', '\x2', '\x2', 
		'\x2', '\x41A', '\x417', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', 
		'\x41C', '\x41D', '\x5', '\xDC', 'o', '\x2', '\x41D', '\x426', '\a', '\x5', 
		'\x2', '\x2', '\x41E', '\x423', '\x5', '\x42', '\"', '\x2', '\x41F', '\x420', 
		'\a', '\a', '\x2', '\x2', '\x420', '\x422', '\x5', '\x42', '\"', '\x2', 
		'\x421', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x422', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x423', '\x421', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x424', '\x3', '\x2', '\x2', '\x2', '\x424', '\x427', '\x3', '\x2', '\x2', 
		'\x2', '\x425', '\x423', '\x3', '\x2', '\x2', '\x2', '\x426', '\x41E', 
		'\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', '\x2', '\x2', '\x2', 
		'\x427', '\x428', '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\a', 
		'\x6', '\x2', '\x2', '\x429', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x404', '\x3', '\x2', '\x2', '\x2', '\x42A', '\x414', '\x3', '\x2', '\x2', 
		'\x2', '\x42A', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42D', 
		'\x3', '\x2', '\x2', '\x2', '\x42C', '\x3B7', '\x3', '\x2', '\x2', '\x2', 
		'\x42C', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x3BD', '\x3', 
		'\x2', '\x2', '\x2', '\x42C', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x3C6', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x3D9', 
		'\x3', '\x2', '\x2', '\x2', '\x42C', '\x3DC', '\x3', '\x2', '\x2', '\x2', 
		'\x42C', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x3EB', '\x3', 
		'\x2', '\x2', '\x2', '\x42C', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x3F8', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x3FF', '\x3', '\x2', '\x2', 
		'\x2', '\x42D', '\x430', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x42E', '\x42F', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x43', '\x3', '\x2', '\x2', '\x2', '\x430', '\x42E', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x432', '\a', 'u', '\x2', '\x2', '\x432', 
		'\x437', '\a', '\x5', '\x2', '\x2', '\x433', '\x438', '\a', 'S', '\x2', 
		'\x2', '\x434', '\x435', '\t', '\x10', '\x2', '\x2', '\x435', '\x436', 
		'\a', '\a', '\x2', '\x2', '\x436', '\x438', '\x5', '\xA6', 'T', '\x2', 
		'\x437', '\x433', '\x3', '\x2', '\x2', '\x2', '\x437', '\x434', '\x3', 
		'\x2', '\x2', '\x2', '\x438', '\x439', '\x3', '\x2', '\x2', '\x2', '\x439', 
		'\x43A', '\a', '\x6', '\x2', '\x2', '\x43A', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x43B', '\x43C', '\t', '\x11', '\x2', '\x2', '\x43C', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x43F', '\x5', '\x32', '\x1A', '\x2', '\x43E', 
		'\x43D', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43F', '\x3', '\x2', '\x2', 
		'\x2', '\x43F', '\x445', '\x3', '\x2', '\x2', '\x2', '\x440', '\x446', 
		'\a', 'Z', '\x2', '\x2', '\x441', '\x446', '\a', '|', '\x2', '\x2', '\x442', 
		'\x443', '\a', 'Z', '\x2', '\x2', '\x443', '\x444', '\a', 'n', '\x2', 
		'\x2', '\x444', '\x446', '\t', '\n', '\x2', '\x2', '\x445', '\x440', '\x3', 
		'\x2', '\x2', '\x2', '\x445', '\x441', '\x3', '\x2', '\x2', '\x2', '\x445', 
		'\x442', '\x3', '\x2', '\x2', '\x2', '\x446', '\x447', '\x3', '\x2', '\x2', 
		'\x2', '\x447', '\x44B', '\a', ']', '\x2', '\x2', '\x448', '\x449', '\x5', 
		'\xB2', 'Z', '\x2', '\x449', '\x44A', '\a', '\x4', '\x2', '\x2', '\x44A', 
		'\x44C', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x448', '\x3', '\x2', '\x2', 
		'\x2', '\x44B', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44D', 
		'\x3', '\x2', '\x2', '\x2', '\x44D', '\x450', '\x5', '\xB4', '[', '\x2', 
		'\x44E', '\x44F', '\a', '#', '\x2', '\x2', '\x44F', '\x451', '\x5', '\xCC', 
		'g', '\x2', '\x450', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x450', '\x451', 
		'\x3', '\x2', '\x2', '\x2', '\x451', '\x45D', '\x3', '\x2', '\x2', '\x2', 
		'\x452', '\x453', '\a', '\x5', '\x2', '\x2', '\x453', '\x458', '\x5', 
		'\xBA', '^', '\x2', '\x454', '\x455', '\a', '\a', '\x2', '\x2', '\x455', 
		'\x457', '\x5', '\xBA', '^', '\x2', '\x456', '\x454', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x458', '\x456', 
		'\x3', '\x2', '\x2', '\x2', '\x458', '\x459', '\x3', '\x2', '\x2', '\x2', 
		'\x459', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x458', '\x3', 
		'\x2', '\x2', '\x2', '\x45B', '\x45C', '\a', '\x6', '\x2', '\x2', '\x45C', 
		'\x45E', '\x3', '\x2', '\x2', '\x2', '\x45D', '\x452', '\x3', '\x2', '\x2', 
		'\x2', '\x45D', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x47C', 
		'\x3', '\x2', '\x2', '\x2', '\x45F', '\x460', '\a', '\x91', '\x2', '\x2', 
		'\x460', '\x461', '\a', '\x5', '\x2', '\x2', '\x461', '\x466', '\x5', 
		'\x42', '\"', '\x2', '\x462', '\x463', '\a', '\a', '\x2', '\x2', '\x463', 
		'\x465', '\x5', '\x42', '\"', '\x2', '\x464', '\x462', '\x3', '\x2', '\x2', 
		'\x2', '\x465', '\x468', '\x3', '\x2', '\x2', '\x2', '\x466', '\x464', 
		'\x3', '\x2', '\x2', '\x2', '\x466', '\x467', '\x3', '\x2', '\x2', '\x2', 
		'\x467', '\x469', '\x3', '\x2', '\x2', '\x2', '\x468', '\x466', '\x3', 
		'\x2', '\x2', '\x2', '\x469', '\x478', '\a', '\x6', '\x2', '\x2', '\x46A', 
		'\x46B', '\a', '\a', '\x2', '\x2', '\x46B', '\x46C', '\a', '\x5', '\x2', 
		'\x2', '\x46C', '\x471', '\x5', '\x42', '\"', '\x2', '\x46D', '\x46E', 
		'\a', '\a', '\x2', '\x2', '\x46E', '\x470', '\x5', '\x42', '\"', '\x2', 
		'\x46F', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x470', '\x473', '\x3', 
		'\x2', '\x2', '\x2', '\x471', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x471', 
		'\x472', '\x3', '\x2', '\x2', '\x2', '\x472', '\x474', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x471', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', 
		'\a', '\x6', '\x2', '\x2', '\x475', '\x477', '\x3', '\x2', '\x2', '\x2', 
		'\x476', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x477', '\x47A', '\x3', 
		'\x2', '\x2', '\x2', '\x478', '\x476', '\x3', '\x2', '\x2', '\x2', '\x478', 
		'\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47D', '\x3', '\x2', '\x2', 
		'\x2', '\x47A', '\x478', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47D', 
		'\x5', 'R', '*', '\x2', '\x47C', '\x45F', '\x3', '\x2', '\x2', '\x2', 
		'\x47C', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47F', '\x3', 
		'\x2', '\x2', '\x2', '\x47E', '\x480', '\x5', 'J', '&', '\x2', '\x47F', 
		'\x47E', '\x3', '\x2', '\x2', '\x2', '\x47F', '\x480', '\x3', '\x2', '\x2', 
		'\x2', '\x480', '\x484', '\x3', '\x2', '\x2', '\x2', '\x481', '\x482', 
		'\a', ':', '\x2', '\x2', '\x482', '\x484', '\a', '\x91', '\x2', '\x2', 
		'\x483', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x483', '\x481', '\x3', 
		'\x2', '\x2', '\x2', '\x484', 'I', '\x3', '\x2', '\x2', '\x2', '\x485', 
		'\x486', '\a', 'm', '\x2', '\x2', '\x486', '\x495', '\a', '\x32', '\x2', 
		'\x2', '\x487', '\x488', '\a', '\x5', '\x2', '\x2', '\x488', '\x48D', 
		'\x5', '\x1A', '\xE', '\x2', '\x489', '\x48A', '\a', '\a', '\x2', '\x2', 
		'\x48A', '\x48C', '\x5', '\x1A', '\xE', '\x2', '\x48B', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x48D', 
		'\x48B', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x490', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x48D', 
		'\x3', '\x2', '\x2', '\x2', '\x490', '\x493', '\a', '\x6', '\x2', '\x2', 
		'\x491', '\x492', '\a', '\x95', '\x2', '\x2', '\x492', '\x494', '\x5', 
		'\x42', '\"', '\x2', '\x493', '\x491', '\x3', '\x2', '\x2', '\x2', '\x493', 
		'\x494', '\x3', '\x2', '\x2', '\x2', '\x494', '\x496', '\x3', '\x2', '\x2', 
		'\x2', '\x495', '\x487', '\x3', '\x2', '\x2', '\x2', '\x495', '\x496', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\x3', '\x2', '\x2', '\x2', 
		'\x497', '\x4B2', '\a', '\xB8', '\x2', '\x2', '\x498', '\x4B3', '\a', 
		'\xB9', '\x2', '\x2', '\x499', '\x49A', '\a', '\x8E', '\x2', '\x2', '\x49A', 
		'\x49D', '\a', '\x84', '\x2', '\x2', '\x49B', '\x49E', '\x5', '\xBA', 
		'^', '\x2', '\x49C', '\x49E', '\x5', 'j', '\x36', '\x2', '\x49D', '\x49B', 
		'\x3', '\x2', '\x2', '\x2', '\x49D', '\x49C', '\x3', '\x2', '\x2', '\x2', 
		'\x49E', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x49F', '\x4A0', '\a', 
		'\x18', '\x2', '\x2', '\x4A0', '\x4AB', '\x5', '\x42', '\"', '\x2', '\x4A1', 
		'\x4A4', '\a', '\a', '\x2', '\x2', '\x4A2', '\x4A5', '\x5', '\xBA', '^', 
		'\x2', '\x4A3', '\x4A5', '\x5', 'j', '\x36', '\x2', '\x4A4', '\x4A2', 
		'\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A3', '\x3', '\x2', '\x2', '\x2', 
		'\x4A5', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', '\a', 
		'\x18', '\x2', '\x2', '\x4A7', '\x4A8', '\x5', '\x42', '\"', '\x2', '\x4A8', 
		'\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4A1', '\x3', '\x2', '\x2', 
		'\x2', '\x4AA', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A9', 
		'\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', '\x3', '\x2', '\x2', '\x2', 
		'\x4AC', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AB', '\x3', 
		'\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\a', '\x95', '\x2', '\x2', '\x4AF', 
		'\x4B1', '\x5', '\x42', '\"', '\x2', '\x4B0', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4B0', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B3', 
		'\x3', '\x2', '\x2', '\x2', '\x4B2', '\x498', '\x3', '\x2', '\x2', '\x2', 
		'\x4B2', '\x499', '\x3', '\x2', '\x2', '\x2', '\x4B3', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x4B4', '\x4B8', '\a', 'r', '\x2', '\x2', '\x4B5', '\x4B6', 
		'\x5', '\xB2', 'Z', '\x2', '\x4B6', '\x4B7', '\a', '\x4', '\x2', '\x2', 
		'\x4B7', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B5', '\x3', 
		'\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4B9', 
		'\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4C1', '\x5', '\xC8', 
		'\x65', '\x2', '\x4BB', '\x4BC', '\a', '\b', '\x2', '\x2', '\x4BC', '\x4C2', 
		'\x5', 'N', '(', '\x2', '\x4BD', '\x4BE', '\a', '\x5', '\x2', '\x2', '\x4BE', 
		'\x4BF', '\x5', 'N', '(', '\x2', '\x4BF', '\x4C0', '\a', '\x6', '\x2', 
		'\x2', '\x4C0', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4BD', '\x3', '\x2', '\x2', '\x2', 
		'\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x4C3', '\x4C7', '\x5', '$', '\x13', '\x2', '\x4C4', '\x4C7', 
		'\x5', '\xAE', 'X', '\x2', '\x4C5', '\x4C7', '\a', '\xBD', '\x2', '\x2', 
		'\x4C6', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4C6', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4D3', '\a', 'y', '\x2', '\x2', 
		'\x4C9', '\x4D4', '\x5', '\xBC', '_', '\x2', '\x4CA', '\x4CB', '\x5', 
		'\xB2', 'Z', '\x2', '\x4CB', '\x4CC', '\a', '\x4', '\x2', '\x2', '\x4CC', 
		'\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CA', '\x3', '\x2', '\x2', 
		'\x2', '\x4CD', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D2', '\x5', '\xB4', '[', '\x2', 
		'\x4D0', '\x4D2', '\x5', '\xC0', '\x61', '\x2', '\x4D1', '\x4CF', '\x3', 
		'\x2', '\x2', '\x2', '\x4D1', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D2', 
		'\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4C9', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D4', 
		'\x3', '\x2', '\x2', '\x2', '\x4D4', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x4D5', '\x4D7', '\x5', '\x82', '\x42', '\x2', '\x4D6', '\x4D5', '\x3', 
		'\x2', '\x2', '\x2', '\x4D6', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D7', 
		'\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4DE', '\x5', 'V', ',', 
		'\x2', '\x4D9', '\x4DA', '\x5', '\x66', '\x34', '\x2', '\x4DA', '\x4DB', 
		'\x5', 'V', ',', '\x2', '\x4DB', '\x4DD', '\x3', '\x2', '\x2', '\x2', 
		'\x4DC', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4E0', '\x3', 
		'\x2', '\x2', '\x2', '\x4DE', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DE', 
		'\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E2', '\x3', '\x2', '\x2', 
		'\x2', '\x4E0', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E3', 
		'\x5', '\x84', '\x43', '\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E5', '\x3', 
		'\x2', '\x2', '\x2', '\x4E4', '\x4E6', '\x5', '\x86', '\x44', '\x2', '\x4E5', 
		'\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E6', 'S', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4EF', '\x5', 
		'^', '\x30', '\x2', '\x4E8', '\x4E9', '\x5', '\x62', '\x32', '\x2', '\x4E9', 
		'\x4EB', '\x5', '^', '\x30', '\x2', '\x4EA', '\x4EC', '\x5', '\x64', '\x33', 
		'\x2', '\x4EB', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EC', 
		'\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EE', '\x3', '\x2', '\x2', '\x2', 
		'\x4ED', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4F1', '\x3', 
		'\x2', '\x2', '\x2', '\x4EF', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F0', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x4F1', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F4', 
		'\a', '\x83', '\x2', '\x2', '\x4F3', '\x4F5', '\t', '\x12', '\x2', '\x2', 
		'\x4F4', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\x3', 
		'\x2', '\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4FB', '\x5', '`', '\x31', '\x2', '\x4F7', '\x4F8', '\a', '\a', '\x2', 
		'\x2', '\x4F8', '\x4FA', '\x5', '`', '\x31', '\x2', '\x4F9', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FB', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x3', 
		'\x2', '\x2', '\x2', '\x4FC', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x4FD', 
		'\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x508', '\a', 'M', '\x2', 
		'\x2', '\x4FF', '\x504', '\x5', '^', '\x30', '\x2', '\x500', '\x501', 
		'\a', '\a', '\x2', '\x2', '\x501', '\x503', '\x5', '^', '\x30', '\x2', 
		'\x502', '\x500', '\x3', '\x2', '\x2', '\x2', '\x503', '\x506', '\x3', 
		'\x2', '\x2', '\x2', '\x504', '\x502', '\x3', '\x2', '\x2', '\x2', '\x504', 
		'\x505', '\x3', '\x2', '\x2', '\x2', '\x505', '\x509', '\x3', '\x2', '\x2', 
		'\x2', '\x506', '\x504', '\x3', '\x2', '\x2', '\x2', '\x507', '\x509', 
		'\x5', 'T', '+', '\x2', '\x508', '\x4FF', '\x3', '\x2', '\x2', '\x2', 
		'\x508', '\x507', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50B', '\x3', 
		'\x2', '\x2', '\x2', '\x50A', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x50A', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50E', '\x3', '\x2', '\x2', 
		'\x2', '\x50C', '\x50D', '\a', '\x95', '\x2', '\x2', '\x50D', '\x50F', 
		'\x5', '\x42', '\"', '\x2', '\x50E', '\x50C', '\x3', '\x2', '\x2', '\x2', 
		'\x50E', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x51E', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x511', '\a', 'P', '\x2', '\x2', '\x511', 
		'\x512', '\a', '*', '\x2', '\x2', '\x512', '\x517', '\x5', '\x42', '\"', 
		'\x2', '\x513', '\x514', '\a', '\a', '\x2', '\x2', '\x514', '\x516', '\x5', 
		'\x42', '\"', '\x2', '\x515', '\x513', '\x3', '\x2', '\x2', '\x2', '\x516', 
		'\x519', '\x3', '\x2', '\x2', '\x2', '\x517', '\x515', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x518', '\x3', '\x2', '\x2', '\x2', '\x518', '\x51C', 
		'\x3', '\x2', '\x2', '\x2', '\x519', '\x517', '\x3', '\x2', '\x2', '\x2', 
		'\x51A', '\x51B', '\a', 'Q', '\x2', '\x2', '\x51B', '\x51D', '\x5', '\x42', 
		'\"', '\x2', '\x51C', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', 
		'\x3', '\x2', '\x2', '\x2', '\x51D', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x51E', '\x510', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x51F', '\x3', 
		'\x2', '\x2', '\x2', '\x51F', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x520', 
		'\x521', '\a', '\xAF', '\x2', '\x2', '\x521', '\x522', '\x5', '\xD0', 
		'i', '\x2', '\x522', '\x523', '\a', '#', '\x2', '\x2', '\x523', '\x52B', 
		'\x5', 't', ';', '\x2', '\x524', '\x525', '\a', '\a', '\x2', '\x2', '\x525', 
		'\x526', '\x5', '\xD0', 'i', '\x2', '\x526', '\x527', '\a', '#', '\x2', 
		'\x2', '\x527', '\x528', '\x5', 't', ';', '\x2', '\x528', '\x52A', '\x3', 
		'\x2', '\x2', '\x2', '\x529', '\x524', '\x3', '\x2', '\x2', '\x2', '\x52A', 
		'\x52D', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x529', '\x3', '\x2', '\x2', 
		'\x2', '\x52B', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52F', 
		'\x3', '\x2', '\x2', '\x2', '\x52D', '\x52B', '\x3', '\x2', '\x2', '\x2', 
		'\x52E', '\x520', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x52F', '\x3', 
		'\x2', '\x2', '\x2', '\x52F', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x530', 
		'\x531', '\a', '\x91', '\x2', '\x2', '\x531', '\x532', '\a', '\x5', '\x2', 
		'\x2', '\x532', '\x537', '\x5', '\x42', '\"', '\x2', '\x533', '\x534', 
		'\a', '\a', '\x2', '\x2', '\x534', '\x536', '\x5', '\x42', '\"', '\x2', 
		'\x535', '\x533', '\x3', '\x2', '\x2', '\x2', '\x536', '\x539', '\x3', 
		'\x2', '\x2', '\x2', '\x537', '\x535', '\x3', '\x2', '\x2', '\x2', '\x537', 
		'\x538', '\x3', '\x2', '\x2', '\x2', '\x538', '\x53A', '\x3', '\x2', '\x2', 
		'\x2', '\x539', '\x537', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x549', 
		'\a', '\x6', '\x2', '\x2', '\x53B', '\x53C', '\a', '\a', '\x2', '\x2', 
		'\x53C', '\x53D', '\a', '\x5', '\x2', '\x2', '\x53D', '\x542', '\x5', 
		'\x42', '\"', '\x2', '\x53E', '\x53F', '\a', '\a', '\x2', '\x2', '\x53F', 
		'\x541', '\x5', '\x42', '\"', '\x2', '\x540', '\x53E', '\x3', '\x2', '\x2', 
		'\x2', '\x541', '\x544', '\x3', '\x2', '\x2', '\x2', '\x542', '\x540', 
		'\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\x3', '\x2', '\x2', '\x2', 
		'\x543', '\x545', '\x3', '\x2', '\x2', '\x2', '\x544', '\x542', '\x3', 
		'\x2', '\x2', '\x2', '\x545', '\x546', '\a', '\x6', '\x2', '\x2', '\x546', 
		'\x548', '\x3', '\x2', '\x2', '\x2', '\x547', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x548', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x549', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\x549', '\x54A', '\x3', '\x2', '\x2', '\x2', 
		'\x54A', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x549', '\x3', 
		'\x2', '\x2', '\x2', '\x54C', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x54C', 
		'\x530', '\x3', '\x2', '\x2', '\x2', '\x54D', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x54E', '\x54F', '\x5', 'R', '*', '\x2', '\x54F', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x550', '\x552', '\x5', '\x82', '\x42', '\x2', '\x551', 
		'\x550', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', '\x3', '\x2', '\x2', 
		'\x2', '\x552', '\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x555', 
		'\x5', 'V', ',', '\x2', '\x554', '\x556', '\x5', '\x84', '\x43', '\x2', 
		'\x555', '\x554', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', '\x3', 
		'\x2', '\x2', '\x2', '\x556', '\x558', '\x3', '\x2', '\x2', '\x2', '\x557', 
		'\x559', '\x5', '\x86', '\x44', '\x2', '\x558', '\x557', '\x3', '\x2', 
		'\x2', '\x2', '\x558', '\x559', '\x3', '\x2', '\x2', '\x2', '\x559', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x55A', '\x55C', '\x5', '\x82', '\x42', '\x2', 
		'\x55B', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x55B', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x55C', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', 
		'\x567', '\x5', 'V', ',', '\x2', '\x55E', '\x560', '\a', '\x8C', '\x2', 
		'\x2', '\x55F', '\x561', '\a', '\x1F', '\x2', '\x2', '\x560', '\x55F', 
		'\x3', '\x2', '\x2', '\x2', '\x560', '\x561', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x565', '\x3', '\x2', '\x2', '\x2', '\x562', '\x565', '\a', 
		'\\', '\x2', '\x2', '\x563', '\x565', '\a', '\x46', '\x2', '\x2', '\x564', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x564', '\x562', '\x3', '\x2', '\x2', 
		'\x2', '\x564', '\x563', '\x3', '\x2', '\x2', '\x2', '\x565', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x566', '\x568', '\x5', 'V', ',', '\x2', 
		'\x567', '\x564', '\x3', '\x2', '\x2', '\x2', '\x568', '\x569', '\x3', 
		'\x2', '\x2', '\x2', '\x569', '\x567', '\x3', '\x2', '\x2', '\x2', '\x569', 
		'\x56A', '\x3', '\x2', '\x2', '\x2', '\x56A', '\x56C', '\x3', '\x2', '\x2', 
		'\x2', '\x56B', '\x56D', '\x5', '\x84', '\x43', '\x2', '\x56C', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x56C', '\x56D', '\x3', '\x2', '\x2', '\x2', 
		'\x56D', '\x56F', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x570', '\x5', 
		'\x86', '\x44', '\x2', '\x56F', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x56F', 
		'\x570', '\x3', '\x2', '\x2', '\x2', '\x570', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x571', '\x572', '\x5', '\xB2', 'Z', '\x2', '\x572', '\x573', 
		'\a', '\x4', '\x2', '\x2', '\x573', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x574', '\x571', '\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\x3', 
		'\x2', '\x2', '\x2', '\x575', '\x576', '\x3', '\x2', '\x2', '\x2', '\x576', 
		'\x57B', '\x5', '\xB4', '[', '\x2', '\x577', '\x579', '\a', '#', '\x2', 
		'\x2', '\x578', '\x577', '\x3', '\x2', '\x2', '\x2', '\x578', '\x579', 
		'\x3', '\x2', '\x2', '\x2', '\x579', '\x57A', '\x3', '\x2', '\x2', '\x2', 
		'\x57A', '\x57C', '\x5', '\xCC', 'g', '\x2', '\x57B', '\x578', '\x3', 
		'\x2', '\x2', '\x2', '\x57B', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57C', 
		'\x582', '\x3', '\x2', '\x2', '\x2', '\x57D', '\x57E', '\a', 'W', '\x2', 
		'\x2', '\x57E', '\x57F', '\a', '*', '\x2', '\x2', '\x57F', '\x583', '\x5', 
		'\xC0', '\x61', '\x2', '\x580', '\x581', '\a', 'h', '\x2', '\x2', '\x581', 
		'\x583', '\a', 'W', '\x2', '\x2', '\x582', '\x57D', '\x3', '\x2', '\x2', 
		'\x2', '\x582', '\x580', '\x3', '\x2', '\x2', '\x2', '\x582', '\x583', 
		'\x3', '\x2', '\x2', '\x2', '\x583', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x584', '\x585', '\x5', '\xB2', 'Z', '\x2', '\x585', '\x586', '\a', '\x4', 
		'\x2', '\x2', '\x586', '\x588', '\x3', '\x2', '\x2', '\x2', '\x587', '\x584', 
		'\x3', '\x2', '\x2', '\x2', '\x587', '\x588', '\x3', '\x2', '\x2', '\x2', 
		'\x588', '\x589', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x5', 
		'\xDC', 'o', '\x2', '\x58A', '\x58B', '\a', '\x5', '\x2', '\x2', '\x58B', 
		'\x590', '\x5', '\x42', '\"', '\x2', '\x58C', '\x58D', '\a', '\a', '\x2', 
		'\x2', '\x58D', '\x58F', '\x5', '\x42', '\"', '\x2', '\x58E', '\x58C', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\x592', '\x3', '\x2', '\x2', '\x2', 
		'\x590', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x590', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x591', '\x593', '\x3', '\x2', '\x2', '\x2', '\x592', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x593', '\x598', '\a', '\x6', '\x2', 
		'\x2', '\x594', '\x596', '\a', '#', '\x2', '\x2', '\x595', '\x594', '\x3', 
		'\x2', '\x2', '\x2', '\x595', '\x596', '\x3', '\x2', '\x2', '\x2', '\x596', 
		'\x597', '\x3', '\x2', '\x2', '\x2', '\x597', '\x599', '\x5', '\xCC', 
		'g', '\x2', '\x598', '\x595', '\x3', '\x2', '\x2', '\x2', '\x598', '\x599', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x59A', '\x5A4', '\a', '\x5', '\x2', '\x2', '\x59B', '\x5A0', '\x5', 
		'^', '\x30', '\x2', '\x59C', '\x59D', '\a', '\a', '\x2', '\x2', '\x59D', 
		'\x59F', '\x5', '^', '\x30', '\x2', '\x59E', '\x59C', '\x3', '\x2', '\x2', 
		'\x2', '\x59F', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A1', '\x3', '\x2', '\x2', '\x2', 
		'\x5A1', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5A0', '\x3', 
		'\x2', '\x2', '\x2', '\x5A3', '\x5A5', '\x5', 'T', '+', '\x2', '\x5A4', 
		'\x59B', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A3', '\x3', '\x2', '\x2', 
		'\x2', '\x5A5', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', 
		'\a', '\x6', '\x2', '\x2', '\x5A7', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x5A8', '\x5A9', '\a', '\x5', '\x2', '\x2', '\x5A9', '\x5AA', '\x5', 
		'R', '*', '\x2', '\x5AA', '\x5AF', '\a', '\x6', '\x2', '\x2', '\x5AB', 
		'\x5AD', '\a', '#', '\x2', '\x2', '\x5AC', '\x5AB', '\x3', '\x2', '\x2', 
		'\x2', '\x5AC', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5AE', 
		'\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5B0', '\x5', '\xCC', 'g', '\x2', 
		'\x5AF', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B0', '\x3', 
		'\x2', '\x2', '\x2', '\x5B0', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B1', 
		'\x574', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x587', '\x3', '\x2', '\x2', 
		'\x2', '\x5B1', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5A8', 
		'\x3', '\x2', '\x2', '\x2', '\x5B2', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x5B3', '\x5C0', '\a', '\t', '\x2', '\x2', '\x5B4', '\x5B5', '\x5', '\xB4', 
		'[', '\x2', '\x5B5', '\x5B6', '\a', '\x4', '\x2', '\x2', '\x5B6', '\x5B7', 
		'\a', '\t', '\x2', '\x2', '\x5B7', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x5B8', '\x5BD', '\x5', '\x42', '\"', '\x2', '\x5B9', '\x5BB', '\a', 
		'#', '\x2', '\x2', '\x5BA', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BA', 
		'\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', 
		'\x2', '\x5BC', '\x5BE', '\x5', '\xAA', 'V', '\x2', '\x5BD', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5BE', '\x3', '\x2', '\x2', '\x2', 
		'\x5BE', '\x5C0', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5B3', '\x3', 
		'\x2', '\x2', '\x2', '\x5BF', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5BF', 
		'\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x5C1', '\x5CF', '\a', '\a', '\x2', '\x2', '\x5C2', '\x5C4', '\a', 
		'\x66', '\x2', '\x2', '\x5C3', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C3', 
		'\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5CB', '\x3', '\x2', '\x2', 
		'\x2', '\x5C5', '\x5C7', '\a', '\x62', '\x2', '\x2', '\x5C6', '\x5C8', 
		'\a', 'p', '\x2', '\x2', '\x5C7', '\x5C6', '\x3', '\x2', '\x2', '\x2', 
		'\x5C7', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5CC', '\x3', 
		'\x2', '\x2', '\x2', '\x5C9', '\x5CC', '\a', 'Y', '\x2', '\x2', '\x5CA', 
		'\x5CC', '\a', '\x35', '\x2', '\x2', '\x5CB', '\x5C5', '\x3', '\x2', '\x2', 
		'\x2', '\x5CB', '\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CA', 
		'\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\x3', '\x2', '\x2', '\x2', 
		'\x5CC', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CF', '\a', 
		'`', '\x2', '\x2', '\x5CE', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5CE', 
		'\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x5D0', '\x5D1', '\a', 'm', '\x2', '\x2', '\x5D1', '\x5DF', '\x5', 
		'\x42', '\"', '\x2', '\x5D2', '\x5D3', '\a', '\x8F', '\x2', '\x2', '\x5D3', 
		'\x5D4', '\a', '\x5', '\x2', '\x2', '\x5D4', '\x5D9', '\x5', '\xBA', '^', 
		'\x2', '\x5D5', '\x5D6', '\a', '\a', '\x2', '\x2', '\x5D6', '\x5D8', '\x5', 
		'\xBA', '^', '\x2', '\x5D7', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D8', 
		'\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5D7', '\x3', '\x2', '\x2', 
		'\x2', '\x5D9', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DC', 
		'\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5D9', '\x3', '\x2', '\x2', '\x2', 
		'\x5DC', '\x5DD', '\a', '\x6', '\x2', '\x2', '\x5DD', '\x5DF', '\x3', 
		'\x2', '\x2', '\x2', '\x5DE', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x5E0', '\x5E2', '\a', '\x8C', '\x2', '\x2', '\x5E1', '\x5E3', 
		'\a', '\x1F', '\x2', '\x2', '\x5E2', '\x5E1', '\x3', '\x2', '\x2', '\x2', 
		'\x5E2', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E7', '\x3', 
		'\x2', '\x2', '\x2', '\x5E4', '\x5E7', '\a', '\\', '\x2', '\x2', '\x5E5', 
		'\x5E7', '\a', '\x46', '\x2', '\x2', '\x5E6', '\x5E0', '\x3', '\x2', '\x2', 
		'\x2', '\x5E6', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E5', 
		'\x3', '\x2', '\x2', '\x2', '\x5E7', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x5E8', '\x5EA', '\x5', '\x32', '\x1A', '\x2', '\x5E9', '\x5E8', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EA', 
		'\x5EB', '\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5EE', '\a', '\x8E', '\x2', 
		'\x2', '\x5EC', '\x5ED', '\a', 'n', '\x2', '\x2', '\x5ED', '\x5EF', '\t', 
		'\n', '\x2', '\x2', '\x5EE', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EE', 
		'\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x3', '\x2', '\x2', 
		'\x2', '\x5F0', '\x5F1', '\x5', 'n', '\x38', '\x2', '\x5F1', '\x5F4', 
		'\a', '\x84', '\x2', '\x2', '\x5F2', '\x5F5', '\x5', '\xBA', '^', '\x2', 
		'\x5F3', '\x5F5', '\x5', 'j', '\x36', '\x2', '\x5F4', '\x5F2', '\x3', 
		'\x2', '\x2', '\x2', '\x5F4', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F5', 
		'\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\a', '\b', '\x2', 
		'\x2', '\x5F7', '\x602', '\x5', '\x42', '\"', '\x2', '\x5F8', '\x5FB', 
		'\a', '\a', '\x2', '\x2', '\x5F9', '\x5FC', '\x5', '\xBA', '^', '\x2', 
		'\x5FA', '\x5FC', '\x5', 'j', '\x36', '\x2', '\x5FB', '\x5F9', '\x3', 
		'\x2', '\x2', '\x2', '\x5FB', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x5FC', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', '\a', '\b', '\x2', 
		'\x2', '\x5FE', '\x5FF', '\x5', '\x42', '\"', '\x2', '\x5FF', '\x601', 
		'\x3', '\x2', '\x2', '\x2', '\x600', '\x5F8', '\x3', '\x2', '\x2', '\x2', 
		'\x601', '\x604', '\x3', '\x2', '\x2', '\x2', '\x602', '\x600', '\x3', 
		'\x2', '\x2', '\x2', '\x602', '\x603', '\x3', '\x2', '\x2', '\x2', '\x603', 
		'\x607', '\x3', '\x2', '\x2', '\x2', '\x604', '\x602', '\x3', '\x2', '\x2', 
		'\x2', '\x605', '\x606', '\a', '\x95', '\x2', '\x2', '\x606', '\x608', 
		'\x5', '\x42', '\"', '\x2', '\x607', '\x605', '\x3', '\x2', '\x2', '\x2', 
		'\x607', '\x608', '\x3', '\x2', '\x2', '\x2', '\x608', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x609', '\x60A', '\a', '\x5', '\x2', '\x2', '\x60A', '\x60F', 
		'\x5', '\xBA', '^', '\x2', '\x60B', '\x60C', '\a', '\a', '\x2', '\x2', 
		'\x60C', '\x60E', '\x5', '\xBA', '^', '\x2', '\x60D', '\x60B', '\x3', 
		'\x2', '\x2', '\x2', '\x60E', '\x611', '\x3', '\x2', '\x2', '\x2', '\x60F', 
		'\x60D', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x610', '\x3', '\x2', '\x2', 
		'\x2', '\x610', '\x612', '\x3', '\x2', '\x2', '\x2', '\x611', '\x60F', 
		'\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\a', '\x6', '\x2', '\x2', 
		'\x613', 'k', '\x3', '\x2', '\x2', '\x2', '\x614', '\x616', '\x5', '\x32', 
		'\x1A', '\x2', '\x615', '\x614', '\x3', '\x2', '\x2', '\x2', '\x615', 
		'\x616', '\x3', '\x2', '\x2', '\x2', '\x616', '\x617', '\x3', '\x2', '\x2', 
		'\x2', '\x617', '\x61A', '\a', '\x8E', '\x2', '\x2', '\x618', '\x619', 
		'\a', 'n', '\x2', '\x2', '\x619', '\x61B', '\t', '\n', '\x2', '\x2', '\x61A', 
		'\x618', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x61B', '\x3', '\x2', '\x2', 
		'\x2', '\x61B', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x61D', 
		'\x5', 'n', '\x38', '\x2', '\x61D', '\x620', '\a', '\x84', '\x2', '\x2', 
		'\x61E', '\x621', '\x5', '\xBA', '^', '\x2', '\x61F', '\x621', '\x5', 
		'j', '\x36', '\x2', '\x620', '\x61E', '\x3', '\x2', '\x2', '\x2', '\x620', 
		'\x61F', '\x3', '\x2', '\x2', '\x2', '\x621', '\x622', '\x3', '\x2', '\x2', 
		'\x2', '\x622', '\x623', '\a', '\b', '\x2', '\x2', '\x623', '\x62E', '\x5', 
		'\x42', '\"', '\x2', '\x624', '\x627', '\a', '\a', '\x2', '\x2', '\x625', 
		'\x628', '\x5', '\xBA', '^', '\x2', '\x626', '\x628', '\x5', 'j', '\x36', 
		'\x2', '\x627', '\x625', '\x3', '\x2', '\x2', '\x2', '\x627', '\x626', 
		'\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\x3', '\x2', '\x2', '\x2', 
		'\x629', '\x62A', '\a', '\b', '\x2', '\x2', '\x62A', '\x62B', '\x5', '\x42', 
		'\"', '\x2', '\x62B', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x62C', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x62D', '\x630', '\x3', '\x2', '\x2', '\x2', 
		'\x62E', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x62F', '\x3', 
		'\x2', '\x2', '\x2', '\x62F', '\x633', '\x3', '\x2', '\x2', '\x2', '\x630', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x631', '\x632', '\a', '\x95', '\x2', 
		'\x2', '\x632', '\x634', '\x5', '\x42', '\"', '\x2', '\x633', '\x631', 
		'\x3', '\x2', '\x2', '\x2', '\x633', '\x634', '\x3', '\x2', '\x2', '\x2', 
		'\x634', '\x639', '\x3', '\x2', '\x2', '\x2', '\x635', '\x637', '\x5', 
		'\x84', '\x43', '\x2', '\x636', '\x635', '\x3', '\x2', '\x2', '\x2', '\x636', 
		'\x637', '\x3', '\x2', '\x2', '\x2', '\x637', '\x638', '\x3', '\x2', '\x2', 
		'\x2', '\x638', '\x63A', '\x5', '\x86', '\x44', '\x2', '\x639', '\x636', 
		'\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x63A', 'm', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63C', '\x5', '\xB2', 
		'Z', '\x2', '\x63C', '\x63D', '\a', '\x4', '\x2', '\x2', '\x63D', '\x63F', 
		'\x3', '\x2', '\x2', '\x2', '\x63E', '\x63B', '\x3', '\x2', '\x2', '\x2', 
		'\x63E', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x63F', '\x640', '\x3', 
		'\x2', '\x2', '\x2', '\x640', '\x643', '\x5', '\xB4', '[', '\x2', '\x641', 
		'\x642', '\a', '#', '\x2', '\x2', '\x642', '\x644', '\x5', '\xD2', 'j', 
		'\x2', '\x643', '\x641', '\x3', '\x2', '\x2', '\x2', '\x643', '\x644', 
		'\x3', '\x2', '\x2', '\x2', '\x644', '\x64A', '\x3', '\x2', '\x2', '\x2', 
		'\x645', '\x646', '\a', 'W', '\x2', '\x2', '\x646', '\x647', '\a', '*', 
		'\x2', '\x2', '\x647', '\x64B', '\x5', '\xC0', '\x61', '\x2', '\x648', 
		'\x649', '\a', 'h', '\x2', '\x2', '\x649', '\x64B', '\a', 'W', '\x2', 
		'\x2', '\x64A', '\x645', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x648', 
		'\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', 'o', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x64E', '\a', '\x90', 
		'\x2', '\x2', '\x64D', '\x64F', '\x5', '\xB2', 'Z', '\x2', '\x64E', '\x64D', 
		'\x3', '\x2', '\x2', '\x2', '\x64E', '\x64F', '\x3', '\x2', '\x2', '\x2', 
		'\x64F', '\x652', '\x3', '\x2', '\x2', '\x2', '\x650', '\x651', '\a', 
		']', '\x2', '\x2', '\x651', '\x653', '\x5', '\xD4', 'k', '\x2', '\x652', 
		'\x650', '\x3', '\x2', '\x2', '\x2', '\x652', '\x653', '\x3', '\x2', '\x2', 
		'\x2', '\x653', 'q', '\x3', '\x2', '\x2', '\x2', '\x654', '\x655', '\a', 
		'\xB3', '\x2', '\x2', '\x655', '\x656', '\a', '\x5', '\x2', '\x2', '\x656', 
		'\x657', '\a', '\x95', '\x2', '\x2', '\x657', '\x658', '\x5', '\x42', 
		'\"', '\x2', '\x658', '\x659', '\a', '\x6', '\x2', '\x2', '\x659', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x65A', '\x65C', '\a', '\x5', '\x2', '\x2', 
		'\x65B', '\x65D', '\x5', '\xD6', 'l', '\x2', '\x65C', '\x65B', '\x3', 
		'\x2', '\x2', '\x2', '\x65C', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65D', 
		'\x668', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', '\a', '\x9A', '\x2', 
		'\x2', '\x65F', '\x660', '\a', '*', '\x2', '\x2', '\x660', '\x665', '\x5', 
		'\x42', '\"', '\x2', '\x661', '\x662', '\a', '\a', '\x2', '\x2', '\x662', 
		'\x664', '\x5', '\x42', '\"', '\x2', '\x663', '\x661', '\x3', '\x2', '\x2', 
		'\x2', '\x664', '\x667', '\x3', '\x2', '\x2', '\x2', '\x665', '\x663', 
		'\x3', '\x2', '\x2', '\x2', '\x665', '\x666', '\x3', '\x2', '\x2', '\x2', 
		'\x666', '\x669', '\x3', '\x2', '\x2', '\x2', '\x667', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x668', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x668', 
		'\x669', '\x3', '\x2', '\x2', '\x2', '\x669', '\x66A', '\x3', '\x2', '\x2', 
		'\x2', '\x66A', '\x66B', '\a', 'o', '\x2', '\x2', '\x66B', '\x66C', '\a', 
		'*', '\x2', '\x2', '\x66C', '\x671', '\x5', '\x88', '\x45', '\x2', '\x66D', 
		'\x66E', '\a', '\a', '\x2', '\x2', '\x66E', '\x670', '\x5', '\x88', '\x45', 
		'\x2', '\x66F', '\x66D', '\x3', '\x2', '\x2', '\x2', '\x670', '\x673', 
		'\x3', '\x2', '\x2', '\x2', '\x671', '\x66F', '\x3', '\x2', '\x2', '\x2', 
		'\x671', '\x672', '\x3', '\x2', '\x2', '\x2', '\x672', '\x675', '\x3', 
		'\x2', '\x2', '\x2', '\x673', '\x671', '\x3', '\x2', '\x2', '\x2', '\x674', 
		'\x676', '\x5', 'x', '=', '\x2', '\x675', '\x674', '\x3', '\x2', '\x2', 
		'\x2', '\x675', '\x676', '\x3', '\x2', '\x2', '\x2', '\x676', '\x677', 
		'\x3', '\x2', '\x2', '\x2', '\x677', '\x678', '\a', '\x6', '\x2', '\x2', 
		'\x678', 'u', '\x3', '\x2', '\x2', '\x2', '\x679', '\x69B', '\a', '\x99', 
		'\x2', '\x2', '\x67A', '\x69C', '\x5', '\xD0', 'i', '\x2', '\x67B', '\x67D', 
		'\a', '\x5', '\x2', '\x2', '\x67C', '\x67E', '\x5', '\xD6', 'l', '\x2', 
		'\x67D', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', '\x3', 
		'\x2', '\x2', '\x2', '\x67E', '\x689', '\x3', '\x2', '\x2', '\x2', '\x67F', 
		'\x680', '\a', '\x9A', '\x2', '\x2', '\x680', '\x681', '\a', '*', '\x2', 
		'\x2', '\x681', '\x686', '\x5', '\x42', '\"', '\x2', '\x682', '\x683', 
		'\a', '\a', '\x2', '\x2', '\x683', '\x685', '\x5', '\x42', '\"', '\x2', 
		'\x684', '\x682', '\x3', '\x2', '\x2', '\x2', '\x685', '\x688', '\x3', 
		'\x2', '\x2', '\x2', '\x686', '\x684', '\x3', '\x2', '\x2', '\x2', '\x686', 
		'\x687', '\x3', '\x2', '\x2', '\x2', '\x687', '\x68A', '\x3', '\x2', '\x2', 
		'\x2', '\x688', '\x686', '\x3', '\x2', '\x2', '\x2', '\x689', '\x67F', 
		'\x3', '\x2', '\x2', '\x2', '\x689', '\x68A', '\x3', '\x2', '\x2', '\x2', 
		'\x68A', '\x695', '\x3', '\x2', '\x2', '\x2', '\x68B', '\x68C', '\a', 
		'o', '\x2', '\x2', '\x68C', '\x68D', '\a', '*', '\x2', '\x2', '\x68D', 
		'\x692', '\x5', '\x88', '\x45', '\x2', '\x68E', '\x68F', '\a', '\a', '\x2', 
		'\x2', '\x68F', '\x691', '\x5', '\x88', '\x45', '\x2', '\x690', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x694', '\x3', '\x2', '\x2', '\x2', 
		'\x692', '\x690', '\x3', '\x2', '\x2', '\x2', '\x692', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x693', '\x696', '\x3', '\x2', '\x2', '\x2', '\x694', 
		'\x692', '\x3', '\x2', '\x2', '\x2', '\x695', '\x68B', '\x3', '\x2', '\x2', 
		'\x2', '\x695', '\x696', '\x3', '\x2', '\x2', '\x2', '\x696', '\x698', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x699', '\x5', 'x', '=', '\x2', 
		'\x698', '\x697', '\x3', '\x2', '\x2', '\x2', '\x698', '\x699', '\x3', 
		'\x2', '\x2', '\x2', '\x699', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x69A', 
		'\x69C', '\a', '\x6', '\x2', '\x2', '\x69B', '\x67A', '\x3', '\x2', '\x2', 
		'\x2', '\x69B', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x69C', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x69D', '\x6A5', '\x5', 'z', '>', '\x2', '\x69E', 
		'\x69F', '\a', '\xB5', '\x2', '\x2', '\x69F', '\x6A0', '\a', 'g', '\x2', 
		'\x2', '\x6A0', '\x6A6', '\a', '\xB7', '\x2', '\x2', '\x6A1', '\x6A2', 
		'\a', '\x9E', '\x2', '\x2', '\x6A2', '\x6A6', '\a', '\x80', '\x2', '\x2', 
		'\x6A3', '\x6A6', '\a', 'P', '\x2', '\x2', '\x6A4', '\x6A6', '\a', '\xB6', 
		'\x2', '\x2', '\x6A5', '\x69E', '\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A1', 
		'\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A3', '\x3', '\x2', '\x2', '\x2', 
		'\x6A5', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A6', '\x3', 
		'\x2', '\x2', '\x2', '\x6A6', 'y', '\x3', '\x2', '\x2', '\x2', '\x6A7', 
		'\x6AE', '\t', '\x13', '\x2', '\x2', '\x6A8', '\x6AF', '\x5', '\x90', 
		'I', '\x2', '\x6A9', '\x6AA', '\a', ')', '\x2', '\x2', '\x6AA', '\x6AB', 
		'\x5', '\x8C', 'G', '\x2', '\x6AB', '\x6AC', '\a', '\"', '\x2', '\x2', 
		'\x6AC', '\x6AD', '\x5', '\x8E', 'H', '\x2', '\x6AD', '\x6AF', '\x3', 
		'\x2', '\x2', '\x2', '\x6AE', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6AE', 
		'\x6A9', '\x3', '\x2', '\x2', '\x2', '\x6AF', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x6B0', '\x6B1', '\x5', '\xD8', 'm', '\x2', '\x6B1', '\x6BB', 
		'\a', '\x5', '\x2', '\x2', '\x6B2', '\x6B7', '\x5', '\x42', '\"', '\x2', 
		'\x6B3', '\x6B4', '\a', '\a', '\x2', '\x2', '\x6B4', '\x6B6', '\x5', '\x42', 
		'\"', '\x2', '\x6B5', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B9', 
		'\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B5', '\x3', '\x2', '\x2', '\x2', 
		'\x6B7', '\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6BC', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6BA', 
		'\x6BC', '\a', '\t', '\x2', '\x2', '\x6BB', '\x6B2', '\x3', '\x2', '\x2', 
		'\x2', '\x6BB', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BD', 
		'\x3', '\x2', '\x2', '\x2', '\x6BD', '\x6BE', '\a', '\x6', '\x2', '\x2', 
		'\x6BE', '}', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C0', '\x5', '\xDA', 
		'n', '\x2', '\x6C0', '\x6CD', '\a', '\x5', '\x2', '\x2', '\x6C1', '\x6C3', 
		'\a', '@', '\x2', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', 
		'\x6C2', '\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3', 
		'\x2', '\x2', '\x2', '\x6C4', '\x6C9', '\x5', '\x42', '\"', '\x2', '\x6C5', 
		'\x6C6', '\a', '\a', '\x2', '\x2', '\x6C6', '\x6C8', '\x5', '\x42', '\"', 
		'\x2', '\x6C7', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6CB', 
		'\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6C7', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6CE', '\x3', 
		'\x2', '\x2', '\x2', '\x6CB', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6CC', 
		'\x6CE', '\a', '\t', '\x2', '\x2', '\x6CD', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6CD', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6CE', 
		'\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CF', '\x3', '\x2', '\x2', '\x2', 
		'\x6CF', '\x6D1', '\a', '\x6', '\x2', '\x2', '\x6D0', '\x6D2', '\x5', 
		'r', ':', '\x2', '\x6D1', '\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6D1', 
		'\x6D2', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x6D3', '\x6D4', '\x5', '\x92', 'J', '\x2', '\x6D4', '\x6DE', 
		'\a', '\x5', '\x2', '\x2', '\x6D5', '\x6DA', '\x5', '\x42', '\"', '\x2', 
		'\x6D6', '\x6D7', '\a', '\a', '\x2', '\x2', '\x6D7', '\x6D9', '\x5', '\x42', 
		'\"', '\x2', '\x6D8', '\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DC', 
		'\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6D8', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DF', '\x3', 
		'\x2', '\x2', '\x2', '\x6DC', '\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6DD', 
		'\x6DF', '\a', '\t', '\x2', '\x2', '\x6DE', '\x6D5', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\x6DE', '\x6DF', 
		'\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x6E0', '\x6E2', '\a', '\x6', '\x2', '\x2', '\x6E1', '\x6E3', '\x5', 
		'r', ':', '\x2', '\x6E2', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E2', 
		'\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', '\x3', '\x2', '\x2', 
		'\x2', '\x6E4', '\x6E7', '\a', '\x99', '\x2', '\x2', '\x6E5', '\x6E8', 
		'\x5', 't', ';', '\x2', '\x6E6', '\x6E8', '\x5', '\xD0', 'i', '\x2', '\x6E7', 
		'\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E7', '\x6E6', '\x3', '\x2', '\x2', 
		'\x2', '\x6E8', '\x81', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6EB', 
		'\a', '\x96', '\x2', '\x2', '\x6EA', '\x6EC', '\a', 'v', '\x2', '\x2', 
		'\x6EB', '\x6EA', '\x3', '\x2', '\x2', '\x2', '\x6EB', '\x6EC', '\x3', 
		'\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6ED', 
		'\x6F2', '\x5', '\x38', '\x1D', '\x2', '\x6EE', '\x6EF', '\a', '\a', '\x2', 
		'\x2', '\x6EF', '\x6F1', '\x5', '\x38', '\x1D', '\x2', '\x6F0', '\x6EE', 
		'\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F4', '\x3', '\x2', '\x2', '\x2', 
		'\x6F2', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F3', '\x3', 
		'\x2', '\x2', '\x2', '\x6F3', '\x83', '\x3', '\x2', '\x2', '\x2', '\x6F4', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\a', 'o', '\x2', 
		'\x2', '\x6F6', '\x6F7', '\a', '*', '\x2', '\x2', '\x6F7', '\x6FC', '\x5', 
		'\x88', '\x45', '\x2', '\x6F8', '\x6F9', '\a', '\a', '\x2', '\x2', '\x6F9', 
		'\x6FB', '\x5', '\x88', '\x45', '\x2', '\x6FA', '\x6F8', '\x3', '\x2', 
		'\x2', '\x2', '\x6FB', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FA', 
		'\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FD', '\x3', '\x2', '\x2', '\x2', 
		'\x6FD', '\x85', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\x6FC', '\x3', 
		'\x2', '\x2', '\x2', '\x6FF', '\x700', '\a', '\x64', '\x2', '\x2', '\x700', 
		'\x703', '\x5', '\x42', '\"', '\x2', '\x701', '\x702', '\t', '\x14', '\x2', 
		'\x2', '\x702', '\x704', '\x5', '\x42', '\"', '\x2', '\x703', '\x701', 
		'\x3', '\x2', '\x2', '\x2', '\x703', '\x704', '\x3', '\x2', '\x2', '\x2', 
		'\x704', '\x87', '\x3', '\x2', '\x2', '\x2', '\x705', '\x708', '\x5', 
		'\x42', '\"', '\x2', '\x706', '\x707', '\a', '/', '\x2', '\x2', '\x707', 
		'\x709', '\x5', '\xBC', '_', '\x2', '\x708', '\x706', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', '\x709', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\x70A', '\x70C', '\x5', '\x8A', '\x46', '\x2', 
		'\x70B', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x70C', '\x3', 
		'\x2', '\x2', '\x2', '\x70C', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x70D', 
		'\x70E', '\a', '\xB0', '\x2', '\x2', '\x70E', '\x710', '\t', '\x15', '\x2', 
		'\x2', '\x70F', '\x70D', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x710', 
		'\x3', '\x2', '\x2', '\x2', '\x710', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x712', '\t', '\x16', '\x2', '\x2', '\x712', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x713', '\x714', '\x5', '\x42', '\"', '\x2', '\x714', 
		'\x715', '\a', '\x9C', '\x2', '\x2', '\x715', '\x71E', '\x3', '\x2', '\x2', 
		'\x2', '\x716', '\x717', '\x5', '\x42', '\"', '\x2', '\x717', '\x718', 
		'\a', '\x9F', '\x2', '\x2', '\x718', '\x71E', '\x3', '\x2', '\x2', '\x2', 
		'\x719', '\x71A', '\a', '\x9E', '\x2', '\x2', '\x71A', '\x71E', '\a', 
		'\x80', '\x2', '\x2', '\x71B', '\x71C', '\a', '\x9D', '\x2', '\x2', '\x71C', 
		'\x71E', '\a', '\x9C', '\x2', '\x2', '\x71D', '\x713', '\x3', '\x2', '\x2', 
		'\x2', '\x71D', '\x716', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x719', 
		'\x3', '\x2', '\x2', '\x2', '\x71D', '\x71B', '\x3', '\x2', '\x2', '\x2', 
		'\x71E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', '\x5', 
		'\x42', '\"', '\x2', '\x720', '\x721', '\a', '\x9C', '\x2', '\x2', '\x721', 
		'\x72A', '\x3', '\x2', '\x2', '\x2', '\x722', '\x723', '\x5', '\x42', 
		'\"', '\x2', '\x723', '\x724', '\a', '\x9F', '\x2', '\x2', '\x724', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x725', '\x726', '\a', '\x9E', '\x2', '\x2', 
		'\x726', '\x72A', '\a', '\x80', '\x2', '\x2', '\x727', '\x728', '\a', 
		'\x9D', '\x2', '\x2', '\x728', '\x72A', '\a', '\x9F', '\x2', '\x2', '\x729', 
		'\x71F', '\x3', '\x2', '\x2', '\x2', '\x729', '\x722', '\x3', '\x2', '\x2', 
		'\x2', '\x729', '\x725', '\x3', '\x2', '\x2', '\x2', '\x729', '\x727', 
		'\x3', '\x2', '\x2', '\x2', '\x72A', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x72C', '\x5', '\x42', '\"', '\x2', '\x72C', '\x72D', '\a', 
		'\x9C', '\x2', '\x2', '\x72D', '\x733', '\x3', '\x2', '\x2', '\x2', '\x72E', 
		'\x72F', '\a', '\x9D', '\x2', '\x2', '\x72F', '\x733', '\a', '\x9C', '\x2', 
		'\x2', '\x730', '\x731', '\a', '\x9E', '\x2', '\x2', '\x731', '\x733', 
		'\a', '\x80', '\x2', '\x2', '\x732', '\x72B', '\x3', '\x2', '\x2', '\x2', 
		'\x732', '\x72E', '\x3', '\x2', '\x2', '\x2', '\x732', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x733', '\x91', '\x3', '\x2', '\x2', '\x2', '\x734', 
		'\x735', '\t', '\x17', '\x2', '\x2', '\x735', '\x736', '\a', '\x5', '\x2', 
		'\x2', '\x736', '\x737', '\x5', '\x42', '\"', '\x2', '\x737', '\x738', 
		'\a', '\x6', '\x2', '\x2', '\x738', '\x739', '\a', '\x99', '\x2', '\x2', 
		'\x739', '\x73B', '\a', '\x5', '\x2', '\x2', '\x73A', '\x73C', '\x5', 
		'\x98', 'M', '\x2', '\x73B', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x73B', 
		'\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73D', '\x3', '\x2', '\x2', 
		'\x2', '\x73D', '\x73F', '\x5', '\x9C', 'O', '\x2', '\x73E', '\x740', 
		'\x5', 'z', '>', '\x2', '\x73F', '\x73E', '\x3', '\x2', '\x2', '\x2', 
		'\x73F', '\x740', '\x3', '\x2', '\x2', '\x2', '\x740', '\x741', '\x3', 
		'\x2', '\x2', '\x2', '\x741', '\x742', '\a', '\x6', '\x2', '\x2', '\x742', 
		'\x78A', '\x3', '\x2', '\x2', '\x2', '\x743', '\x744', '\t', '\x18', '\x2', 
		'\x2', '\x744', '\x745', '\a', '\x5', '\x2', '\x2', '\x745', '\x746', 
		'\a', '\x6', '\x2', '\x2', '\x746', '\x747', '\a', '\x99', '\x2', '\x2', 
		'\x747', '\x749', '\a', '\x5', '\x2', '\x2', '\x748', '\x74A', '\x5', 
		'\x98', 'M', '\x2', '\x749', '\x748', '\x3', '\x2', '\x2', '\x2', '\x749', 
		'\x74A', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x74C', '\x3', '\x2', '\x2', 
		'\x2', '\x74B', '\x74D', '\x5', '\x9A', 'N', '\x2', '\x74C', '\x74B', 
		'\x3', '\x2', '\x2', '\x2', '\x74C', '\x74D', '\x3', '\x2', '\x2', '\x2', 
		'\x74D', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x74E', '\x78A', '\a', 
		'\x6', '\x2', '\x2', '\x74F', '\x750', '\t', '\x19', '\x2', '\x2', '\x750', 
		'\x751', '\a', '\x5', '\x2', '\x2', '\x751', '\x752', '\a', '\x6', '\x2', 
		'\x2', '\x752', '\x753', '\a', '\x99', '\x2', '\x2', '\x753', '\x755', 
		'\a', '\x5', '\x2', '\x2', '\x754', '\x756', '\x5', '\x98', 'M', '\x2', 
		'\x755', '\x754', '\x3', '\x2', '\x2', '\x2', '\x755', '\x756', '\x3', 
		'\x2', '\x2', '\x2', '\x756', '\x757', '\x3', '\x2', '\x2', '\x2', '\x757', 
		'\x758', '\x5', '\x9C', 'O', '\x2', '\x758', '\x759', '\a', '\x6', '\x2', 
		'\x2', '\x759', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x75A', '\x75B', 
		'\t', '\x1A', '\x2', '\x2', '\x75B', '\x75C', '\a', '\x5', '\x2', '\x2', 
		'\x75C', '\x75E', '\x5', '\x42', '\"', '\x2', '\x75D', '\x75F', '\x5', 
		'\x94', 'K', '\x2', '\x75E', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x75E', 
		'\x75F', '\x3', '\x2', '\x2', '\x2', '\x75F', '\x761', '\x3', '\x2', '\x2', 
		'\x2', '\x760', '\x762', '\x5', '\x96', 'L', '\x2', '\x761', '\x760', 
		'\x3', '\x2', '\x2', '\x2', '\x761', '\x762', '\x3', '\x2', '\x2', '\x2', 
		'\x762', '\x763', '\x3', '\x2', '\x2', '\x2', '\x763', '\x764', '\a', 
		'\x6', '\x2', '\x2', '\x764', '\x765', '\a', '\x99', '\x2', '\x2', '\x765', 
		'\x767', '\a', '\x5', '\x2', '\x2', '\x766', '\x768', '\x5', '\x98', 'M', 
		'\x2', '\x767', '\x766', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', 
		'\x3', '\x2', '\x2', '\x2', '\x768', '\x769', '\x3', '\x2', '\x2', '\x2', 
		'\x769', '\x76A', '\x5', '\x9C', 'O', '\x2', '\x76A', '\x76B', '\a', '\x6', 
		'\x2', '\x2', '\x76B', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', 
		'\a', '\xA5', '\x2', '\x2', '\x76D', '\x76E', '\a', '\x5', '\x2', '\x2', 
		'\x76E', '\x76F', '\x5', '\x42', '\"', '\x2', '\x76F', '\x770', '\a', 
		'\a', '\x2', '\x2', '\x770', '\x771', '\x5', '$', '\x13', '\x2', '\x771', 
		'\x772', '\a', '\x6', '\x2', '\x2', '\x772', '\x773', '\a', '\x99', '\x2', 
		'\x2', '\x773', '\x775', '\a', '\x5', '\x2', '\x2', '\x774', '\x776', 
		'\x5', '\x98', 'M', '\x2', '\x775', '\x774', '\x3', '\x2', '\x2', '\x2', 
		'\x775', '\x776', '\x3', '\x2', '\x2', '\x2', '\x776', '\x777', '\x3', 
		'\x2', '\x2', '\x2', '\x777', '\x779', '\x5', '\x9C', 'O', '\x2', '\x778', 
		'\x77A', '\x5', 'z', '>', '\x2', '\x779', '\x778', '\x3', '\x2', '\x2', 
		'\x2', '\x779', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x77B', 
		'\x3', '\x2', '\x2', '\x2', '\x77B', '\x77C', '\a', '\x6', '\x2', '\x2', 
		'\x77C', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x77E', '\a', 
		'\xA6', '\x2', '\x2', '\x77E', '\x77F', '\a', '\x5', '\x2', '\x2', '\x77F', 
		'\x780', '\x5', '\x42', '\"', '\x2', '\x780', '\x781', '\a', '\x6', '\x2', 
		'\x2', '\x781', '\x782', '\a', '\x99', '\x2', '\x2', '\x782', '\x784', 
		'\a', '\x5', '\x2', '\x2', '\x783', '\x785', '\x5', '\x98', 'M', '\x2', 
		'\x784', '\x783', '\x3', '\x2', '\x2', '\x2', '\x784', '\x785', '\x3', 
		'\x2', '\x2', '\x2', '\x785', '\x786', '\x3', '\x2', '\x2', '\x2', '\x786', 
		'\x787', '\x5', '\x9C', 'O', '\x2', '\x787', '\x788', '\a', '\x6', '\x2', 
		'\x2', '\x788', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x789', '\x734', 
		'\x3', '\x2', '\x2', '\x2', '\x789', '\x743', '\x3', '\x2', '\x2', '\x2', 
		'\x789', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x789', '\x75A', '\x3', 
		'\x2', '\x2', '\x2', '\x789', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x789', 
		'\x77D', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x78B', '\x78C', '\a', '\a', '\x2', '\x2', '\x78C', '\x78D', '\x5', 
		'$', '\x13', '\x2', '\x78D', '\x95', '\x3', '\x2', '\x2', '\x2', '\x78E', 
		'\x78F', '\a', '\a', '\x2', '\x2', '\x78F', '\x790', '\x5', '$', '\x13', 
		'\x2', '\x790', '\x97', '\x3', '\x2', '\x2', '\x2', '\x791', '\x792', 
		'\a', '\x9A', '\x2', '\x2', '\x792', '\x794', '\a', '*', '\x2', '\x2', 
		'\x793', '\x795', '\x5', '\x42', '\"', '\x2', '\x794', '\x793', '\x3', 
		'\x2', '\x2', '\x2', '\x795', '\x796', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x794', '\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', 
		'\x2', '\x797', '\x99', '\x3', '\x2', '\x2', '\x2', '\x798', '\x799', 
		'\a', 'o', '\x2', '\x2', '\x799', '\x79B', '\a', '*', '\x2', '\x2', '\x79A', 
		'\x79C', '\x5', '\x42', '\"', '\x2', '\x79B', '\x79A', '\x3', '\x2', '\x2', 
		'\x2', '\x79C', '\x79D', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x79B', 
		'\x3', '\x2', '\x2', '\x2', '\x79D', '\x79E', '\x3', '\x2', '\x2', '\x2', 
		'\x79E', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x79F', '\x7A0', '\a', 'o', 
		'\x2', '\x2', '\x7A0', '\x7A1', '\a', '*', '\x2', '\x2', '\x7A1', '\x7A2', 
		'\x5', '\x9C', 'O', '\x2', '\x7A2', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x7A3', '\x7A5', '\x5', '\x42', '\"', '\x2', '\x7A4', '\x7A6', '\x5', 
		'\x8A', '\x46', '\x2', '\x7A5', '\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A5', 
		'\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7AE', '\x3', '\x2', '\x2', 
		'\x2', '\x7A7', '\x7A8', '\a', '\a', '\x2', '\x2', '\x7A8', '\x7AA', '\x5', 
		'\x42', '\"', '\x2', '\x7A9', '\x7AB', '\x5', '\x8A', '\x46', '\x2', '\x7AA', 
		'\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\x3', '\x2', '\x2', 
		'\x2', '\x7AB', '\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7A7', 
		'\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'\x7AE', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x3', 
		'\x2', '\x2', '\x2', '\x7AF', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x7B0', 
		'\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B2', '\x5', 'R', '*', 
		'\x2', '\x7B2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', 
		'\x5', 'R', '*', '\x2', '\x7B4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x7B5', 
		'\x7B6', '\t', '\x1B', '\x2', '\x2', '\x7B6', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x7B7', '\x7B8', '\a', '\xBD', '\x2', '\x2', '\x7B8', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BC', '\x5', '\x42', '\"', '\x2', 
		'\x7BA', '\x7BC', '\x5', '\x1E', '\x10', '\x2', '\x7BB', '\x7B9', '\x3', 
		'\x2', '\x2', '\x2', '\x7BB', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BC', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\t', '\x1C', '\x2', 
		'\x2', '\x7BE', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', 
		'\t', '\x1D', '\x2', '\x2', '\x7C0', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x7C1', '\x7C2', '\x5', '\xDE', 'p', '\x2', '\x7C2', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\x7C3', '\x7C4', '\x5', '\xDE', 'p', '\x2', '\x7C4', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C6', '\x5', '\xDE', 'p', '\x2', 
		'\x7C6', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\x5', 
		'\xDE', 'p', '\x2', '\x7C8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x7C9', 
		'\x7CA', '\x5', '\xDE', 'p', '\x2', '\x7CA', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x7CB', '\x7CC', '\x5', '\xDE', 'p', '\x2', '\x7CC', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x7CD', '\x7CE', '\x5', '\xDE', 'p', '\x2', '\x7CE', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7D0', '\x5', '\xDE', 'p', 
		'\x2', '\x7D0', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D2', 
		'\x5', '\xDE', 'p', '\x2', '\x7D2', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x7D3', '\x7D4', '\x5', '\xDE', 'p', '\x2', '\x7D4', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\x7D5', '\x7D6', '\x5', '\xDE', 'p', '\x2', '\x7D6', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\x5', '\xDE', 'p', '\x2', 
		'\x7D8', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DA', '\x5', 
		'\xDE', 'p', '\x2', '\x7DA', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x7DB', 
		'\x7DC', '\x5', '\xDE', 'p', '\x2', '\x7DC', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x7DD', '\x7DE', '\x5', '\xDE', 'p', '\x2', '\x7DE', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x7DF', '\x7E0', '\x5', '\xDE', 'p', '\x2', '\x7E0', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E2', '\x5', '\xDE', 'p', 
		'\x2', '\x7E2', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', 
		'\x5', '\xDE', 'p', '\x2', '\x7E4', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\x7E5', '\x7E6', '\x5', '\xDE', 'p', '\x2', '\x7E6', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x7E7', '\x7E8', '\x5', '\xDE', 'p', '\x2', '\x7E8', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x5', '\xDE', 'p', '\x2', 
		'\x7EA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x7EC', '\x5', 
		'\xDE', 'p', '\x2', '\x7EC', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x7ED', 
		'\x7EE', '\x5', '\xDE', 'p', '\x2', '\x7EE', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\x7EF', '\x7F0', '\x5', '\xDE', 'p', '\x2', '\x7F0', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7F9', '\a', '\xBA', '\x2', '\x2', '\x7F2', 
		'\x7F9', '\x5', '\xAC', 'W', '\x2', '\x7F3', '\x7F9', '\a', '\xBD', '\x2', 
		'\x2', '\x7F4', '\x7F5', '\a', '\x5', '\x2', '\x2', '\x7F5', '\x7F6', 
		'\x5', '\xDE', 'p', '\x2', '\x7F6', '\x7F7', '\a', '\x6', '\x2', '\x2', 
		'\x7F7', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7F1', '\x3', 
		'\x2', '\x2', '\x2', '\x7F8', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F8', 
		'\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7F4', '\x3', '\x2', '\x2', 
		'\x2', '\x7F9', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x122', '\xE3', '\xEB', 
		'\xF2', '\xF7', '\xFD', '\x103', '\x105', '\x11F', '\x126', '\x12D', '\x133', 
		'\x137', '\x13A', '\x141', '\x144', '\x148', '\x150', '\x154', '\x156', 
		'\x15A', '\x15E', '\x162', '\x165', '\x16C', '\x172', '\x178', '\x17D', 
		'\x188', '\x18E', '\x192', '\x196', '\x199', '\x19D', '\x1A3', '\x1A8', 
		'\x1B1', '\x1B8', '\x1BE', '\x1C2', '\x1C6', '\x1CB', '\x1D1', '\x1DD', 
		'\x1E1', '\x1E6', '\x1E9', '\x1EC', '\x1F1', '\x1F4', '\x202', '\x209', 
		'\x210', '\x212', '\x215', '\x21B', '\x220', '\x228', '\x22D', '\x23C', 
		'\x242', '\x24C', '\x251', '\x25B', '\x25F', '\x261', '\x265', '\x26A', 
		'\x26C', '\x274', '\x27A', '\x27F', '\x286', '\x291', '\x294', '\x296', 
		'\x29D', '\x2A1', '\x2A8', '\x2AE', '\x2B4', '\x2BA', '\x2BF', '\x2C8', 
		'\x2CD', '\x2D8', '\x2DD', '\x2E8', '\x2ED', '\x2F1', '\x301', '\x30B', 
		'\x310', '\x318', '\x324', '\x329', '\x331', '\x338', '\x33B', '\x342', 
		'\x345', '\x348', '\x34C', '\x354', '\x359', '\x363', '\x368', '\x371', 
		'\x378', '\x37C', '\x380', '\x383', '\x38B', '\x398', '\x39B', '\x3A3', 
		'\x3AC', '\x3B0', '\x3B5', '\x3D3', '\x3DF', '\x3E4', '\x3F0', '\x3F6', 
		'\x3FD', '\x401', '\x40B', '\x40E', '\x414', '\x41A', '\x423', '\x426', 
		'\x42A', '\x42C', '\x42E', '\x437', '\x43E', '\x445', '\x44B', '\x450', 
		'\x458', '\x45D', '\x466', '\x471', '\x478', '\x47C', '\x47F', '\x483', 
		'\x48D', '\x493', '\x495', '\x49D', '\x4A4', '\x4AB', '\x4B0', '\x4B2', 
		'\x4B8', '\x4C1', '\x4C6', '\x4CD', '\x4D1', '\x4D3', '\x4D6', '\x4DE', 
		'\x4E2', '\x4E5', '\x4EB', '\x4EF', '\x4F4', '\x4FB', '\x504', '\x508', 
		'\x50A', '\x50E', '\x517', '\x51C', '\x51E', '\x52B', '\x52E', '\x537', 
		'\x542', '\x549', '\x54C', '\x551', '\x555', '\x558', '\x55B', '\x560', 
		'\x564', '\x569', '\x56C', '\x56F', '\x574', '\x578', '\x57B', '\x582', 
		'\x587', '\x590', '\x595', '\x598', '\x5A0', '\x5A4', '\x5AC', '\x5AF', 
		'\x5B1', '\x5BA', '\x5BD', '\x5BF', '\x5C3', '\x5C7', '\x5CB', '\x5CE', 
		'\x5D9', '\x5DE', '\x5E2', '\x5E6', '\x5E9', '\x5EE', '\x5F4', '\x5FB', 
		'\x602', '\x607', '\x60F', '\x615', '\x61A', '\x620', '\x627', '\x62E', 
		'\x633', '\x636', '\x639', '\x63E', '\x643', '\x64A', '\x64E', '\x652', 
		'\x65C', '\x665', '\x668', '\x671', '\x675', '\x67D', '\x686', '\x689', 
		'\x692', '\x695', '\x698', '\x69B', '\x6A5', '\x6AE', '\x6B7', '\x6BB', 
		'\x6C2', '\x6C9', '\x6CD', '\x6D1', '\x6DA', '\x6DE', '\x6E2', '\x6E7', 
		'\x6EB', '\x6F2', '\x6FC', '\x703', '\x708', '\x70B', '\x70F', '\x71D', 
		'\x729', '\x732', '\x73B', '\x73F', '\x749', '\x74C', '\x755', '\x75E', 
		'\x761', '\x767', '\x775', '\x779', '\x784', '\x789', '\x796', '\x79D', 
		'\x7A5', '\x7AA', '\x7AE', '\x7BB', '\x7F8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TestAntlr.Parser
