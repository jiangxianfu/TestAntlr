//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySqlParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestAntlr.MySql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MySqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		ATTRIBUTE=14, BEFORE=15, BETWEEN=16, BOTH=17, BUCKETS=18, BY=19, CALL=20, 
		CASCADE=21, CASE=22, CAST=23, CHANGE=24, CHARACTER=25, CHECK=26, COLLATE=27, 
		COLUMN=28, CONDITION=29, CONSTRAINT=30, CONTINUE=31, CONVERT=32, CREATE=33, 
		CROSS=34, CURRENT=35, CURRENT_ROLE=36, CURRENT_USER=37, CURSOR=38, DATABASE=39, 
		DATABASES=40, DECLARE=41, DEFAULT=42, DELAYED=43, DELETE=44, DESC=45, 
		DESCRIBE=46, DETERMINISTIC=47, DIAGNOSTICS=48, DISTINCT=49, DISTINCTROW=50, 
		DROP=51, EACH=52, ELSE=53, ELSEIF=54, EMPTY=55, ENCLOSED=56, ESCAPED=57, 
		EXCEPT=58, EXISTS=59, EXIT=60, EXPLAIN=61, FALSE=62, FETCH=63, FOR=64, 
		FORCE=65, FOREIGN=66, FROM=67, FULLTEXT=68, GENERATED=69, GET=70, GRANT=71, 
		GROUP=72, HAVING=73, HIGH_PRIORITY=74, HISTOGRAM=75, IF=76, IGNORE=77, 
		IGNORED=78, IN=79, INDEX=80, INFILE=81, INNER=82, INOUT=83, INSERT=84, 
		INTERVAL=85, INTO=86, IS=87, ITERATE=88, JOIN=89, KEY=90, KEYS=91, KILL=92, 
		LATERAL=93, LEADING=94, LEAVE=95, LEFT=96, LIKE=97, LIMIT=98, LINEAR=99, 
		LINES=100, LOAD=101, LOCK=102, LOCKED=103, LOOP=104, LOW_PRIORITY=105, 
		MASTER_BIND=106, MASTER_SSL_VERIFY_SERVER_CERT=107, MATCH=108, MAXVALUE=109, 
		MINVALUE=110, MODIFIES=111, NATURAL=112, NOT=113, NO_WRITE_TO_BINLOG=114, 
		NULL_LITERAL=115, NUMBER=116, ON=117, OPTIMIZE=118, OPTION=119, OPTIONAL=120, 
		OPTIONALLY=121, OR=122, ORDER=123, OUT=124, OUTER=125, OUTFILE=126, OVER=127, 
		PARTITION=128, PRIMARY=129, PROCEDURE=130, PURGE=131, RANGE=132, READ=133, 
		READS=134, REFERENCES=135, REGEXP=136, RELEASE=137, RENAME=138, REPEAT=139, 
		REPLACE=140, REQUIRE=141, RESIGNAL=142, RESTRICT=143, RETAIN=144, RETURN=145, 
		REVOKE=146, RIGHT=147, RLIKE=148, SCHEMA=149, SCHEMAS=150, SELECT=151, 
		SET=152, SEPARATOR=153, SHOW=154, SIGNAL=155, SKIP_=156, SPATIAL=157, 
		SQL=158, SQLEXCEPTION=159, SQLSTATE=160, SQLWARNING=161, SQL_BIG_RESULT=162, 
		SQL_CALC_FOUND_ROWS=163, SQL_SMALL_RESULT=164, SSL=165, STACKED=166, STARTING=167, 
		STATEMENT=168, STRAIGHT_JOIN=169, TABLE=170, TERMINATED=171, THEN=172, 
		TO=173, TRAILING=174, TRIGGER=175, TRUE=176, UNDO=177, UNION=178, UNIQUE=179, 
		UNLOCK=180, UNSIGNED=181, UPDATE=182, USAGE=183, USE=184, USING=185, VALUES=186, 
		WHEN=187, WHERE=188, WHILE=189, WITH=190, WRITE=191, XOR=192, ZEROFILL=193, 
		TINYINT=194, SMALLINT=195, MEDIUMINT=196, MIDDLEINT=197, INT=198, INT1=199, 
		INT2=200, INT3=201, INT4=202, INT8=203, INTEGER=204, BIGINT=205, REAL=206, 
		DOUBLE=207, PRECISION=208, FLOAT=209, FLOAT4=210, FLOAT8=211, DECIMAL=212, 
		DEC=213, NUMERIC=214, DATE=215, TIME=216, TIMESTAMP=217, DATETIME=218, 
		YEAR=219, CHAR=220, VARCHAR=221, NVARCHAR=222, NATIONAL=223, BINARY=224, 
		VARBINARY=225, TINYBLOB=226, BLOB=227, MEDIUMBLOB=228, LONG=229, LONGBLOB=230, 
		TINYTEXT=231, TEXT=232, MEDIUMTEXT=233, LONGTEXT=234, ENUM=235, VARYING=236, 
		SERIAL=237, YEAR_MONTH=238, DAY_HOUR=239, DAY_MINUTE=240, DAY_SECOND=241, 
		HOUR_MINUTE=242, HOUR_SECOND=243, MINUTE_SECOND=244, SECOND_MICROSECOND=245, 
		MINUTE_MICROSECOND=246, HOUR_MICROSECOND=247, DAY_MICROSECOND=248, JSON_ARRAY=249, 
		JSON_ARRAYAGG=250, JSON_ARRAY_APPEND=251, JSON_ARRAY_INSERT=252, JSON_CONTAINS=253, 
		JSON_CONTAINS_PATH=254, JSON_DEPTH=255, JSON_EXTRACT=256, JSON_INSERT=257, 
		JSON_KEYS=258, JSON_LENGTH=259, JSON_MERGE=260, JSON_MERGE_PATCH=261, 
		JSON_MERGE_PRESERVE=262, JSON_OBJECT=263, JSON_OBJECTAGG=264, JSON_OVERLAPS=265, 
		JSON_PRETTY=266, JSON_QUOTE=267, JSON_REMOVE=268, JSON_REPLACE=269, JSON_SCHEMA_VALID=270, 
		JSON_SCHEMA_VALIDATION_REPORT=271, JSON_SEARCH=272, JSON_SET=273, JSON_STORAGE_FREE=274, 
		JSON_STORAGE_SIZE=275, JSON_TABLE=276, JSON_TYPE=277, JSON_UNQUOTE=278, 
		JSON_VALID=279, JSON_VALUE=280, NESTED=281, ORDINALITY=282, PATH=283, 
		AVG=284, BIT_AND=285, BIT_OR=286, BIT_XOR=287, COUNT=288, CUME_DIST=289, 
		DENSE_RANK=290, FIRST_VALUE=291, GROUP_CONCAT=292, LAG=293, LAST_VALUE=294, 
		LEAD=295, MAX=296, MIN=297, NTILE=298, NTH_VALUE=299, PERCENT_RANK=300, 
		RANK=301, ROW_NUMBER=302, STD=303, STDDEV=304, STDDEV_POP=305, STDDEV_SAMP=306, 
		SUM=307, VAR_POP=308, VAR_SAMP=309, VARIANCE=310, CURRENT_DATE=311, CURRENT_TIME=312, 
		CURRENT_TIMESTAMP=313, LOCALTIME=314, CURDATE=315, CURTIME=316, DATE_ADD=317, 
		DATE_SUB=318, EXTRACT=319, LOCALTIMESTAMP=320, NOW=321, POSITION=322, 
		SUBSTR=323, SUBSTRING=324, SYSDATE=325, TRIM=326, UTC_DATE=327, UTC_TIME=328, 
		UTC_TIMESTAMP=329, ACCOUNT=330, ACTION=331, AFTER=332, AGGREGATE=333, 
		ALGORITHM=334, ANY=335, AT=336, AUTHORS=337, AUTOCOMMIT=338, AUTOEXTEND_SIZE=339, 
		AUTO_INCREMENT=340, AVG_ROW_LENGTH=341, BEGIN=342, BINLOG=343, BIT=344, 
		BLOCK=345, BOOL=346, BOOLEAN=347, BTREE=348, CACHE=349, CASCADED=350, 
		CHAIN=351, CHANGED=352, CHANNEL=353, CHECKSUM=354, PAGE_CHECKSUM=355, 
		CIPHER=356, CLASS_ORIGIN=357, CLIENT=358, CLOSE=359, CLUSTERING=360, COALESCE=361, 
		CODE=362, COLUMNS=363, COLUMN_FORMAT=364, COLUMN_NAME=365, COMMENT=366, 
		COMMIT=367, COMPACT=368, COMPLETION=369, COMPRESSED=370, COMPRESSION=371, 
		CONCURRENT=372, CONNECT=373, CONNECTION=374, CONSISTENT=375, CONSTRAINT_CATALOG=376, 
		CONSTRAINT_SCHEMA=377, CONSTRAINT_NAME=378, CONTAINS=379, CONTEXT=380, 
		CONTRIBUTORS=381, COPY=382, CPU=383, CYCLE=384, CURSOR_NAME=385, DATA=386, 
		DATAFILE=387, DEALLOCATE=388, DEFAULT_AUTH=389, DEFINER=390, DELAY_KEY_WRITE=391, 
		DES_KEY_FILE=392, DIRECTORY=393, DISABLE=394, DISCARD=395, DISK=396, DO=397, 
		DUMPFILE=398, DUPLICATE=399, DYNAMIC=400, ENABLE=401, ENCRYPTED=402, ENCRYPTION=403, 
		ENCRYPTION_KEY_ID=404, END=405, ENDS=406, ENGINE=407, ENGINES=408, ERROR=409, 
		ERRORS=410, ESCAPE=411, EVEN=412, EVENT=413, EVENTS=414, EVERY=415, EXCHANGE=416, 
		EXCLUSIVE=417, EXPIRE=418, EXPORT=419, EXTENDED=420, EXTENT_SIZE=421, 
		FAILED_LOGIN_ATTEMPTS=422, FAST=423, FAULTS=424, FIELDS=425, FILE_BLOCK_SIZE=426, 
		FILTER=427, FIRST=428, FIXED=429, FLUSH=430, FOLLOWING=431, FOLLOWS=432, 
		FOUND=433, FULL=434, FUNCTION=435, GENERAL=436, GLOBAL=437, GRANTS=438, 
		GROUP_REPLICATION=439, HANDLER=440, HASH=441, HELP=442, HISTORY=443, HOST=444, 
		HOSTS=445, IDENTIFIED=446, IGNORE_SERVER_IDS=447, IMPORT=448, INCREMENT=449, 
		INDEXES=450, INITIAL_SIZE=451, INPLACE=452, INSERT_METHOD=453, INSTALL=454, 
		INSTANCE=455, INSTANT=456, INVISIBLE=457, INVOKER=458, IO=459, IO_THREAD=460, 
		IPC=461, ISOLATION=462, ISSUER=463, JSON=464, KEY_BLOCK_SIZE=465, LANGUAGE=466, 
		LAST=467, LEAVES=468, LESS=469, LEVEL=470, LIST=471, LOCAL=472, LOGFILE=473, 
		LOGS=474, MASTER=475, MASTER_AUTO_POSITION=476, MASTER_CONNECT_RETRY=477, 
		MASTER_DELAY=478, MASTER_HEARTBEAT_PERIOD=479, MASTER_HOST=480, MASTER_LOG_FILE=481, 
		MASTER_LOG_POS=482, MASTER_PASSWORD=483, MASTER_PORT=484, MASTER_RETRY_COUNT=485, 
		MASTER_SSL=486, MASTER_SSL_CA=487, MASTER_SSL_CAPATH=488, MASTER_SSL_CERT=489, 
		MASTER_SSL_CIPHER=490, MASTER_SSL_CRL=491, MASTER_SSL_CRLPATH=492, MASTER_SSL_KEY=493, 
		MASTER_TLS_VERSION=494, MASTER_USER=495, MAX_CONNECTIONS_PER_HOUR=496, 
		MAX_QUERIES_PER_HOUR=497, MAX_ROWS=498, MAX_SIZE=499, MAX_UPDATES_PER_HOUR=500, 
		MAX_USER_CONNECTIONS=501, MEDIUM=502, MEMBER=503, MERGE=504, MESSAGE_TEXT=505, 
		MID=506, MIGRATE=507, MIN_ROWS=508, MODE=509, MODIFY=510, MUTEX=511, MYSQL=512, 
		MYSQL_ERRNO=513, NAME=514, NAMES=515, NCHAR=516, NEVER=517, NEXT=518, 
		NO=519, NOCACHE=520, NOCOPY=521, NOCYCLE=522, NOMAXVALUE=523, NOMINVALUE=524, 
		NOWAIT=525, NODEGROUP=526, NONE=527, ODBC=528, OFFLINE=529, OFFSET=530, 
		OF=531, OJ=532, OLD_PASSWORD=533, ONE=534, ONLINE=535, ONLY=536, OPEN=537, 
		OPTIMIZER_COSTS=538, OPTIONS=539, OWNER=540, PACK_KEYS=541, PAGE=542, 
		PAGE_COMPRESSED=543, PAGE_COMPRESSION_LEVEL=544, PARSER=545, PARTIAL=546, 
		PARTITIONING=547, PARTITIONS=548, PASSWORD=549, PASSWORD_LOCK_TIME=550, 
		PHASE=551, PLUGIN=552, PLUGIN_DIR=553, PLUGINS=554, PORT=555, PRECEDES=556, 
		PRECEDING=557, PREPARE=558, PRESERVE=559, PREV=560, PROCESSLIST=561, PROFILE=562, 
		PROFILES=563, PROXY=564, QUERY=565, QUICK=566, REBUILD=567, RECOVER=568, 
		RECURSIVE=569, REDO_BUFFER_SIZE=570, REDUNDANT=571, RELAY=572, RELAY_LOG_FILE=573, 
		RELAY_LOG_POS=574, RELAYLOG=575, REMOVE=576, REORGANIZE=577, REPAIR=578, 
		REPLICATE_DO_DB=579, REPLICATE_DO_TABLE=580, REPLICATE_IGNORE_DB=581, 
		REPLICATE_IGNORE_TABLE=582, REPLICATE_REWRITE_DB=583, REPLICATE_WILD_DO_TABLE=584, 
		REPLICATE_WILD_IGNORE_TABLE=585, REPLICATION=586, RESET=587, RESTART=588, 
		RESUME=589, RETURNED_SQLSTATE=590, RETURNING=591, RETURNS=592, REUSE=593, 
		ROLE=594, ROLLBACK=595, ROLLUP=596, ROTATE=597, ROW=598, ROWS=599, ROW_FORMAT=600, 
		RTREE=601, SAVEPOINT=602, SCHEDULE=603, SECURITY=604, SEQUENCE=605, SERVER=606, 
		SESSION=607, SHARE=608, SHARED=609, SIGNED=610, SIMPLE=611, SLAVE=612, 
		SLOW=613, SNAPSHOT=614, SOCKET=615, SOME=616, SONAME=617, SOUNDS=618, 
		SOURCE=619, SQL_AFTER_GTIDS=620, SQL_AFTER_MTS_GAPS=621, SQL_BEFORE_GTIDS=622, 
		SQL_BUFFER_RESULT=623, SQL_CACHE=624, SQL_NO_CACHE=625, SQL_THREAD=626, 
		START=627, STARTS=628, STATS_AUTO_RECALC=629, STATS_PERSISTENT=630, STATS_SAMPLE_PAGES=631, 
		STATUS=632, STOP=633, STORAGE=634, STORED=635, STRING=636, SUBCLASS_ORIGIN=637, 
		SUBJECT=638, SUBPARTITION=639, SUBPARTITIONS=640, SUSPEND=641, SWAPS=642, 
		SWITCHES=643, TABLE_NAME=644, TABLESPACE=645, TABLE_TYPE=646, TEMPORARY=647, 
		TEMPTABLE=648, THAN=649, TRADITIONAL=650, TRANSACTION=651, TRANSACTIONAL=652, 
		TRIGGERS=653, TRUNCATE=654, UNBOUNDED=655, UNDEFINED=656, UNDOFILE=657, 
		UNDO_BUFFER_SIZE=658, UNINSTALL=659, UNKNOWN=660, UNTIL=661, UPGRADE=662, 
		USER=663, USE_FRM=664, USER_RESOURCES=665, VALIDATION=666, VALUE=667, 
		VARIABLES=668, VIEW=669, VIRTUAL=670, VISIBLE=671, WAIT=672, WARNINGS=673, 
		WINDOW=674, WITHOUT=675, WORK=676, WRAPPER=677, X509=678, XA=679, XML=680, 
		YES=681, EUR=682, USA=683, JIS=684, ISO=685, INTERNAL=686, QUARTER=687, 
		MONTH=688, DAY=689, HOUR=690, MINUTE=691, WEEK=692, SECOND=693, MICROSECOND=694, 
		ADMIN=695, APPLICATION_PASSWORD_ADMIN=696, AUDIT_ADMIN=697, BACKUP_ADMIN=698, 
		BINLOG_ADMIN=699, BINLOG_ENCRYPTION_ADMIN=700, CLONE_ADMIN=701, CONNECTION_ADMIN=702, 
		ENCRYPTION_KEY_ADMIN=703, EXECUTE=704, FILE=705, FIREWALL_ADMIN=706, FIREWALL_USER=707, 
		FLUSH_OPTIMIZER_COSTS=708, FLUSH_STATUS=709, FLUSH_TABLES=710, FLUSH_USER_RESOURCES=711, 
		GROUP_REPLICATION_ADMIN=712, INNODB_REDO_LOG_ARCHIVE=713, INNODB_REDO_LOG_ENABLE=714, 
		INVOKE=715, LAMBDA=716, NDB_STORED_USER=717, PASSWORDLESS_USER_ADMIN=718, 
		PERSIST_RO_VARIABLES_ADMIN=719, PRIVILEGES=720, PROCESS=721, RELOAD=722, 
		REPLICATION_APPLIER=723, REPLICATION_SLAVE_ADMIN=724, RESOURCE_GROUP_ADMIN=725, 
		RESOURCE_GROUP_USER=726, ROLE_ADMIN=727, ROUTINE=728, S3=729, SERVICE_CONNECTION_ADMIN=730, 
		SESSION_VARIABLES_ADMIN=731, SET_USER_ID=732, SHOW_ROUTINE=733, SHUTDOWN=734, 
		SUPER=735, SYSTEM_VARIABLES_ADMIN=736, TABLES=737, TABLE_ENCRYPTION_ADMIN=738, 
		VERSION_TOKEN_ADMIN=739, XA_RECOVER_ADMIN=740, ARMSCII8=741, ASCII=742, 
		BIG5=743, CP1250=744, CP1251=745, CP1256=746, CP1257=747, CP850=748, CP852=749, 
		CP866=750, CP932=751, DEC8=752, EUCJPMS=753, EUCKR=754, GB18030=755, GB2312=756, 
		GBK=757, GEOSTD8=758, GREEK=759, HEBREW=760, HP8=761, KEYBCS2=762, KOI8R=763, 
		KOI8U=764, LATIN1=765, LATIN2=766, LATIN5=767, LATIN7=768, MACCE=769, 
		MACROMAN=770, SJIS=771, SWE7=772, TIS620=773, UCS2=774, UJIS=775, UTF16=776, 
		UTF16LE=777, UTF32=778, UTF8=779, UTF8MB3=780, UTF8MB4=781, ARCHIVE=782, 
		BLACKHOLE=783, CSV=784, FEDERATED=785, INNODB=786, MEMORY=787, MRG_MYISAM=788, 
		MYISAM=789, NDB=790, NDBCLUSTER=791, PERFORMANCE_SCHEMA=792, TOKUDB=793, 
		REPEATABLE=794, COMMITTED=795, UNCOMMITTED=796, SERIALIZABLE=797, GEOMETRYCOLLECTION=798, 
		GEOMCOLLECTION=799, GEOMETRY=800, LINESTRING=801, MULTILINESTRING=802, 
		MULTIPOINT=803, MULTIPOLYGON=804, POINT=805, POLYGON=806, ABS=807, ACOS=808, 
		ADDDATE=809, ADDTIME=810, AES_DECRYPT=811, AES_ENCRYPT=812, AREA=813, 
		ASBINARY=814, ASIN=815, ASTEXT=816, ASWKB=817, ASWKT=818, ASYMMETRIC_DECRYPT=819, 
		ASYMMETRIC_DERIVE=820, ASYMMETRIC_ENCRYPT=821, ASYMMETRIC_SIGN=822, ASYMMETRIC_VERIFY=823, 
		ATAN=824, ATAN2=825, BENCHMARK=826, BIN=827, BIT_COUNT=828, BIT_LENGTH=829, 
		BUFFER=830, CATALOG_NAME=831, CEIL=832, CEILING=833, CENTROID=834, CHARACTER_LENGTH=835, 
		CHARSET=836, CHAR_LENGTH=837, COERCIBILITY=838, COLLATION=839, COMPRESS=840, 
		CONCAT=841, CONCAT_WS=842, CONNECTION_ID=843, CONV=844, CONVERT_TZ=845, 
		COS=846, COT=847, CRC32=848, CREATE_ASYMMETRIC_PRIV_KEY=849, CREATE_ASYMMETRIC_PUB_KEY=850, 
		CREATE_DH_PARAMETERS=851, CREATE_DIGEST=852, CROSSES=853, DATEDIFF=854, 
		DATE_FORMAT=855, DAYNAME=856, DAYOFMONTH=857, DAYOFWEEK=858, DAYOFYEAR=859, 
		DECODE=860, DEGREES=861, DES_DECRYPT=862, DES_ENCRYPT=863, DIMENSION=864, 
		DISJOINT=865, ELT=866, ENCODE=867, ENCRYPT=868, ENDPOINT=869, ENGINE_ATTRIBUTE=870, 
		ENVELOPE=871, EQUALS=872, EXP=873, EXPORT_SET=874, EXTERIORRING=875, EXTRACTVALUE=876, 
		FIELD=877, FIND_IN_SET=878, FLOOR=879, FORMAT=880, FOUND_ROWS=881, FROM_BASE64=882, 
		FROM_DAYS=883, FROM_UNIXTIME=884, GEOMCOLLFROMTEXT=885, GEOMCOLLFROMWKB=886, 
		GEOMETRYCOLLECTIONFROMTEXT=887, GEOMETRYCOLLECTIONFROMWKB=888, GEOMETRYFROMTEXT=889, 
		GEOMETRYFROMWKB=890, GEOMETRYN=891, GEOMETRYTYPE=892, GEOMFROMTEXT=893, 
		GEOMFROMWKB=894, GET_FORMAT=895, GET_LOCK=896, GLENGTH=897, GREATEST=898, 
		GTID_SUBSET=899, GTID_SUBTRACT=900, HEX=901, IFNULL=902, INET6_ATON=903, 
		INET6_NTOA=904, INET_ATON=905, INET_NTOA=906, INSTR=907, INTERIORRINGN=908, 
		INTERSECTS=909, ISCLOSED=910, ISEMPTY=911, ISNULL=912, ISSIMPLE=913, IS_FREE_LOCK=914, 
		IS_IPV4=915, IS_IPV4_COMPAT=916, IS_IPV4_MAPPED=917, IS_IPV6=918, IS_USED_LOCK=919, 
		LAST_INSERT_ID=920, LCASE=921, LEAST=922, LENGTH=923, LINEFROMTEXT=924, 
		LINEFROMWKB=925, LINESTRINGFROMTEXT=926, LINESTRINGFROMWKB=927, LN=928, 
		LOAD_FILE=929, LOCATE=930, LOG=931, LOG10=932, LOG2=933, LOWER=934, LPAD=935, 
		LTRIM=936, MAKEDATE=937, MAKETIME=938, MAKE_SET=939, MASTER_POS_WAIT=940, 
		MBRCONTAINS=941, MBRDISJOINT=942, MBREQUAL=943, MBRINTERSECTS=944, MBROVERLAPS=945, 
		MBRTOUCHES=946, MBRWITHIN=947, MD5=948, MLINEFROMTEXT=949, MLINEFROMWKB=950, 
		MONTHNAME=951, MPOINTFROMTEXT=952, MPOINTFROMWKB=953, MPOLYFROMTEXT=954, 
		MPOLYFROMWKB=955, MULTILINESTRINGFROMTEXT=956, MULTILINESTRINGFROMWKB=957, 
		MULTIPOINTFROMTEXT=958, MULTIPOINTFROMWKB=959, MULTIPOLYGONFROMTEXT=960, 
		MULTIPOLYGONFROMWKB=961, NAME_CONST=962, NULLIF=963, NUMGEOMETRIES=964, 
		NUMINTERIORRINGS=965, NUMPOINTS=966, OCT=967, OCTET_LENGTH=968, ORD=969, 
		OVERLAPS=970, PERIOD_ADD=971, PERIOD_DIFF=972, PI=973, POINTFROMTEXT=974, 
		POINTFROMWKB=975, POINTN=976, POLYFROMTEXT=977, POLYFROMWKB=978, POLYGONFROMTEXT=979, 
		POLYGONFROMWKB=980, POW=981, POWER=982, QUOTE=983, RADIANS=984, RAND=985, 
		RANDOM_BYTES=986, RELEASE_LOCK=987, REVERSE=988, ROUND=989, ROW_COUNT=990, 
		RPAD=991, RTRIM=992, SEC_TO_TIME=993, SECONDARY_ENGINE_ATTRIBUTE=994, 
		SESSION_USER=995, SHA=996, SHA1=997, SHA2=998, SCHEMA_NAME=999, SIGN=1000, 
		SIN=1001, SLEEP=1002, SOUNDEX=1003, SQL_THREAD_WAIT_AFTER_GTIDS=1004, 
		SQRT=1005, SRID=1006, STARTPOINT=1007, STRCMP=1008, STR_TO_DATE=1009, 
		ST_AREA=1010, ST_ASBINARY=1011, ST_ASTEXT=1012, ST_ASWKB=1013, ST_ASWKT=1014, 
		ST_BUFFER=1015, ST_CENTROID=1016, ST_CONTAINS=1017, ST_CROSSES=1018, ST_DIFFERENCE=1019, 
		ST_DIMENSION=1020, ST_DISJOINT=1021, ST_DISTANCE=1022, ST_ENDPOINT=1023, 
		ST_ENVELOPE=1024, ST_EQUALS=1025, ST_EXTERIORRING=1026, ST_GEOMCOLLFROMTEXT=1027, 
		ST_GEOMCOLLFROMTXT=1028, ST_GEOMCOLLFROMWKB=1029, ST_GEOMETRYCOLLECTIONFROMTEXT=1030, 
		ST_GEOMETRYCOLLECTIONFROMWKB=1031, ST_GEOMETRYFROMTEXT=1032, ST_GEOMETRYFROMWKB=1033, 
		ST_GEOMETRYN=1034, ST_GEOMETRYTYPE=1035, ST_GEOMFROMTEXT=1036, ST_GEOMFROMWKB=1037, 
		ST_INTERIORRINGN=1038, ST_INTERSECTION=1039, ST_INTERSECTS=1040, ST_ISCLOSED=1041, 
		ST_ISEMPTY=1042, ST_ISSIMPLE=1043, ST_LINEFROMTEXT=1044, ST_LINEFROMWKB=1045, 
		ST_LINESTRINGFROMTEXT=1046, ST_LINESTRINGFROMWKB=1047, ST_NUMGEOMETRIES=1048, 
		ST_NUMINTERIORRING=1049, ST_NUMINTERIORRINGS=1050, ST_NUMPOINTS=1051, 
		ST_OVERLAPS=1052, ST_POINTFROMTEXT=1053, ST_POINTFROMWKB=1054, ST_POINTN=1055, 
		ST_POLYFROMTEXT=1056, ST_POLYFROMWKB=1057, ST_POLYGONFROMTEXT=1058, ST_POLYGONFROMWKB=1059, 
		ST_SRID=1060, ST_STARTPOINT=1061, ST_SYMDIFFERENCE=1062, ST_TOUCHES=1063, 
		ST_UNION=1064, ST_WITHIN=1065, ST_X=1066, ST_Y=1067, SUBDATE=1068, SUBSTRING_INDEX=1069, 
		SUBTIME=1070, SYSTEM_USER=1071, TAN=1072, TIMEDIFF=1073, TIMESTAMPADD=1074, 
		TIMESTAMPDIFF=1075, TIME_FORMAT=1076, TIME_TO_SEC=1077, TOUCHES=1078, 
		TO_BASE64=1079, TO_DAYS=1080, TO_SECONDS=1081, UCASE=1082, UNCOMPRESS=1083, 
		UNCOMPRESSED_LENGTH=1084, UNHEX=1085, UNIX_TIMESTAMP=1086, UPDATEXML=1087, 
		UPPER=1088, UUID=1089, UUID_SHORT=1090, VALIDATE_PASSWORD_STRENGTH=1091, 
		VERSION=1092, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1093, WEEKDAY=1094, WEEKOFYEAR=1095, 
		WEIGHT_STRING=1096, WITHIN=1097, YEARWEEK=1098, Y_FUNCTION=1099, X_FUNCTION=1100, 
		VAR_ASSIGN=1101, PLUS_ASSIGN=1102, MINUS_ASSIGN=1103, MULT_ASSIGN=1104, 
		DIV_ASSIGN=1105, MOD_ASSIGN=1106, AND_ASSIGN=1107, XOR_ASSIGN=1108, OR_ASSIGN=1109, 
		STAR=1110, DIVIDE=1111, MODULE=1112, PLUS=1113, MINUS=1114, DIV=1115, 
		MOD=1116, EQUAL_SYMBOL=1117, GREATER_SYMBOL=1118, LESS_SYMBOL=1119, EXCLAMATION_SYMBOL=1120, 
		BIT_NOT_OP=1121, BIT_OR_OP=1122, BIT_AND_OP=1123, BIT_XOR_OP=1124, DOT=1125, 
		LR_BRACKET=1126, RR_BRACKET=1127, COMMA=1128, SEMI=1129, AT_SIGN=1130, 
		ZERO_DECIMAL=1131, ONE_DECIMAL=1132, TWO_DECIMAL=1133, SINGLE_QUOTE_SYMB=1134, 
		DOUBLE_QUOTE_SYMB=1135, REVERSE_QUOTE_SYMB=1136, COLON_SYMB=1137, CHARSET_REVERSE_QOUTE_STRING=1138, 
		FILESIZE_LITERAL=1139, START_NATIONAL_STRING_LITERAL=1140, STRING_LITERAL=1141, 
		DECIMAL_LITERAL=1142, HEXADECIMAL_LITERAL=1143, REAL_LITERAL=1144, NULL_SPEC_LITERAL=1145, 
		BIT_STRING=1146, STRING_CHARSET_NAME=1147, DOT_ID=1148, ID=1149, REVERSE_QUOTE_ID=1150, 
		STRING_USER_NAME=1151, IP_ADDRESS=1152, LOCAL_ID=1153, GLOBAL_ID=1154, 
		ERROR_RECONGNIGION=1155;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createDatabaseOption = 29, RULE_charSet = 30, 
		RULE_ownerStatement = 31, RULE_scheduleExpression = 32, RULE_timestampValue = 33, 
		RULE_intervalExpr = 34, RULE_intervalType = 35, RULE_enableType = 36, 
		RULE_indexType = 37, RULE_indexOption = 38, RULE_procedureParameter = 39, 
		RULE_functionParameter = 40, RULE_routineOption = 41, RULE_serverOption = 42, 
		RULE_createDefinitions = 43, RULE_createDefinition = 44, RULE_columnDefinition = 45, 
		RULE_columnConstraint = 46, RULE_tableConstraint = 47, RULE_referenceDefinition = 48, 
		RULE_referenceAction = 49, RULE_referenceControlType = 50, RULE_indexColumnDefinition = 51, 
		RULE_tableOption = 52, RULE_tableType = 53, RULE_tablespaceStorage = 54, 
		RULE_partitionDefinitions = 55, RULE_partitionFunctionDefinition = 56, 
		RULE_subpartitionFunctionDefinition = 57, RULE_partitionDefinition = 58, 
		RULE_partitionDefinerAtom = 59, RULE_partitionDefinerVector = 60, RULE_subpartitionDefinition = 61, 
		RULE_partitionOption = 62, RULE_alterDatabase = 63, RULE_alterEvent = 64, 
		RULE_alterFunction = 65, RULE_alterInstance = 66, RULE_alterLogfileGroup = 67, 
		RULE_alterProcedure = 68, RULE_alterServer = 69, RULE_alterTable = 70, 
		RULE_alterTablespace = 71, RULE_alterView = 72, RULE_alterSpecification = 73, 
		RULE_dropDatabase = 74, RULE_dropEvent = 75, RULE_dropIndex = 76, RULE_dropLogfileGroup = 77, 
		RULE_dropProcedure = 78, RULE_dropFunction = 79, RULE_dropServer = 80, 
		RULE_dropTable = 81, RULE_dropTablespace = 82, RULE_dropTrigger = 83, 
		RULE_dropView = 84, RULE_dropRole = 85, RULE_setRole = 86, RULE_renameTable = 87, 
		RULE_renameTableClause = 88, RULE_truncateTable = 89, RULE_callStatement = 90, 
		RULE_deleteStatement = 91, RULE_doStatement = 92, RULE_handlerStatement = 93, 
		RULE_insertStatement = 94, RULE_loadDataStatement = 95, RULE_loadXmlStatement = 96, 
		RULE_replaceStatement = 97, RULE_selectStatement = 98, RULE_updateStatement = 99, 
		RULE_insertStatementValue = 100, RULE_updatedElement = 101, RULE_assignmentField = 102, 
		RULE_lockClause = 103, RULE_singleDeleteStatement = 104, RULE_multipleDeleteStatement = 105, 
		RULE_handlerOpenStatement = 106, RULE_handlerReadIndexStatement = 107, 
		RULE_handlerReadStatement = 108, RULE_handlerCloseStatement = 109, RULE_singleUpdateStatement = 110, 
		RULE_multipleUpdateStatement = 111, RULE_orderByClause = 112, RULE_orderByExpression = 113, 
		RULE_tableSources = 114, RULE_tableSource = 115, RULE_tableSourceItem = 116, 
		RULE_indexHint = 117, RULE_indexHintType = 118, RULE_joinPart = 119, RULE_queryExpression = 120, 
		RULE_queryExpressionNointo = 121, RULE_querySpecification = 122, RULE_querySpecificationNointo = 123, 
		RULE_unionParenthesis = 124, RULE_unionStatement = 125, RULE_lateralStatement = 126, 
		RULE_jsonTable = 127, RULE_jsonColumnList = 128, RULE_jsonColumn = 129, 
		RULE_jsonOnEmpty = 130, RULE_jsonOnError = 131, RULE_selectSpec = 132, 
		RULE_selectElements = 133, RULE_selectElement = 134, RULE_selectIntoExpression = 135, 
		RULE_selectFieldsInto = 136, RULE_selectLinesInto = 137, RULE_fromClause = 138, 
		RULE_groupByClause = 139, RULE_havingClause = 140, RULE_windowClause = 141, 
		RULE_groupByItem = 142, RULE_limitClause = 143, RULE_limitClauseAtom = 144, 
		RULE_startTransaction = 145, RULE_beginWork = 146, RULE_commitWork = 147, 
		RULE_rollbackWork = 148, RULE_savepointStatement = 149, RULE_rollbackStatement = 150, 
		RULE_releaseStatement = 151, RULE_lockTables = 152, RULE_unlockTables = 153, 
		RULE_setAutocommitStatement = 154, RULE_setTransactionStatement = 155, 
		RULE_transactionMode = 156, RULE_lockTableElement = 157, RULE_lockAction = 158, 
		RULE_transactionOption = 159, RULE_transactionLevel = 160, RULE_changeMaster = 161, 
		RULE_changeReplicationFilter = 162, RULE_purgeBinaryLogs = 163, RULE_resetMaster = 164, 
		RULE_resetSlave = 165, RULE_startSlave = 166, RULE_stopSlave = 167, RULE_startGroupReplication = 168, 
		RULE_stopGroupReplication = 169, RULE_masterOption = 170, RULE_stringMasterOption = 171, 
		RULE_decimalMasterOption = 172, RULE_boolMasterOption = 173, RULE_channelOption = 174, 
		RULE_replicationFilter = 175, RULE_tablePair = 176, RULE_threadType = 177, 
		RULE_untilOption = 178, RULE_connectionOption = 179, RULE_gtuidSet = 180, 
		RULE_xaStartTransaction = 181, RULE_xaEndTransaction = 182, RULE_xaPrepareStatement = 183, 
		RULE_xaCommitWork = 184, RULE_xaRollbackWork = 185, RULE_xaRecoverWork = 186, 
		RULE_prepareStatement = 187, RULE_executeStatement = 188, RULE_deallocatePrepare = 189, 
		RULE_routineBody = 190, RULE_blockStatement = 191, RULE_caseStatement = 192, 
		RULE_ifStatement = 193, RULE_iterateStatement = 194, RULE_leaveStatement = 195, 
		RULE_loopStatement = 196, RULE_repeatStatement = 197, RULE_returnStatement = 198, 
		RULE_whileStatement = 199, RULE_cursorStatement = 200, RULE_declareVariable = 201, 
		RULE_declareCondition = 202, RULE_declareCursor = 203, RULE_declareHandler = 204, 
		RULE_handlerConditionValue = 205, RULE_procedureSqlStatement = 206, RULE_caseAlternative = 207, 
		RULE_elifAlternative = 208, RULE_alterUser = 209, RULE_createUser = 210, 
		RULE_dropUser = 211, RULE_grantStatement = 212, RULE_roleOption = 213, 
		RULE_grantProxy = 214, RULE_renameUser = 215, RULE_revokeStatement = 216, 
		RULE_revokeProxy = 217, RULE_setPasswordStatement = 218, RULE_userSpecification = 219, 
		RULE_userAuthOption = 220, RULE_authenticationRule = 221, RULE_tlsOption = 222, 
		RULE_userResourceOption = 223, RULE_userPasswordOption = 224, RULE_userLockOption = 225, 
		RULE_privelegeClause = 226, RULE_privilege = 227, RULE_privilegeLevel = 228, 
		RULE_renameUserClause = 229, RULE_analyzeTable = 230, RULE_checkTable = 231, 
		RULE_checksumTable = 232, RULE_optimizeTable = 233, RULE_repairTable = 234, 
		RULE_checkTableOption = 235, RULE_createUdfunction = 236, RULE_installPlugin = 237, 
		RULE_uninstallPlugin = 238, RULE_setStatement = 239, RULE_showStatement = 240, 
		RULE_variableClause = 241, RULE_showCommonEntity = 242, RULE_showFilter = 243, 
		RULE_showGlobalInfoClause = 244, RULE_showSchemaEntity = 245, RULE_showProfileType = 246, 
		RULE_binlogStatement = 247, RULE_cacheIndexStatement = 248, RULE_flushStatement = 249, 
		RULE_killStatement = 250, RULE_loadIndexIntoCache = 251, RULE_resetStatement = 252, 
		RULE_shutdownStatement = 253, RULE_tableIndexes = 254, RULE_flushOption = 255, 
		RULE_flushTableOption = 256, RULE_loadedTableIndexes = 257, RULE_simpleDescribeStatement = 258, 
		RULE_fullDescribeStatement = 259, RULE_helpStatement = 260, RULE_useStatement = 261, 
		RULE_signalStatement = 262, RULE_resignalStatement = 263, RULE_signalConditionInformation = 264, 
		RULE_diagnosticsStatement = 265, RULE_diagnosticsConditionInformationName = 266, 
		RULE_describeObjectClause = 267, RULE_fullId = 268, RULE_tableName = 269, 
		RULE_roleName = 270, RULE_fullColumnName = 271, RULE_indexColumnName = 272, 
		RULE_userName = 273, RULE_mysqlVariable = 274, RULE_charsetName = 275, 
		RULE_collationName = 276, RULE_engineName = 277, RULE_uuidSet = 278, RULE_xid = 279, 
		RULE_xuidStringId = 280, RULE_authPlugin = 281, RULE_uid = 282, RULE_simpleId = 283, 
		RULE_dottedId = 284, RULE_decimalLiteral = 285, RULE_fileSizeLiteral = 286, 
		RULE_stringLiteral = 287, RULE_booleanLiteral = 288, RULE_hexadecimalLiteral = 289, 
		RULE_nullNotnull = 290, RULE_constant = 291, RULE_dataType = 292, RULE_collectionOptions = 293, 
		RULE_convertedDataType = 294, RULE_lengthOneDimension = 295, RULE_lengthTwoDimension = 296, 
		RULE_lengthTwoOptionalDimension = 297, RULE_uidList = 298, RULE_fullColumnNameList = 299, 
		RULE_tables = 300, RULE_indexColumnNames = 301, RULE_expressions = 302, 
		RULE_expressionsWithDefaults = 303, RULE_constants = 304, RULE_simpleStrings = 305, 
		RULE_userVariables = 306, RULE_defaultValue = 307, RULE_currentTimestamp = 308, 
		RULE_expressionOrDefault = 309, RULE_ifExists = 310, RULE_ifNotExists = 311, 
		RULE_orReplace = 312, RULE_waitNowaitClause = 313, RULE_functionCall = 314, 
		RULE_specificFunction = 315, RULE_caseFuncAlternative = 316, RULE_levelsInWeightString = 317, 
		RULE_levelInWeightListElement = 318, RULE_aggregateWindowedFunction = 319, 
		RULE_nonAggregateWindowedFunction = 320, RULE_overClause = 321, RULE_windowSpec = 322, 
		RULE_windowName = 323, RULE_frameClause = 324, RULE_frameUnits = 325, 
		RULE_frameExtent = 326, RULE_frameBetween = 327, RULE_frameRange = 328, 
		RULE_partitionClause = 329, RULE_scalarFunctionName = 330, RULE_passwordFunctionClause = 331, 
		RULE_functionArgs = 332, RULE_functionArg = 333, RULE_expression = 334, 
		RULE_predicate = 335, RULE_expressionAtom = 336, RULE_unaryOperator = 337, 
		RULE_comparisonOperator = 338, RULE_logicalOperator = 339, RULE_bitOperator = 340, 
		RULE_mathOperator = 341, RULE_jsonOperator = 342, RULE_charsetNameBase = 343, 
		RULE_transactionLevelBase = 344, RULE_privilegesBase = 345, RULE_intervalTypeBase = 346, 
		RULE_dataTypeBase = 347, RULE_keywordsCanBeId = 348, RULE_functionNameBase = 349;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
		"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
		"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
		"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
		"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
		"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
		"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
		"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
		"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "renameTable", 
		"renameTableClause", "truncateTable", "callStatement", "deleteStatement", 
		"doStatement", "handlerStatement", "insertStatement", "loadDataStatement", 
		"loadXmlStatement", "replaceStatement", "selectStatement", "updateStatement", 
		"insertStatementValue", "updatedElement", "assignmentField", "lockClause", 
		"singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
		"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
		"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", "orderByExpression", 
		"tableSources", "tableSource", "tableSourceItem", "indexHint", "indexHintType", 
		"joinPart", "queryExpression", "queryExpressionNointo", "querySpecification", 
		"querySpecificationNointo", "unionParenthesis", "unionStatement", "lateralStatement", 
		"jsonTable", "jsonColumnList", "jsonColumn", "jsonOnEmpty", "jsonOnError", 
		"selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
		"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
		"authenticationRule", "tlsOption", "userResourceOption", "userPasswordOption", 
		"userLockOption", "privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
		"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
		"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
		"setStatement", "showStatement", "variableClause", "showCommonEntity", 
		"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
		"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
		"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
		"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
		"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
		"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
		"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
		"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
		"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
		"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
		"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
		"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
		"expressionsWithDefaults", "constants", "simpleStrings", "userVariables", 
		"defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", 
		"ifNotExists", "orReplace", "waitNowaitClause", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
		"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
		"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
		"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
		"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
		"keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
		"'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
		"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
		"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
		"'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", "'CURSOR'", 
		"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
		"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
		"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
		"'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
		"'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", 
		"'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", 
		"'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
		"'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", "'LEADING'", "'LEAVE'", 
		"'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
		"'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", 
		"'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", 
		"'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
		"'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", 
		"'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
		"'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", 
		"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
		"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", 
		"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
		"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
		"'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
		"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
		"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", 
		"'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", 
		"'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", 
		"'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
		"'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", 
		"'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", 
		"'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", 
		"'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
		"'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
		"'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
		"'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
		"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", 
		"'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", 
		"'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", 
		"'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
		"'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_OVERLAPS'", 
		"'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
		"'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", "'JSON_SET'", "'JSON_STORAGE_FREE'", 
		"'JSON_STORAGE_SIZE'", "'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", 
		"'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", "'PATH'", 
		"'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", 
		"'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", "'LAST_VALUE'", 
		"'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", 
		"'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
		"'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
		"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
		"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
		"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", null, "'CONCURRENT'", 
		"'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
		"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", 
		"'ENCRYPTION_KEY_ID'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
		"'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", 
		"'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", 
		"'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
		"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
		"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", 
		"'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
		"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", 
		"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
		"'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
		"'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
		"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
		"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESTART'", 
		"'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'REUSE'", 
		"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
		"'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SEQUENCE'", "'SERVER'", 
		"'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
		"'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
		"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
		"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", 
		"'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", 
		"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
		"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
		"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
		"'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
		"'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
		"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", 
		"'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", 
		"'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'", 
		"'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", 
		"'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
		"'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", 
		"'PERSIST_RO_VARIABLES_ADMIN'", "'PRIVILEGES'", "'PROCESS'", "'RELOAD'", 
		"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
		"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
		null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", 
		"'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
		"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
		"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", 
		"'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
		"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
		"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
		"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
		"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
		"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
		"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
		"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
		"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
		"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
		"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
		"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", 
		"CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
		"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", 
		"CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", 
		"DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", 
		"DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", 
		"ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", 
		"FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GET", 
		"GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", "IGNORE", 
		"IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LATERAL", "LEADING", 
		"LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", 
		"LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
		"OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", 
		"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
		"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
		"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
		"SET", "SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
		"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
		"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
		"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", 
		"JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", 
		"JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", 
		"JSON_OBJECT", "JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", 
		"JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", 
		"JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", 
		"PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
		"FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", 
		"NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "STD", "STDDEV", 
		"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
		"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
		"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
		"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
		"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
		"PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
		"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
		"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
		"CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		"ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
		"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
		"INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
		"MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
		"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", 
		"NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", 
		"ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", 
		"ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", 
		"PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", "PARSER", "PARTIAL", "PARTITIONING", 
		"PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", "PHASE", "PLUGIN", "PLUGIN_DIR", 
		"PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", 
		"PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
		"RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
		"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
		"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
		"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
		"REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", 
		"RETURNS", "REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", 
		"ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", 
		"SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", 
		"SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
		"SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
		"SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
		"STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
		"STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", 
		"TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", 
		"TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
		"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
		"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
		"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
		"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "ADMIN", "APPLICATION_PASSWORD_ADMIN", 
		"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
		"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", 
		"FILE", "FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
		"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
		"INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
		"PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
		"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
		"ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		"SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", 
		"TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", 
		"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
		"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
		"TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", 
		"UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", 
		"MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
		"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
		"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
		"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
		"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
		"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
		"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
		"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
		"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
		"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
		"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
		"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
		"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
		"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
		"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
		"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
		"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
		"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
		"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
		"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
		"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
		"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
		"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2308217963004560000L) != 0 || (((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2306124490637066243L) != 0 || (((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 184717953909291L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & 36099165796700291L) != 0 || (((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & 16782337L) != 0 || (((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & 17730162917377L) != 0 || (((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & 4503604056555585L) != 0 || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 700;
				sqlStatements();
				}
			}

			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 703;
				Match(MINUS);
				State = 704;
				Match(MINUS);
				}
			}

			State = 707;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 718;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 709;
						sqlStatement();
						State = 712;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUS) {
							{
							State = 710;
							Match(MINUS);
							State = 711;
							Match(MINUS);
							}
						}

						State = 715;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 714;
							Match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						State = 717;
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 723;
				sqlStatement();
				State = 729;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 724;
						Match(MINUS);
						State = 725;
						Match(MINUS);
						}
					}

					State = 728;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 731;
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 734;
				ddlStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735;
				dmlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736;
				transactionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 737;
				replicationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 738;
				preparedStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 739;
				administrationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 740;
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddlStatement);
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746;
				createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 747;
				createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 748;
				createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 749;
				createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 750;
				createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 751;
				createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 752;
				createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 753;
				createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 754;
				createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 755;
				createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 756;
				createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 757;
				createRole();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 758;
				alterDatabase();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 759;
				alterEvent();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 760;
				alterFunction();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 761;
				alterInstance();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 762;
				alterLogfileGroup();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 763;
				alterProcedure();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 764;
				alterServer();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 765;
				alterTable();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 766;
				alterTablespace();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 767;
				alterView();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 768;
				dropDatabase();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 769;
				dropEvent();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 770;
				dropIndex();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 771;
				dropLogfileGroup();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 772;
				dropProcedure();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 773;
				dropFunction();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 774;
				dropServer();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 775;
				dropTable();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 776;
				dropTablespace();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 777;
				dropTrigger();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 778;
				dropView();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 779;
				dropRole();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 780;
				setRole();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 781;
				renameTable();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 782;
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dmlStatement);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 789;
				replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 790;
				callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 791;
				loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 792;
				loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 793;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 794;
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_transactionStatement);
		try {
			State = 806;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 799;
				commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 800;
				rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 801;
				savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 802;
				rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 803;
				releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 804;
				lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 805;
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_replicationStatement);
		try {
			State = 823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808;
				changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809;
				changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 810;
				purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 811;
				resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 812;
				resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 813;
				startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 814;
				stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 815;
				startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 816;
				stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 817;
				xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 818;
				xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 819;
				xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 820;
				xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 821;
				xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 822;
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_preparedStatement);
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 825;
				prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 826;
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 827;
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 830;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 831;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 832;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 833;
				leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 834;
				loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 835;
				repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 836;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 837;
				iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 838;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 839;
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_administrationStatement);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 842;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 843;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 844;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 845;
				grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 846;
				grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 847;
				renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 848;
				revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 849;
				revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 850;
				analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 851;
				checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 852;
				checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 853;
				optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 854;
				repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 855;
				createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 856;
				installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 857;
				uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 858;
				setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 859;
				showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 860;
				binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 861;
				cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 862;
				flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 863;
				killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 864;
				loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 865;
				resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 866;
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsStatementContext diagnosticsStatement() {
			return GetRuleContext<DiagnosticsStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_utilityStatement);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 869;
				simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 870;
				fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 871;
				helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 872;
				useStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 873;
				signalStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 874;
				resignalStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 875;
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(CREATE);
			State = 879;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 880;
				ifNotExists();
				}
				break;
			}
			State = 883;
			uid();
			State = 887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398214283264L) != 0 || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET) {
				{
				{
				State = 884;
				createDatabaseOption();
				}
				}
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			Match(CREATE);
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 891;
				ownerStatement();
				}
			}

			State = 894;
			Match(EVENT);
			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 895;
				ifNotExists();
				}
				break;
			}
			State = 898;
			fullId();
			State = 899;
			Match(ON);
			State = 900;
			Match(SCHEDULE);
			State = 901;
			scheduleExpression();
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 902;
				Match(ON);
				State = 903;
				Match(COMPLETION);
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 904;
					Match(NOT);
					}
				}

				State = 907;
				Match(PRESERVE);
				}
			}

			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 910;
				enableType();
				}
			}

			State = 915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 913;
				Match(COMMENT);
				State = 914;
				Match(STRING_LITERAL);
				}
			}

			State = 917;
			Match(DO);
			State = 918;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(CREATE);
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 921;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 924;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 927;
			Match(INDEX);
			State = 928;
			uid();
			State = 930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 929;
				indexType();
				}
			}

			State = 932;
			Match(ON);
			State = 933;
			tableName();
			State = 934;
			indexColumnNames();
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				State = 935;
				indexOption();
				}
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 953;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 951;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 941;
						Match(ALGORITHM);
						State = 943;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 942;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 945;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 946;
						Match(LOCK);
						State = 948;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 947;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 950;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 955;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			Match(CREATE);
			State = 957;
			Match(LOGFILE);
			State = 958;
			Match(GROUP);
			State = 959;
			uid();
			State = 960;
			Match(ADD);
			State = 961;
			Match(UNDOFILE);
			State = 962;
			_localctx.undoFile = Match(STRING_LITERAL);
			State = 968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 963;
				Match(INITIAL_SIZE);
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 964;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 967;
				_localctx.initSize = fileSizeLiteral();
				}
			}

			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 970;
				Match(UNDO_BUFFER_SIZE);
				State = 972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 971;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 974;
				_localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 977;
				Match(REDO_BUFFER_SIZE);
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 978;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 981;
				_localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 984;
				Match(NODEGROUP);
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 985;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 988;
				uid();
				}
			}

			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 991;
				Match(WAIT);
				}
			}

			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 994;
				Match(COMMENT);
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 995;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 998;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1001;
			Match(ENGINE);
			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1002;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1005;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(CREATE);
			State = 1009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1008;
				ownerStatement();
				}
			}

			State = 1011;
			Match(PROCEDURE);
			State = 1012;
			fullId();
			State = 1013;
			Match(LR_BRACKET);
			State = 1015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 151169654698547409L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 1014;
				procedureParameter();
				}
			}

			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1017;
				Match(COMMA);
				State = 1018;
				procedureParameter();
				}
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1024;
			Match(RR_BRACKET);
			State = 1028;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1025;
					routineOption();
					}
					} 
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 1031;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			Match(CREATE);
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1034;
				ownerStatement();
				}
			}

			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 1037;
				Match(AGGREGATE);
				}
			}

			State = 1040;
			Match(FUNCTION);
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 1041;
				ifNotExists();
				}
				break;
			}
			State = 1044;
			fullId();
			State = 1045;
			Match(LR_BRACKET);
			State = 1047;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 1046;
				functionParameter();
				}
			}

			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1049;
				Match(COMMA);
				State = 1050;
				functionParameter();
				}
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1056;
			Match(RR_BRACKET);
			State = 1057;
			Match(RETURNS);
			State = 1058;
			dataType();
			State = 1062;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1059;
					routineOption();
					}
					} 
				}
				State = 1064;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case ATTRIBUTE:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CONDITION:
			case CREATE:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EMPTY:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case KILL:
			case LATERAL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 1065;
				routineBody();
				}
				break;
			case RETURN:
				{
				State = 1066;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			Match(CREATE);
			State = 1070;
			Match(ROLE);
			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 1071;
				ifNotExists();
				}
				break;
			}
			State = 1074;
			roleName();
			State = 1079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1075;
				Match(COMMA);
				State = 1076;
				roleName();
				}
				}
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			Match(CREATE);
			State = 1083;
			Match(SERVER);
			State = 1084;
			uid();
			State = 1085;
			Match(FOREIGN);
			State = 1086;
			Match(DATA);
			State = 1087;
			Match(WRAPPER);
			State = 1088;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1089;
			Match(OPTIONS);
			State = 1090;
			Match(LR_BRACKET);
			State = 1091;
			serverOption();
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1092;
				Match(COMMA);
				State = 1093;
				serverOption();
				}
				}
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1099;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			State = 1179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1101;
				Match(CREATE);
				State = 1103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1102;
					Match(TEMPORARY);
					}
				}

				State = 1105;
				Match(TABLE);
				State = 1107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 1106;
					ifNotExists();
					}
					break;
				}
				State = 1109;
				tableName();
				State = 1117;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 1110;
					Match(LIKE);
					State = 1111;
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 1112;
					Match(LR_BRACKET);
					State = 1113;
					Match(LIKE);
					State = 1114;
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 1115;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1119;
				Match(CREATE);
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1120;
					Match(TEMPORARY);
					}
				}

				State = 1123;
				Match(TABLE);
				State = 1125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1124;
					ifNotExists();
					}
					break;
				}
				State = 1127;
				tableName();
				State = 1129;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 1128;
					createDefinitions();
					}
					break;
				}
				State = 1141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 36028797019095045L) != 0 || _la==UNION || _la==CHAR || (((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & 4644375904747527L) != 0 || (((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 4612811918334230547L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 2366149022974977L) != 0 || (((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & 4609173815820289L) != 0 || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==STRING_LITERAL) {
					{
					State = 1131;
					tableOption();
					State = 1138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 36028797019095045L) != 0 || _la==UNION || _la==CHAR || (((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & 4644375904747527L) != 0 || (((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 4612811918334230547L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 2366149022974977L) != 0 || (((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & 4609173815820289L) != 0 || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA || _la==STRING_LITERAL) {
						{
						{
						State = 1133;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1132;
							Match(COMMA);
							}
						}

						State = 1135;
						tableOption();
						}
						}
						State = 1140;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1143;
					partitionDefinitions();
					}
				}

				State = 1147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1146;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1149;
					Match(AS);
					}
				}

				State = 1152;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1154;
				Match(CREATE);
				State = 1156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1155;
					Match(TEMPORARY);
					}
				}

				State = 1158;
				Match(TABLE);
				State = 1160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 1159;
					ifNotExists();
					}
					break;
				}
				State = 1162;
				tableName();
				State = 1163;
				createDefinitions();
				State = 1174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 1164;
					tableOption();
					State = 1171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1166;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1165;
								Match(COMMA);
								}
							}

							State = 1168;
							tableOption();
							}
							} 
						}
						State = 1173;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
					}
					}
					break;
				}
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1176;
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceInnodb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			Match(CREATE);
			State = 1182;
			Match(TABLESPACE);
			State = 1183;
			uid();
			State = 1184;
			Match(ADD);
			State = 1185;
			Match(DATAFILE);
			State = 1186;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1187;
				Match(FILE_BLOCK_SIZE);
				State = 1188;
				Match(EQUAL_SYMBOL);
				State = 1189;
				_localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1192;
				Match(ENGINE);
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1193;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1196;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceNdb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			Match(CREATE);
			State = 1200;
			Match(TABLESPACE);
			State = 1201;
			uid();
			State = 1202;
			Match(ADD);
			State = 1203;
			Match(DATAFILE);
			State = 1204;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1205;
			Match(USE);
			State = 1206;
			Match(LOGFILE);
			State = 1207;
			Match(GROUP);
			State = 1208;
			uid();
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1209;
				Match(EXTENT_SIZE);
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1210;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1213;
				_localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1216;
				Match(INITIAL_SIZE);
				State = 1218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1217;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1220;
				_localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1223;
				Match(AUTOEXTEND_SIZE);
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1224;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1227;
				_localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1230;
				Match(MAX_SIZE);
				State = 1232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1231;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1234;
				_localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1237;
				Match(NODEGROUP);
				State = 1239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1238;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1241;
				uid();
				}
			}

			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1244;
				Match(WAIT);
				}
			}

			State = 1252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1247;
				Match(COMMENT);
				State = 1249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1248;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1251;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1254;
			Match(ENGINE);
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1255;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1258;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(CREATE);
			State = 1262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1261;
				ownerStatement();
				}
			}

			State = 1264;
			Match(TRIGGER);
			State = 1265;
			_localctx.thisTrigger = fullId();
			State = 1266;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1267;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1268;
			Match(ON);
			State = 1269;
			tableName();
			State = 1270;
			Match(FOR);
			State = 1271;
			Match(EACH);
			State = 1272;
			Match(ROW);
			State = 1275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1273;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1274;
				_localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1277;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_withClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			Match(WITH);
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1280;
				Match(RECURSIVE);
				}
				break;
			}
			State = 1283;
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CteNameContext cteName() {
			return GetRuleContext<CteNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext[] cteColumnName() {
			return GetRuleContexts<CteColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext cteColumnName(int i) {
			return GetRuleContext<CteColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionsContext commonTableExpressions() {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			cteName();
			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1286;
				Match(LR_BRACKET);
				State = 1287;
				cteColumnName();
				State = 1292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1288;
					Match(COMMA);
					State = 1289;
					cteColumnName();
					}
					}
					State = 1294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1295;
				Match(RR_BRACKET);
				}
			}

			State = 1299;
			Match(AS);
			State = 1300;
			Match(LR_BRACKET);
			State = 1301;
			dmlStatement();
			State = 1302;
			Match(RR_BRACKET);
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1303;
				Match(COMMA);
				State = 1304;
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteNameContext cteName() {
		CteNameContext _localctx = new CteNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_cteName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteColumnNameContext cteColumnName() {
		CteColumnNameContext _localctx = new CteColumnNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_cteColumnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			Match(CREATE);
			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1312;
				orReplace();
				}
			}

			State = 1318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1315;
				Match(ALGORITHM);
				State = 1316;
				Match(EQUAL_SYMBOL);
				State = 1317;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1320;
				ownerStatement();
				}
			}

			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1323;
				Match(SQL);
				State = 1324;
				Match(SECURITY);
				State = 1325;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1328;
			Match(VIEW);
			State = 1329;
			fullId();
			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1330;
				Match(LR_BRACKET);
				State = 1331;
				uidList();
				State = 1332;
				Match(RR_BRACKET);
				}
			}

			State = 1336;
			Match(AS);
			State = 1356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1337;
				Match(LR_BRACKET);
				State = 1339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1338;
					withClause();
					}
				}

				State = 1341;
				selectStatement();
				State = 1342;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 1345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1344;
					withClause();
					}
				}

				State = 1347;
				selectStatement();
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1348;
					Match(WITH);
					State = 1350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADED || _la==LOCAL) {
						{
						State = 1349;
						_localctx.checkOption = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==CASCADED || _la==LOCAL) ) {
							_localctx.checkOption = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 1352;
					Match(CHECK);
					State = 1353;
					Match(OPTION);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 58, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1358;
					Match(DEFAULT);
					}
				}

				State = 1361;
				charSet();
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1362;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1367;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1365;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1366;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1369;
					Match(DEFAULT);
					}
				}

				State = 1372;
				Match(COLLATE);
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1373;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1376;
				collationName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1377;
					Match(DEFAULT);
					}
				}

				State = 1380;
				Match(ENCRYPTION);
				State = 1382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1381;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1384;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1385;
				Match(READ);
				State = 1386;
				Match(ONLY);
				State = 1388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1387;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1390;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 60, RULE_charSet);
		try {
			State = 1398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1393;
				Match(CHARACTER);
				State = 1394;
				Match(SET);
				}
				break;
			case CHARSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1395;
				Match(CHARSET);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1396;
				Match(CHAR);
				State = 1397;
				Match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_ownerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400;
			Match(DEFINER);
			State = 1401;
			Match(EQUAL_SYMBOL);
			State = 1408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1402;
				userName();
				}
				break;
			case 2:
				{
				State = 1403;
				Match(CURRENT_USER);
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1404;
					Match(LR_BRACKET);
					State = 1405;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreciseSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_scheduleExpression);
		int _la;
		try {
			State = 1444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1410;
				Match(AT);
				State = 1411;
				timestampValue();
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1412;
					intervalExpr();
					}
					}
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418;
				Match(EVERY);
				State = 1421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 1419;
					decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1420;
					expression(0);
					}
					break;
				}
				State = 1423;
				intervalType();
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1424;
					Match(STARTS);
					State = 1425;
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					State = 1429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1426;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1431;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1434;
					Match(ENDS);
					State = 1435;
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1436;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1441;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_timestampValue);
		try {
			State = 1450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1446;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1447;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1448;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1449;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			Match(PLUS);
			State = 1453;
			Match(INTERVAL);
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1454;
				decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1455;
				expression(0);
				}
				break;
			}
			State = 1458;
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_intervalType);
		try {
			State = 1473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460;
				intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1461;
				Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462;
				Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1463;
				Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1464;
				Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1465;
				Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1466;
				Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1467;
				Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1468;
				Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1469;
				Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1470;
				Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1471;
				Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1472;
				Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_enableType);
		try {
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1475;
				Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1476;
				Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1477;
				Match(DISABLE);
				State = 1478;
				Match(ON);
				State = 1479;
				Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482;
			Match(USING);
			State = 1483;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 76, RULE_indexOption);
		int _la;
		try {
			State = 1507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1485;
				Match(KEY_BLOCK_SIZE);
				State = 1487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1486;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1489;
				fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490;
				indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1491;
				Match(WITH);
				State = 1492;
				Match(PARSER);
				State = 1493;
				uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1494;
				Match(COMMENT);
				State = 1495;
				Match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1496;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1497;
				Match(ENGINE_ATTRIBUTE);
				State = 1499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1498;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1501;
				Match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1502;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1503;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1506;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 35184372088849L) != 0) {
				{
				State = 1509;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 35184372088849L) != 0) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1512;
			uid();
			State = 1513;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			uid();
			State = 1516;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineSecurity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_routineOption);
		int _la;
		try {
			State = 1541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518;
				Match(COMMENT);
				State = 1519;
				Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1520;
				Match(LANGUAGE);
				State = 1521;
				Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1522;
					Match(NOT);
					}
				}

				State = 1525;
				Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1536;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1526;
					Match(CONTAINS);
					State = 1527;
					Match(SQL);
					}
					break;
				case NO:
					{
					State = 1528;
					Match(NO);
					State = 1529;
					Match(SQL);
					}
					break;
				case READS:
					{
					State = 1530;
					Match(READS);
					State = 1531;
					Match(SQL);
					State = 1532;
					Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1533;
					Match(MODIFIES);
					State = 1534;
					Match(SQL);
					State = 1535;
					Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1538;
				Match(SQL);
				State = 1539;
				Match(SECURITY);
				State = 1540;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 84, RULE_serverOption);
		try {
			State = 1557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1543;
				Match(HOST);
				State = 1544;
				Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				Match(DATABASE);
				State = 1546;
				Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1547;
				Match(USER);
				State = 1548;
				Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1549;
				Match(PASSWORD);
				State = 1550;
				Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1551;
				Match(SOCKET);
				State = 1552;
				Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1553;
				Match(OWNER);
				State = 1554;
				Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1555;
				Match(PORT);
				State = 1556;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 86, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			Match(LR_BRACKET);
			State = 1560;
			createDefinition();
			State = 1565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1561;
				Match(COMMA);
				State = 1562;
				createDefinition();
				}
				}
				State = 1567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1568;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_createDefinition);
		try {
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1570;
				fullColumnName();
				State = 1571;
				columnDefinition();
				}
				break;
			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1573;
				tableConstraint();
				}
				break;
			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1574;
				indexColumnDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 90, RULE_columnDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577;
			dataType();
			State = 1581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1578;
					columnConstraint();
					}
					} 
				}
				State = 1583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp() {
			return GetRuleContext<CurrentTimestampContext>(0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoIncrementColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerialDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratedColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(MySqlParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(MySqlParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratedColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckColumnConstraintContext : ColumnConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public InvisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 92, RULE_columnConstraint);
		int _la;
		try {
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1584;
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1585;
				Match(DEFAULT);
				State = 1586;
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1587;
				Match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new InvisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1588;
				Match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1593;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO_INCREMENT:
					{
					State = 1589;
					Match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					State = 1590;
					Match(ON);
					State = 1591;
					Match(UPDATE);
					State = 1592;
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1595;
					Match(PRIMARY);
					}
				}

				State = 1598;
				Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1599;
				Match(UNIQUE);
				State = 1601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1600;
					Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1603;
				Match(COMMENT);
				State = 1604;
				Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1605;
				Match(COLUMN_FORMAT);
				State = 1606;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1607;
				Match(STORAGE);
				State = 1608;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1609;
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1610;
				Match(COLLATE);
				State = 1611;
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 1612;
					Match(GENERATED);
					State = 1613;
					Match(ALWAYS);
					}
				}

				State = 1616;
				Match(AS);
				State = 1617;
				Match(LR_BRACKET);
				State = 1618;
				expression(0);
				State = 1619;
				Match(RR_BRACKET);
				State = 1621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					State = 1620;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1623;
				Match(SERIAL);
				State = 1624;
				Match(DEFAULT);
				State = 1625;
				Match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1626;
					Match(CONSTRAINT);
					State = 1628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 1627;
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1632;
				Match(CHECK);
				State = 1633;
				Match(LR_BRACKET);
				State = 1634;
				expression(0);
				State = 1635;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 94, RULE_tableConstraint);
		int _la;
		try {
			State = 1708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1639;
					Match(CONSTRAINT);
					State = 1641;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
					case 1:
						{
						State = 1640;
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				State = 1645;
				Match(PRIMARY);
				State = 1646;
				Match(KEY);
				State = 1648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 1647;
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1650;
					indexType();
					}
				}

				State = 1653;
				indexColumnNames();
				State = 1657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1654;
					indexOption();
					}
					}
					State = 1659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1660;
					Match(CONSTRAINT);
					State = 1662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 1661;
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1666;
				Match(UNIQUE);
				State = 1668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1667;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 1670;
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1673;
					indexType();
					}
				}

				State = 1676;
				indexColumnNames();
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1677;
					indexOption();
					}
					}
					State = 1682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1683;
					Match(CONSTRAINT);
					State = 1685;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 1684;
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1689;
				Match(FOREIGN);
				State = 1690;
				Match(KEY);
				State = 1692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 1691;
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1694;
				indexColumnNames();
				State = 1695;
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1697;
					Match(CONSTRAINT);
					State = 1699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 1698;
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1703;
				Match(CHECK);
				State = 1704;
				Match(LR_BRACKET);
				State = 1705;
				expression(0);
				State = 1706;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			Match(REFERENCES);
			State = 1711;
			tableName();
			State = 1713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 1712;
				indexColumnNames();
				}
				break;
			}
			State = 1717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1715;
				Match(MATCH);
				State = 1716;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1719;
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 98, RULE_referenceAction);
		try {
			State = 1738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722;
				Match(ON);
				State = 1723;
				Match(DELETE);
				State = 1724;
				_localctx.onDelete = referenceControlType();
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1725;
					Match(ON);
					State = 1726;
					Match(UPDATE);
					State = 1727;
					_localctx.onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1730;
				Match(ON);
				State = 1731;
				Match(UPDATE);
				State = 1732;
				_localctx.onUpdate = referenceControlType();
				State = 1736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
				case 1:
					{
					State = 1733;
					Match(ON);
					State = 1734;
					Match(DELETE);
					State = 1735;
					_localctx.onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_referenceControlType);
		try {
			State = 1746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1740;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1741;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1742;
				Match(SET);
				State = 1743;
				Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1744;
				Match(NO);
				State = 1745;
				Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1748;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 1749;
					uid();
					}
				}

				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1752;
					indexType();
					}
				}

				State = 1755;
				indexColumnNames();
				State = 1759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1756;
					indexOption();
					}
					}
					State = 1761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1762;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1763;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 1766;
					uid();
					}
				}

				State = 1769;
				indexColumnNames();
				State = 1773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1770;
					indexOption();
					}
					}
					State = 1775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoextendSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoextendSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPageCompressedContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_COMPRESSED() { return GetToken(MySqlParser.PAGE_COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressedContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPageCompressed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionStartTransactionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPackKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSamplePage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTableTypeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MySqlParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public TableOptionTableTypeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionKeyBlockSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRecalculation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionKeyIdContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ID() { return GetToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionKeyIdContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryptionKeyId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionChecksum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDelay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionConnection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTransactionalContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MySqlParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionTransactionalContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTransactional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPageCompressionLevelContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_COMPRESSION_LEVEL() { return GetToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressionLevelContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPageCompressionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSecondaryEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSecondaryEngineAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCompression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionInsertMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngineAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 104, RULE_tableOption);
		int _la;
		try {
			State = 1963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1778;
				Match(ENGINE);
				State = 1780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1779;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1783;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1782;
					engineName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1785;
				Match(ENGINE_ATTRIBUTE);
				State = 1787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1786;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1789;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1790;
				Match(AUTOEXTEND_SIZE);
				State = 1792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1791;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1794;
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1795;
				Match(AUTO_INCREMENT);
				State = 1797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1796;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1799;
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1800;
				Match(AVG_ROW_LENGTH);
				State = 1802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1801;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1804;
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1805;
					Match(DEFAULT);
					}
				}

				State = 1808;
				charSet();
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1809;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1814;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1812;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1813;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1816;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1817;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1820;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1821;
					Match(DEFAULT);
					}
				}

				State = 1824;
				Match(COLLATE);
				State = 1826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1825;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1828;
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1829;
				Match(COMMENT);
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1830;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1833;
				Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1834;
				Match(COMPRESSION);
				State = 1836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1835;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1838;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1839;
				Match(CONNECTION);
				State = 1841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1840;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1843;
				Match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1844;
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1845;
				Match(DIRECTORY);
				State = 1847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1846;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1849;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1850;
				Match(DELAY_KEY_WRITE);
				State = 1852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1851;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1854;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1855;
				Match(ENCRYPTION);
				State = 1857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1856;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1859;
				Match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionPageCompressedContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1860;
				_la = TokenStream.LA(1);
				if ( !(_la==PAGE_COMPRESSED || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1861;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1864;
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				_localctx = new TableOptionPageCompressionLevelContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1865;
				_la = TokenStream.LA(1);
				if ( !(_la==PAGE_COMPRESSION_LEVEL || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1866;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1869;
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionEncryptionKeyIdContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1870;
				Match(ENCRYPTION_KEY_ID);
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1871;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1874;
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1875;
				Match(INDEX);
				State = 1876;
				Match(DIRECTORY);
				State = 1878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1877;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1880;
				Match(STRING_LITERAL);
				}
				break;
			case 19:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1881;
				Match(INSERT_METHOD);
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1882;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1885;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1886;
				Match(KEY_BLOCK_SIZE);
				State = 1888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1887;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1890;
				fileSizeLiteral();
				}
				break;
			case 21:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1891;
				Match(MAX_ROWS);
				State = 1893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1892;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1895;
				decimalLiteral();
				}
				break;
			case 22:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1896;
				Match(MIN_ROWS);
				State = 1898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1897;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1900;
				decimalLiteral();
				}
				break;
			case 23:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1901;
				Match(PACK_KEYS);
				State = 1903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1902;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1905;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1906;
				Match(PASSWORD);
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1907;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1910;
				Match(STRING_LITERAL);
				}
				break;
			case 25:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1911;
				Match(ROW_FORMAT);
				State = 1913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1912;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1915;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || (((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & 2305843013508661253L) != 0 || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 26:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1916;
				Match(START);
				State = 1917;
				Match(TRANSACTION);
				}
				break;
			case 27:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1918;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1919;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1922;
				Match(STRING_LITERAL);
				}
				break;
			case 28:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1923;
				Match(STATS_AUTO_RECALC);
				State = 1925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1924;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1927;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 29:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1928;
				Match(STATS_PERSISTENT);
				State = 1930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1929;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1932;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 30:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1933;
				Match(STATS_SAMPLE_PAGES);
				State = 1935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1934;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1939;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 1937;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 1938;
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 31:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1941;
				Match(TABLESPACE);
				State = 1942;
				uid();
				State = 1944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 1943;
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 32:
				_localctx = new TableOptionTableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1946;
				Match(TABLE_TYPE);
				State = 1947;
				Match(EQUAL_SYMBOL);
				State = 1948;
				tableType();
				}
				break;
			case 33:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1949;
				tablespaceStorage();
				}
				break;
			case 34:
				_localctx = new TableOptionTransactionalContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 1950;
				Match(TRANSACTIONAL);
				State = 1952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1951;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1954;
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 35:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 1955;
				Match(UNION);
				State = 1957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1956;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1959;
				Match(LR_BRACKET);
				State = 1960;
				tables();
				State = 1961;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965;
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceStorage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 108, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967;
			Match(STORAGE);
			State = 1968;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(MySqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 110, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970;
			Match(PARTITION);
			State = 1971;
			Match(BY);
			State = 1972;
			partitionFunctionDefinition();
			State = 1975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 1973;
				Match(PARTITIONS);
				State = 1974;
				_localctx.count = decimalLiteral();
				}
			}

			State = 1984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 1977;
				Match(SUBPARTITION);
				State = 1978;
				Match(BY);
				State = 1979;
				subpartitionFunctionDefinition();
				State = 1982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 1980;
					Match(SUBPARTITIONS);
					State = 1981;
					_localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 1997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 1986;
				Match(LR_BRACKET);
				State = 1987;
				partitionDefinition();
				State = 1992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1988;
					Match(COMMA);
					State = 1989;
					partitionDefinition();
					}
					}
					State = 1994;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1995;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 2044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1999;
					Match(LINEAR);
					}
				}

				State = 2002;
				Match(HASH);
				State = 2003;
				Match(LR_BRACKET);
				State = 2004;
				expression(0);
				State = 2005;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2007;
					Match(LINEAR);
					}
				}

				State = 2010;
				Match(KEY);
				State = 2014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2011;
					Match(ALGORITHM);
					State = 2012;
					Match(EQUAL_SYMBOL);
					State = 2013;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2016;
				Match(LR_BRACKET);
				State = 2017;
				uidList();
				State = 2018;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2020;
				Match(RANGE);
				State = 2030;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2021;
					Match(LR_BRACKET);
					State = 2022;
					expression(0);
					State = 2023;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2025;
					Match(COLUMNS);
					State = 2026;
					Match(LR_BRACKET);
					State = 2027;
					uidList();
					State = 2028;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2032;
				Match(LIST);
				State = 2042;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2033;
					Match(LR_BRACKET);
					State = 2034;
					expression(0);
					State = 2035;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2037;
					Match(COLUMNS);
					State = 2038;
					Match(LR_BRACKET);
					State = 2039;
					uidList();
					State = 2040;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 2067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2046;
					Match(LINEAR);
					}
				}

				State = 2049;
				Match(HASH);
				State = 2050;
				Match(LR_BRACKET);
				State = 2051;
				expression(0);
				State = 2052;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2054;
					Match(LINEAR);
					}
				}

				State = 2057;
				Match(KEY);
				State = 2061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2058;
					Match(ALGORITHM);
					State = 2059;
					Match(EQUAL_SYMBOL);
					State = 2060;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2063;
				Match(LR_BRACKET);
				State = 2064;
				uidList();
				State = 2065;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisonContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListVector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_partitionDefinition);
		int _la;
		try {
			State = 2215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2069;
				Match(PARTITION);
				State = 2070;
				uid();
				State = 2071;
				Match(VALUES);
				State = 2072;
				Match(LESS);
				State = 2073;
				Match(THAN);
				State = 2074;
				Match(LR_BRACKET);
				State = 2075;
				partitionDefinerAtom();
				State = 2080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2076;
					Match(COMMA);
					State = 2077;
					partitionDefinerAtom();
					}
					}
					State = 2082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2083;
				Match(RR_BRACKET);
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2084;
					partitionOption();
					}
					}
					State = 2089;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2090;
					Match(LR_BRACKET);
					State = 2091;
					subpartitionDefinition();
					State = 2096;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2092;
						Match(COMMA);
						State = 2093;
						subpartitionDefinition();
						}
						}
						State = 2098;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2099;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2103;
				Match(PARTITION);
				State = 2104;
				uid();
				State = 2105;
				Match(VALUES);
				State = 2106;
				Match(LESS);
				State = 2107;
				Match(THAN);
				State = 2108;
				partitionDefinerAtom();
				State = 2112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2109;
					partitionOption();
					}
					}
					State = 2114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2115;
					Match(LR_BRACKET);
					State = 2116;
					subpartitionDefinition();
					State = 2121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2117;
						Match(COMMA);
						State = 2118;
						subpartitionDefinition();
						}
						}
						State = 2123;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2124;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2128;
				Match(PARTITION);
				State = 2129;
				uid();
				State = 2130;
				Match(VALUES);
				State = 2131;
				Match(IN);
				State = 2132;
				Match(LR_BRACKET);
				State = 2133;
				partitionDefinerAtom();
				State = 2138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2134;
					Match(COMMA);
					State = 2135;
					partitionDefinerAtom();
					}
					}
					State = 2140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2141;
				Match(RR_BRACKET);
				State = 2145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2142;
					partitionOption();
					}
					}
					State = 2147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2148;
					Match(LR_BRACKET);
					State = 2149;
					subpartitionDefinition();
					State = 2154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2150;
						Match(COMMA);
						State = 2151;
						subpartitionDefinition();
						}
						}
						State = 2156;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2157;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2161;
				Match(PARTITION);
				State = 2162;
				uid();
				State = 2163;
				Match(VALUES);
				State = 2164;
				Match(IN);
				State = 2165;
				Match(LR_BRACKET);
				State = 2166;
				partitionDefinerVector();
				State = 2171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2167;
					Match(COMMA);
					State = 2168;
					partitionDefinerVector();
					}
					}
					State = 2173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2174;
				Match(RR_BRACKET);
				State = 2178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2175;
					partitionOption();
					}
					}
					State = 2180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2181;
					Match(LR_BRACKET);
					State = 2182;
					subpartitionDefinition();
					State = 2187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2183;
						Match(COMMA);
						State = 2184;
						subpartitionDefinition();
						}
						}
						State = 2189;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2190;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2194;
				Match(PARTITION);
				State = 2195;
				uid();
				State = 2199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2196;
					partitionOption();
					}
					}
					State = 2201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2202;
					Match(LR_BRACKET);
					State = 2203;
					subpartitionDefinition();
					State = 2208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2204;
						Match(COMMA);
						State = 2205;
						subpartitionDefinition();
						}
						}
						State = 2210;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2211;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 118, RULE_partitionDefinerAtom);
		try {
			State = 2220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2217;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2218;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2219;
				Match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 120, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2222;
			Match(LR_BRACKET);
			State = 2223;
			partitionDefinerAtom();
			State = 2226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2224;
				Match(COMMA);
				State = 2225;
				partitionDefinerAtom();
				}
				}
				State = 2228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 2230;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232;
			Match(SUBPARTITION);
			State = 2233;
			uid();
			State = 2237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 2234;
				partitionOption();
				}
				}
				State = 2239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionNodeGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_partitionOption);
		int _la;
		try {
			State = 2288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2240;
					Match(DEFAULT);
					}
				}

				State = 2244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2243;
					Match(STORAGE);
					}
				}

				State = 2246;
				Match(ENGINE);
				State = 2248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2247;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2250;
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2251;
				Match(COMMENT);
				State = 2253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2252;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2255;
				((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2256;
				Match(DATA);
				State = 2257;
				Match(DIRECTORY);
				State = 2259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2258;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2261;
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2262;
				Match(INDEX);
				State = 2263;
				Match(DIRECTORY);
				State = 2265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2264;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2267;
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2268;
				Match(MAX_ROWS);
				State = 2270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2269;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2272;
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2273;
				Match(MIN_ROWS);
				State = 2275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2274;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2277;
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2278;
				Match(TABLESPACE);
				State = 2280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2279;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2282;
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2283;
				Match(NODEGROUP);
				State = 2285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2284;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2287;
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUpgradeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSimpleDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 126, RULE_alterDatabase);
		int _la;
		try {
			State = 2308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2290;
				Match(ALTER);
				State = 2291;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2292;
					uid();
					}
					break;
				}
				State = 2296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2295;
					createDatabaseOption();
					}
					}
					State = 2298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 4398214283264L) != 0 || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2300;
				Match(ALTER);
				State = 2301;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2302;
				uid();
				State = 2303;
				Match(UPGRADE);
				State = 2304;
				Match(DATA);
				State = 2305;
				Match(DIRECTORY);
				State = 2306;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 128, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2310;
			Match(ALTER);
			State = 2312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2311;
				ownerStatement();
				}
			}

			State = 2314;
			Match(EVENT);
			State = 2315;
			fullId();
			State = 2319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2316;
				Match(ON);
				State = 2317;
				Match(SCHEDULE);
				State = 2318;
				scheduleExpression();
				}
				break;
			}
			State = 2327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2321;
				Match(ON);
				State = 2322;
				Match(COMPLETION);
				State = 2324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2323;
					Match(NOT);
					}
				}

				State = 2326;
				Match(PRESERVE);
				}
			}

			State = 2332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 2329;
				Match(RENAME);
				State = 2330;
				Match(TO);
				State = 2331;
				fullId();
				}
				break;
			}
			State = 2335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2334;
				enableType();
				}
			}

			State = 2339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2337;
				Match(COMMENT);
				State = 2338;
				Match(STRING_LITERAL);
				}
			}

			State = 2343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 2341;
				Match(DO);
				State = 2342;
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			Match(ALTER);
			State = 2346;
			Match(FUNCTION);
			State = 2347;
			fullId();
			State = 2351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 140737496743941L) != 0 || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2348;
				routineOption();
				}
				}
				State = 2353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			Match(ALTER);
			State = 2355;
			Match(INSTANCE);
			State = 2356;
			Match(ROTATE);
			State = 2357;
			Match(INNODB);
			State = 2358;
			Match(MASTER);
			State = 2359;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 134, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2361;
			Match(ALTER);
			State = 2362;
			Match(LOGFILE);
			State = 2363;
			Match(GROUP);
			State = 2364;
			uid();
			State = 2365;
			Match(ADD);
			State = 2366;
			Match(UNDOFILE);
			State = 2367;
			Match(STRING_LITERAL);
			State = 2373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2368;
				Match(INITIAL_SIZE);
				State = 2370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2369;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2372;
				fileSizeLiteral();
				}
			}

			State = 2376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2375;
				Match(WAIT);
				}
			}

			State = 2378;
			Match(ENGINE);
			State = 2380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2379;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2382;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 136, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			Match(ALTER);
			State = 2385;
			Match(PROCEDURE);
			State = 2386;
			fullId();
			State = 2390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 140737496743941L) != 0 || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2387;
				routineOption();
				}
				}
				State = 2392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 138, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393;
			Match(ALTER);
			State = 2394;
			Match(SERVER);
			State = 2395;
			uid();
			State = 2396;
			Match(OPTIONS);
			State = 2397;
			Match(LR_BRACKET);
			State = 2398;
			serverOption();
			State = 2403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2399;
				Match(COMMA);
				State = 2400;
				serverOption();
				}
				}
				State = 2405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2406;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 140, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2408;
			Match(ALTER);
			State = 2410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2409;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2412;
				Match(IGNORE);
				}
			}

			State = 2415;
			Match(TABLE);
			State = 2416;
			tableName();
			State = 2418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 2417;
				waitNowaitClause();
				}
			}

			State = 2428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 2420;
				alterSpecification();
				State = 2425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2421;
					Match(COMMA);
					State = 2422;
					alterSpecification();
					}
					}
					State = 2427;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2430;
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 142, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			Match(ALTER);
			State = 2434;
			Match(TABLESPACE);
			State = 2435;
			uid();
			State = 2436;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2437;
			Match(DATAFILE);
			State = 2438;
			Match(STRING_LITERAL);
			State = 2442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2439;
				Match(INITIAL_SIZE);
				State = 2440;
				Match(EQUAL_SYMBOL);
				State = 2441;
				fileSizeLiteral();
				}
			}

			State = 2445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2444;
				Match(WAIT);
				}
			}

			State = 2447;
			Match(ENGINE);
			State = 2449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2448;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2451;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 144, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2453;
			Match(ALTER);
			State = 2457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2454;
				Match(ALGORITHM);
				State = 2455;
				Match(EQUAL_SYMBOL);
				State = 2456;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2459;
				ownerStatement();
				}
			}

			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2462;
				Match(SQL);
				State = 2463;
				Match(SECURITY);
				State = 2464;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2467;
			Match(VIEW);
			State = 2468;
			fullId();
			State = 2473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2469;
				Match(LR_BRACKET);
				State = 2470;
				uidList();
				State = 2471;
				Match(RR_BRACKET);
				}
			}

			State = 2475;
			Match(AS);
			State = 2476;
			selectStatement();
			State = 2483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2477;
				Match(WITH);
				State = 2479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2478;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2481;
				Match(CHECK);
				State = 2482;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDisableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByConvertCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOptimizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddDefinitionsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddDefinitionsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCoalescePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropConstraintCheckContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropConstraintCheck(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAlterIndexVisibilityContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAlterIndexVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRebuildPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByUpgradePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRepairPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByForce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddSpecialIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByModifyColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByLock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByValidate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCheckPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByEnableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByReorganizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterBySetAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAnalyzePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAnalyzePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddUniqueKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTruncatePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 146, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			State = 2866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2485;
				tableOption();
				State = 2492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2487;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2486;
							Match(COMMA);
							}
						}

						State = 2489;
						tableOption();
						}
						} 
					}
					State = 2494;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2495;
				Match(ADD);
				State = 2497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2496;
					Match(COLUMN);
					}
				}

				State = 2499;
				uid();
				State = 2500;
				columnDefinition();
				State = 2504;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2501;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2502;
					Match(AFTER);
					State = 2503;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2506;
				Match(ADD);
				State = 2508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2507;
					Match(COLUMN);
					}
				}

				State = 2510;
				Match(LR_BRACKET);
				State = 2511;
				uid();
				State = 2512;
				columnDefinition();
				State = 2519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2513;
					Match(COMMA);
					State = 2514;
					uid();
					State = 2515;
					columnDefinition();
					}
					}
					State = 2521;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2522;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2524;
				Match(ADD);
				State = 2525;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 2526;
					uid();
					}
				}

				State = 2530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2529;
					indexType();
					}
				}

				State = 2532;
				indexColumnNames();
				State = 2536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2533;
					indexOption();
					}
					}
					State = 2538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2539;
				Match(ADD);
				State = 2544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2540;
					Match(CONSTRAINT);
					State = 2542;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
					case 1:
						{
						State = 2541;
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				State = 2546;
				Match(PRIMARY);
				State = 2547;
				Match(KEY);
				State = 2549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 2548;
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				State = 2552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2551;
					indexType();
					}
				}

				State = 2554;
				indexColumnNames();
				State = 2558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2555;
					indexOption();
					}
					}
					State = 2560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2561;
				Match(ADD);
				State = 2566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2562;
					Match(CONSTRAINT);
					State = 2564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 2563;
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2568;
				Match(UNIQUE);
				State = 2570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2569;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 2572;
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2575;
					indexType();
					}
				}

				State = 2578;
				indexColumnNames();
				State = 2582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2579;
					indexOption();
					}
					}
					State = 2584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2585;
				Match(ADD);
				State = 2586;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2587;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 2590;
					uid();
					}
				}

				State = 2593;
				indexColumnNames();
				State = 2597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2594;
					indexOption();
					}
					}
					State = 2599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2600;
				Match(ADD);
				State = 2605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2601;
					Match(CONSTRAINT);
					State = 2603;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 2602;
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2607;
				Match(FOREIGN);
				State = 2608;
				Match(KEY);
				State = 2610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 2609;
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2612;
				indexColumnNames();
				State = 2613;
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2615;
				Match(ADD);
				State = 2620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2616;
					Match(CONSTRAINT);
					State = 2618;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						State = 2617;
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2622;
				Match(CHECK);
				State = 2623;
				Match(LR_BRACKET);
				State = 2624;
				expression(0);
				State = 2625;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2627;
				Match(ALGORITHM);
				State = 2629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2628;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2631;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2632;
				Match(ALTER);
				State = 2634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2633;
					Match(COLUMN);
					}
				}

				State = 2636;
				uid();
				State = 2642;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2637;
					Match(SET);
					State = 2638;
					Match(DEFAULT);
					State = 2639;
					defaultValue();
					}
					break;
				case DROP:
					{
					State = 2640;
					Match(DROP);
					State = 2641;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2644;
				Match(CHANGE);
				State = 2646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2645;
					Match(COLUMN);
					}
				}

				State = 2648;
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2649;
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2650;
				columnDefinition();
				State = 2654;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2651;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2652;
					Match(AFTER);
					State = 2653;
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2656;
				Match(RENAME);
				State = 2657;
				Match(COLUMN);
				State = 2658;
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				State = 2659;
				Match(TO);
				State = 2660;
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2662;
				Match(LOCK);
				State = 2664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2663;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2666;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2667;
				Match(MODIFY);
				State = 2669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2668;
					Match(COLUMN);
					}
				}

				State = 2671;
				uid();
				State = 2672;
				columnDefinition();
				State = 2676;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2673;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2674;
					Match(AFTER);
					State = 2675;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2678;
				Match(DROP);
				State = 2680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2679;
					Match(COLUMN);
					}
				}

				State = 2682;
				uid();
				State = 2684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESTRICT) {
					{
					State = 2683;
					Match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2686;
				Match(DROP);
				State = 2687;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2688;
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2689;
				Match(DROP);
				State = 2690;
				Match(PRIMARY);
				State = 2691;
				Match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2692;
				Match(DROP);
				State = 2693;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2694;
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByRenameIndexContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2695;
				Match(RENAME);
				State = 2696;
				((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2697;
				uid();
				State = 2698;
				Match(TO);
				State = 2699;
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2701;
				Match(ALTER);
				State = 2702;
				Match(INDEX);
				State = 2703;
				uid();
				State = 2704;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2706;
				Match(DROP);
				State = 2707;
				Match(FOREIGN);
				State = 2708;
				Match(KEY);
				State = 2709;
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2710;
				Match(DISABLE);
				State = 2711;
				Match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2712;
				Match(ENABLE);
				State = 2713;
				Match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2714;
				Match(RENAME);
				State = 2716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2715;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
				case 1:
					{
					State = 2718;
					uid();
					}
					break;
				case 2:
					{
					State = 2719;
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2722;
				Match(ORDER);
				State = 2723;
				Match(BY);
				State = 2724;
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2725;
				Match(CONVERT);
				State = 2726;
				Match(TO);
				State = 2727;
				Match(CHARACTER);
				State = 2728;
				Match(SET);
				State = 2729;
				charsetName();
				State = 2732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2730;
					Match(COLLATE);
					State = 2731;
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2734;
					Match(DEFAULT);
					}
				}

				State = 2737;
				Match(CHARACTER);
				State = 2738;
				Match(SET);
				State = 2739;
				Match(EQUAL_SYMBOL);
				State = 2740;
				charsetName();
				State = 2744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2741;
					Match(COLLATE);
					State = 2742;
					Match(EQUAL_SYMBOL);
					State = 2743;
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2746;
				Match(DISCARD);
				State = 2747;
				Match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2748;
				Match(IMPORT);
				State = 2749;
				Match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2750;
				Match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2751;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2752;
				Match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2753;
				Match(ADD);
				State = 2754;
				Match(PARTITION);
				State = 2755;
				Match(LR_BRACKET);
				State = 2756;
				partitionDefinition();
				State = 2761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2757;
					Match(COMMA);
					State = 2758;
					partitionDefinition();
					}
					}
					State = 2763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2764;
				Match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2766;
				Match(DROP);
				State = 2767;
				Match(PARTITION);
				State = 2768;
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2769;
				Match(DISCARD);
				State = 2770;
				Match(PARTITION);
				State = 2773;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2771;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2772;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2775;
				Match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2776;
				Match(IMPORT);
				State = 2777;
				Match(PARTITION);
				State = 2780;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2778;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2779;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2782;
				Match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2783;
				Match(TRUNCATE);
				State = 2784;
				Match(PARTITION);
				State = 2787;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2785;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2786;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2789;
				Match(COALESCE);
				State = 2790;
				Match(PARTITION);
				State = 2791;
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 2792;
				Match(REORGANIZE);
				State = 2793;
				Match(PARTITION);
				State = 2794;
				uidList();
				State = 2795;
				Match(INTO);
				State = 2796;
				Match(LR_BRACKET);
				State = 2797;
				partitionDefinition();
				State = 2802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2798;
					Match(COMMA);
					State = 2799;
					partitionDefinition();
					}
					}
					State = 2804;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2805;
				Match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 2807;
				Match(EXCHANGE);
				State = 2808;
				Match(PARTITION);
				State = 2809;
				uid();
				State = 2810;
				Match(WITH);
				State = 2811;
				Match(TABLE);
				State = 2812;
				tableName();
				State = 2815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2813;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2814;
					Match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 2817;
				Match(ANALYZE);
				State = 2818;
				Match(PARTITION);
				State = 2821;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2819;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2820;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 2823;
				Match(CHECK);
				State = 2824;
				Match(PARTITION);
				State = 2827;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2825;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2826;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 2829;
				Match(OPTIMIZE);
				State = 2830;
				Match(PARTITION);
				State = 2833;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2831;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2832;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 2835;
				Match(REBUILD);
				State = 2836;
				Match(PARTITION);
				State = 2839;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2837;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2838;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 2841;
				Match(REPAIR);
				State = 2842;
				Match(PARTITION);
				State = 2845;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2843;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2844;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 2847;
				Match(REMOVE);
				State = 2848;
				Match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 2849;
				Match(UPGRADE);
				State = 2850;
				Match(PARTITIONING);
				}
				break;
			case 48:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 2851;
				Match(ADD);
				State = 2853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2852;
					Match(COLUMN);
					}
				}

				State = 2855;
				Match(LR_BRACKET);
				State = 2856;
				createDefinition();
				State = 2861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2857;
					Match(COMMA);
					State = 2858;
					createDefinition();
					}
					}
					State = 2863;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2864;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 148, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2868;
			Match(DROP);
			State = 2869;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 2870;
				ifExists();
				}
				break;
			}
			State = 2873;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 150, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2875;
			Match(DROP);
			State = 2876;
			Match(EVENT);
			State = 2878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 2877;
				ifExists();
				}
				break;
			}
			State = 2880;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 152, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2882;
			Match(DROP);
			State = 2883;
			Match(INDEX);
			State = 2885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 2884;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2887;
			uid();
			State = 2888;
			Match(ON);
			State = 2889;
			tableName();
			State = 2902;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,368,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2900;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 2890;
						Match(ALGORITHM);
						State = 2892;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2891;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2894;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 2895;
						Match(LOCK);
						State = 2897;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2896;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2899;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2904;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,368,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 154, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905;
			Match(DROP);
			State = 2906;
			Match(LOGFILE);
			State = 2907;
			Match(GROUP);
			State = 2908;
			uid();
			State = 2909;
			Match(ENGINE);
			State = 2910;
			Match(EQUAL_SYMBOL);
			State = 2911;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 156, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2913;
			Match(DROP);
			State = 2914;
			Match(PROCEDURE);
			State = 2916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				{
				State = 2915;
				ifExists();
				}
				break;
			}
			State = 2918;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 158, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2920;
			Match(DROP);
			State = 2921;
			Match(FUNCTION);
			State = 2923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 2922;
				ifExists();
				}
				break;
			}
			State = 2925;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 160, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927;
			Match(DROP);
			State = 2928;
			Match(SERVER);
			State = 2930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				{
				State = 2929;
				ifExists();
				}
				break;
			}
			State = 2932;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 162, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934;
			Match(DROP);
			State = 2936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 2935;
				Match(TEMPORARY);
				}
			}

			State = 2938;
			Match(TABLE);
			State = 2940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				{
				State = 2939;
				ifExists();
				}
				break;
			}
			State = 2942;
			tables();
			State = 2944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2943;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 164, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			Match(DROP);
			State = 2947;
			Match(TABLESPACE);
			State = 2948;
			uid();
			State = 2954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 2949;
				Match(ENGINE);
				State = 2951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2950;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2953;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 166, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2956;
			Match(DROP);
			State = 2957;
			Match(TRIGGER);
			State = 2959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 2958;
				ifExists();
				}
				break;
			}
			State = 2961;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 168, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963;
			Match(DROP);
			State = 2964;
			Match(VIEW);
			State = 2966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				{
				State = 2965;
				ifExists();
				}
				break;
			}
			State = 2968;
			fullId();
			State = 2973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2969;
				Match(COMMA);
				State = 2970;
				fullId();
				}
				}
				State = 2975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2976;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 170, RULE_dropRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2979;
			Match(DROP);
			State = 2980;
			Match(ROLE);
			State = 2982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				{
				State = 2981;
				ifExists();
				}
				break;
			}
			State = 2984;
			roleName();
			State = 2989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2985;
				Match(COMMA);
				State = 2986;
				roleName();
				}
				}
				State = 2991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 172, RULE_setRole);
		int _la;
		try {
			State = 3025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2992;
				Match(SET);
				State = 2993;
				Match(DEFAULT);
				State = 2994;
				Match(ROLE);
				State = 3005;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					State = 2995;
					Match(NONE);
					}
					break;
				case 2:
					{
					State = 2996;
					Match(ALL);
					}
					break;
				case 3:
					{
					State = 2997;
					roleName();
					State = 3002;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2998;
						Match(COMMA);
						State = 2999;
						roleName();
						}
						}
						State = 3004;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 3007;
				Match(TO);
				State = 3010;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
				case 1:
					{
					State = 3008;
					userName();
					}
					break;
				case 2:
					{
					State = 3009;
					uid();
					}
					break;
				}
				State = 3019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3012;
					Match(COMMA);
					State = 3015;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
					case 1:
						{
						State = 3013;
						userName();
						}
						break;
					case 2:
						{
						State = 3014;
						uid();
						}
						break;
					}
					}
					}
					State = 3021;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3022;
				Match(SET);
				State = 3023;
				Match(ROLE);
				State = 3024;
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 174, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			Match(RENAME);
			State = 3028;
			Match(TABLE);
			State = 3029;
			renameTableClause();
			State = 3034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3030;
				Match(COMMA);
				State = 3031;
				renameTableClause();
				}
				}
				State = 3036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 176, RULE_renameTableClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3037;
			tableName();
			State = 3038;
			Match(TO);
			State = 3039;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 178, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3041;
			Match(TRUNCATE);
			State = 3043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 3042;
				Match(TABLE);
				}
			}

			State = 3045;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047;
			Match(CALL);
			State = 3048;
			fullId();
			State = 3055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				{
				State = 3049;
				Match(LR_BRACKET);
				State = 3052;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
				case 1:
					{
					State = 3050;
					constants();
					}
					break;
				case 2:
					{
					State = 3051;
					expressions();
					}
					break;
				}
				State = 3054;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_deleteStatement);
		try {
			State = 3059;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3057;
				singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3058;
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3061;
			Match(DO);
			State = 3062;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_handlerStatement);
		try {
			State = 3068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3064;
				handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3065;
				handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3066;
				handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3067;
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public FullColumnNameListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameListContext fullColumnNameList() {
			return GetRuleContext<FullColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3070;
			Match(INSERT);
			State = 3072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4611686020574871553L) != 0) {
				{
				State = 3071;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4611686020574871553L) != 0) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3074;
				Match(IGNORE);
				}
			}

			State = 3078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3077;
				Match(INTO);
				}
			}

			State = 3080;
			tableName();
			State = 3087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3081;
				Match(PARTITION);
				State = 3082;
				Match(LR_BRACKET);
				State = 3084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 3083;
					_localctx.partitions = uidList();
					}
				}

				State = 3086;
				Match(RR_BRACKET);
				}
			}

			State = 3105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3093;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
				case 1:
					{
					State = 3089;
					Match(LR_BRACKET);
					State = 3090;
					_localctx.columns = fullColumnNameList();
					State = 3091;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3095;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3096;
				Match(SET);
				State = 3097;
				_localctx.setFirst = updatedElement();
				State = 3102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3098;
					Match(COMMA);
					State = 3099;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3107;
				Match(ON);
				State = 3108;
				Match(DUPLICATE);
				State = 3109;
				Match(KEY);
				State = 3110;
				Match(UPDATE);
				State = 3111;
				_localctx.duplicatedFirst = updatedElement();
				State = 3116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3112;
					Match(COMMA);
					State = 3113;
					_localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 3118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES(int i) {
			return GetToken(MySqlParser.LINES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3121;
			Match(LOAD);
			State = 3122;
			Match(DATA);
			State = 3124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3123;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3126;
				Match(LOCAL);
				}
			}

			State = 3129;
			Match(INFILE);
			State = 3130;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3131;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3134;
			Match(INTO);
			State = 3135;
			Match(TABLE);
			State = 3136;
			tableName();
			State = 3142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3137;
				Match(PARTITION);
				State = 3138;
				Match(LR_BRACKET);
				State = 3139;
				uidList();
				State = 3140;
				Match(RR_BRACKET);
				}
			}

			State = 3147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3144;
				Match(CHARACTER);
				State = 3145;
				Match(SET);
				State = 3146;
				_localctx.charset = charsetName();
				}
			}

			State = 3155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 3149;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3150;
					selectFieldsInto();
					}
					}
					State = 3153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 3163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 3157;
				Match(LINES);
				State = 3159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3158;
					selectLinesInto();
					}
					}
					State = 3161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 3169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3165;
				Match(IGNORE);
				State = 3166;
				decimalLiteral();
				State = 3167;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				{
				State = 3171;
				Match(LR_BRACKET);
				State = 3172;
				assignmentField();
				State = 3177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3173;
					Match(COMMA);
					State = 3174;
					assignmentField();
					}
					}
					State = 3179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3180;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
			case 1:
				{
				State = 3184;
				Match(SET);
				State = 3185;
				updatedElement();
				State = 3190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3186;
					Match(COMMA);
					State = 3187;
					updatedElement();
					}
					}
					State = 3192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(MySqlParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadXmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3195;
			Match(LOAD);
			State = 3196;
			Match(XML);
			State = 3198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3197;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3200;
				Match(LOCAL);
				}
			}

			State = 3203;
			Match(INFILE);
			State = 3204;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3205;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3208;
			Match(INTO);
			State = 3209;
			Match(TABLE);
			State = 3210;
			tableName();
			State = 3214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3211;
				Match(CHARACTER);
				State = 3212;
				Match(SET);
				State = 3213;
				_localctx.charset = charsetName();
				}
			}

			State = 3222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 3216;
				Match(ROWS);
				State = 3217;
				Match(IDENTIFIED);
				State = 3218;
				Match(BY);
				State = 3219;
				Match(LESS_SYMBOL);
				State = 3220;
				_localctx.tag = Match(STRING_LITERAL);
				State = 3221;
				Match(GREATER_SYMBOL);
				}
			}

			State = 3228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3224;
				Match(IGNORE);
				State = 3225;
				decimalLiteral();
				State = 3226;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 3230;
				Match(LR_BRACKET);
				State = 3231;
				assignmentField();
				State = 3236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3232;
					Match(COMMA);
					State = 3233;
					assignmentField();
					}
					}
					State = 3238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3239;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
			case 1:
				{
				State = 3243;
				Match(SET);
				State = 3244;
				updatedElement();
				State = 3249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3245;
					Match(COMMA);
					State = 3246;
					updatedElement();
					}
					}
					State = 3251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3254;
			Match(REPLACE);
			State = 3256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 3255;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3258;
				Match(INTO);
				}
			}

			State = 3261;
			tableName();
			State = 3267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3262;
				Match(PARTITION);
				State = 3263;
				Match(LR_BRACKET);
				State = 3264;
				_localctx.partitions = uidList();
				State = 3265;
				Match(RR_BRACKET);
				}
			}

			State = 3285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
				case 1:
					{
					State = 3269;
					Match(LR_BRACKET);
					State = 3270;
					_localctx.columns = uidList();
					State = 3271;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3275;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3276;
				Match(SET);
				State = 3277;
				_localctx.setFirst = updatedElement();
				State = 3282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3278;
					Match(COMMA);
					State = 3279;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithLateralStatementContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralStatementContext[] lateralStatement() {
			return GetRuleContexts<LateralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralStatementContext lateralStatement(int i) {
			return GetRuleContext<LateralStatementContext>(i);
		}
		public WithLateralStatementContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithLateralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 3349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3287;
				querySpecification();
				State = 3289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
				case 1:
					{
					State = 3288;
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3291;
				queryExpression();
				State = 3293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
				case 1:
					{
					State = 3292;
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3295;
				querySpecificationNointo();
				State = 3297;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3296;
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3299;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,437,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3301;
					Match(UNION);
					State = 3303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3302;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3307;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 3305;
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 3306;
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 3312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
				case 1:
					{
					State = 3311;
					orderByClause();
					}
					break;
				}
				State = 3315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3314;
					limitClause();
					}
				}

				State = 3318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
				case 1:
					{
					State = 3317;
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3320;
				queryExpressionNointo();
				State = 3322;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3321;
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3324;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3326;
					Match(UNION);
					State = 3328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3327;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3330;
					queryExpression();
					}
				}

				State = 3334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
				case 1:
					{
					State = 3333;
					orderByClause();
					}
					break;
				}
				State = 3337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3336;
					limitClause();
					}
				}

				State = 3340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
				case 1:
					{
					State = 3339;
					lockClause();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WithLateralStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3342;
				querySpecificationNointo();
				State = 3345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3343;
					Match(COMMA);
					State = 3344;
					lateralStatement();
					}
					}
					State = 3347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_updateStatement);
		try {
			State = 3353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3351;
				singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3352;
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 200, RULE_insertStatementValue);
		int _la;
		try {
			State = 3373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3355;
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3356;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3357;
				Match(LR_BRACKET);
				State = 3359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
				case 1:
					{
					State = 3358;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3361;
				Match(RR_BRACKET);
				State = 3370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3362;
					Match(COMMA);
					State = 3363;
					Match(LR_BRACKET);
					State = 3365;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
					case 1:
						{
						State = 3364;
						expressionsWithDefaults();
						}
						break;
					}
					State = 3367;
					Match(RR_BRACKET);
					}
					}
					State = 3372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 202, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3375;
			fullColumnName();
			State = 3376;
			Match(EQUAL_SYMBOL);
			State = 3379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				{
				State = 3377;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3378;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 204, RULE_assignmentField);
		try {
			State = 3383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3381;
				uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3382;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 206, RULE_lockClause);
		try {
			State = 3391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3385;
				Match(FOR);
				State = 3386;
				Match(UPDATE);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3387;
				Match(LOCK);
				State = 3388;
				Match(IN);
				State = 3389;
				Match(SHARE);
				State = 3390;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 208, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3393;
			Match(DELETE);
			State = 3395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3394;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 3397;
				Match(QUICK);
				}
			}

			State = 3401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3400;
				Match(IGNORE);
				}
			}

			State = 3403;
			Match(FROM);
			State = 3404;
			tableName();
			State = 3410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3405;
				Match(PARTITION);
				State = 3406;
				Match(LR_BRACKET);
				State = 3407;
				uidList();
				State = 3408;
				Match(RR_BRACKET);
				}
			}

			State = 3414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3412;
				Match(WHERE);
				State = 3413;
				expression(0);
				}
			}

			State = 3417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3416;
				orderByClause();
				}
			}

			State = 3421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3419;
				Match(LIMIT);
				State = 3420;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MySqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MySqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3423;
			Match(DELETE);
			State = 3425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3424;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
			case 1:
				{
				State = 3427;
				Match(QUICK);
				}
				break;
			}
			State = 3431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3430;
				Match(IGNORE);
				}
			}

			State = 3472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 3433;
				tableName();
				State = 3436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3434;
					Match(DOT);
					State = 3435;
					Match(STAR);
					}
				}

				State = 3446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3438;
					Match(COMMA);
					State = 3439;
					tableName();
					State = 3442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3440;
						Match(DOT);
						State = 3441;
						Match(STAR);
						}
					}

					}
					}
					State = 3448;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3449;
				Match(FROM);
				State = 3450;
				tableSources();
				}
				break;
			case FROM:
				{
				State = 3452;
				Match(FROM);
				State = 3453;
				tableName();
				State = 3456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3454;
					Match(DOT);
					State = 3455;
					Match(STAR);
					}
				}

				State = 3466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3458;
					Match(COMMA);
					State = 3459;
					tableName();
					State = 3462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3460;
						Match(DOT);
						State = 3461;
						Match(STAR);
						}
					}

					}
					}
					State = 3468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3469;
				Match(USING);
				State = 3470;
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3474;
				Match(WHERE);
				State = 3475;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerOpenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3478;
			Match(HANDLER);
			State = 3479;
			tableName();
			State = 3480;
			Match(OPEN);
			State = 3485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 3482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3481;
					Match(AS);
					}
				}

				State = 3484;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3487;
			Match(HANDLER);
			State = 3488;
			tableName();
			State = 3489;
			Match(READ);
			State = 3490;
			_localctx.index = uid();
			State = 3497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3491;
				comparisonOperator();
				State = 3492;
				Match(LR_BRACKET);
				State = 3493;
				constants();
				State = 3494;
				Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3496;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3499;
				Match(WHERE);
				State = 3500;
				expression(0);
				}
			}

			State = 3505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3503;
				Match(LIMIT);
				State = 3504;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507;
			Match(HANDLER);
			State = 3508;
			tableName();
			State = 3509;
			Match(READ);
			State = 3510;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3511;
				Match(WHERE);
				State = 3512;
				expression(0);
				}
			}

			State = 3517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3515;
				Match(LIMIT);
				State = 3516;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCloseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3519;
			Match(HANDLER);
			State = 3520;
			tableName();
			State = 3521;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3523;
			Match(UPDATE);
			State = 3525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3524;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3527;
				Match(IGNORE);
				}
			}

			State = 3530;
			tableName();
			State = 3535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285556736L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 3532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3531;
					Match(AS);
					}
				}

				State = 3534;
				uid();
				}
			}

			State = 3537;
			Match(SET);
			State = 3538;
			updatedElement();
			State = 3543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3539;
				Match(COMMA);
				State = 3540;
				updatedElement();
				}
				}
				State = 3545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3546;
				Match(WHERE);
				State = 3547;
				expression(0);
				}
			}

			State = 3551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3550;
				orderByClause();
				}
			}

			State = 3554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3553;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 222, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3556;
			Match(UPDATE);
			State = 3558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3557;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3560;
				Match(IGNORE);
				}
			}

			State = 3563;
			tableSources();
			State = 3564;
			Match(SET);
			State = 3565;
			updatedElement();
			State = 3570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3566;
				Match(COMMA);
				State = 3567;
				updatedElement();
				}
				}
				State = 3572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3573;
				Match(WHERE);
				State = 3574;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 224, RULE_orderByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3577;
			Match(ORDER);
			State = 3578;
			Match(BY);
			State = 3579;
			orderByExpression();
			State = 3584;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,497,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3580;
					Match(COMMA);
					State = 3581;
					orderByExpression();
					}
					} 
				}
				State = 3586;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,497,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3587;
			expression(0);
			State = 3589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
			case 1:
				{
				State = 3588;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 228, RULE_tableSources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3591;
			tableSource();
			State = 3596;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,499,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3592;
					Match(COMMA);
					State = 3593;
					tableSource();
					}
					} 
				}
				State = 3598;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,499,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableJsonContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonTableContext jsonTable() {
			return GetRuleContext<JsonTableContext>(0);
		}
		public TableJsonContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableJson(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 230, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,502,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3599;
				tableSourceItem();
				State = 3603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,500,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3600;
						joinPart();
						}
						} 
					}
					State = 3605;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,500,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3606;
				Match(LR_BRACKET);
				State = 3607;
				tableSourceItem();
				State = 3611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 4647996290423062529L) != 0 || (((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 144115222435594241L) != 0) {
					{
					{
					State = 3608;
					joinPart();
					}
					}
					State = 3613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3614;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TableJsonContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3616;
				jsonTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourcesItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 232, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3619;
				tableName();
				State = 3625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3620;
					Match(PARTITION);
					State = 3621;
					Match(LR_BRACKET);
					State = 3622;
					uidList();
					State = 3623;
					Match(RR_BRACKET);
					}
				}

				State = 3631;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
				case 1:
					{
					State = 3628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3627;
						Match(AS);
						}
					}

					State = 3630;
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
				case 1:
					{
					State = 3633;
					indexHint();
					State = 3638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,506,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3634;
							Match(COMMA);
							State = 3635;
							indexHint();
							}
							} 
						}
						State = 3640;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,506,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3648;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
				case 1:
					{
					State = 3643;
					selectStatement();
					}
					break;
				case 2:
					{
					State = 3644;
					Match(LR_BRACKET);
					State = 3645;
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3646;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3650;
					Match(AS);
					}
				}

				State = 3653;
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3655;
				Match(LR_BRACKET);
				State = 3656;
				tableSources();
				State = 3657;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 234, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3661;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3662;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3663;
				Match(FOR);
				State = 3664;
				indexHintType();
				}
			}

			State = 3667;
			Match(LR_BRACKET);
			State = 3668;
			uidList();
			State = 3669;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 236, RULE_indexHintType);
		try {
			State = 3676;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3671;
				Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3672;
				Match(ORDER);
				State = 3673;
				Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3674;
				Match(GROUP);
				State = 3675;
				Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MySqlParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MySqlParser.LATERAL, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStraightJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 238, RULE_joinPart);
		int _la;
		try {
			State = 3728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3678;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3681;
				Match(JOIN);
				State = 3683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
				case 1:
					{
					State = 3682;
					Match(LATERAL);
					}
					break;
				}
				State = 3685;
				tableSourceItem();
				State = 3693;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
				case 1:
					{
					State = 3686;
					Match(ON);
					State = 3687;
					expression(0);
					}
					break;
				case 2:
					{
					State = 3688;
					Match(USING);
					State = 3689;
					Match(LR_BRACKET);
					State = 3690;
					uidList();
					State = 3691;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3695;
				Match(STRAIGHT_JOIN);
				State = 3696;
				tableSourceItem();
				State = 3699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
				case 1:
					{
					State = 3697;
					Match(ON);
					State = 3698;
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3701;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3702;
					Match(OUTER);
					}
				}

				State = 3705;
				Match(JOIN);
				State = 3707;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
				case 1:
					{
					State = 3706;
					Match(LATERAL);
					}
					break;
				}
				State = 3709;
				tableSourceItem();
				State = 3717;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 3710;
					Match(ON);
					State = 3711;
					expression(0);
					}
					break;
				case USING:
					{
					State = 3712;
					Match(USING);
					State = 3713;
					Match(LR_BRACKET);
					State = 3714;
					uidList();
					State = 3715;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3719;
				Match(NATURAL);
				State = 3724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 3720;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 3721;
						Match(OUTER);
						}
					}

					}
				}

				State = 3726;
				Match(JOIN);
				State = 3727;
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_queryExpression);
		try {
			State = 3738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3730;
				Match(LR_BRACKET);
				State = 3731;
				querySpecification();
				State = 3732;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3734;
				Match(LR_BRACKET);
				State = 3735;
				queryExpression();
				State = 3736;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 242, RULE_queryExpressionNointo);
		try {
			State = 3748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3740;
				Match(LR_BRACKET);
				State = 3741;
				querySpecificationNointo();
				State = 3742;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3744;
				Match(LR_BRACKET);
				State = 3745;
				queryExpressionNointo();
				State = 3746;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 244, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 3808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3750;
				Match(SELECT);
				State = 3754;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,525,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3751;
						selectSpec();
						}
						} 
					}
					State = 3756;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,525,Context);
				}
				State = 3757;
				selectElements();
				State = 3759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3758;
					selectIntoExpression();
					}
				}

				State = 3762;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
				case 1:
					{
					State = 3761;
					fromClause();
					}
					break;
				}
				State = 3765;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
				case 1:
					{
					State = 3764;
					groupByClause();
					}
					break;
				}
				State = 3768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3767;
					havingClause();
					}
				}

				State = 3771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3770;
					windowClause();
					}
				}

				State = 3774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
				case 1:
					{
					State = 3773;
					orderByClause();
					}
					break;
				}
				State = 3777;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
				case 1:
					{
					State = 3776;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3779;
				Match(SELECT);
				State = 3783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,533,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3780;
						selectSpec();
						}
						} 
					}
					State = 3785;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,533,Context);
				}
				State = 3786;
				selectElements();
				State = 3788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
				case 1:
					{
					State = 3787;
					fromClause();
					}
					break;
				}
				State = 3791;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
				case 1:
					{
					State = 3790;
					groupByClause();
					}
					break;
				}
				State = 3794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3793;
					havingClause();
					}
				}

				State = 3797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3796;
					windowClause();
					}
				}

				State = 3800;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
				case 1:
					{
					State = 3799;
					orderByClause();
					}
					break;
				}
				State = 3803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
				case 1:
					{
					State = 3802;
					limitClause();
					}
					break;
				}
				State = 3806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3805;
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecificationNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 246, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3810;
			Match(SELECT);
			State = 3814;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3811;
					selectSpec();
					}
					} 
				}
				State = 3816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			}
			State = 3817;
			selectElements();
			State = 3819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
			case 1:
				{
				State = 3818;
				fromClause();
				}
				break;
			}
			State = 3822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
			case 1:
				{
				State = 3821;
				groupByClause();
				}
				break;
			}
			State = 3825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 3824;
				havingClause();
				}
			}

			State = 3828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 3827;
				windowClause();
				}
			}

			State = 3831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
			case 1:
				{
				State = 3830;
				orderByClause();
				}
				break;
			}
			State = 3834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
			case 1:
				{
				State = 3833;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 248, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3836;
			Match(UNION);
			State = 3838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3837;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3840;
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 250, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3842;
			Match(UNION);
			State = 3844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3843;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3848;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 3846;
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 3847;
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LateralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MySqlParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LateralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lateralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLateralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LateralStatementContext lateralStatement() {
		LateralStatementContext _localctx = new LateralStatementContext(Context, State);
		EnterRule(_localctx, 252, RULE_lateralStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3850;
			Match(LATERAL);
			State = 3865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,555,Context) ) {
			case 1:
				{
				State = 3851;
				querySpecificationNointo();
				}
				break;
			case 2:
				{
				State = 3852;
				queryExpressionNointo();
				}
				break;
			case 3:
				{
				{
				State = 3853;
				Match(LR_BRACKET);
				State = 3856;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
					{
					State = 3854;
					querySpecificationNointo();
					}
					break;
				case LR_BRACKET:
					{
					State = 3855;
					queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3858;
				Match(RR_BRACKET);
				State = 3863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
				case 1:
					{
					State = 3860;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3859;
						Match(AS);
						}
					}

					State = 3862;
					uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MySqlParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnListContext jsonColumnList() {
			return GetRuleContext<JsonColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public JsonTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTableContext jsonTable() {
		JsonTableContext _localctx = new JsonTableContext(Context, State);
		EnterRule(_localctx, 254, RULE_jsonTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3867;
			Match(JSON_TABLE);
			State = 3868;
			Match(LR_BRACKET);
			State = 3869;
			Match(STRING_LITERAL);
			State = 3870;
			Match(COMMA);
			State = 3871;
			Match(STRING_LITERAL);
			State = 3872;
			Match(COLUMNS);
			State = 3873;
			Match(LR_BRACKET);
			State = 3874;
			jsonColumnList();
			State = 3875;
			Match(RR_BRACKET);
			State = 3876;
			Match(RR_BRACKET);
			State = 3881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
			case 1:
				{
				State = 3878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3877;
					Match(AS);
					}
				}

				State = 3880;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnContext[] jsonColumn() {
			return GetRuleContexts<JsonColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnContext jsonColumn(int i) {
			return GetRuleContext<JsonColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public JsonColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonColumnListContext jsonColumnList() {
		JsonColumnListContext _localctx = new JsonColumnListContext(Context, State);
		EnterRule(_localctx, 256, RULE_jsonColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3883;
			jsonColumn();
			State = 3888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3884;
				Match(COMMA);
				State = 3885;
				jsonColumn();
				}
				}
				State = 3890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(MySqlParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(MySqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnEmptyContext jsonOnEmpty() {
			return GetRuleContext<JsonOnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnErrorContext jsonOnError() {
			return GetRuleContext<JsonOnErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(MySqlParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnListContext jsonColumnList() {
			return GetRuleContext<JsonColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public JsonColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonColumnContext jsonColumn() {
		JsonColumnContext _localctx = new JsonColumnContext(Context, State);
		EnterRule(_localctx, 258, RULE_jsonColumn);
		int _la;
		try {
			State = 3920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,564,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3891;
				fullColumnName();
				State = 3908;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 3892;
					Match(FOR);
					State = 3893;
					Match(ORDINALITY);
					}
					break;
				case CHARACTER:
				case SET:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case MIDDLEINT:
				case INT:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case DECIMAL:
				case DEC:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case NVARCHAR:
				case NATIONAL:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONG:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case SERIAL:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case FIXED:
				case JSON:
				case NCHAR:
				case GEOMETRYCOLLECTION:
				case GEOMCOLLECTION:
				case GEOMETRY:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
					{
					State = 3894;
					dataType();
					State = 3906;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PATH:
						{
						State = 3895;
						Match(PATH);
						State = 3896;
						Match(STRING_LITERAL);
						State = 3898;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
						case 1:
							{
							State = 3897;
							jsonOnEmpty();
							}
							break;
						}
						State = 3901;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
							{
							State = 3900;
							jsonOnError();
							}
						}

						}
						break;
					case EXISTS:
						{
						State = 3903;
						Match(EXISTS);
						State = 3904;
						Match(PATH);
						State = 3905;
						Match(STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3910;
				Match(NESTED);
				State = 3912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PATH) {
					{
					State = 3911;
					Match(PATH);
					}
				}

				State = 3914;
				Match(STRING_LITERAL);
				State = 3915;
				Match(COLUMNS);
				State = 3916;
				Match(LR_BRACKET);
				State = 3917;
				jsonColumnList();
				State = 3918;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MySqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public JsonOnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOnEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnEmptyContext jsonOnEmpty() {
		JsonOnEmptyContext _localctx = new JsonOnEmptyContext(Context, State);
		EnterRule(_localctx, 260, RULE_jsonOnEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3926;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
				{
				State = 3922;
				Match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				State = 3923;
				Match(ERROR);
				}
				break;
			case DEFAULT:
				{
				State = 3924;
				Match(DEFAULT);
				State = 3925;
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3928;
			Match(ON);
			State = 3929;
			Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(MySqlParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(MySqlParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public JsonOnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOnError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnErrorContext jsonOnError() {
		JsonOnErrorContext _localctx = new JsonOnErrorContext(Context, State);
		EnterRule(_localctx, 262, RULE_jsonOnError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
				{
				State = 3931;
				Match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				State = 3932;
				Match(ERROR);
				}
				break;
			case DEFAULT:
				{
				State = 3933;
				Match(DEFAULT);
				State = 3934;
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3937;
			Match(ON);
			State = 3938;
			Match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 264, RULE_selectSpec);
		int _la;
		try {
			State = 3948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3940;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849860264000L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3941;
				Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3942;
				Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3943;
				Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3944;
				Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3945;
				Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3946;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3947;
				Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				{
				State = 3950;
				_localctx.star = Match(STAR);
				}
				break;
			case 2:
				{
				State = 3951;
				selectElement();
				}
				break;
			}
			State = 3958;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,569,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3954;
					Match(COMMA);
					State = 3955;
					selectElement();
					}
					} 
				}
				State = 3960;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,569,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFunctionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStarElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 268, RULE_selectElement);
		int _la;
		try {
			State = 3990;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3961;
				fullId();
				State = 3962;
				Match(DOT);
				State = 3963;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3965;
				fullColumnName();
				State = 3970;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
				case 1:
					{
					State = 3967;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3966;
						Match(AS);
						}
					}

					State = 3969;
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3972;
				functionCall();
				State = 3977;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
				case 1:
					{
					State = 3974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3973;
						Match(AS);
						}
					}

					State = 3976;
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
				case 1:
					{
					State = 3979;
					Match(LOCAL_ID);
					State = 3980;
					Match(VAR_ASSIGN);
					}
					break;
				}
				State = 3983;
				expression(0);
				State = 3988;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
				case 1:
					{
					State = 3985;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3984;
						Match(AS);
						}
					}

					State = 3987;
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoTextFile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoDumpFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_selectIntoExpression);
		int _la;
		try {
			State = 4028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3992;
				Match(INTO);
				State = 3993;
				assignmentField();
				State = 3998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3994;
					Match(COMMA);
					State = 3995;
					assignmentField();
					}
					}
					State = 4000;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4001;
				Match(INTO);
				State = 4002;
				Match(DUMPFILE);
				State = 4003;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 4004;
				Match(INTO);
				State = 4005;
				Match(OUTFILE);
				State = 4006;
				((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 4010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 4007;
					Match(CHARACTER);
					State = 4008;
					Match(SET);
					State = 4009;
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 4018;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,581,Context) ) {
				case 1:
					{
					State = 4012;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4013;
						selectFieldsInto();
						}
						}
						State = 4016;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 4026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 4020;
					Match(LINES);
					State = 4022;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4021;
						selectLinesInto();
						}
						}
						State = 4024;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldsInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 272, RULE_selectFieldsInto);
		int _la;
		try {
			State = 4042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4030;
				Match(TERMINATED);
				State = 4031;
				Match(BY);
				State = 4032;
				_localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 4033;
					Match(OPTIONALLY);
					}
				}

				State = 4036;
				Match(ENCLOSED);
				State = 4037;
				Match(BY);
				State = 4038;
				_localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4039;
				Match(ESCAPED);
				State = 4040;
				Match(BY);
				State = 4041;
				_localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLinesInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 274, RULE_selectLinesInto);
		try {
			State = 4050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4044;
				Match(STARTING);
				State = 4045;
				Match(BY);
				State = 4046;
				_localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4047;
				Match(TERMINATED);
				State = 4048;
				Match(BY);
				State = 4049;
				_localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4052;
				Match(FROM);
				State = 4053;
				tableSources();
				}
			}

			State = 4058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4056;
				Match(WHERE);
				State = 4057;
				_localctx.whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 278, RULE_groupByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4060;
			Match(GROUP);
			State = 4061;
			Match(BY);
			State = 4062;
			groupByItem();
			State = 4067;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,590,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4063;
					Match(COMMA);
					State = 4064;
					groupByItem();
					}
					} 
				}
				State = 4069;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,590,Context);
			}
			State = 4072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
			case 1:
				{
				State = 4070;
				Match(WITH);
				State = 4071;
				Match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ExpressionContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 280, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4074;
			Match(HAVING);
			State = 4075;
			_localctx.havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(MySqlParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext[] windowName() {
			return GetRuleContexts<WindowNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName(int i) {
			return GetRuleContext<WindowNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(MySqlParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(MySqlParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext[] windowSpec() {
			return GetRuleContexts<WindowSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec(int i) {
			return GetRuleContext<WindowSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4077;
			Match(WINDOW);
			State = 4078;
			windowName();
			State = 4079;
			Match(AS);
			State = 4080;
			Match(LR_BRACKET);
			State = 4081;
			windowSpec();
			State = 4082;
			Match(RR_BRACKET);
			State = 4092;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,592,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4083;
					Match(COMMA);
					State = 4084;
					windowName();
					State = 4085;
					Match(AS);
					State = 4086;
					Match(LR_BRACKET);
					State = 4087;
					windowSpec();
					State = 4088;
					Match(RR_BRACKET);
					}
					} 
				}
				State = 4094;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,592,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 284, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4095;
			expression(0);
			State = 4097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				{
				State = 4096;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext[] limitClauseAtom() {
			return GetRuleContexts<LimitClauseAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom(int i) {
			return GetRuleContext<LimitClauseAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4099;
			Match(LIMIT);
			State = 4110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				{
				State = 4103;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
				case 1:
					{
					State = 4100;
					_localctx.offset = limitClauseAtom();
					State = 4101;
					Match(COMMA);
					}
					break;
				}
				State = 4105;
				_localctx.limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				State = 4106;
				_localctx.limit = limitClauseAtom();
				State = 4107;
				Match(OFFSET);
				State = 4108;
				_localctx.offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClauseAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseAtomContext limitClauseAtom() {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
		EnterRule(_localctx, 288, RULE_limitClauseAtom);
		try {
			State = 4115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4112;
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4113;
				mysqlVariable();
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4114;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 290, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4117;
			Match(START);
			State = 4118;
			Match(TRANSACTION);
			State = 4127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 4119;
				transactionMode();
				State = 4124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4120;
					Match(COMMA);
					State = 4121;
					transactionMode();
					}
					}
					State = 4126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 292, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4129;
			Match(BEGIN);
			State = 4131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4130;
				Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 294, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4133;
			Match(COMMIT);
			State = 4135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4134;
				Match(WORK);
				}
			}

			State = 4142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4137;
				Match(AND);
				State = 4139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4138;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4141;
				Match(CHAIN);
				}
			}

			State = 4148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
			case 1:
				{
				State = 4145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4144;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4147;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 296, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150;
			Match(ROLLBACK);
			State = 4152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4151;
				Match(WORK);
				}
			}

			State = 4159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4154;
				Match(AND);
				State = 4156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4155;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4158;
				Match(CHAIN);
				}
			}

			State = 4165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,609,Context) ) {
			case 1:
				{
				State = 4162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4161;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4164;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4167;
			Match(SAVEPOINT);
			State = 4168;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 300, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4170;
			Match(ROLLBACK);
			State = 4172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4171;
				Match(WORK);
				}
			}

			State = 4174;
			Match(TO);
			State = 4176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
			case 1:
				{
				State = 4175;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 4178;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReleaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4180;
			Match(RELEASE);
			State = 4181;
			Match(SAVEPOINT);
			State = 4182;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 304, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4184;
			Match(LOCK);
			State = 4185;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4186;
			lockTableElement();
			State = 4191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4187;
				Match(COMMA);
				State = 4188;
				lockTableElement();
				}
				}
				State = 4193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 4194;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 306, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4197;
			Match(UNLOCK);
			State = 4198;
			Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4200;
			Match(SET);
			State = 4201;
			Match(AUTOCOMMIT);
			State = 4202;
			Match(EQUAL_SYMBOL);
			State = 4203;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 310, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4205;
			Match(SET);
			State = 4207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 4206;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4209;
			Match(TRANSACTION);
			State = 4210;
			transactionOption();
			State = 4215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4211;
				Match(COMMA);
				State = 4212;
				transactionOption();
				}
				}
				State = 4217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 312, RULE_transactionMode);
		try {
			State = 4225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,616,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4218;
				Match(WITH);
				State = 4219;
				Match(CONSISTENT);
				State = 4220;
				Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4221;
				Match(READ);
				State = 4222;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4223;
				Match(READ);
				State = 4224;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 314, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4227;
			tableName();
			State = 4232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285556736L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4228;
					Match(AS);
					}
				}

				State = 4231;
				uid();
				}
			}

			State = 4234;
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 316, RULE_lockAction);
		int _la;
		try {
			State = 4244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4236;
				Match(READ);
				State = 4238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 4237;
					Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 4240;
					Match(LOW_PRIORITY);
					}
				}

				State = 4243;
				Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 318, RULE_transactionOption);
		try {
			State = 4253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,622,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4246;
				Match(ISOLATION);
				State = 4247;
				Match(LEVEL);
				State = 4248;
				transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4249;
				Match(READ);
				State = 4250;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4251;
				Match(READ);
				State = 4252;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 320, RULE_transactionLevel);
		try {
			State = 4262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4255;
				Match(REPEATABLE);
				State = 4256;
				Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4257;
				Match(READ);
				State = 4258;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4259;
				Match(READ);
				State = 4260;
				Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4261;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 322, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4264;
			Match(CHANGE);
			State = 4265;
			Match(MASTER);
			State = 4266;
			Match(TO);
			State = 4267;
			masterOption();
			State = 4272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4268;
				Match(COMMA);
				State = 4269;
				masterOption();
				}
				}
				State = 4274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4275;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplicationFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 324, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4278;
			Match(CHANGE);
			State = 4279;
			Match(REPLICATION);
			State = 4280;
			Match(FILTER);
			State = 4281;
			replicationFilter();
			State = 4286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4282;
				Match(COMMA);
				State = 4283;
				replicationFilter();
				}
				}
				State = 4288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurgeBinaryLogs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 326, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4289;
			Match(PURGE);
			State = 4290;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4291;
			Match(LOGS);
			State = 4296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 4292;
				Match(TO);
				State = 4293;
				_localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 4294;
				Match(BEFORE);
				State = 4295;
				_localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 328, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4298;
			Match(RESET);
			State = 4299;
			Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 330, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4301;
			Match(RESET);
			State = 4302;
			Match(SLAVE);
			State = 4304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 4303;
				Match(ALL);
				}
			}

			State = 4307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4306;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 332, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4309;
			Match(START);
			State = 4310;
			Match(SLAVE);
			State = 4319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4311;
				threadType();
				State = 4316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4312;
					Match(COMMA);
					State = 4313;
					threadType();
					}
					}
					State = 4318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4321;
				Match(UNTIL);
				State = 4322;
				untilOption();
				}
			}

			State = 4328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 4325;
				connectionOption();
				}
				}
				State = 4330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4331;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 334, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4334;
			Match(STOP);
			State = 4335;
			Match(SLAVE);
			State = 4344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4336;
				threadType();
				State = 4341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4337;
					Match(COMMA);
					State = 4338;
					threadType();
					}
					}
					State = 4343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 336, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4346;
			Match(START);
			State = 4347;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 338, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4349;
			Match(STOP);
			State = 4350;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterStringOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterRealOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		[System.Diagnostics.DebuggerNonUserCode] public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterBoolOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterUidListOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterDecimalOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 340, RULE_masterOption);
		int _la;
		try {
			State = 4381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4352;
				stringMasterOption();
				State = 4353;
				Match(EQUAL_SYMBOL);
				State = 4354;
				Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4356;
				decimalMasterOption();
				State = 4357;
				Match(EQUAL_SYMBOL);
				State = 4358;
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4360;
				boolMasterOption();
				State = 4361;
				Match(EQUAL_SYMBOL);
				State = 4362;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4364;
				Match(MASTER_HEARTBEAT_PERIOD);
				State = 4365;
				Match(EQUAL_SYMBOL);
				State = 4366;
				Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4367;
				Match(IGNORE_SERVER_IDS);
				State = 4368;
				Match(EQUAL_SYMBOL);
				State = 4369;
				Match(LR_BRACKET);
				State = 4378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					State = 4370;
					uid();
					State = 4375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4371;
						Match(COMMA);
						State = 4372;
						uid();
						}
						}
						State = 4377;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4380;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 342, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4383;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || (((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & 65419L) != 0 || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 344, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4385;
			_la = TokenStream.LA(1);
			if ( !((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & 419L) != 0 || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 346, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4387;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 348, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4389;
			Match(FOR);
			State = 4390;
			Match(CHANNEL);
			State = 4391;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 350, RULE_replicationFilter);
		int _la;
		try {
			State = 4442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4393;
				Match(REPLICATE_DO_DB);
				State = 4394;
				Match(EQUAL_SYMBOL);
				State = 4395;
				Match(LR_BRACKET);
				State = 4396;
				uidList();
				State = 4397;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4399;
				Match(REPLICATE_IGNORE_DB);
				State = 4400;
				Match(EQUAL_SYMBOL);
				State = 4401;
				Match(LR_BRACKET);
				State = 4402;
				uidList();
				State = 4403;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4405;
				Match(REPLICATE_DO_TABLE);
				State = 4406;
				Match(EQUAL_SYMBOL);
				State = 4407;
				Match(LR_BRACKET);
				State = 4408;
				tables();
				State = 4409;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4411;
				Match(REPLICATE_IGNORE_TABLE);
				State = 4412;
				Match(EQUAL_SYMBOL);
				State = 4413;
				Match(LR_BRACKET);
				State = 4414;
				tables();
				State = 4415;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4417;
				Match(REPLICATE_WILD_DO_TABLE);
				State = 4418;
				Match(EQUAL_SYMBOL);
				State = 4419;
				Match(LR_BRACKET);
				State = 4420;
				simpleStrings();
				State = 4421;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4423;
				Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 4424;
				Match(EQUAL_SYMBOL);
				State = 4425;
				Match(LR_BRACKET);
				State = 4426;
				simpleStrings();
				State = 4427;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4429;
				Match(REPLICATE_REWRITE_DB);
				State = 4430;
				Match(EQUAL_SYMBOL);
				State = 4431;
				Match(LR_BRACKET);
				State = 4432;
				tablePair();
				State = 4437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4433;
					Match(COMMA);
					State = 4434;
					tablePair();
					}
					}
					State = 4439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4440;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 352, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4444;
			Match(LR_BRACKET);
			State = 4445;
			_localctx.firstTable = tableName();
			State = 4446;
			Match(COMMA);
			State = 4447;
			_localctx.secondTable = tableName();
			State = 4448;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 354, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4450;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtidsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlGapsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelayLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 356, RULE_untilOption);
		int _la;
		try {
			State = 4470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4452;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4453;
				Match(EQUAL_SYMBOL);
				State = 4454;
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4455;
				Match(MASTER_LOG_FILE);
				State = 4456;
				Match(EQUAL_SYMBOL);
				State = 4457;
				Match(STRING_LITERAL);
				State = 4458;
				Match(COMMA);
				State = 4459;
				Match(MASTER_LOG_POS);
				State = 4460;
				Match(EQUAL_SYMBOL);
				State = 4461;
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4462;
				Match(RELAY_LOG_FILE);
				State = 4463;
				Match(EQUAL_SYMBOL);
				State = 4464;
				Match(STRING_LITERAL);
				State = 4465;
				Match(COMMA);
				State = 4466;
				Match(RELAY_LOG_POS);
				State = 4467;
				Match(EQUAL_SYMBOL);
				State = 4468;
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4469;
				Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginDirConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultAuthConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 358, RULE_connectionOption);
		try {
			State = 4484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4472;
				Match(USER);
				State = 4473;
				Match(EQUAL_SYMBOL);
				State = 4474;
				((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4475;
				Match(PASSWORD);
				State = 4476;
				Match(EQUAL_SYMBOL);
				State = 4477;
				((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4478;
				Match(DEFAULT_AUTH);
				State = 4479;
				Match(EQUAL_SYMBOL);
				State = 4480;
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4481;
				Match(PLUGIN_DIR);
				State = 4482;
				Match(EQUAL_SYMBOL);
				State = 4483;
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 360, RULE_gtuidSet);
		int _la;
		try {
			State = 4495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4486;
				uuidSet();
				State = 4491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4487;
					Match(COMMA);
					State = 4488;
					uuidSet();
					}
					}
					State = 4493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4494;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 362, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4497;
			Match(XA);
			State = 4498;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4499;
			xid();
			State = 4501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 4500;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaEndTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 364, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4503;
			Match(XA);
			State = 4504;
			Match(END);
			State = 4505;
			xid();
			State = 4511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 4506;
				Match(SUSPEND);
				State = 4509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4507;
					Match(FOR);
					State = 4508;
					Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 366, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4513;
			Match(XA);
			State = 4514;
			Match(PREPARE);
			State = 4515;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 368, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4517;
			Match(XA);
			State = 4518;
			Match(COMMIT);
			State = 4519;
			xid();
			State = 4522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 4520;
				Match(ONE);
				State = 4521;
				Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 370, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4524;
			Match(XA);
			State = 4525;
			Match(ROLLBACK);
			State = 4526;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRecoverWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 372, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4528;
			Match(XA);
			State = 4529;
			Match(RECOVER);
			State = 4532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 4530;
				Match(CONVERT);
				State = 4531;
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 374, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4534;
			Match(PREPARE);
			State = 4535;
			uid();
			State = 4536;
			Match(FROM);
			State = 4539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 4537;
				_localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 4538;
				_localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 376, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4541;
			Match(EXECUTE);
			State = 4542;
			uid();
			State = 4545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4543;
				Match(USING);
				State = 4544;
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocatePrepare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 378, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4547;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4548;
			Match(PREPARE);
			State = 4549;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 380, RULE_routineBody);
		try {
			State = 4553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,653,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4551;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4552;
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 382, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
			case 1:
				{
				State = 4555;
				uid();
				State = 4556;
				Match(COLON_SYMB);
				}
				break;
			}
			State = 4560;
			Match(BEGIN);
			State = 4599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
			case 1:
				{
				State = 4566;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,655,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4561;
						declareVariable();
						State = 4562;
						Match(SEMI);
						}
						} 
					}
					State = 4568;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,655,Context);
				}
				State = 4574;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,656,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4569;
						declareCondition();
						State = 4570;
						Match(SEMI);
						}
						} 
					}
					State = 4576;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,656,Context);
				}
				State = 4582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,657,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4577;
						declareCursor();
						State = 4578;
						Match(SEMI);
						}
						} 
					}
					State = 4584;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,657,Context);
				}
				State = 4590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 4585;
					declareHandler();
					State = 4586;
					Match(SEMI);
					}
					}
					State = 4592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,659,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4593;
						procedureSqlStatement();
						}
						} 
					}
					State = 4598;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,659,Context);
				}
				}
				break;
			}
			State = 4601;
			Match(END);
			State = 4603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				{
				State = 4602;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(MySqlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 384, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4605;
			Match(CASE);
			State = 4608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
			case 1:
				{
				State = 4606;
				uid();
				}
				break;
			case 2:
				{
				State = 4607;
				expression(0);
				}
				break;
			}
			State = 4611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4610;
				caseAlternative();
				}
				}
				State = 4613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4615;
				Match(ELSE);
				State = 4617;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4616;
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4619;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,664,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4623;
			Match(END);
			State = 4624;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MySqlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 386, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626;
			Match(IF);
			State = 4627;
			expression(0);
			State = 4628;
			Match(THEN);
			State = 4630;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4629;
					_localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4632;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,666,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4634;
				elifAlternative();
				}
				}
				State = 4639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4640;
				Match(ELSE);
				State = 4642;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4641;
						_localctx._procedureSqlStatement = procedureSqlStatement();
						_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4644;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,668,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4648;
			Match(END);
			State = 4649;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 388, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4651;
			Match(ITERATE);
			State = 4652;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 390, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654;
			Match(LEAVE);
			State = 4655;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(MySqlParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 392, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4657;
				uid();
				State = 4658;
				Match(COLON_SYMB);
				}
			}

			State = 4662;
			Match(LOOP);
			State = 4664;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4663;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,671,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4668;
			Match(END);
			State = 4669;
			Match(LOOP);
			State = 4671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4670;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(MySqlParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 394, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4673;
				uid();
				State = 4674;
				Match(COLON_SYMB);
				}
			}

			State = 4678;
			Match(REPEAT);
			State = 4680;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4679;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4682;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,674,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4684;
			Match(UNTIL);
			State = 4685;
			expression(0);
			State = 4686;
			Match(END);
			State = 4687;
			Match(REPEAT);
			State = 4689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4688;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 396, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4691;
			Match(RETURN);
			State = 4692;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(MySqlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 398, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4694;
				uid();
				State = 4695;
				Match(COLON_SYMB);
				}
			}

			State = 4699;
			Match(WHILE);
			State = 4700;
			expression(0);
			State = 4701;
			Match(DO);
			State = 4703;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4702;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4705;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,677,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4707;
			Match(END);
			State = 4708;
			Match(WHILE);
			State = 4710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				State = 4709;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetchCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 400, RULE_cursorStatement);
		int _la;
		try {
			State = 4727;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4712;
				Match(CLOSE);
				State = 4713;
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4714;
				Match(FETCH);
				State = 4719;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,680,Context) ) {
				case 1:
					{
					State = 4716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 4715;
						Match(NEXT);
						}
					}

					State = 4718;
					Match(FROM);
					}
					break;
				}
				State = 4721;
				uid();
				State = 4722;
				Match(INTO);
				State = 4723;
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4725;
				Match(OPEN);
				State = 4726;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 402, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4729;
			Match(DECLARE);
			State = 4730;
			uidList();
			State = 4731;
			dataType();
			State = 4734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4732;
				Match(DEFAULT);
				State = 4733;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 404, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4736;
			Match(DECLARE);
			State = 4737;
			uid();
			State = 4738;
			Match(CONDITION);
			State = 4739;
			Match(FOR);
			State = 4746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 4740;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 4741;
				Match(SQLSTATE);
				State = 4743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4742;
					Match(VALUE);
					}
				}

				State = 4745;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 406, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4748;
			Match(DECLARE);
			State = 4749;
			uid();
			State = 4750;
			Match(CURSOR);
			State = 4751;
			Match(FOR);
			State = 4752;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 408, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4754;
			Match(DECLARE);
			State = 4755;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4756;
			Match(HANDLER);
			State = 4757;
			Match(FOR);
			State = 4758;
			handlerConditionValue();
			State = 4763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4759;
				Match(COMMA);
				State = 4760;
				handlerConditionValue();
				}
				}
				State = 4765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4766;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionNotfound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionException(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 410, RULE_handlerConditionValue);
		int _la;
		try {
			State = 4779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4768;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4769;
				Match(SQLSTATE);
				State = 4771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4770;
					Match(VALUE);
					}
				}

				State = 4773;
				Match(STRING_LITERAL);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4774;
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4775;
				Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4776;
				Match(NOT);
				State = 4777;
				Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4778;
				Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 412, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,688,Context) ) {
			case 1:
				{
				State = 4781;
				compoundStatement();
				}
				break;
			case 2:
				{
				State = 4782;
				sqlStatement();
				}
				break;
			}
			State = 4785;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 414, RULE_caseAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4787;
			Match(WHEN);
			State = 4790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
			case 1:
				{
				State = 4788;
				constant();
				}
				break;
			case 2:
				{
				State = 4789;
				expression(0);
				}
				break;
			}
			State = 4792;
			Match(THEN);
			State = 4794;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4793;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,690,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 416, RULE_elifAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4798;
			Match(ELSEIF);
			State = 4799;
			expression(0);
			State = 4800;
			Match(THEN);
			State = 4802;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4801;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,691,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV80Context : AlterUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MySqlParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV80Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV80(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 418, RULE_alterUser);
		int _la;
		try {
			State = 4866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4806;
				Match(ALTER);
				State = 4807;
				Match(USER);
				State = 4808;
				userSpecification();
				State = 4813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4809;
					Match(COMMA);
					State = 4810;
					userSpecification();
					}
					}
					State = 4815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4816;
				Match(ALTER);
				State = 4817;
				Match(USER);
				State = 4819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4818;
					ifExists();
					}
				}

				State = 4821;
				userAuthOption();
				State = 4826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4822;
					Match(COMMA);
					State = 4823;
					userAuthOption();
					}
					}
					State = 4828;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4829;
					Match(REQUIRE);
					State = 4841;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4830;
						((AlterUserMysqlV80Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4831;
						tlsOption();
						State = 4838;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4833;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4832;
								Match(AND);
								}
							}

							State = 4835;
							tlsOption();
							}
							}
							State = 4840;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4845;
					Match(WITH);
					State = 4847;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4846;
						userResourceOption();
						}
						}
						State = 4849;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & 51L) != 0 );
					}
				}

				State = 4857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					State = 4855;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						State = 4853;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4854;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4859;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4864;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 4860;
					Match(COMMENT);
					State = 4861;
					Match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					State = 4862;
					Match(ATTRIBUTE);
					State = 4863;
					Match(STRING_LITERAL);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateUserMysqlV80Context : CreateUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MySqlParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV80Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV80(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 420, RULE_createUser);
		int _la;
		try {
			State = 4928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4868;
				Match(CREATE);
				State = 4869;
				Match(USER);
				State = 4870;
				userAuthOption();
				State = 4875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4871;
					Match(COMMA);
					State = 4872;
					userAuthOption();
					}
					}
					State = 4877;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV80Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4878;
				Match(CREATE);
				State = 4879;
				Match(USER);
				State = 4881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4880;
					ifNotExists();
					}
				}

				State = 4883;
				userAuthOption();
				State = 4888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4884;
					Match(COMMA);
					State = 4885;
					userAuthOption();
					}
					}
					State = 4890;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4891;
					Match(REQUIRE);
					State = 4903;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4892;
						((CreateUserMysqlV80Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4893;
						tlsOption();
						State = 4900;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4895;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4894;
								Match(AND);
								}
							}

							State = 4897;
							tlsOption();
							}
							}
							State = 4902;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4907;
					Match(WITH);
					State = 4909;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4908;
						userResourceOption();
						}
						}
						State = 4911;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & 51L) != 0 );
					}
				}

				State = 4919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					State = 4917;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						State = 4915;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4916;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4921;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4926;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 4922;
					Match(COMMENT);
					State = 4923;
					Match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					State = 4924;
					Match(ATTRIBUTE);
					State = 4925;
					Match(STRING_LITERAL);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 422, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4930;
			Match(DROP);
			State = 4931;
			Match(USER);
			State = 4933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 4932;
				ifExists();
				}
			}

			State = 4935;
			userName();
			State = 4940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4936;
				Match(COMMA);
				State = 4937;
				userName();
				}
				}
				State = 4942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION(int i) {
			return GetToken(MySqlParser.OPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 424, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			State = 5036;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4943;
				Match(GRANT);
				State = 4944;
				privelegeClause();
				State = 4949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4945;
					Match(COMMA);
					State = 4946;
					privelegeClause();
					}
					}
					State = 4951;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4952;
				Match(ON);
				State = 4954;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
				case 1:
					{
					State = 4953;
					_localctx.privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4956;
				privilegeLevel();
				State = 4957;
				Match(TO);
				State = 4958;
				userAuthOption();
				State = 4963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4959;
					Match(COMMA);
					State = 4960;
					userAuthOption();
					}
					}
					State = 4965;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4966;
					Match(REQUIRE);
					State = 4978;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4967;
						_localctx.tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4968;
						tlsOption();
						State = 4975;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4970;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4969;
								Match(AND);
								}
							}

							State = 4972;
							tlsOption();
							}
							}
							State = 4977;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4982;
					Match(WITH);
					State = 4988;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,728,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 4986;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GRANT:
								{
								State = 4983;
								Match(GRANT);
								State = 4984;
								Match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								State = 4985;
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						State = 4990;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,728,Context);
					}
					}
				}

				State = 4999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4993;
					Match(AS);
					State = 4994;
					userName();
					State = 4995;
					Match(WITH);
					State = 4996;
					Match(ROLE);
					State = 4997;
					roleOption();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5001;
				Match(GRANT);
				State = 5004;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
				case 1:
					{
					State = 5002;
					userName();
					}
					break;
				case 2:
					{
					State = 5003;
					uid();
					}
					break;
				}
				State = 5013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5006;
					Match(COMMA);
					State = 5009;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
					case 1:
						{
						State = 5007;
						userName();
						}
						break;
					case 2:
						{
						State = 5008;
						uid();
						}
						break;
					}
					}
					}
					State = 5015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5016;
				Match(TO);
				State = 5019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,734,Context) ) {
				case 1:
					{
					State = 5017;
					userName();
					}
					break;
				case 2:
					{
					State = 5018;
					uid();
					}
					break;
				}
				State = 5028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5021;
					Match(COMMA);
					State = 5024;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,735,Context) ) {
					case 1:
						{
						State = 5022;
						userName();
						}
						break;
					case 2:
						{
						State = 5023;
						uid();
						}
						break;
					}
					}
					}
					State = 5030;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5031;
					Match(WITH);
					State = 5032;
					Match(ADMIN);
					State = 5033;
					Match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOptionContext roleOption() {
		RoleOptionContext _localctx = new RoleOptionContext(Context, State);
		EnterRule(_localctx, 426, RULE_roleOption);
		int _la;
		try {
			State = 5060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5038;
				Match(DEFAULT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5039;
				Match(NONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5040;
				Match(ALL);
				State = 5050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT) {
					{
					State = 5041;
					Match(EXCEPT);
					State = 5042;
					userName();
					State = 5047;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 5043;
						Match(COMMA);
						State = 5044;
						userName();
						}
						}
						State = 5049;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5052;
				userName();
				State = 5057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5053;
					Match(COMMA);
					State = 5054;
					userName();
					}
					}
					State = 5059;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 428, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5062;
			Match(GRANT);
			State = 5063;
			Match(PROXY);
			State = 5064;
			Match(ON);
			State = 5065;
			_localctx.fromFirst = userName();
			State = 5066;
			Match(TO);
			State = 5067;
			_localctx.toFirst = userName();
			State = 5072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5068;
				Match(COMMA);
				State = 5069;
				_localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 5074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5075;
				Match(WITH);
				State = 5076;
				Match(GRANT);
				State = 5077;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 430, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5080;
			Match(RENAME);
			State = 5081;
			Match(USER);
			State = 5082;
			renameUserClause();
			State = 5087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5083;
				Match(COMMA);
				State = 5084;
				renameUserClause();
				}
				}
				State = 5089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoleRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 432, RULE_revokeStatement);
		int _la;
		try {
			State = 5154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5090;
				Match(REVOKE);
				State = 5091;
				privelegeClause();
				State = 5096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5092;
					Match(COMMA);
					State = 5093;
					privelegeClause();
					}
					}
					State = 5098;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5099;
				Match(ON);
				State = 5101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
				case 1:
					{
					State = 5100;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5103;
				privilegeLevel();
				State = 5104;
				Match(FROM);
				State = 5105;
				userName();
				State = 5110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5106;
					Match(COMMA);
					State = 5107;
					userName();
					}
					}
					State = 5112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5113;
				Match(REVOKE);
				State = 5114;
				Match(ALL);
				State = 5116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5115;
					Match(PRIVILEGES);
					}
				}

				State = 5118;
				Match(COMMA);
				State = 5119;
				Match(GRANT);
				State = 5120;
				Match(OPTION);
				State = 5121;
				Match(FROM);
				State = 5122;
				userName();
				State = 5127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5123;
					Match(COMMA);
					State = 5124;
					userName();
					}
					}
					State = 5129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5130;
				Match(REVOKE);
				State = 5131;
				uid();
				State = 5136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5132;
					Match(COMMA);
					State = 5133;
					uid();
					}
					}
					State = 5138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5139;
				Match(FROM);
				State = 5142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
				case 1:
					{
					State = 5140;
					userName();
					}
					break;
				case 2:
					{
					State = 5141;
					uid();
					}
					break;
				}
				State = 5151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5144;
					Match(COMMA);
					State = 5147;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,753,Context) ) {
					case 1:
						{
						State = 5145;
						userName();
						}
						break;
					case 2:
						{
						State = 5146;
						uid();
						}
						break;
					}
					}
					}
					State = 5153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 434, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5156;
			Match(REVOKE);
			State = 5157;
			Match(PROXY);
			State = 5158;
			Match(ON);
			State = 5159;
			_localctx.onUser = userName();
			State = 5160;
			Match(FROM);
			State = 5161;
			_localctx.fromFirst = userName();
			State = 5166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5162;
				Match(COMMA);
				State = 5163;
				_localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 5168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 436, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5169;
			Match(SET);
			State = 5170;
			Match(PASSWORD);
			State = 5173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5171;
				Match(FOR);
				State = 5172;
				userName();
				}
			}

			State = 5175;
			Match(EQUAL_SYMBOL);
			State = 5178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 5176;
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 5177;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 438, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5180;
			userName();
			State = 5181;
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthenticationRuleContext authenticationRule() {
			return GetRuleContext<AuthenticationRuleContext>(0);
		}
		public ModuleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(MySqlParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 440, RULE_userAuthOption);
		int _la;
		try {
			State = 5204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
			case 1:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5183;
				userName();
				State = 5184;
				Match(IDENTIFIED);
				State = 5185;
				Match(BY);
				State = 5186;
				Match(PASSWORD);
				State = 5187;
				((HashAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5189;
				userName();
				State = 5190;
				Match(IDENTIFIED);
				State = 5191;
				Match(BY);
				State = 5192;
				Match(STRING_LITERAL);
				State = 5196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN) {
					{
					State = 5193;
					Match(RETAIN);
					State = 5194;
					Match(CURRENT);
					State = 5195;
					Match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new ModuleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5198;
				userName();
				State = 5199;
				Match(IDENTIFIED);
				State = 5200;
				Match(WITH);
				State = 5201;
				authenticationRule();
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5203;
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthenticationRuleContext : ParserRuleContext {
		public AuthenticationRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authenticationRule; } }
	 
		public AuthenticationRuleContext() { }
		public virtual void CopyFrom(AuthenticationRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PasswordModuleOptionContext : AuthenticationRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordModuleOptionContext(AuthenticationRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordModuleOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleContext : AuthenticationRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public ModuleContext(AuthenticationRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthenticationRuleContext authenticationRule() {
		AuthenticationRuleContext _localctx = new AuthenticationRuleContext(Context, State);
		EnterRule(_localctx, 442, RULE_authenticationRule);
		int _la;
		try {
			State = 5215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
			case 1:
				_localctx = new ModuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5206;
				authPlugin();
				State = 5209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
				case 1:
					{
					State = 5207;
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==BY || _la==USING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5208;
					Match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PasswordModuleOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5211;
				authPlugin();
				State = 5212;
				Match(USING);
				State = 5213;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTlsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 444, RULE_tlsOption);
		try {
			State = 5225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5217;
				Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5218;
				Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5219;
				Match(CIPHER);
				State = 5220;
				Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5221;
				Match(ISSUER);
				State = 5222;
				Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5223;
				Match(SUBJECT);
				State = 5224;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserResourceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 446, RULE_userResourceOption);
		try {
			State = 5235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5227;
				Match(MAX_QUERIES_PER_HOUR);
				State = 5228;
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5229;
				Match(MAX_UPDATES_PER_HOUR);
				State = 5230;
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5231;
				Match(MAX_CONNECTIONS_PER_HOUR);
				State = 5232;
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5233;
				Match(MAX_USER_CONNECTIONS);
				State = 5234;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MySqlParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE() { return GetToken(MySqlParser.REUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MySqlParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPasswordOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 448, RULE_userPasswordOption);
		int _la;
		try {
			State = 5275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,770,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5237;
				Match(PASSWORD);
				State = 5238;
				Match(EXPIRE);
				State = 5245;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5239;
					_localctx.expireType = Match(DEFAULT);
					}
					break;
				case NEVER:
					{
					State = 5240;
					_localctx.expireType = Match(NEVER);
					}
					break;
				case INTERVAL:
					{
					State = 5241;
					_localctx.expireType = Match(INTERVAL);
					State = 5242;
					decimalLiteral();
					State = 5243;
					Match(DAY);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case ATTRIBUTE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case ACCOUNT:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMENT:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FAILED_LOGIN_ATTEMPTS:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5247;
				Match(PASSWORD);
				State = 5248;
				Match(HISTORY);
				State = 5251;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5249;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5250;
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5253;
				Match(PASSWORD);
				State = 5254;
				Match(REUSE);
				State = 5255;
				Match(INTERVAL);
				State = 5260;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5256;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5257;
					decimalLiteral();
					State = 5258;
					Match(DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5262;
				Match(PASSWORD);
				State = 5263;
				Match(REQUIRE);
				State = 5264;
				Match(CURRENT);
				State = 5266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==OPTIONAL) {
					{
					State = 5265;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==OPTIONAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5268;
				Match(FAILED_LOGIN_ATTEMPTS);
				State = 5269;
				decimalLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5270;
				Match(PASSWORD_LOCK_TIME);
				State = 5273;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5271;
					decimalLiteral();
					}
					break;
				case UNBOUNDED:
					{
					State = 5272;
					Match(UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 450, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5277;
			Match(ACCOUNT);
			State = 5278;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivelegeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 452, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5280;
			privilege();
			State = 5285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5281;
				Match(LR_BRACKET);
				State = 5282;
				uidList();
				State = 5283;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_PASSWORD_ADMIN() { return GetToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_OPTIMIZER_COSTS() { return GetToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_STATUS() { return GetToken(MySqlParser.FLUSH_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_TABLES() { return GetToken(MySqlParser.FLUSH_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_USER_RESOURCES() { return GetToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ENABLE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_CONNECTION_ADMIN() { return GetToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3() { return GetToken(MySqlParser.S3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKE() { return GetToken(MySqlParser.INVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(MySqlParser.LAMBDA, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 454, RULE_privilege);
		int _la;
		try {
			State = 5375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5287;
				Match(ALL);
				State = 5289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5288;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5291;
				Match(ALTER);
				State = 5293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 5292;
					Match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5295;
				Match(CREATE);
				State = 5303;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 5296;
					Match(TEMPORARY);
					State = 5297;
					Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 5298;
					Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 5299;
					Match(VIEW);
					}
					break;
				case USER:
					{
					State = 5300;
					Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 5301;
					Match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					State = 5302;
					Match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5305;
				Match(DELETE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5306;
				Match(DROP);
				State = 5308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROLE) {
					{
					State = 5307;
					Match(ROLE);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5310;
				Match(EVENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5311;
				Match(EXECUTE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5312;
				Match(FILE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5313;
				Match(GRANT);
				State = 5314;
				Match(OPTION);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5315;
				Match(INDEX);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5316;
				Match(INSERT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5317;
				Match(LOCK);
				State = 5318;
				Match(TABLES);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5319;
				Match(PROCESS);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5320;
				Match(PROXY);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5321;
				Match(REFERENCES);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5322;
				Match(RELOAD);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5323;
				Match(REPLICATION);
				State = 5324;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5325;
				Match(SELECT);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5326;
				Match(SHOW);
				State = 5327;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5328;
				Match(SHUTDOWN);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5329;
				Match(SUPER);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5330;
				Match(TRIGGER);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5331;
				Match(UPDATE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5332;
				Match(USAGE);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5333;
				Match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 5334;
				Match(AUDIT_ADMIN);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 5335;
				Match(BACKUP_ADMIN);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 5336;
				Match(BINLOG_ADMIN);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 5337;
				Match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 5338;
				Match(CLONE_ADMIN);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 5339;
				Match(CONNECTION_ADMIN);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 5340;
				Match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 5341;
				Match(FIREWALL_ADMIN);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 5342;
				Match(FIREWALL_USER);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 5343;
				Match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 5344;
				Match(FLUSH_STATUS);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 5345;
				Match(FLUSH_TABLES);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 5346;
				Match(FLUSH_USER_RESOURCES);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 5347;
				Match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 5348;
				Match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 5349;
				Match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 5350;
				Match(NDB_STORED_USER);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 5351;
				Match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 5352;
				Match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 5353;
				Match(REPLICATION_APPLIER);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 5354;
				Match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 5355;
				Match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 5356;
				Match(RESOURCE_GROUP_USER);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 5357;
				Match(ROLE_ADMIN);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 5358;
				Match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 5359;
				Match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 5360;
				Match(SET_USER_ID);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 5361;
				Match(SHOW_ROUTINE);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 5362;
				Match(SYSTEM_USER);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 5363;
				Match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 5364;
				Match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 5365;
				Match(VERSION_TOKEN_ADMIN);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 5366;
				Match(XA_RECOVER_ADMIN);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 5367;
				Match(LOAD);
				State = 5368;
				Match(FROM);
				State = 5369;
				Match(S3);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 5370;
				Match(SELECT);
				State = 5371;
				Match(INTO);
				State = 5372;
				Match(S3);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 5373;
				Match(INVOKE);
				State = 5374;
				Match(LAMBDA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteSchemaPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchemaPriviLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 456, RULE_privilegeLevel);
		try {
			State = 5393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5377;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5378;
				Match(STAR);
				State = 5379;
				Match(DOT);
				State = 5380;
				Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5381;
				uid();
				State = 5382;
				Match(DOT);
				State = 5383;
				Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5385;
				uid();
				State = 5386;
				Match(DOT);
				State = 5387;
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5389;
				uid();
				State = 5390;
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5392;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUserClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 458, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5395;
			_localctx.fromFirst = userName();
			State = 5396;
			Match(TO);
			State = 5397;
			_localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HISTOGRAM() { return GetTokens(MySqlParser.HISTOGRAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM(int i) {
			return GetToken(MySqlParser.HISTOGRAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 460, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5399;
			Match(ANALYZE);
			State = 5401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5400;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5403;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5404;
			tables();
			State = 5422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
			case 1:
				{
				State = 5405;
				Match(UPDATE);
				State = 5406;
				Match(HISTOGRAM);
				State = 5407;
				Match(ON);
				State = 5408;
				fullColumnName();
				State = 5413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5409;
					Match(COMMA);
					State = 5410;
					fullColumnName();
					}
					}
					State = 5415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5416;
					Match(WITH);
					State = 5417;
					decimalLiteral();
					State = 5418;
					Match(BUCKETS);
					}
				}

				}
				break;
			}
			State = 5435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
			case 1:
				{
				State = 5424;
				Match(DROP);
				State = 5425;
				Match(HISTOGRAM);
				State = 5426;
				Match(ON);
				State = 5427;
				fullColumnName();
				State = 5432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5428;
					Match(COMMA);
					State = 5429;
					fullColumnName();
					}
					}
					State = 5434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 462, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5437;
			Match(CHECK);
			State = 5438;
			Match(TABLE);
			State = 5439;
			tables();
			State = 5443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 5440;
				checkTableOption();
				}
				}
				State = 5445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecksumTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 464, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5446;
			Match(CHECKSUM);
			State = 5447;
			Match(TABLE);
			State = 5448;
			tables();
			State = 5450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 5449;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimizeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 466, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5452;
			Match(OPTIMIZE);
			State = 5454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5453;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5456;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5457;
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 468, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5459;
			Match(REPAIR);
			State = 5461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5460;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5463;
			Match(TABLE);
			State = 5464;
			tables();
			State = 5466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 5465;
				Match(QUICK);
				}
			}

			State = 5469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 5468;
				Match(EXTENDED);
				}
			}

			State = 5472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 5471;
				Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 470, RULE_checkTableOption);
		try {
			State = 5481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5474;
				Match(FOR);
				State = 5475;
				Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5476;
				Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5477;
				Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5478;
				Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5479;
				Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5480;
				Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 472, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5483;
			Match(CREATE);
			State = 5485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 5484;
				Match(AGGREGATE);
				}
			}

			State = 5487;
			Match(FUNCTION);
			State = 5489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,793,Context) ) {
			case 1:
				{
				State = 5488;
				ifNotExists();
				}
				break;
			}
			State = 5491;
			uid();
			State = 5492;
			Match(RETURNS);
			State = 5493;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & 261L) != 0 || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5494;
			Match(SONAME);
			State = 5495;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 474, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5497;
			Match(INSTALL);
			State = 5498;
			Match(PLUGIN);
			State = 5499;
			uid();
			State = 5500;
			Match(SONAME);
			State = 5501;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 476, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5503;
			Match(UNINSTALL);
			State = 5504;
			Match(PLUGIN);
			State = 5505;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNames(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNewValueInsideTriggerContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNewValueInsideTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 478, RULE_setStatement);
		int _la;
		try {
			State = 5559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5507;
				Match(SET);
				State = 5508;
				variableClause();
				State = 5509;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
				case 1:
					{
					State = 5510;
					expression(0);
					}
					break;
				case 2:
					{
					State = 5511;
					Match(ON);
					}
					break;
				}
				State = 5523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5514;
					Match(COMMA);
					State = 5515;
					variableClause();
					State = 5516;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5519;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
					case 1:
						{
						State = 5517;
						expression(0);
						}
						break;
					case 2:
						{
						State = 5518;
						Match(ON);
						}
						break;
					}
					}
					}
					State = 5525;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5526;
				Match(SET);
				State = 5527;
				charSet();
				State = 5530;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5528;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 5529;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5532;
				Match(SET);
				State = 5533;
				Match(NAMES);
				State = 5540;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5534;
					charsetName();
					State = 5537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 5535;
						Match(COLLATE);
						State = 5536;
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 5539;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5542;
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5543;
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5544;
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5545;
				Match(SET);
				State = 5546;
				fullId();
				State = 5547;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5548;
				expression(0);
				State = 5556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5549;
					Match(COMMA);
					State = 5550;
					fullId();
					State = 5551;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5552;
					expression(0);
					}
					}
					State = 5558;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowOpenTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFullIdObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCountErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowObjectFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateDb(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowLogEventsContext : ShowStatementContext {
		public IToken logFormat;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowMasterLogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSlaveStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 480, RULE_showStatement);
		int _la;
		try {
			State = 5714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5561;
				Match(SHOW);
				State = 5562;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5563;
				Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5564;
				Match(SHOW);
				State = 5565;
				((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5566;
				Match(EVENTS);
				State = 5569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5567;
					Match(IN);
					State = 5568;
					((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5571;
					Match(FROM);
					State = 5572;
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5575;
					Match(LIMIT);
					State = 5579;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
					case 1:
						{
						State = 5576;
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						State = 5577;
						Match(COMMA);
						}
						break;
					}
					State = 5581;
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5584;
				Match(SHOW);
				State = 5585;
				showCommonEntity();
				State = 5587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5586;
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5589;
				Match(SHOW);
				State = 5591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5590;
					Match(FULL);
					}
				}

				State = 5593;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5594;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5595;
				tableName();
				State = 5598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5596;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5597;
					uid();
					}
				}

				State = 5601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5600;
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5603;
				Match(SHOW);
				State = 5604;
				Match(CREATE);
				State = 5605;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,810,Context) ) {
				case 1:
					{
					State = 5606;
					ifNotExists();
					}
					break;
				}
				State = 5609;
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5610;
				Match(SHOW);
				State = 5611;
				Match(CREATE);
				State = 5612;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 36283883716609L) != 0 || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5613;
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5614;
				Match(SHOW);
				State = 5615;
				Match(CREATE);
				State = 5616;
				Match(USER);
				State = 5617;
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5618;
				Match(SHOW);
				State = 5619;
				Match(ENGINE);
				State = 5620;
				engineName();
				State = 5621;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5623;
				Match(SHOW);
				State = 5624;
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5625;
				Match(SHOW);
				State = 5626;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5627;
					Match(LIMIT);
					State = 5631;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
					case 1:
						{
						State = 5628;
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						State = 5629;
						Match(COMMA);
						}
						break;
					}
					State = 5633;
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5636;
				Match(SHOW);
				State = 5637;
				Match(COUNT);
				State = 5638;
				Match(LR_BRACKET);
				State = 5639;
				Match(STAR);
				State = 5640;
				Match(RR_BRACKET);
				State = 5641;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5642;
				Match(SHOW);
				State = 5643;
				showSchemaEntity();
				State = 5646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5644;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5645;
					uid();
					}
				}

				State = 5649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5648;
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5651;
				Match(SHOW);
				State = 5652;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5653;
				Match(CODE);
				State = 5654;
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5655;
				Match(SHOW);
				State = 5656;
				Match(GRANTS);
				State = 5659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5657;
					Match(FOR);
					State = 5658;
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 5661;
				Match(SHOW);
				State = 5662;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5663;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5664;
				tableName();
				State = 5667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5665;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5666;
					uid();
					}
				}

				State = 5671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5669;
					Match(WHERE);
					State = 5670;
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 5673;
				Match(SHOW);
				State = 5674;
				Match(OPEN);
				State = 5675;
				Match(TABLES);
				State = 5678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5676;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5677;
					uid();
					}
				}

				State = 5681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5680;
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 5683;
				Match(SHOW);
				State = 5684;
				Match(PROFILE);
				State = 5685;
				showProfileType();
				State = 5690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5686;
					Match(COMMA);
					State = 5687;
					showProfileType();
					}
					}
					State = 5692;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5693;
					Match(FOR);
					State = 5694;
					Match(QUERY);
					State = 5695;
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				State = 5698;
				Match(LIMIT);
				State = 5702;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
				case 1:
					{
					State = 5699;
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					State = 5700;
					Match(COMMA);
					}
					break;
				}
				State = 5704;
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 5706;
				Match(SHOW);
				State = 5707;
				Match(SLAVE);
				State = 5708;
				Match(STATUS);
				State = 5712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5709;
					Match(FOR);
					State = 5710;
					Match(CHANNEL);
					State = 5711;
					Match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN() { return GetTokens(MySqlParser.AT_SIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN(int i) {
			return GetToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 482, RULE_variableClause);
		int _la;
		try {
			State = 5726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5716;
				Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5717;
				Match(GLOBAL_ID);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
				case 1:
					{
					State = 5720;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 5718;
						Match(AT_SIGN);
						State = 5719;
						Match(AT_SIGN);
						}
					}

					State = 5722;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5725;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommonEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 484, RULE_showCommonEntity);
		int _la;
		try {
			State = 5741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5728;
				Match(CHARACTER);
				State = 5729;
				Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5730;
				Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5731;
				Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5732;
				Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5733;
				Match(FUNCTION);
				State = 5734;
				Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5735;
				Match(PROCEDURE);
				State = 5736;
				Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 5737;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5740;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 486, RULE_showFilter);
		try {
			State = 5747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5743;
				Match(LIKE);
				State = 5744;
				Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5745;
				Match(WHERE);
				State = 5746;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 488, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 5766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 5749;
					Match(STORAGE);
					}
				}

				State = 5752;
				Match(ENGINES);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5753;
				Match(MASTER);
				State = 5754;
				Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5755;
				Match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5756;
				Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5757;
					Match(FULL);
					}
				}

				State = 5760;
				Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5761;
				Match(PROFILES);
				}
				break;
			case SLAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5762;
				Match(SLAVE);
				State = 5763;
				Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5764;
				Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5765;
				Match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 490, RULE_showSchemaEntity);
		int _la;
		try {
			State = 5776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5768;
				Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5769;
				Match(TABLE);
				State = 5770;
				Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5771;
					Match(FULL);
					}
				}

				State = 5774;
				Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5775;
				Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 492, RULE_showProfileType);
		try {
			State = 5790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5778;
				Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5779;
				Match(BLOCK);
				State = 5780;
				Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5781;
				Match(CONTEXT);
				State = 5782;
				Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5783;
				Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5784;
				Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5785;
				Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5786;
				Match(PAGE);
				State = 5787;
				Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5788;
				Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5789;
				Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinlogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 494, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5792;
			Match(BINLOG);
			State = 5793;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 496, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5795;
			Match(CACHE);
			State = 5796;
			Match(INDEX);
			State = 5797;
			tableIndexes();
			State = 5802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5798;
				Match(COMMA);
				State = 5799;
				tableIndexes();
				}
				}
				State = 5804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5805;
				Match(PARTITION);
				State = 5806;
				Match(LR_BRACKET);
				State = 5809;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5807;
					uidList();
					}
					break;
				case ALL:
					{
					State = 5808;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5811;
				Match(RR_BRACKET);
				}
			}

			State = 5814;
			Match(IN);
			State = 5815;
			_localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 498, RULE_flushStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5817;
			Match(FLUSH);
			State = 5819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5818;
				_localctx.flushFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.flushFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5821;
			flushOption();
			State = 5826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5822;
				Match(COMMA);
				State = 5823;
				flushOption();
				}
				}
				State = 5828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 500, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5829;
			Match(KILL);
			State = 5831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				{
				State = 5830;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 5833;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadIndexIntoCache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 502, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5835;
			Match(LOAD);
			State = 5836;
			Match(INDEX);
			State = 5837;
			Match(INTO);
			State = 5838;
			Match(CACHE);
			State = 5839;
			loadedTableIndexes();
			State = 5844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5840;
				Match(COMMA);
				State = 5841;
				loadedTableIndexes();
				}
				}
				State = 5846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 504, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5847;
			Match(RESET);
			State = 5848;
			Match(QUERY);
			State = 5849;
			Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdownStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 506, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5851;
			Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 508, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5853;
			tableName();
			State = 5861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5854;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5857;
				Match(LR_BRACKET);
				State = 5858;
				uidList();
				State = 5859;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 510, RULE_flushOption);
		int _la;
		try {
			State = 5895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,852,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5881;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 5863;
					Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 5864;
					Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 5866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & 536870917L) != 0 || _la==RELAY || _la==SLOW) {
						{
						State = 5865;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & 536870917L) != 0 || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5868;
					Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 5869;
					Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 5870;
					Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 5871;
					Match(QUERY);
					State = 5872;
					Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 5873;
					Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 5874;
					Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 5875;
					Match(TABLES);
					State = 5879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 5876;
						Match(WITH);
						State = 5877;
						Match(READ);
						State = 5878;
						Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5883;
				Match(RELAY);
				State = 5884;
				Match(LOGS);
				State = 5886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5885;
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5888;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
				case 1:
					{
					State = 5889;
					tables();
					}
					break;
				}
				State = 5893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 5892;
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 512, RULE_flushTableOption);
		try {
			State = 5902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5897;
				Match(WITH);
				State = 5898;
				Match(READ);
				State = 5899;
				Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5900;
				Match(FOR);
				State = 5901;
				Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadedTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 514, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904;
			tableName();
			State = 5912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5905;
				Match(PARTITION);
				State = 5906;
				Match(LR_BRACKET);
				State = 5909;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5907;
					_localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 5908;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5911;
				Match(RR_BRACKET);
				}
			}

			State = 5921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,857,Context) ) {
			case 1:
				{
				State = 5915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5914;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5917;
				Match(LR_BRACKET);
				State = 5918;
				_localctx.indexList = uidList();
				State = 5919;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 5923;
				Match(IGNORE);
				State = 5924;
				Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 516, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5927;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2305948562329960448L) != 0) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5928;
			tableName();
			State = 5931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
			case 1:
				{
				State = 5929;
				_localctx.column = uid();
				}
				break;
			case 2:
				{
				State = 5930;
				_localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 518, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5933;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2305948562329960448L) != 0) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 5934;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5935;
				Match(EQUAL_SYMBOL);
				State = 5936;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5939;
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 520, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5941;
			Match(HELP);
			State = 5942;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 522, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5944;
			Match(USE);
			State = 5945;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(MySqlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 524, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5947;
			Match(SIGNAL);
			State = 5955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5948;
				Match(SQLSTATE);
				State = 5950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5949;
					Match(VALUE);
					}
				}

				State = 5952;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5953;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5954;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				State = 5957;
				Match(SET);
				State = 5958;
				signalConditionInformation();
				State = 5963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5959;
					Match(COMMA);
					State = 5960;
					signalConditionInformation();
					}
					}
					State = 5965;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL() { return GetToken(MySqlParser.RESIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 526, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5968;
			Match(RESIGNAL);
			State = 5976;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5969;
				Match(SQLSTATE);
				State = 5971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5970;
					Match(VALUE);
					}
				}

				State = 5973;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5974;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5975;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 5987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,868,Context) ) {
			case 1:
				{
				State = 5978;
				Match(SET);
				State = 5979;
				signalConditionInformation();
				State = 5984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5980;
					Match(COMMA);
					State = 5981;
					signalConditionInformation();
					}
					}
					State = 5986;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalConditionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalConditionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalConditionInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalConditionInformationContext signalConditionInformation() {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
		EnterRule(_localctx, 528, RULE_signalConditionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5989;
			_la = TokenStream.LA(1);
			if ( !((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & 272105729L) != 0 || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5990;
			Match(EQUAL_SYMBOL);
			State = 5995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
			case 1:
				{
				State = 5991;
				stringLiteral();
				}
				break;
			case 2:
				{
				State = 5992;
				Match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				State = 5993;
				mysqlVariable();
				}
				break;
			case 4:
				{
				State = 5994;
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MySqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName() {
			return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(MySqlParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(MySqlParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW_COUNT() { return GetTokens(MySqlParser.ROW_COUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT(int i) {
			return GetToken(MySqlParser.ROW_COUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsStatementContext diagnosticsStatement() {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 530, RULE_diagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5997;
			Match(GET);
			State = 5999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				State = 5998;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6001;
			Match(DIAGNOSTICS);
			State = 6033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,874,Context) ) {
			case 1:
				{
				{
				State = 6002;
				variableClause();
				State = 6003;
				Match(EQUAL_SYMBOL);
				State = 6004;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6005;
					Match(COMMA);
					State = 6006;
					variableClause();
					State = 6007;
					Match(EQUAL_SYMBOL);
					State = 6008;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 6014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 6015;
				Match(CONDITION);
				State = 6018;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 6016;
					decimalLiteral();
					}
					break;
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					State = 6017;
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6020;
				variableClause();
				State = 6021;
				Match(EQUAL_SYMBOL);
				State = 6022;
				diagnosticsConditionInformationName();
				State = 6030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6023;
					Match(COMMA);
					State = 6024;
					variableClause();
					State = 6025;
					Match(EQUAL_SYMBOL);
					State = 6026;
					diagnosticsConditionInformationName();
					}
					}
					State = 6032;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsConditionInformationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
		EnterRule(_localctx, 532, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6035;
			_la = TokenStream.LA(1);
			if ( !((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & 272105729L) != 0 || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || (((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & 18155135997837313L) != 0 || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 534, RULE_describeObjectClause);
		try {
			State = 6047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6042;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 6037;
					selectStatement();
					}
					break;
				case DELETE:
					{
					State = 6038;
					deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 6039;
					insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 6040;
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 6041;
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6044;
				Match(FOR);
				State = 6045;
				Match(CONNECTION);
				State = 6046;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 536, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6049;
			uid();
			State = 6053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
			case 1:
				{
				State = 6050;
				Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 6051;
				Match(DOT);
				State = 6052;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 538, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6055;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleNameContext roleName() {
		RoleNameContext _localctx = new RoleNameContext(Context, State);
		EnterRule(_localctx, 540, RULE_roleName);
		try {
			State = 6059;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6057;
				userName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6058;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 542, RULE_fullColumnName);
		try {
			State = 6075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6061;
				uid();
				State = 6066;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
				case 1:
					{
					State = 6062;
					dottedId();
					State = 6064;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,879,Context) ) {
					case 1:
						{
						State = 6063;
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6069;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
				case 1:
					{
					State = 6068;
					MatchWildcard();
					}
					break;
				}
				State = 6071;
				dottedId();
				State = 6073;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,882,Context) ) {
				case 1:
					{
					State = 6072;
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 544, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
			case 1:
				{
				State = 6079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
				case 1:
					{
					State = 6077;
					uid();
					}
					break;
				case 2:
					{
					State = 6078;
					Match(STRING_LITERAL);
					}
					break;
				}
				State = 6085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6081;
					Match(LR_BRACKET);
					State = 6082;
					decimalLiteral();
					State = 6083;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				State = 6087;
				expression(0);
				}
				break;
			}
			State = 6091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 6090;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 546, RULE_userName);
		try {
			State = 6098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6093;
				Match(STRING_USER_NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6094;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6095;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6096;
				Match(ADMIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6097;
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 548, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6100;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 550, RULE_charsetName);
		try {
			State = 6106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,889,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6102;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6103;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6104;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6105;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 552, RULE_collationName);
		try {
			State = 6110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,890,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6108;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6109;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKUDB() { return GetToken(MySqlParser.TOKUDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 554, RULE_engineName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6112;
			_la = TokenStream.LA(1);
			if ( !(_la==CONNECT || (((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & 4095L) != 0 || (((_la - 1141)) & ~0x3f) == 0 && ((1L << (_la - 1141)) & 769L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_SYMB() { return GetTokens(MySqlParser.COLON_SYMB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB(int i) {
			return GetToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 556, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6114;
			decimalLiteral();
			State = 6115;
			Match(MINUS);
			State = 6116;
			decimalLiteral();
			State = 6117;
			Match(MINUS);
			State = 6118;
			decimalLiteral();
			State = 6119;
			Match(MINUS);
			State = 6120;
			decimalLiteral();
			State = 6121;
			Match(MINUS);
			State = 6122;
			decimalLiteral();
			State = 6128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6123;
				Match(COLON_SYMB);
				State = 6124;
				decimalLiteral();
				State = 6125;
				Match(MINUS);
				State = 6126;
				decimalLiteral();
				}
				}
				State = 6130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 558, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6132;
			_localctx.globalTableUid = xuidStringId();
			State = 6139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6133;
				Match(COMMA);
				State = 6134;
				_localctx.qualifier = xuidStringId();
				State = 6137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6135;
					Match(COMMA);
					State = 6136;
					_localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXuidStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 560, RULE_xuidStringId);
		int _la;
		try {
			State = 6148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6141;
				Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6142;
				Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6143;
					Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 6146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 562, RULE_authPlugin);
		try {
			State = 6152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6150;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6151;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 564, RULE_uid);
		try {
			State = 6157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6154;
				simpleId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6155;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6156;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 566, RULE_simpleId);
		try {
			State = 6168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,898,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6159;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6160;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6161;
				transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6162;
				engineName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6163;
				privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6164;
				intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6165;
				dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6166;
				keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6167;
				scalarFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDottedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 568, RULE_dottedId);
		try {
			State = 6173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6170;
				Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6171;
				Match(DOT);
				State = 6172;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 570, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6175;
			_la = TokenStream.LA(1);
			if ( !((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 572, RULE_fileSizeLiteral);
		try {
			State = 6179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6177;
				Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6178;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 574, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 6204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6186;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6181;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6184;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6185;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6189;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6188;
						Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6191;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,903,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6198;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6193;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6196;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6197;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
				case 1:
					{
					State = 6200;
					Match(COLLATE);
					State = 6201;
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 576, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6206;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 578, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 6208;
				Match(STRING_CHARSET_NAME);
				}
			}

			State = 6211;
			Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullNotnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 580, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 6213;
				Match(NOT);
				}
			}

			State = 6216;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 582, RULE_constant);
		int _la;
		try {
			State = 6230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6218;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6219;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6220;
				Match(MINUS);
				State = 6221;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6222;
				hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6223;
				booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6224;
				Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6225;
				Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6226;
					Match(NOT);
					}
				}

				State = 6229;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLECTION() { return GetToken(MySqlParser.GEOMCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY() { return GetToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarbinaryDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarbinaryDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionsContext collectionOptions() {
			return GetRuleContext<CollectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalVaryingStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalVaryingStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDLEINT() { return GetToken(MySqlParser.MIDDLEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT1() { return GetToken(MySqlParser.INT1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2() { return GetToken(MySqlParser.INT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT3() { return GetToken(MySqlParser.INT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(MySqlParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(MySqlParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED() { return GetTokens(MySqlParser.SIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED(int i) {
			return GetToken(MySqlParser.SIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED() { return GetTokens(MySqlParser.UNSIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED(int i) {
			return GetToken(MySqlParser.UNSIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL() { return GetTokens(MySqlParser.ZEROFILL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL(int i) {
			return GetToken(MySqlParser.ZEROFILL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(MySqlParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MySqlParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT4() { return GetToken(MySqlParser.FLOAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT8() { return GetToken(MySqlParser.FLOAT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(MySqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(MySqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(MySqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarcharDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public LongVarcharDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarcharDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 584, RULE_dataType);
		int _la;
		try {
			int _alt;
			State = 6354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6232;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & 31239L) != 0 || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARYING) {
					{
					State = 6233;
					Match(VARYING);
					}
				}

				State = 6237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,913,Context) ) {
				case 1:
					{
					State = 6236;
					lengthOneDimension();
					}
					break;
				}
				State = 6240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
				case 1:
					{
					State = 6239;
					Match(BINARY);
					}
					break;
				}
				State = 6245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,915,Context) ) {
				case 1:
					{
					State = 6242;
					charSet();
					State = 6243;
					charsetName();
					}
					break;
				}
				State = 6250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
				case 1:
					{
					State = 6247;
					Match(COLLATE);
					State = 6248;
					collationName();
					}
					break;
				case 2:
					{
					State = 6249;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6252;
				Match(NATIONAL);
				State = 6253;
				((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
				case 1:
					{
					State = 6254;
					lengthOneDimension();
					}
					break;
				}
				State = 6258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 6257;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6260;
				Match(NCHAR);
				State = 6261;
				((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
				State = 6263;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 6262;
					lengthOneDimension();
					}
					break;
				}
				State = 6266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6265;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6268;
				Match(NATIONAL);
				State = 6269;
				((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6270;
				Match(VARYING);
				State = 6272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 6271;
					lengthOneDimension();
					}
					break;
				}
				State = 6275;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 6274;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6277;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 4095L) != 0) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6279;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 6278;
					lengthOneDimension();
					}
					break;
				}
				State = 6284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,924,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6281;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6286;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,924,Context);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6287;
				((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
				State = 6289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 6288;
					lengthTwoDimension();
					}
					break;
				}
				State = 6294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6291;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6296;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6297;
				((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
				State = 6299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 6298;
					Match(PRECISION);
					}
				}

				State = 6302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 6301;
					lengthTwoDimension();
					}
					break;
				}
				State = 6307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6304;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6309;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6310;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & 63L) != 0 || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
				case 1:
					{
					State = 6311;
					lengthTwoOptionalDimension();
					}
					break;
				}
				State = 6317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6314;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6319;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6320;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 4237313L) != 0 || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6321;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 2831L) != 0 || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
				case 1:
					{
					State = 6322;
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6325;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6326;
				collectionOptions();
				State = 6328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 6327;
					Match(BINARY);
					}
					break;
				}
				State = 6333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,934,Context) ) {
				case 1:
					{
					State = 6330;
					charSet();
					State = 6331;
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6335;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || (((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & 511L) != 0) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6336;
				((LongVarcharDataTypeContext)_localctx).typeName = Match(LONG);
				State = 6338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARCHAR) {
					{
					State = 6337;
					Match(VARCHAR);
					}
				}

				State = 6341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
				case 1:
					{
					State = 6340;
					Match(BINARY);
					}
					break;
				}
				State = 6346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 6343;
					charSet();
					State = 6344;
					charsetName();
					}
					break;
				}
				State = 6350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 6348;
					Match(COLLATE);
					State = 6349;
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6352;
				Match(LONG);
				State = 6353;
				Match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionsContext collectionOptions() {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
		EnterRule(_localctx, 586, RULE_collectionOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6356;
			Match(LR_BRACKET);
			State = 6357;
			Match(STRING_LITERAL);
			State = 6362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6358;
				Match(COMMA);
				State = 6359;
				Match(STRING_LITERAL);
				}
				}
				State = 6364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6365;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MySqlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 588, RULE_convertedDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				State = 6367;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6368;
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				State = 6371;
				_localctx.typeName = Match(CHAR);
				State = 6373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6372;
					lengthOneDimension();
					}
				}

				State = 6378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					State = 6375;
					charSet();
					State = 6376;
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				State = 6380;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 1441857L) != 0 || _la==JSON) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				{
				State = 6381;
				_localctx.typeName = Match(DECIMAL);
				State = 6383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6382;
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				State = 6385;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 6386;
					Match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 6391;
				Match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOneDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 590, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6394;
			Match(LR_BRACKET);
			State = 6395;
			decimalLiteral();
			State = 6396;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 592, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6398;
			Match(LR_BRACKET);
			State = 6399;
			decimalLiteral();
			State = 6400;
			Match(COMMA);
			State = 6401;
			decimalLiteral();
			State = 6402;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoOptionalDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 594, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6404;
			Match(LR_BRACKET);
			State = 6405;
			decimalLiteral();
			State = 6408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6406;
				Match(COMMA);
				State = 6407;
				decimalLiteral();
				}
			}

			State = 6410;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUidList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 596, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6412;
			uid();
			State = 6417;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,949,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6413;
					Match(COMMA);
					State = 6414;
					uid();
					}
					} 
				}
				State = 6419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,949,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public FullColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameListContext fullColumnNameList() {
		FullColumnNameListContext _localctx = new FullColumnNameListContext(Context, State);
		EnterRule(_localctx, 598, RULE_fullColumnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6420;
			fullColumnName();
			State = 6425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6421;
				Match(COMMA);
				State = 6422;
				fullColumnName();
				}
				}
				State = 6427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 600, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6428;
			tableName();
			State = 6433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,951,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6429;
					Match(COMMA);
					State = 6430;
					tableName();
					}
					} 
				}
				State = 6435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,951,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 602, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6436;
			Match(LR_BRACKET);
			State = 6437;
			indexColumnName();
			State = 6442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6438;
				Match(COMMA);
				State = 6439;
				indexColumnName();
				}
				}
				State = 6444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6445;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 604, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6447;
			expression(0);
			State = 6452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6448;
				Match(COMMA);
				State = 6449;
				expression(0);
				}
				}
				State = 6454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsWithDefaults(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 606, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6455;
			expressionOrDefault();
			State = 6460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6456;
				Match(COMMA);
				State = 6457;
				expressionOrDefault();
				}
				}
				State = 6462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 608, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6463;
			constant();
			State = 6468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6464;
				Match(COMMA);
				State = 6465;
				constant();
				}
				}
				State = 6470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 610, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6471;
			Match(STRING_LITERAL);
			State = 6476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6472;
				Match(COMMA);
				State = 6473;
				Match(STRING_LITERAL);
				}
				}
				State = 6478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MySqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 612, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6479;
			Match(LOCAL_ID);
			State = 6484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6480;
				Match(COMMA);
				State = 6481;
				Match(LOCAL_ID);
				}
				}
				State = 6486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 614, RULE_defaultValue);
		try {
			State = 6513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6487;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6488;
				Match(CAST);
				State = 6489;
				Match(LR_BRACKET);
				State = 6490;
				expression(0);
				State = 6491;
				Match(AS);
				State = 6492;
				convertedDataType();
				State = 6493;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6496;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,958,Context) ) {
				case 1:
					{
					State = 6495;
					unaryOperator();
					}
					break;
				}
				State = 6498;
				constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6499;
				currentTimestamp();
				State = 6503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
				case 1:
					{
					State = 6500;
					Match(ON);
					State = 6501;
					Match(UPDATE);
					State = 6502;
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6505;
				Match(LR_BRACKET);
				State = 6506;
				expression(0);
				State = 6507;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6509;
				Match(LR_BRACKET);
				State = 6510;
				fullId();
				State = 6511;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 616, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				State = 6515;
				_la = TokenStream.LA(1);
				if ( !((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & 131L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6521;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
				case 1:
					{
					State = 6516;
					Match(LR_BRACKET);
					State = 6518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) {
						{
						State = 6517;
						decimalLiteral();
						}
					}

					State = 6520;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				State = 6523;
				Match(NOW);
				State = 6524;
				Match(LR_BRACKET);
				State = 6526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) {
					{
					State = 6525;
					decimalLiteral();
					}
				}

				State = 6528;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 618, RULE_expressionOrDefault);
		try {
			State = 6533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,965,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6531;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6532;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 620, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6535;
			Match(IF);
			State = 6536;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 622, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6538;
			Match(IF);
			State = 6539;
			Match(NOT);
			State = 6540;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrReplaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orReplace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrReplace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrReplaceContext orReplace() {
		OrReplaceContext _localctx = new OrReplaceContext(Context, State);
		EnterRule(_localctx, 624, RULE_orReplace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6542;
			Match(OR);
			State = 6543;
			Match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitNowaitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitNowaitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitNowaitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitNowaitClauseContext waitNowaitClause() {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(Context, State);
		EnterRule(_localctx, 626, RULE_waitNowaitClause);
		try {
			State = 6548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6545;
				Match(WAIT);
				State = 6546;
				decimalLiteral();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6547;
				Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return GetRuleContext<NonAggregateWindowedFunctionContext>(0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 628, RULE_functionCall);
		try {
			State = 6568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6550;
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6551;
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6552;
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6553;
				scalarFunctionName();
				State = 6554;
				Match(LR_BRACKET);
				State = 6556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
				case 1:
					{
					State = 6555;
					functionArgs();
					}
					break;
				}
				State = 6558;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6560;
				fullId();
				State = 6561;
				Match(LR_BRACKET);
				State = 6563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
				case 1:
					{
					State = 6562;
					functionArgs();
					}
					break;
				}
				State = 6565;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6567;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonValueFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(MySqlParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnEmptyContext jsonOnEmpty() {
			return GetRuleContext<JsonOnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnErrorContext jsonOnError() {
			return GetRuleContext<JsonOnErrorContext>(0);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpressionFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetFormatFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 630, RULE_specificFunction);
		int _la;
		try {
			State = 6748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6570;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || _la==SCHEMA || (((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & 262159L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
				case 1:
					{
					State = 6571;
					Match(LR_BRACKET);
					State = 6572;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6575;
				Match(CONVERT);
				State = 6576;
				Match(LR_BRACKET);
				State = 6577;
				expression(0);
				State = 6578;
				((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 6579;
				convertedDataType();
				State = 6580;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6582;
				Match(CONVERT);
				State = 6583;
				Match(LR_BRACKET);
				State = 6584;
				expression(0);
				State = 6585;
				Match(USING);
				State = 6586;
				charsetName();
				State = 6587;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6589;
				Match(CAST);
				State = 6590;
				Match(LR_BRACKET);
				State = 6591;
				expression(0);
				State = 6592;
				Match(AS);
				State = 6593;
				convertedDataType();
				State = 6594;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6596;
				Match(VALUES);
				State = 6597;
				Match(LR_BRACKET);
				State = 6598;
				fullColumnName();
				State = 6599;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6601;
				Match(CASE);
				State = 6602;
				expression(0);
				State = 6604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6603;
					caseFuncAlternative();
					}
					}
					State = 6606;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6608;
					Match(ELSE);
					State = 6609;
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6612;
				Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6614;
				Match(CASE);
				State = 6616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6615;
					caseFuncAlternative();
					}
					}
					State = 6618;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6620;
					Match(ELSE);
					State = 6621;
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6624;
				Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6626;
				Match(CHAR);
				State = 6627;
				Match(LR_BRACKET);
				State = 6628;
				functionArgs();
				State = 6631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 6629;
					Match(USING);
					State = 6630;
					charsetName();
					}
				}

				State = 6633;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6635;
				Match(POSITION);
				State = 6636;
				Match(LR_BRACKET);
				State = 6639;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
				case 1:
					{
					State = 6637;
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6638;
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 6641;
				Match(IN);
				State = 6644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,977,Context) ) {
				case 1:
					{
					State = 6642;
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6643;
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 6646;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6648;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6649;
				Match(LR_BRACKET);
				State = 6652;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,978,Context) ) {
				case 1:
					{
					State = 6650;
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6651;
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6654;
				Match(FROM);
				State = 6657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 6655;
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 6656;
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6659;
					Match(FOR);
					State = 6662;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
					case 1:
						{
						State = 6660;
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 6661;
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 6666;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6668;
				Match(TRIM);
				State = 6669;
				Match(LR_BRACKET);
				State = 6670;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 6671;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6672;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6675;
				Match(FROM);
				State = 6678;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
				case 1:
					{
					State = 6676;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6677;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6680;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6682;
				Match(TRIM);
				State = 6683;
				Match(LR_BRACKET);
				State = 6686;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
				case 1:
					{
					State = 6684;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6685;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6688;
				Match(FROM);
				State = 6691;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
				case 1:
					{
					State = 6689;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6690;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6693;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6695;
				Match(WEIGHT_STRING);
				State = 6696;
				Match(LR_BRACKET);
				State = 6699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
				case 1:
					{
					State = 6697;
					stringLiteral();
					}
					break;
				case 2:
					{
					State = 6698;
					expression(0);
					}
					break;
				}
				State = 6707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 6701;
					Match(AS);
					State = 6702;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6703;
					Match(LR_BRACKET);
					State = 6704;
					decimalLiteral();
					State = 6705;
					Match(RR_BRACKET);
					}
				}

				State = 6710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 6709;
					levelsInWeightString();
					}
				}

				State = 6712;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6714;
				Match(EXTRACT);
				State = 6715;
				Match(LR_BRACKET);
				State = 6716;
				intervalType();
				State = 6717;
				Match(FROM);
				State = 6720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,989,Context) ) {
				case 1:
					{
					State = 6718;
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6719;
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6722;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6724;
				Match(GET_FORMAT);
				State = 6725;
				Match(LR_BRACKET);
				State = 6726;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 11L) != 0) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6727;
				Match(COMMA);
				State = 6728;
				stringLiteral();
				State = 6729;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 6731;
				Match(JSON_VALUE);
				State = 6732;
				Match(LR_BRACKET);
				State = 6733;
				expression(0);
				State = 6734;
				Match(COMMA);
				State = 6735;
				expression(0);
				State = 6738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 6736;
					Match(RETURNING);
					State = 6737;
					convertedDataType();
					}
				}

				State = 6741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 6740;
					jsonOnEmpty();
					}
					break;
				}
				State = 6744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					State = 6743;
					jsonOnError();
					}
				}

				State = 6746;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFuncAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 632, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6750;
			Match(WHEN);
			State = 6751;
			_localctx.condition = functionArg();
			State = 6752;
			Match(THEN);
			State = 6753;
			_localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 634, RULE_levelsInWeightString);
		int _la;
		try {
			State = 6769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6755;
				Match(LEVEL);
				State = 6756;
				levelInWeightListElement();
				State = 6761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6757;
					Match(COMMA);
					State = 6758;
					levelInWeightListElement();
					}
					}
					State = 6763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6764;
				Match(LEVEL);
				State = 6765;
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 6766;
				Match(MINUS);
				State = 6767;
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelInWeightListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 636, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6771;
			decimalLiteral();
			State = 6773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 6772;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 638, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 6834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6775;
				_la = TokenStream.LA(1);
				if ( !((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 8400897L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6776;
				Match(LR_BRACKET);
				State = 6778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
				case 1:
					{
					State = 6777;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6780;
				functionArg();
				State = 6781;
				Match(RR_BRACKET);
				State = 6783;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,998,Context) ) {
				case 1:
					{
					State = 6782;
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6785;
				Match(COUNT);
				State = 6786;
				Match(LR_BRACKET);
				State = 6794;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
				case 1:
					{
					State = 6787;
					_localctx.starArg = Match(STAR);
					}
					break;
				case 2:
					{
					State = 6789;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
					case 1:
						{
						State = 6788;
						_localctx.aggregator = Match(ALL);
						}
						break;
					}
					State = 6791;
					functionArg();
					}
					break;
				case 3:
					{
					State = 6792;
					_localctx.aggregator = Match(DISTINCT);
					State = 6793;
					functionArgs();
					}
					break;
				}
				State = 6796;
				Match(RR_BRACKET);
				State = 6798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
				case 1:
					{
					State = 6797;
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6800;
				_la = TokenStream.LA(1);
				if ( !((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & 62652423L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6801;
				Match(LR_BRACKET);
				State = 6803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
				case 1:
					{
					State = 6802;
					_localctx.aggregator = Match(ALL);
					}
					break;
				}
				State = 6805;
				functionArg();
				State = 6806;
				Match(RR_BRACKET);
				State = 6808;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
				case 1:
					{
					State = 6807;
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6810;
				Match(GROUP_CONCAT);
				State = 6811;
				Match(LR_BRACKET);
				State = 6813;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
				case 1:
					{
					State = 6812;
					_localctx.aggregator = Match(DISTINCT);
					}
					break;
				}
				State = 6815;
				functionArgs();
				State = 6826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 6816;
					Match(ORDER);
					State = 6817;
					Match(BY);
					State = 6818;
					orderByExpression();
					State = 6823;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 6819;
						Match(COMMA);
						State = 6820;
						orderByExpression();
						}
						}
						State = 6825;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 6830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 6828;
					Match(SEPARATOR);
					State = 6829;
					_localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 6832;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAggregateWindowedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 640, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			State = 6874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6836;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6837;
				Match(LR_BRACKET);
				State = 6838;
				expression(0);
				State = 6841;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 6839;
					Match(COMMA);
					State = 6840;
					decimalLiteral();
					}
					break;
				}
				State = 6845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6843;
					Match(COMMA);
					State = 6844;
					decimalLiteral();
					}
				}

				State = 6847;
				Match(RR_BRACKET);
				State = 6848;
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6850;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6851;
				Match(LR_BRACKET);
				State = 6852;
				expression(0);
				State = 6853;
				Match(RR_BRACKET);
				State = 6854;
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6856;
				_la = TokenStream.LA(1);
				if ( !((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 14339L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6857;
				Match(LR_BRACKET);
				State = 6858;
				Match(RR_BRACKET);
				State = 6859;
				overClause();
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6860;
				Match(NTH_VALUE);
				State = 6861;
				Match(LR_BRACKET);
				State = 6862;
				expression(0);
				State = 6863;
				Match(COMMA);
				State = 6864;
				decimalLiteral();
				State = 6865;
				Match(RR_BRACKET);
				State = 6866;
				overClause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6868;
				Match(NTILE);
				State = 6869;
				Match(LR_BRACKET);
				State = 6870;
				decimalLiteral();
				State = 6871;
				Match(RR_BRACKET);
				State = 6872;
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(MySqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(Context, State);
		EnterRule(_localctx, 642, RULE_overClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6876;
			Match(OVER);
			State = 6883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6877;
				Match(LR_BRACKET);
				State = 6879;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
				case 1:
					{
					State = 6878;
					windowSpec();
					}
					break;
				}
				State = 6881;
				Match(RR_BRACKET);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 6882;
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameClauseContext frameClause() {
			return GetRuleContext<FrameClauseContext>(0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 644, RULE_windowSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
			case 1:
				{
				State = 6885;
				windowName();
				}
				break;
			}
			State = 6889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6888;
				partitionClause();
				}
			}

			State = 6892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6891;
				orderByClause();
				}
			}

			State = 6895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 6894;
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 646, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6897;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameUnitsContext frameUnits() {
			return GetRuleContext<FrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameClauseContext frameClause() {
		FrameClauseContext _localctx = new FrameClauseContext(Context, State);
		EnterRule(_localctx, 648, RULE_frameClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6899;
			frameUnits();
			State = 6900;
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameUnitsContext frameUnits() {
		FrameUnitsContext _localctx = new FrameUnitsContext(Context, State);
		EnterRule(_localctx, 650, RULE_frameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6902;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBetweenContext frameBetween() {
			return GetRuleContext<FrameBetweenContext>(0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 652, RULE_frameExtent);
		try {
			State = 6906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6904;
				frameRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6905;
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBetweenContext frameBetween() {
		FrameBetweenContext _localctx = new FrameBetweenContext(Context, State);
		EnterRule(_localctx, 654, RULE_frameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6908;
			Match(BETWEEN);
			State = 6909;
			frameRange();
			State = 6910;
			Match(AND);
			State = 6911;
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(MySqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(MySqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 656, RULE_frameRange);
		int _la;
		try {
			State = 6920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1019,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6913;
				Match(CURRENT);
				State = 6914;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6915;
				Match(UNBOUNDED);
				State = 6916;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6917;
				expression(0);
				State = 6918;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 658, RULE_partitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6922;
			Match(PARTITION);
			State = 6923;
			Match(BY);
			State = 6924;
			expression(0);
			State = 6929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6925;
				Match(COMMA);
				State = 6926;
				expression(0);
				}
				}
				State = 6931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 660, RULE_scalarFunctionName);
		try {
			State = 6955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6932;
				functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6933;
				Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6934;
				Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6935;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6936;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6937;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6938;
				Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6939;
				Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6940;
				Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6941;
				Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6942;
				Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6943;
				Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6944;
				Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6945;
				Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6946;
				Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6947;
				Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6948;
				Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6949;
				Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6950;
				Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6951;
				Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6952;
				Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6953;
				Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6954;
				Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 662, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6957;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6958;
			Match(LR_BRACKET);
			State = 6959;
			functionArg();
			State = 6960;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 664, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
			case 1:
				{
				State = 6962;
				constant();
				}
				break;
			case 2:
				{
				State = 6963;
				fullColumnName();
				}
				break;
			case 3:
				{
				State = 6964;
				functionCall();
				}
				break;
			case 4:
				{
				State = 6965;
				expression(0);
				}
				break;
			}
			State = 6977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6968;
				Match(COMMA);
				State = 6973;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
				case 1:
					{
					State = 6969;
					constant();
					}
					break;
				case 2:
					{
					State = 6970;
					fullColumnName();
					}
					break;
				case 3:
					{
					State = 6971;
					functionCall();
					}
					break;
				case 4:
					{
					State = 6972;
					expression(0);
					}
					break;
				}
				}
				}
				State = 6979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 666, RULE_functionArg);
		try {
			State = 6984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1025,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6980;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6981;
				fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6982;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6983;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 668;
		EnterRecursionRule(_localctx, 668, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6987;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6988;
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6989;
				predicate(0);
				State = 6990;
				Match(IS);
				State = 6992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6991;
					Match(NOT);
					}
				}

				State = 6994;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6996;
				predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7005;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1028,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 6999;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 7000;
					logicalOperator();
					State = 7001;
					expression(4);
					}
					} 
				}
				State = 7007;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1028,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundsLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtomPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryComparisonPredicateContext : PredicateContext {
		public IToken quantifier;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonMemberOfPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonMemberOfPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryComparisonPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 670;
		EnterRecursionRule(_localctx, 670, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 7011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
			case 1:
				{
				State = 7009;
				Match(LOCAL_ID);
				State = 7010;
				Match(VAR_ASSIGN);
				}
				break;
			}
			State = 7013;
			expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7079;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1037,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7077;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1036,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7015;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 7016;
						comparisonOperator();
						State = 7017;
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7019;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 7021;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7020;
							Match(NOT);
							}
						}

						State = 7023;
						Match(BETWEEN);
						State = 7024;
						predicate(0);
						State = 7025;
						Match(AND);
						State = 7026;
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7028;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 7029;
						Match(SOUNDS);
						State = 7030;
						Match(LIKE);
						State = 7031;
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7032;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7034;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7033;
							Match(NOT);
							}
						}

						State = 7036;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7037;
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7038;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 7040;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7039;
							Match(NOT);
							}
						}

						State = 7042;
						Match(IN);
						State = 7043;
						Match(LR_BRACKET);
						State = 7046;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1033,Context) ) {
						case 1:
							{
							State = 7044;
							selectStatement();
							}
							break;
						case 2:
							{
							State = 7045;
							expressions();
							}
							break;
						}
						State = 7048;
						Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7050;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 7051;
						Match(IS);
						State = 7052;
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7053;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 7054;
						comparisonOperator();
						State = 7055;
						((SubqueryComparisonPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7056;
						Match(LR_BRACKET);
						State = 7057;
						selectStatement();
						State = 7058;
						Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7060;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 7062;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7061;
							Match(NOT);
							}
						}

						State = 7064;
						Match(LIKE);
						State = 7065;
						predicate(0);
						State = 7068;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1035,Context) ) {
						case 1:
							{
							State = 7066;
							Match(ESCAPE);
							State = 7067;
							Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7070;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7071;
						Match(MEMBER);
						State = 7072;
						Match(OF);
						State = 7073;
						Match(LR_BRACKET);
						State = 7074;
						predicate(0);
						State = 7075;
						Match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				State = 7081;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1037,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedRowExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 672;
		EnterRecursionRule(_localctx, 672, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1040,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7083;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7084;
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7085;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7086;
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7087;
				unaryOperator();
				State = 7088;
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7090;
				Match(BINARY);
				State = 7091;
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7092;
				Match(LR_BRACKET);
				State = 7093;
				expression(0);
				State = 7098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7094;
					Match(COMMA);
					State = 7095;
					expression(0);
					}
					}
					State = 7100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7101;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7103;
				Match(ROW);
				State = 7104;
				Match(LR_BRACKET);
				State = 7105;
				expression(0);
				State = 7108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7106;
					Match(COMMA);
					State = 7107;
					expression(0);
					}
					}
					State = 7110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 7112;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7114;
				Match(EXISTS);
				State = 7115;
				Match(LR_BRACKET);
				State = 7116;
				selectStatement();
				State = 7117;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7119;
				Match(LR_BRACKET);
				State = 7120;
				selectStatement();
				State = 7121;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7123;
				Match(INTERVAL);
				State = 7124;
				expression(0);
				State = 7125;
				intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1042,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7144;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1041,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7129;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7130;
						bitOperator();
						State = 7131;
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7133;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 7134;
						mathOperator();
						State = 7135;
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7137;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7138;
						jsonOperator();
						State = 7139;
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7141;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 7142;
						Match(COLLATE);
						State = 7143;
						collationName();
						}
						break;
					}
					} 
				}
				State = 7148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1042,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT_OP() { return GetToken(MySqlParser.BIT_NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 674, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7149;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || (((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & 387L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 676, RULE_comparisonOperator);
		try {
			State = 7165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7151;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7152;
				Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7153;
				Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7154;
				Match(LESS_SYMBOL);
				State = 7155;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7156;
				Match(GREATER_SYMBOL);
				State = 7157;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7158;
				Match(LESS_SYMBOL);
				State = 7159;
				Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7160;
				Match(EXCLAMATION_SYMBOL);
				State = 7161;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7162;
				Match(LESS_SYMBOL);
				State = 7163;
				Match(EQUAL_SYMBOL);
				State = 7164;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND_OP() { return GetTokens(MySqlParser.BIT_AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP(int i) {
			return GetToken(MySqlParser.BIT_AND_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR_OP() { return GetTokens(MySqlParser.BIT_OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP(int i) {
			return GetToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 678, RULE_logicalOperator);
		try {
			State = 7174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7167;
				Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7168;
				Match(BIT_AND_OP);
				State = 7169;
				Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7170;
				Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7171;
				Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7172;
				Match(BIT_OR_OP);
				State = 7173;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MySqlParser.LESS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL(int i) {
			return GetToken(MySqlParser.LESS_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP() { return GetToken(MySqlParser.BIT_AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_OP() { return GetToken(MySqlParser.BIT_XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP() { return GetToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 680, RULE_bitOperator);
		try {
			State = 7183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7176;
				Match(LESS_SYMBOL);
				State = 7177;
				Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7178;
				Match(GREATER_SYMBOL);
				State = 7179;
				Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7180;
				Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7181;
				Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7182;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MySqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MySqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 682, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7185;
			_la = TokenStream.LA(1);
			if ( !((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & 127L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 684, RULE_jsonOperator);
		try {
			State = 7192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1046,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7187;
				Match(MINUS);
				State = 7188;
				Match(GREATER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7189;
				Match(MINUS);
				State = 7190;
				Match(GREATER_SYMBOL);
				State = 7191;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB18030() { return GetToken(MySqlParser.GB18030, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 686, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7194;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || (((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & 2199023255551L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevelBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 688, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7196;
			_la = TokenStream.LA(1);
			if ( !((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegesBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 690, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7198;
			_la = TokenStream.LA(1);
			if ( !((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 11828396035L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 692, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7200;
			_la = TokenStream.LA(1);
			if ( !((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & 255L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 694, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7202;
			_la = TokenStream.LA(1);
			if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 1179679L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MySqlParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MySqlParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MySqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUR() { return GetToken(MySqlParser.EUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MySqlParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MySqlParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(MySqlParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKE() { return GetToken(MySqlParser.INVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(MySqlParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JIS() { return GetToken(MySqlParser.JIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(MySqlParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MySqlParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(MySqlParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY() { return GetToken(MySqlParser.NOCOPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MySqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MySqlParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(MySqlParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(MySqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE() { return GetToken(MySqlParser.REUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MySqlParser.RTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3() { return GetToken(MySqlParser.S3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MySqlParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MySqlParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USA() { return GetToken(MySqlParser.USA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordsCanBeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 696, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7204;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 324545218529738752L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055054393409L) != 0 || _la==STACKED || (((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & 1769897061370560513L) != 0 || (((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & -134217473L) != 0 || (((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & -171798822913L) != 0 || (((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & -33685505L) != 0 || (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & -2306265222165299201L) != 0 || (((_la - 560)) & ~0x3f) == 0 && ((1L << (_la - 560)) & -35186788007937L) != 0 || (((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & 9077990211383719935L) != 0 || (((_la - 695)) & ~0x3f) == 0 && ((1L << (_la - 695)) & 64278245022205L) != 0 || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(MySqlParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(MySqlParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUOTE() { return GetToken(MySqlParser.JSON_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS() { return GetToken(MySqlParser.JSON_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS_PATH() { return GetToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXTRACT() { return GetToken(MySqlParser.JSON_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_KEYS() { return GetToken(MySqlParser.JSON_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OVERLAPS() { return GetToken(MySqlParser.JSON_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEARCH() { return GetToken(MySqlParser.JSON_SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_APPEND() { return GetToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_INSERT() { return GetToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_INSERT() { return GetToken(MySqlParser.JSON_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE() { return GetToken(MySqlParser.JSON_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PATCH() { return GetToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PRESERVE() { return GetToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REMOVE() { return GetToken(MySqlParser.JSON_REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REPLACE() { return GetToken(MySqlParser.JSON_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SET() { return GetToken(MySqlParser.JSON_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTE() { return GetToken(MySqlParser.JSON_UNQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_DEPTH() { return GetToken(MySqlParser.JSON_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_LENGTH() { return GetToken(MySqlParser.JSON_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TYPE() { return GetToken(MySqlParser.JSON_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALID() { return GetToken(MySqlParser.JSON_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MySqlParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALID() { return GetToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return GetToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_PRETTY() { return GetToken(MySqlParser.JSON_PRETTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_FREE() { return GetToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_SIZE() { return GetToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(MySqlParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 698, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7206;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || (((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 11258999068426241L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17179869161L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & 8796109397507L) != 0 || _la==INVISIBLE || (((_la - 671)) & ~0x3f) == 0 && ((1L << (_la - 671)) & 1152921504623558657L) != 0 || (((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & -8589934599L) != 0 || (((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & -257L) != 0 || (((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & -1L) != 0 || (((_la - 990)) & ~0x3f) == 0 && ((1L << (_la - 990)) & -529L) != 0 || (((_la - 1054)) & ~0x3f) == 0 && ((1L << (_la - 1054)) & 4611826755915743231L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 334: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 335: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 336: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,1155,7209,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,1,0,3,0,702,
		8,0,1,0,1,0,3,0,706,8,0,1,0,1,0,1,1,1,1,1,1,3,1,713,8,1,1,1,3,1,716,8,
		1,1,1,5,1,719,8,1,10,1,12,1,722,9,1,1,1,1,1,1,1,3,1,727,8,1,1,1,3,1,730,
		8,1,1,1,3,1,733,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,742,8,2,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,3,4,784,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,796,
		8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,807,8,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,824,8,7,1,8,1,8,1,8,3,8,
		829,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,841,8,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,868,8,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,3,11,877,8,11,1,12,1,12,1,12,3,12,882,8,12,1,12,
		1,12,5,12,886,8,12,10,12,12,12,889,9,12,1,13,1,13,3,13,893,8,13,1,13,1,
		13,3,13,897,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,906,8,13,1,13,
		3,13,909,8,13,1,13,3,13,912,8,13,1,13,1,13,3,13,916,8,13,1,13,1,13,1,13,
		1,14,1,14,3,14,923,8,14,1,14,3,14,926,8,14,1,14,1,14,1,14,3,14,931,8,14,
		1,14,1,14,1,14,1,14,5,14,937,8,14,10,14,12,14,940,9,14,1,14,1,14,3,14,
		944,8,14,1,14,1,14,1,14,3,14,949,8,14,1,14,5,14,952,8,14,10,14,12,14,955,
		9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,966,8,15,1,15,3,
		15,969,8,15,1,15,1,15,3,15,973,8,15,1,15,3,15,976,8,15,1,15,1,15,3,15,
		980,8,15,1,15,3,15,983,8,15,1,15,1,15,3,15,987,8,15,1,15,3,15,990,8,15,
		1,15,3,15,993,8,15,1,15,1,15,3,15,997,8,15,1,15,3,15,1000,8,15,1,15,1,
		15,3,15,1004,8,15,1,15,1,15,1,16,1,16,3,16,1010,8,16,1,16,1,16,1,16,1,
		16,3,16,1016,8,16,1,16,1,16,5,16,1020,8,16,10,16,12,16,1023,9,16,1,16,
		1,16,5,16,1027,8,16,10,16,12,16,1030,9,16,1,16,1,16,1,17,1,17,3,17,1036,
		8,17,1,17,3,17,1039,8,17,1,17,1,17,3,17,1043,8,17,1,17,1,17,1,17,3,17,
		1048,8,17,1,17,1,17,5,17,1052,8,17,10,17,12,17,1055,9,17,1,17,1,17,1,17,
		1,17,5,17,1061,8,17,10,17,12,17,1064,9,17,1,17,1,17,3,17,1068,8,17,1,18,
		1,18,1,18,3,18,1073,8,18,1,18,1,18,1,18,5,18,1078,8,18,10,18,12,18,1081,
		9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,
		1095,8,19,10,19,12,19,1098,9,19,1,19,1,19,1,20,1,20,3,20,1104,8,20,1,20,
		1,20,3,20,1108,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1118,
		8,20,1,20,1,20,3,20,1122,8,20,1,20,1,20,3,20,1126,8,20,1,20,1,20,3,20,
		1130,8,20,1,20,1,20,3,20,1134,8,20,1,20,5,20,1137,8,20,10,20,12,20,1140,
		9,20,3,20,1142,8,20,1,20,3,20,1145,8,20,1,20,3,20,1148,8,20,1,20,3,20,
		1151,8,20,1,20,1,20,1,20,1,20,3,20,1157,8,20,1,20,1,20,3,20,1161,8,20,
		1,20,1,20,1,20,1,20,3,20,1167,8,20,1,20,5,20,1170,8,20,10,20,12,20,1173,
		9,20,3,20,1175,8,20,1,20,3,20,1178,8,20,3,20,1180,8,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,3,21,1191,8,21,1,21,1,21,3,21,1195,8,21,
		1,21,3,21,1198,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,3,22,1212,8,22,1,22,3,22,1215,8,22,1,22,1,22,3,22,1219,8,22,
		1,22,3,22,1222,8,22,1,22,1,22,3,22,1226,8,22,1,22,3,22,1229,8,22,1,22,
		1,22,3,22,1233,8,22,1,22,3,22,1236,8,22,1,22,1,22,3,22,1240,8,22,1,22,
		3,22,1243,8,22,1,22,3,22,1246,8,22,1,22,1,22,3,22,1250,8,22,1,22,3,22,
		1253,8,22,1,22,1,22,3,22,1257,8,22,1,22,1,22,1,23,1,23,3,23,1263,8,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1276,8,23,
		1,23,1,23,1,24,1,24,3,24,1282,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
		5,25,1291,8,25,10,25,12,25,1294,9,25,1,25,1,25,3,25,1298,8,25,1,25,1,25,
		1,25,1,25,1,25,1,25,3,25,1306,8,25,1,26,1,26,1,27,1,27,1,28,1,28,3,28,
		1314,8,28,1,28,1,28,1,28,3,28,1319,8,28,1,28,3,28,1322,8,28,1,28,1,28,
		1,28,3,28,1327,8,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1335,8,28,1,28,
		1,28,1,28,3,28,1340,8,28,1,28,1,28,1,28,1,28,3,28,1346,8,28,1,28,1,28,
		1,28,3,28,1351,8,28,1,28,1,28,3,28,1355,8,28,3,28,1357,8,28,1,29,3,29,
		1360,8,29,1,29,1,29,3,29,1364,8,29,1,29,1,29,3,29,1368,8,29,1,29,3,29,
		1371,8,29,1,29,1,29,3,29,1375,8,29,1,29,1,29,3,29,1379,8,29,1,29,1,29,
		3,29,1383,8,29,1,29,1,29,1,29,1,29,3,29,1389,8,29,1,29,3,29,1392,8,29,
		1,30,1,30,1,30,1,30,1,30,3,30,1399,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
		3,31,1407,8,31,3,31,1409,8,31,1,32,1,32,1,32,5,32,1414,8,32,10,32,12,32,
		1417,9,32,1,32,1,32,1,32,3,32,1422,8,32,1,32,1,32,1,32,1,32,5,32,1428,
		8,32,10,32,12,32,1431,9,32,3,32,1433,8,32,1,32,1,32,1,32,5,32,1438,8,32,
		10,32,12,32,1441,9,32,3,32,1443,8,32,3,32,1445,8,32,1,33,1,33,1,33,1,33,
		3,33,1451,8,33,1,34,1,34,1,34,1,34,3,34,1457,8,34,1,34,1,34,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1474,8,35,
		1,36,1,36,1,36,1,36,1,36,3,36,1481,8,36,1,37,1,37,1,37,1,38,1,38,3,38,
		1488,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1500,
		8,38,1,38,1,38,1,38,3,38,1505,8,38,1,38,3,38,1508,8,38,1,39,3,39,1511,
		8,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,1524,
		8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1537,
		8,41,1,41,1,41,1,41,3,41,1542,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1558,8,42,1,43,1,43,1,43,1,43,
		5,43,1564,8,43,10,43,12,43,1567,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
		3,44,1576,8,44,1,45,1,45,5,45,1580,8,45,10,45,12,45,1583,9,45,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1594,8,46,1,46,3,46,1597,8,46,
		1,46,1,46,1,46,3,46,1602,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,3,46,1615,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1622,8,46,
		1,46,1,46,1,46,1,46,1,46,3,46,1629,8,46,3,46,1631,8,46,1,46,1,46,1,46,
		1,46,1,46,3,46,1638,8,46,1,47,1,47,3,47,1642,8,47,3,47,1644,8,47,1,47,
		1,47,1,47,3,47,1649,8,47,1,47,3,47,1652,8,47,1,47,1,47,5,47,1656,8,47,
		10,47,12,47,1659,9,47,1,47,1,47,3,47,1663,8,47,3,47,1665,8,47,1,47,1,47,
		3,47,1669,8,47,1,47,3,47,1672,8,47,1,47,3,47,1675,8,47,1,47,1,47,5,47,
		1679,8,47,10,47,12,47,1682,9,47,1,47,1,47,3,47,1686,8,47,3,47,1688,8,47,
		1,47,1,47,1,47,3,47,1693,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1700,8,47,
		3,47,1702,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1709,8,47,1,48,1,48,1,48,
		3,48,1714,8,48,1,48,1,48,3,48,1718,8,48,1,48,3,48,1721,8,48,1,49,1,49,
		1,49,1,49,1,49,1,49,3,49,1729,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
		1737,8,49,3,49,1739,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1747,8,50,
		1,51,1,51,3,51,1751,8,51,1,51,3,51,1754,8,51,1,51,1,51,5,51,1758,8,51,
		10,51,12,51,1761,9,51,1,51,1,51,3,51,1765,8,51,1,51,3,51,1768,8,51,1,51,
		1,51,5,51,1772,8,51,10,51,12,51,1775,9,51,3,51,1777,8,51,1,52,1,52,3,52,
		1781,8,52,1,52,3,52,1784,8,52,1,52,1,52,3,52,1788,8,52,1,52,1,52,1,52,
		3,52,1793,8,52,1,52,1,52,1,52,3,52,1798,8,52,1,52,1,52,1,52,3,52,1803,
		8,52,1,52,1,52,3,52,1807,8,52,1,52,1,52,3,52,1811,8,52,1,52,1,52,3,52,
		1815,8,52,1,52,1,52,3,52,1819,8,52,1,52,1,52,3,52,1823,8,52,1,52,1,52,
		3,52,1827,8,52,1,52,1,52,1,52,3,52,1832,8,52,1,52,1,52,1,52,3,52,1837,
		8,52,1,52,1,52,1,52,3,52,1842,8,52,1,52,1,52,1,52,1,52,3,52,1848,8,52,
		1,52,1,52,1,52,3,52,1853,8,52,1,52,1,52,1,52,3,52,1858,8,52,1,52,1,52,
		1,52,3,52,1863,8,52,1,52,1,52,1,52,3,52,1868,8,52,1,52,1,52,1,52,3,52,
		1873,8,52,1,52,1,52,1,52,1,52,3,52,1879,8,52,1,52,1,52,1,52,3,52,1884,
		8,52,1,52,1,52,1,52,3,52,1889,8,52,1,52,1,52,1,52,3,52,1894,8,52,1,52,
		1,52,1,52,3,52,1899,8,52,1,52,1,52,1,52,3,52,1904,8,52,1,52,1,52,1,52,
		3,52,1909,8,52,1,52,1,52,1,52,3,52,1914,8,52,1,52,1,52,1,52,1,52,1,52,
		3,52,1921,8,52,1,52,1,52,1,52,3,52,1926,8,52,1,52,1,52,1,52,3,52,1931,
		8,52,1,52,1,52,1,52,3,52,1936,8,52,1,52,1,52,3,52,1940,8,52,1,52,1,52,
		1,52,3,52,1945,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1953,8,52,1,52,
		1,52,1,52,3,52,1958,8,52,1,52,1,52,1,52,1,52,3,52,1964,8,52,1,53,1,53,
		1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,1976,8,55,1,55,1,55,1,55,
		1,55,1,55,3,55,1983,8,55,3,55,1985,8,55,1,55,1,55,1,55,1,55,5,55,1991,
		8,55,10,55,12,55,1994,9,55,1,55,1,55,3,55,1998,8,55,1,56,3,56,2001,8,56,
		1,56,1,56,1,56,1,56,1,56,1,56,3,56,2009,8,56,1,56,1,56,1,56,1,56,3,56,
		2015,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,3,56,2031,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,3,56,2043,8,56,3,56,2045,8,56,1,57,3,57,2048,8,57,1,57,1,57,1,57,
		1,57,1,57,1,57,3,57,2056,8,57,1,57,1,57,1,57,1,57,3,57,2062,8,57,1,57,
		1,57,1,57,1,57,3,57,2068,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,5,58,2079,8,58,10,58,12,58,2082,9,58,1,58,1,58,5,58,2086,8,58,10,
		58,12,58,2089,9,58,1,58,1,58,1,58,1,58,5,58,2095,8,58,10,58,12,58,2098,
		9,58,1,58,1,58,3,58,2102,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,
		2111,8,58,10,58,12,58,2114,9,58,1,58,1,58,1,58,1,58,5,58,2120,8,58,10,
		58,12,58,2123,9,58,1,58,1,58,3,58,2127,8,58,1,58,1,58,1,58,1,58,1,58,1,
		58,1,58,1,58,5,58,2137,8,58,10,58,12,58,2140,9,58,1,58,1,58,5,58,2144,
		8,58,10,58,12,58,2147,9,58,1,58,1,58,1,58,1,58,5,58,2153,8,58,10,58,12,
		58,2156,9,58,1,58,1,58,3,58,2160,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
		58,1,58,5,58,2170,8,58,10,58,12,58,2173,9,58,1,58,1,58,5,58,2177,8,58,
		10,58,12,58,2180,9,58,1,58,1,58,1,58,1,58,5,58,2186,8,58,10,58,12,58,2189,
		9,58,1,58,1,58,3,58,2193,8,58,1,58,1,58,1,58,5,58,2198,8,58,10,58,12,58,
		2201,9,58,1,58,1,58,1,58,1,58,5,58,2207,8,58,10,58,12,58,2210,9,58,1,58,
		1,58,3,58,2214,8,58,3,58,2216,8,58,1,59,1,59,1,59,3,59,2221,8,59,1,60,
		1,60,1,60,1,60,4,60,2227,8,60,11,60,12,60,2228,1,60,1,60,1,61,1,61,1,61,
		5,61,2236,8,61,10,61,12,61,2239,9,61,1,62,3,62,2242,8,62,1,62,3,62,2245,
		8,62,1,62,1,62,3,62,2249,8,62,1,62,1,62,1,62,3,62,2254,8,62,1,62,1,62,
		1,62,1,62,3,62,2260,8,62,1,62,1,62,1,62,1,62,3,62,2266,8,62,1,62,1,62,
		1,62,3,62,2271,8,62,1,62,1,62,1,62,3,62,2276,8,62,1,62,1,62,1,62,3,62,
		2281,8,62,1,62,1,62,1,62,3,62,2286,8,62,1,62,3,62,2289,8,62,1,63,1,63,
		1,63,3,63,2294,8,63,1,63,4,63,2297,8,63,11,63,12,63,2298,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,3,63,2309,8,63,1,64,1,64,3,64,2313,8,64,1,64,
		1,64,1,64,1,64,1,64,3,64,2320,8,64,1,64,1,64,1,64,3,64,2325,8,64,1,64,
		3,64,2328,8,64,1,64,1,64,1,64,3,64,2333,8,64,1,64,3,64,2336,8,64,1,64,
		1,64,3,64,2340,8,64,1,64,1,64,3,64,2344,8,64,1,65,1,65,1,65,1,65,5,65,
		2350,8,65,10,65,12,65,2353,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,
		1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2371,8,67,1,67,3,67,2374,
		8,67,1,67,3,67,2377,8,67,1,67,1,67,3,67,2381,8,67,1,67,1,67,1,68,1,68,
		1,68,1,68,5,68,2389,8,68,10,68,12,68,2392,9,68,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,5,69,2402,8,69,10,69,12,69,2405,9,69,1,69,1,69,1,70,1,70,
		3,70,2411,8,70,1,70,3,70,2414,8,70,1,70,1,70,1,70,3,70,2419,8,70,1,70,
		1,70,1,70,5,70,2424,8,70,10,70,12,70,2427,9,70,3,70,2429,8,70,1,70,3,70,
		2432,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2443,8,71,
		1,71,3,71,2446,8,71,1,71,1,71,3,71,2450,8,71,1,71,1,71,1,72,1,72,1,72,
		1,72,3,72,2458,8,72,1,72,3,72,2461,8,72,1,72,1,72,1,72,3,72,2466,8,72,
		1,72,1,72,1,72,1,72,1,72,1,72,3,72,2474,8,72,1,72,1,72,1,72,1,72,3,72,
		2480,8,72,1,72,1,72,3,72,2484,8,72,1,73,1,73,3,73,2488,8,73,1,73,5,73,
		2491,8,73,10,73,12,73,2494,9,73,1,73,1,73,3,73,2498,8,73,1,73,1,73,1,73,
		1,73,1,73,3,73,2505,8,73,1,73,1,73,3,73,2509,8,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,5,73,2518,8,73,10,73,12,73,2521,9,73,1,73,1,73,1,73,1,73,
		1,73,3,73,2528,8,73,1,73,3,73,2531,8,73,1,73,1,73,5,73,2535,8,73,10,73,
		12,73,2538,9,73,1,73,1,73,1,73,3,73,2543,8,73,3,73,2545,8,73,1,73,1,73,
		1,73,3,73,2550,8,73,1,73,3,73,2553,8,73,1,73,1,73,5,73,2557,8,73,10,73,
		12,73,2560,9,73,1,73,1,73,1,73,3,73,2565,8,73,3,73,2567,8,73,1,73,1,73,
		3,73,2571,8,73,1,73,3,73,2574,8,73,1,73,3,73,2577,8,73,1,73,1,73,5,73,
		2581,8,73,10,73,12,73,2584,9,73,1,73,1,73,1,73,3,73,2589,8,73,1,73,3,73,
		2592,8,73,1,73,1,73,5,73,2596,8,73,10,73,12,73,2599,9,73,1,73,1,73,1,73,
		3,73,2604,8,73,3,73,2606,8,73,1,73,1,73,1,73,3,73,2611,8,73,1,73,1,73,
		1,73,1,73,1,73,1,73,3,73,2619,8,73,3,73,2621,8,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,3,73,2630,8,73,1,73,1,73,1,73,3,73,2635,8,73,1,73,1,73,
		1,73,1,73,1,73,1,73,3,73,2643,8,73,1,73,1,73,3,73,2647,8,73,1,73,1,73,
		1,73,1,73,1,73,1,73,3,73,2655,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,3,73,2665,8,73,1,73,1,73,1,73,3,73,2670,8,73,1,73,1,73,1,73,1,73,
		1,73,3,73,2677,8,73,1,73,1,73,3,73,2681,8,73,1,73,1,73,3,73,2685,8,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,3,73,2717,8,73,1,73,1,73,3,73,2721,8,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,3,73,2733,8,73,1,73,3,73,2736,8,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,3,73,2745,8,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,2760,8,73,10,73,12,73,2763,
		9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2774,8,73,1,73,
		1,73,1,73,1,73,1,73,3,73,2781,8,73,1,73,1,73,1,73,1,73,1,73,3,73,2788,
		8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,2801,
		8,73,10,73,12,73,2804,9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,3,73,2816,8,73,1,73,1,73,1,73,1,73,3,73,2822,8,73,1,73,1,73,1,73,
		1,73,3,73,2828,8,73,1,73,1,73,1,73,1,73,3,73,2834,8,73,1,73,1,73,1,73,
		1,73,3,73,2840,8,73,1,73,1,73,1,73,1,73,3,73,2846,8,73,1,73,1,73,1,73,
		1,73,1,73,1,73,3,73,2854,8,73,1,73,1,73,1,73,1,73,5,73,2860,8,73,10,73,
		12,73,2863,9,73,1,73,1,73,3,73,2867,8,73,1,74,1,74,1,74,3,74,2872,8,74,
		1,74,1,74,1,75,1,75,1,75,3,75,2879,8,75,1,75,1,75,1,76,1,76,1,76,3,76,
		2886,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2893,8,76,1,76,1,76,1,76,3,76,
		2898,8,76,1,76,5,76,2901,8,76,10,76,12,76,2904,9,76,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,2917,8,78,1,78,1,78,1,79,1,79,
		1,79,3,79,2924,8,79,1,79,1,79,1,80,1,80,1,80,3,80,2931,8,80,1,80,1,80,
		1,81,1,81,3,81,2937,8,81,1,81,1,81,3,81,2941,8,81,1,81,1,81,3,81,2945,
		8,81,1,82,1,82,1,82,1,82,1,82,3,82,2952,8,82,1,82,3,82,2955,8,82,1,83,
		1,83,1,83,3,83,2960,8,83,1,83,1,83,1,84,1,84,1,84,3,84,2967,8,84,1,84,
		1,84,1,84,5,84,2972,8,84,10,84,12,84,2975,9,84,1,84,3,84,2978,8,84,1,85,
		1,85,1,85,3,85,2983,8,85,1,85,1,85,1,85,5,85,2988,8,85,10,85,12,85,2991,
		9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,3001,8,86,10,86,12,86,
		3004,9,86,3,86,3006,8,86,1,86,1,86,1,86,3,86,3011,8,86,1,86,1,86,1,86,
		3,86,3016,8,86,5,86,3018,8,86,10,86,12,86,3021,9,86,1,86,1,86,1,86,3,86,
		3026,8,86,1,87,1,87,1,87,1,87,1,87,5,87,3033,8,87,10,87,12,87,3036,9,87,
		1,88,1,88,1,88,1,88,1,89,1,89,3,89,3044,8,89,1,89,1,89,1,90,1,90,1,90,
		1,90,1,90,3,90,3053,8,90,1,90,3,90,3056,8,90,1,91,1,91,3,91,3060,8,91,
		1,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,3069,8,93,1,94,1,94,3,94,3073,
		8,94,1,94,3,94,3076,8,94,1,94,3,94,3079,8,94,1,94,1,94,1,94,1,94,3,94,
		3085,8,94,1,94,3,94,3088,8,94,1,94,1,94,1,94,1,94,3,94,3094,8,94,1,94,
		1,94,1,94,1,94,1,94,5,94,3101,8,94,10,94,12,94,3104,9,94,3,94,3106,8,94,
		1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,3115,8,94,10,94,12,94,3118,9,94,
		3,94,3120,8,94,1,95,1,95,1,95,3,95,3125,8,95,1,95,3,95,3128,8,95,1,95,
		1,95,1,95,3,95,3133,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
		3143,8,95,1,95,1,95,1,95,3,95,3148,8,95,1,95,1,95,4,95,3152,8,95,11,95,
		12,95,3153,3,95,3156,8,95,1,95,1,95,4,95,3160,8,95,11,95,12,95,3161,3,
		95,3164,8,95,1,95,1,95,1,95,1,95,3,95,3170,8,95,1,95,1,95,1,95,1,95,5,
		95,3176,8,95,10,95,12,95,3179,9,95,1,95,1,95,3,95,3183,8,95,1,95,1,95,
		1,95,1,95,5,95,3189,8,95,10,95,12,95,3192,9,95,3,95,3194,8,95,1,96,1,96,
		1,96,3,96,3199,8,96,1,96,3,96,3202,8,96,1,96,1,96,1,96,3,96,3207,8,96,
		1,96,1,96,1,96,1,96,1,96,1,96,3,96,3215,8,96,1,96,1,96,1,96,1,96,1,96,
		1,96,3,96,3223,8,96,1,96,1,96,1,96,1,96,3,96,3229,8,96,1,96,1,96,1,96,
		1,96,5,96,3235,8,96,10,96,12,96,3238,9,96,1,96,1,96,3,96,3242,8,96,1,96,
		1,96,1,96,1,96,5,96,3248,8,96,10,96,12,96,3251,9,96,3,96,3253,8,96,1,97,
		1,97,3,97,3257,8,97,1,97,3,97,3260,8,97,1,97,1,97,1,97,1,97,1,97,1,97,
		3,97,3268,8,97,1,97,1,97,1,97,1,97,3,97,3274,8,97,1,97,1,97,1,97,1,97,
		1,97,5,97,3281,8,97,10,97,12,97,3284,9,97,3,97,3286,8,97,1,98,1,98,3,98,
		3290,8,98,1,98,1,98,3,98,3294,8,98,1,98,1,98,4,98,3298,8,98,11,98,12,98,
		3299,1,98,1,98,3,98,3304,8,98,1,98,1,98,3,98,3308,8,98,3,98,3310,8,98,
		1,98,3,98,3313,8,98,1,98,3,98,3316,8,98,1,98,3,98,3319,8,98,1,98,1,98,
		4,98,3323,8,98,11,98,12,98,3324,1,98,1,98,3,98,3329,8,98,1,98,3,98,3332,
		8,98,1,98,3,98,3335,8,98,1,98,3,98,3338,8,98,1,98,3,98,3341,8,98,1,98,
		1,98,1,98,4,98,3346,8,98,11,98,12,98,3347,3,98,3350,8,98,1,99,1,99,3,99,
		3354,8,99,1,100,1,100,1,100,1,100,3,100,3360,8,100,1,100,1,100,1,100,1,
		100,3,100,3366,8,100,1,100,5,100,3369,8,100,10,100,12,100,3372,9,100,3,
		100,3374,8,100,1,101,1,101,1,101,1,101,3,101,3380,8,101,1,102,1,102,3,
		102,3384,8,102,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3392,8,103,1,
		104,1,104,3,104,3396,8,104,1,104,3,104,3399,8,104,1,104,3,104,3402,8,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,3411,8,104,1,104,1,104,
		3,104,3415,8,104,1,104,3,104,3418,8,104,1,104,1,104,3,104,3422,8,104,1,
		105,1,105,3,105,3426,8,105,1,105,3,105,3429,8,105,1,105,3,105,3432,8,105,
		1,105,1,105,1,105,3,105,3437,8,105,1,105,1,105,1,105,1,105,3,105,3443,
		8,105,5,105,3445,8,105,10,105,12,105,3448,9,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,3,105,3457,8,105,1,105,1,105,1,105,1,105,3,105,3463,
		8,105,5,105,3465,8,105,10,105,12,105,3468,9,105,1,105,1,105,1,105,3,105,
		3473,8,105,1,105,1,105,3,105,3477,8,105,1,106,1,106,1,106,1,106,3,106,
		3483,8,106,1,106,3,106,3486,8,106,1,107,1,107,1,107,1,107,1,107,1,107,
		1,107,1,107,1,107,1,107,3,107,3498,8,107,1,107,1,107,3,107,3502,8,107,
		1,107,1,107,3,107,3506,8,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
		3514,8,108,1,108,1,108,3,108,3518,8,108,1,109,1,109,1,109,1,109,1,110,
		1,110,3,110,3526,8,110,1,110,3,110,3529,8,110,1,110,1,110,3,110,3533,8,
		110,1,110,3,110,3536,8,110,1,110,1,110,1,110,1,110,5,110,3542,8,110,10,
		110,12,110,3545,9,110,1,110,1,110,3,110,3549,8,110,1,110,3,110,3552,8,
		110,1,110,3,110,3555,8,110,1,111,1,111,3,111,3559,8,111,1,111,3,111,3562,
		8,111,1,111,1,111,1,111,1,111,1,111,5,111,3569,8,111,10,111,12,111,3572,
		9,111,1,111,1,111,3,111,3576,8,111,1,112,1,112,1,112,1,112,1,112,5,112,
		3583,8,112,10,112,12,112,3586,9,112,1,113,1,113,3,113,3590,8,113,1,114,
		1,114,1,114,5,114,3595,8,114,10,114,12,114,3598,9,114,1,115,1,115,5,115,
		3602,8,115,10,115,12,115,3605,9,115,1,115,1,115,1,115,5,115,3610,8,115,
		10,115,12,115,3613,9,115,1,115,1,115,1,115,3,115,3618,8,115,1,116,1,116,
		1,116,1,116,1,116,1,116,3,116,3626,8,116,1,116,3,116,3629,8,116,1,116,
		3,116,3632,8,116,1,116,1,116,1,116,5,116,3637,8,116,10,116,12,116,3640,
		9,116,3,116,3642,8,116,1,116,1,116,1,116,1,116,1,116,3,116,3649,8,116,
		1,116,3,116,3652,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,3660,
		8,116,1,117,1,117,1,117,1,117,3,117,3666,8,117,1,117,1,117,1,117,1,117,
		1,118,1,118,1,118,1,118,1,118,3,118,3677,8,118,1,119,3,119,3680,8,119,
		1,119,1,119,3,119,3684,8,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,3,119,3694,8,119,1,119,1,119,1,119,1,119,3,119,3700,8,119,1,119,
		1,119,3,119,3704,8,119,1,119,1,119,3,119,3708,8,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,3,119,3718,8,119,1,119,1,119,1,119,3,119,
		3723,8,119,3,119,3725,8,119,1,119,1,119,3,119,3729,8,119,1,120,1,120,1,
		120,1,120,1,120,1,120,1,120,1,120,3,120,3739,8,120,1,121,1,121,1,121,1,
		121,1,121,1,121,1,121,1,121,3,121,3749,8,121,1,122,1,122,5,122,3753,8,
		122,10,122,12,122,3756,9,122,1,122,1,122,3,122,3760,8,122,1,122,3,122,
		3763,8,122,1,122,3,122,3766,8,122,1,122,3,122,3769,8,122,1,122,3,122,3772,
		8,122,1,122,3,122,3775,8,122,1,122,3,122,3778,8,122,1,122,1,122,5,122,
		3782,8,122,10,122,12,122,3785,9,122,1,122,1,122,3,122,3789,8,122,1,122,
		3,122,3792,8,122,1,122,3,122,3795,8,122,1,122,3,122,3798,8,122,1,122,3,
		122,3801,8,122,1,122,3,122,3804,8,122,1,122,3,122,3807,8,122,3,122,3809,
		8,122,1,123,1,123,5,123,3813,8,123,10,123,12,123,3816,9,123,1,123,1,123,
		3,123,3820,8,123,1,123,3,123,3823,8,123,1,123,3,123,3826,8,123,1,123,3,
		123,3829,8,123,1,123,3,123,3832,8,123,1,123,3,123,3835,8,123,1,124,1,124,
		3,124,3839,8,124,1,124,1,124,1,125,1,125,3,125,3845,8,125,1,125,1,125,
		3,125,3849,8,125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3857,8,126,
		1,126,1,126,3,126,3861,8,126,1,126,3,126,3864,8,126,3,126,3866,8,126,1,
		127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,
		3879,8,127,1,127,3,127,3882,8,127,1,128,1,128,1,128,5,128,3887,8,128,10,
		128,12,128,3890,9,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
		3899,8,129,1,129,3,129,3902,8,129,1,129,1,129,1,129,3,129,3907,8,129,3,
		129,3909,8,129,1,129,1,129,3,129,3913,8,129,1,129,1,129,1,129,1,129,1,
		129,1,129,3,129,3921,8,129,1,130,1,130,1,130,1,130,3,130,3927,8,130,1,
		130,1,130,1,130,1,131,1,131,1,131,1,131,3,131,3936,8,131,1,131,1,131,1,
		131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,3949,8,132,1,
		133,1,133,3,133,3953,8,133,1,133,1,133,5,133,3957,8,133,10,133,12,133,
		3960,9,133,1,134,1,134,1,134,1,134,1,134,1,134,3,134,3968,8,134,1,134,
		3,134,3971,8,134,1,134,1,134,3,134,3975,8,134,1,134,3,134,3978,8,134,1,
		134,1,134,3,134,3982,8,134,1,134,1,134,3,134,3986,8,134,1,134,3,134,3989,
		8,134,3,134,3991,8,134,1,135,1,135,1,135,1,135,5,135,3997,8,135,10,135,
		12,135,4000,9,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
		3,135,4011,8,135,1,135,1,135,4,135,4015,8,135,11,135,12,135,4016,3,135,
		4019,8,135,1,135,1,135,4,135,4023,8,135,11,135,12,135,4024,3,135,4027,
		8,135,3,135,4029,8,135,1,136,1,136,1,136,1,136,3,136,4035,8,136,1,136,
		1,136,1,136,1,136,1,136,1,136,3,136,4043,8,136,1,137,1,137,1,137,1,137,
		1,137,1,137,3,137,4051,8,137,1,138,1,138,3,138,4055,8,138,1,138,1,138,
		3,138,4059,8,138,1,139,1,139,1,139,1,139,1,139,5,139,4066,8,139,10,139,
		12,139,4069,9,139,1,139,1,139,3,139,4073,8,139,1,140,1,140,1,140,1,141,
		1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
		5,141,4091,8,141,10,141,12,141,4094,9,141,1,142,1,142,3,142,4098,8,142,
		1,143,1,143,1,143,1,143,3,143,4104,8,143,1,143,1,143,1,143,1,143,1,143,
		3,143,4111,8,143,1,144,1,144,1,144,3,144,4116,8,144,1,145,1,145,1,145,
		1,145,1,145,5,145,4123,8,145,10,145,12,145,4126,9,145,3,145,4128,8,145,
		1,146,1,146,3,146,4132,8,146,1,147,1,147,3,147,4136,8,147,1,147,1,147,
		3,147,4140,8,147,1,147,3,147,4143,8,147,1,147,3,147,4146,8,147,1,147,3,
		147,4149,8,147,1,148,1,148,3,148,4153,8,148,1,148,1,148,3,148,4157,8,148,
		1,148,3,148,4160,8,148,1,148,3,148,4163,8,148,1,148,3,148,4166,8,148,1,
		149,1,149,1,149,1,150,1,150,3,150,4173,8,150,1,150,1,150,3,150,4177,8,
		150,1,150,1,150,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,152,1,152,
		5,152,4190,8,152,10,152,12,152,4193,9,152,1,152,3,152,4196,8,152,1,153,
		1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,155,1,155,3,155,4208,8,155,
		1,155,1,155,1,155,1,155,5,155,4214,8,155,10,155,12,155,4217,9,155,1,156,
		1,156,1,156,1,156,1,156,1,156,1,156,3,156,4226,8,156,1,157,1,157,3,157,
		4230,8,157,1,157,3,157,4233,8,157,1,157,1,157,1,158,1,158,3,158,4239,8,
		158,1,158,3,158,4242,8,158,1,158,3,158,4245,8,158,1,159,1,159,1,159,1,
		159,1,159,1,159,1,159,3,159,4254,8,159,1,160,1,160,1,160,1,160,1,160,1,
		160,1,160,3,160,4263,8,160,1,161,1,161,1,161,1,161,1,161,1,161,5,161,4271,
		8,161,10,161,12,161,4274,9,161,1,161,3,161,4277,8,161,1,162,1,162,1,162,
		1,162,1,162,1,162,5,162,4285,8,162,10,162,12,162,4288,9,162,1,163,1,163,
		1,163,1,163,1,163,1,163,1,163,3,163,4297,8,163,1,164,1,164,1,164,1,165,
		1,165,1,165,3,165,4305,8,165,1,165,3,165,4308,8,165,1,166,1,166,1,166,
		1,166,1,166,5,166,4315,8,166,10,166,12,166,4318,9,166,3,166,4320,8,166,
		1,166,1,166,3,166,4324,8,166,1,166,5,166,4327,8,166,10,166,12,166,4330,
		9,166,1,166,3,166,4333,8,166,1,167,1,167,1,167,1,167,1,167,5,167,4340,
		8,167,10,167,12,167,4343,9,167,3,167,4345,8,167,1,168,1,168,1,168,1,169,
		1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
		1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,5,170,
		4374,8,170,10,170,12,170,4377,9,170,3,170,4379,8,170,1,170,3,170,4382,
		8,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,174,1,174,1,175,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,5,175,4436,8,175,10,175,12,175,4439,9,175,
		1,175,1,175,3,175,4443,8,175,1,176,1,176,1,176,1,176,1,176,1,176,1,177,
		1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,4471,8,178,1,179,1,179,
		1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,4485,
		8,179,1,180,1,180,1,180,5,180,4490,8,180,10,180,12,180,4493,9,180,1,180,
		3,180,4496,8,180,1,181,1,181,1,181,1,181,3,181,4502,8,181,1,182,1,182,
		1,182,1,182,1,182,1,182,3,182,4510,8,182,3,182,4512,8,182,1,183,1,183,
		1,183,1,183,1,184,1,184,1,184,1,184,1,184,3,184,4523,8,184,1,185,1,185,
		1,185,1,185,1,186,1,186,1,186,1,186,3,186,4533,8,186,1,187,1,187,1,187,
		1,187,1,187,3,187,4540,8,187,1,188,1,188,1,188,1,188,3,188,4546,8,188,
		1,189,1,189,1,189,1,189,1,190,1,190,3,190,4554,8,190,1,191,1,191,1,191,
		3,191,4559,8,191,1,191,1,191,1,191,1,191,5,191,4565,8,191,10,191,12,191,
		4568,9,191,1,191,1,191,1,191,5,191,4573,8,191,10,191,12,191,4576,9,191,
		1,191,1,191,1,191,5,191,4581,8,191,10,191,12,191,4584,9,191,1,191,1,191,
		1,191,5,191,4589,8,191,10,191,12,191,4592,9,191,1,191,5,191,4595,8,191,
		10,191,12,191,4598,9,191,3,191,4600,8,191,1,191,1,191,3,191,4604,8,191,
		1,192,1,192,1,192,3,192,4609,8,192,1,192,4,192,4612,8,192,11,192,12,192,
		4613,1,192,1,192,4,192,4618,8,192,11,192,12,192,4619,3,192,4622,8,192,
		1,192,1,192,1,192,1,193,1,193,1,193,1,193,4,193,4631,8,193,11,193,12,193,
		4632,1,193,5,193,4636,8,193,10,193,12,193,4639,9,193,1,193,1,193,4,193,
		4643,8,193,11,193,12,193,4644,3,193,4647,8,193,1,193,1,193,1,193,1,194,
		1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,3,196,4661,8,196,1,196,
		1,196,4,196,4665,8,196,11,196,12,196,4666,1,196,1,196,1,196,3,196,4672,
		8,196,1,197,1,197,1,197,3,197,4677,8,197,1,197,1,197,4,197,4681,8,197,
		11,197,12,197,4682,1,197,1,197,1,197,1,197,1,197,3,197,4690,8,197,1,198,
		1,198,1,198,1,199,1,199,1,199,3,199,4698,8,199,1,199,1,199,1,199,1,199,
		4,199,4704,8,199,11,199,12,199,4705,1,199,1,199,1,199,3,199,4711,8,199,
		1,200,1,200,1,200,1,200,3,200,4717,8,200,1,200,3,200,4720,8,200,1,200,
		1,200,1,200,1,200,1,200,1,200,3,200,4728,8,200,1,201,1,201,1,201,1,201,
		1,201,3,201,4735,8,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,
		4744,8,202,1,202,3,202,4747,8,202,1,203,1,203,1,203,1,203,1,203,1,203,
		1,204,1,204,1,204,1,204,1,204,1,204,1,204,5,204,4762,8,204,10,204,12,204,
		4765,9,204,1,204,1,204,1,205,1,205,1,205,3,205,4772,8,205,1,205,1,205,
		1,205,1,205,1,205,1,205,3,205,4780,8,205,1,206,1,206,3,206,4784,8,206,
		1,206,1,206,1,207,1,207,1,207,3,207,4791,8,207,1,207,1,207,4,207,4795,
		8,207,11,207,12,207,4796,1,208,1,208,1,208,1,208,4,208,4803,8,208,11,208,
		12,208,4804,1,209,1,209,1,209,1,209,1,209,5,209,4812,8,209,10,209,12,209,
		4815,9,209,1,209,1,209,1,209,3,209,4820,8,209,1,209,1,209,1,209,5,209,
		4825,8,209,10,209,12,209,4828,9,209,1,209,1,209,1,209,1,209,3,209,4834,
		8,209,1,209,5,209,4837,8,209,10,209,12,209,4840,9,209,3,209,4842,8,209,
		3,209,4844,8,209,1,209,1,209,4,209,4848,8,209,11,209,12,209,4849,3,209,
		4852,8,209,1,209,1,209,5,209,4856,8,209,10,209,12,209,4859,9,209,1,209,
		1,209,1,209,1,209,3,209,4865,8,209,3,209,4867,8,209,1,210,1,210,1,210,
		1,210,1,210,5,210,4874,8,210,10,210,12,210,4877,9,210,1,210,1,210,1,210,
		3,210,4882,8,210,1,210,1,210,1,210,5,210,4887,8,210,10,210,12,210,4890,
		9,210,1,210,1,210,1,210,1,210,3,210,4896,8,210,1,210,5,210,4899,8,210,
		10,210,12,210,4902,9,210,3,210,4904,8,210,3,210,4906,8,210,1,210,1,210,
		4,210,4910,8,210,11,210,12,210,4911,3,210,4914,8,210,1,210,1,210,5,210,
		4918,8,210,10,210,12,210,4921,9,210,1,210,1,210,1,210,1,210,3,210,4927,
		8,210,3,210,4929,8,210,1,211,1,211,1,211,3,211,4934,8,211,1,211,1,211,
		1,211,5,211,4939,8,211,10,211,12,211,4942,9,211,1,212,1,212,1,212,1,212,
		5,212,4948,8,212,10,212,12,212,4951,9,212,1,212,1,212,3,212,4955,8,212,
		1,212,1,212,1,212,1,212,1,212,5,212,4962,8,212,10,212,12,212,4965,9,212,
		1,212,1,212,1,212,1,212,3,212,4971,8,212,1,212,5,212,4974,8,212,10,212,
		12,212,4977,9,212,3,212,4979,8,212,3,212,4981,8,212,1,212,1,212,1,212,
		1,212,5,212,4987,8,212,10,212,12,212,4990,9,212,3,212,4992,8,212,1,212,
		1,212,1,212,1,212,1,212,1,212,3,212,5000,8,212,1,212,1,212,1,212,3,212,
		5005,8,212,1,212,1,212,1,212,3,212,5010,8,212,5,212,5012,8,212,10,212,
		12,212,5015,9,212,1,212,1,212,1,212,3,212,5020,8,212,1,212,1,212,1,212,
		3,212,5025,8,212,5,212,5027,8,212,10,212,12,212,5030,9,212,1,212,1,212,
		1,212,3,212,5035,8,212,3,212,5037,8,212,1,213,1,213,1,213,1,213,1,213,
		1,213,1,213,5,213,5046,8,213,10,213,12,213,5049,9,213,3,213,5051,8,213,
		1,213,1,213,1,213,5,213,5056,8,213,10,213,12,213,5059,9,213,3,213,5061,
		8,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,5,214,5071,8,214,
		10,214,12,214,5074,9,214,1,214,1,214,1,214,3,214,5079,8,214,1,215,1,215,
		1,215,1,215,1,215,5,215,5086,8,215,10,215,12,215,5089,9,215,1,216,1,216,
		1,216,1,216,5,216,5095,8,216,10,216,12,216,5098,9,216,1,216,1,216,3,216,
		5102,8,216,1,216,1,216,1,216,1,216,1,216,5,216,5109,8,216,10,216,12,216,
		5112,9,216,1,216,1,216,1,216,3,216,5117,8,216,1,216,1,216,1,216,1,216,
		1,216,1,216,1,216,5,216,5126,8,216,10,216,12,216,5129,9,216,1,216,1,216,
		1,216,1,216,5,216,5135,8,216,10,216,12,216,5138,9,216,1,216,1,216,1,216,
		3,216,5143,8,216,1,216,1,216,1,216,3,216,5148,8,216,5,216,5150,8,216,10,
		216,12,216,5153,9,216,3,216,5155,8,216,1,217,1,217,1,217,1,217,1,217,1,
		217,1,217,1,217,5,217,5165,8,217,10,217,12,217,5168,9,217,1,218,1,218,
		1,218,1,218,3,218,5174,8,218,1,218,1,218,1,218,3,218,5179,8,218,1,219,
		1,219,1,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
		1,220,1,220,1,220,3,220,5197,8,220,1,220,1,220,1,220,1,220,1,220,1,220,
		3,220,5205,8,220,1,221,1,221,1,221,3,221,5210,8,221,1,221,1,221,1,221,
		1,221,3,221,5216,8,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
		3,222,5226,8,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
		5236,8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,5246,
		8,224,1,224,1,224,1,224,1,224,3,224,5252,8,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,3,224,5261,8,224,1,224,1,224,1,224,1,224,3,224,5267,
		8,224,1,224,1,224,1,224,1,224,1,224,3,224,5274,8,224,3,224,5276,8,224,
		1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,3,226,5286,8,226,1,227,
		1,227,3,227,5290,8,227,1,227,1,227,3,227,5294,8,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,3,227,5304,8,227,1,227,1,227,1,227,3,227,
		5309,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5376,8,227,1,228,1,228,
		1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
		1,228,1,228,3,228,5394,8,228,1,229,1,229,1,229,1,229,1,230,1,230,3,230,
		5402,8,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,5,230,5412,
		8,230,10,230,12,230,5415,9,230,1,230,1,230,1,230,1,230,3,230,5421,8,230,
		3,230,5423,8,230,1,230,1,230,1,230,1,230,1,230,1,230,5,230,5431,8,230,
		10,230,12,230,5434,9,230,3,230,5436,8,230,1,231,1,231,1,231,1,231,5,231,
		5442,8,231,10,231,12,231,5445,9,231,1,232,1,232,1,232,1,232,3,232,5451,
		8,232,1,233,1,233,3,233,5455,8,233,1,233,1,233,1,233,1,234,1,234,3,234,
		5462,8,234,1,234,1,234,1,234,3,234,5467,8,234,1,234,3,234,5470,8,234,1,
		234,3,234,5473,8,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,5482,
		8,235,1,236,1,236,3,236,5486,8,236,1,236,1,236,3,236,5490,8,236,1,236,
		1,236,1,236,1,236,1,236,1,236,1,237,1,237,1,237,1,237,1,237,1,237,1,238,
		1,238,1,238,1,238,1,239,1,239,1,239,1,239,1,239,3,239,5513,8,239,1,239,
		1,239,1,239,1,239,1,239,3,239,5520,8,239,5,239,5522,8,239,10,239,12,239,
		5525,9,239,1,239,1,239,1,239,1,239,3,239,5531,8,239,1,239,1,239,1,239,
		1,239,1,239,3,239,5538,8,239,1,239,3,239,5541,8,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,5,239,5555,8,239,
		10,239,12,239,5558,9,239,3,239,5560,8,239,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,3,240,5570,8,240,1,240,1,240,3,240,5574,8,240,1,240,
		1,240,1,240,1,240,3,240,5580,8,240,1,240,3,240,5583,8,240,1,240,1,240,
		1,240,3,240,5588,8,240,1,240,1,240,3,240,5592,8,240,1,240,1,240,1,240,
		1,240,1,240,3,240,5599,8,240,1,240,3,240,5602,8,240,1,240,1,240,1,240,
		1,240,3,240,5608,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,3,240,5632,8,240,1,240,3,240,5635,8,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,5647,8,240,1,240,3,240,
		5650,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,5660,
		8,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,5668,8,240,1,240,1,240,
		3,240,5672,8,240,1,240,1,240,1,240,1,240,1,240,3,240,5679,8,240,1,240,
		3,240,5682,8,240,1,240,1,240,1,240,1,240,1,240,5,240,5689,8,240,10,240,
		12,240,5692,9,240,1,240,1,240,1,240,3,240,5697,8,240,1,240,1,240,1,240,
		1,240,3,240,5703,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		3,240,5713,8,240,3,240,5715,8,240,1,241,1,241,1,241,1,241,3,241,5721,8,
		241,1,241,3,241,5724,8,241,1,241,3,241,5727,8,241,1,242,1,242,1,242,1,
		242,1,242,1,242,1,242,1,242,1,242,1,242,3,242,5739,8,242,1,242,3,242,5742,
		8,242,1,243,1,243,1,243,1,243,3,243,5748,8,243,1,244,3,244,5751,8,244,
		1,244,1,244,1,244,1,244,1,244,1,244,3,244,5759,8,244,1,244,1,244,1,244,
		1,244,1,244,1,244,3,244,5767,8,244,1,245,1,245,1,245,1,245,3,245,5773,
		8,245,1,245,1,245,3,245,5777,8,245,1,246,1,246,1,246,1,246,1,246,1,246,
		1,246,1,246,1,246,1,246,1,246,1,246,3,246,5791,8,246,1,247,1,247,1,247,
		1,248,1,248,1,248,1,248,1,248,5,248,5801,8,248,10,248,12,248,5804,9,248,
		1,248,1,248,1,248,1,248,3,248,5810,8,248,1,248,3,248,5813,8,248,1,248,
		1,248,1,248,1,249,1,249,3,249,5820,8,249,1,249,1,249,1,249,5,249,5825,
		8,249,10,249,12,249,5828,9,249,1,250,1,250,3,250,5832,8,250,1,250,1,250,
		1,251,1,251,1,251,1,251,1,251,1,251,1,251,5,251,5843,8,251,10,251,12,251,
		5846,9,251,1,252,1,252,1,252,1,252,1,253,1,253,1,254,1,254,3,254,5856,
		8,254,1,254,1,254,1,254,1,254,3,254,5862,8,254,1,255,1,255,1,255,3,255,
		5867,8,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
		1,255,3,255,5880,8,255,3,255,5882,8,255,1,255,1,255,1,255,3,255,5887,8,
		255,1,255,1,255,3,255,5891,8,255,1,255,3,255,5894,8,255,3,255,5896,8,255,
		1,256,1,256,1,256,1,256,1,256,3,256,5903,8,256,1,257,1,257,1,257,1,257,
		1,257,3,257,5910,8,257,1,257,3,257,5913,8,257,1,257,3,257,5916,8,257,1,
		257,1,257,1,257,1,257,3,257,5922,8,257,1,257,1,257,3,257,5926,8,257,1,
		258,1,258,1,258,1,258,3,258,5932,8,258,1,259,1,259,1,259,1,259,3,259,5938,
		8,259,1,259,1,259,1,260,1,260,1,260,1,261,1,261,1,261,1,262,1,262,1,262,
		3,262,5951,8,262,1,262,1,262,1,262,3,262,5956,8,262,1,262,1,262,1,262,
		1,262,5,262,5962,8,262,10,262,12,262,5965,9,262,3,262,5967,8,262,1,263,
		1,263,1,263,3,263,5972,8,263,1,263,1,263,1,263,3,263,5977,8,263,1,263,
		1,263,1,263,1,263,5,263,5983,8,263,10,263,12,263,5986,9,263,3,263,5988,
		8,263,1,264,1,264,1,264,1,264,1,264,1,264,3,264,5996,8,264,1,265,1,265,
		3,265,6000,8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
		5,265,6011,8,265,10,265,12,265,6014,9,265,1,265,1,265,1,265,3,265,6019,
		8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,5,265,6029,8,265,
		10,265,12,265,6032,9,265,3,265,6034,8,265,1,266,1,266,1,267,1,267,1,267,
		1,267,1,267,3,267,6043,8,267,1,267,1,267,1,267,3,267,6048,8,267,1,268,
		1,268,1,268,1,268,3,268,6054,8,268,1,269,1,269,1,270,1,270,3,270,6060,
		8,270,1,271,1,271,1,271,3,271,6065,8,271,3,271,6067,8,271,1,271,3,271,
		6070,8,271,1,271,1,271,3,271,6074,8,271,3,271,6076,8,271,1,272,1,272,3,
		272,6080,8,272,1,272,1,272,1,272,1,272,3,272,6086,8,272,1,272,3,272,6089,
		8,272,1,272,3,272,6092,8,272,1,273,1,273,1,273,1,273,1,273,3,273,6099,
		8,273,1,274,1,274,1,275,1,275,1,275,1,275,3,275,6107,8,275,1,276,1,276,
		3,276,6111,8,276,1,277,1,277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
		1,278,1,278,1,278,1,278,1,278,1,278,1,278,4,278,6129,8,278,11,278,12,278,
		6130,1,279,1,279,1,279,1,279,1,279,3,279,6138,8,279,3,279,6140,8,279,1,
		280,1,280,1,280,4,280,6145,8,280,11,280,12,280,6146,3,280,6149,8,280,1,
		281,1,281,3,281,6153,8,281,1,282,1,282,1,282,3,282,6158,8,282,1,283,1,
		283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,6169,8,283,1,284,1,
		284,1,284,3,284,6174,8,284,1,285,1,285,1,286,1,286,3,286,6180,8,286,1,
		287,3,287,6183,8,287,1,287,1,287,3,287,6187,8,287,1,287,4,287,6190,8,287,
		11,287,12,287,6191,1,287,3,287,6195,8,287,1,287,1,287,3,287,6199,8,287,
		1,287,1,287,3,287,6203,8,287,3,287,6205,8,287,1,288,1,288,1,289,3,289,
		6210,8,289,1,289,1,289,1,290,3,290,6215,8,290,1,290,1,290,1,291,1,291,
		1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,6228,8,291,1,291,3,291,
		6231,8,291,1,292,1,292,3,292,6235,8,292,1,292,3,292,6238,8,292,1,292,3,
		292,6241,8,292,1,292,1,292,1,292,3,292,6246,8,292,1,292,1,292,1,292,3,
		292,6251,8,292,1,292,1,292,1,292,3,292,6256,8,292,1,292,3,292,6259,8,292,
		1,292,1,292,1,292,3,292,6264,8,292,1,292,3,292,6267,8,292,1,292,1,292,
		1,292,1,292,3,292,6273,8,292,1,292,3,292,6276,8,292,1,292,1,292,3,292,
		6280,8,292,1,292,5,292,6283,8,292,10,292,12,292,6286,9,292,1,292,1,292,
		3,292,6290,8,292,1,292,5,292,6293,8,292,10,292,12,292,6296,9,292,1,292,
		1,292,3,292,6300,8,292,1,292,3,292,6303,8,292,1,292,5,292,6306,8,292,10,
		292,12,292,6309,9,292,1,292,1,292,3,292,6313,8,292,1,292,5,292,6316,8,
		292,10,292,12,292,6319,9,292,1,292,1,292,1,292,3,292,6324,8,292,1,292,
		1,292,1,292,3,292,6329,8,292,1,292,1,292,1,292,3,292,6334,8,292,1,292,
		1,292,1,292,3,292,6339,8,292,1,292,3,292,6342,8,292,1,292,1,292,1,292,
		3,292,6347,8,292,1,292,1,292,3,292,6351,8,292,1,292,1,292,3,292,6355,8,
		292,1,293,1,293,1,293,1,293,5,293,6361,8,293,10,293,12,293,6364,9,293,
		1,293,1,293,1,294,1,294,3,294,6370,8,294,1,294,1,294,3,294,6374,8,294,
		1,294,1,294,1,294,3,294,6379,8,294,1,294,1,294,1,294,3,294,6384,8,294,
		1,294,1,294,3,294,6388,8,294,3,294,6390,8,294,1,294,3,294,6393,8,294,1,
		295,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,296,1,296,1,297,1,297,
		1,297,1,297,3,297,6409,8,297,1,297,1,297,1,298,1,298,1,298,5,298,6416,
		8,298,10,298,12,298,6419,9,298,1,299,1,299,1,299,5,299,6424,8,299,10,299,
		12,299,6427,9,299,1,300,1,300,1,300,5,300,6432,8,300,10,300,12,300,6435,
		9,300,1,301,1,301,1,301,1,301,5,301,6441,8,301,10,301,12,301,6444,9,301,
		1,301,1,301,1,302,1,302,1,302,5,302,6451,8,302,10,302,12,302,6454,9,302,
		1,303,1,303,1,303,5,303,6459,8,303,10,303,12,303,6462,9,303,1,304,1,304,
		1,304,5,304,6467,8,304,10,304,12,304,6470,9,304,1,305,1,305,1,305,5,305,
		6475,8,305,10,305,12,305,6478,9,305,1,306,1,306,1,306,5,306,6483,8,306,
		10,306,12,306,6486,9,306,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,
		1,307,3,307,6497,8,307,1,307,1,307,1,307,1,307,1,307,3,307,6504,8,307,
		1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,6514,8,307,1,308,
		1,308,1,308,3,308,6519,8,308,1,308,3,308,6522,8,308,1,308,1,308,1,308,
		3,308,6527,8,308,1,308,3,308,6530,8,308,1,309,1,309,3,309,6534,8,309,1,
		310,1,310,1,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,
		1,313,3,313,6549,8,313,1,314,1,314,1,314,1,314,1,314,1,314,3,314,6557,
		8,314,1,314,1,314,1,314,1,314,1,314,3,314,6564,8,314,1,314,1,314,1,314,
		3,314,6569,8,314,1,315,1,315,1,315,3,315,6574,8,315,1,315,1,315,1,315,
		1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
		1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
		1,315,1,315,4,315,6605,8,315,11,315,12,315,6606,1,315,1,315,3,315,6611,
		8,315,1,315,1,315,1,315,1,315,4,315,6617,8,315,11,315,12,315,6618,1,315,
		1,315,3,315,6623,8,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,
		6632,8,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6640,8,315,1,315,
		1,315,1,315,3,315,6645,8,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,
		6653,8,315,1,315,1,315,1,315,3,315,6658,8,315,1,315,1,315,1,315,3,315,
		6663,8,315,3,315,6665,8,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
		3,315,6674,8,315,1,315,1,315,1,315,3,315,6679,8,315,1,315,1,315,1,315,
		1,315,1,315,1,315,3,315,6687,8,315,1,315,1,315,1,315,3,315,6692,8,315,
		1,315,1,315,1,315,1,315,1,315,1,315,3,315,6700,8,315,1,315,1,315,1,315,
		1,315,1,315,1,315,3,315,6708,8,315,1,315,3,315,6711,8,315,1,315,1,315,
		1,315,1,315,1,315,1,315,1,315,1,315,3,315,6721,8,315,1,315,1,315,1,315,
		1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
		1,315,3,315,6739,8,315,1,315,3,315,6742,8,315,1,315,3,315,6745,8,315,1,
		315,1,315,3,315,6749,8,315,1,316,1,316,1,316,1,316,1,316,1,317,1,317,1,
		317,1,317,5,317,6760,8,317,10,317,12,317,6763,9,317,1,317,1,317,1,317,
		1,317,1,317,3,317,6770,8,317,1,318,1,318,3,318,6774,8,318,1,319,1,319,
		1,319,3,319,6779,8,319,1,319,1,319,1,319,3,319,6784,8,319,1,319,1,319,
		1,319,1,319,3,319,6790,8,319,1,319,1,319,1,319,3,319,6795,8,319,1,319,
		1,319,3,319,6799,8,319,1,319,1,319,1,319,3,319,6804,8,319,1,319,1,319,
		1,319,3,319,6809,8,319,1,319,1,319,1,319,3,319,6814,8,319,1,319,1,319,
		1,319,1,319,1,319,1,319,5,319,6822,8,319,10,319,12,319,6825,9,319,3,319,
		6827,8,319,1,319,1,319,3,319,6831,8,319,1,319,1,319,3,319,6835,8,319,1,
		320,1,320,1,320,1,320,1,320,3,320,6842,8,320,1,320,1,320,3,320,6846,8,
		320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
		1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
		1,320,1,320,1,320,1,320,3,320,6875,8,320,1,321,1,321,1,321,3,321,6880,
		8,321,1,321,1,321,3,321,6884,8,321,1,322,3,322,6887,8,322,1,322,3,322,
		6890,8,322,1,322,3,322,6893,8,322,1,322,3,322,6896,8,322,1,323,1,323,1,
		324,1,324,1,324,1,325,1,325,1,326,1,326,3,326,6907,8,326,1,327,1,327,1,
		327,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,6921,8,
		328,1,329,1,329,1,329,1,329,1,329,5,329,6928,8,329,10,329,12,329,6931,
		9,329,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
		1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
		3,330,6956,8,330,1,331,1,331,1,331,1,331,1,331,1,332,1,332,1,332,1,332,
		3,332,6967,8,332,1,332,1,332,1,332,1,332,1,332,3,332,6974,8,332,5,332,
		6976,8,332,10,332,12,332,6979,9,332,1,333,1,333,1,333,1,333,3,333,6985,
		8,333,1,334,1,334,1,334,1,334,1,334,1,334,3,334,6993,8,334,1,334,1,334,
		1,334,3,334,6998,8,334,1,334,1,334,1,334,1,334,5,334,7004,8,334,10,334,
		12,334,7007,9,334,1,335,1,335,1,335,3,335,7012,8,335,1,335,1,335,1,335,
		1,335,1,335,1,335,1,335,1,335,3,335,7022,8,335,1,335,1,335,1,335,1,335,
		1,335,1,335,1,335,1,335,1,335,1,335,1,335,3,335,7035,8,335,1,335,1,335,
		1,335,1,335,3,335,7041,8,335,1,335,1,335,1,335,1,335,3,335,7047,8,335,
		1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
		1,335,1,335,3,335,7063,8,335,1,335,1,335,1,335,1,335,3,335,7069,8,335,
		1,335,1,335,1,335,1,335,1,335,1,335,1,335,5,335,7078,8,335,10,335,12,335,
		7081,9,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
		1,336,1,336,1,336,1,336,5,336,7097,8,336,10,336,12,336,7100,9,336,1,336,
		1,336,1,336,1,336,1,336,1,336,1,336,4,336,7109,8,336,11,336,12,336,7110,
		1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
		1,336,1,336,1,336,3,336,7128,8,336,1,336,1,336,1,336,1,336,1,336,1,336,
		1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,5,336,7145,8,336,
		10,336,12,336,7148,9,336,1,337,1,337,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,3,338,7166,8,338,1,339,
		1,339,1,339,1,339,1,339,1,339,1,339,3,339,7175,8,339,1,340,1,340,1,340,
		1,340,1,340,1,340,1,340,3,340,7184,8,340,1,341,1,341,1,342,1,342,1,342,
		1,342,1,342,3,342,7193,8,342,1,343,1,343,1,344,1,344,1,345,1,345,1,346,
		1,346,1,347,1,347,1,348,1,348,1,349,1,349,1,349,0,3,668,670,672,350,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
		136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
		172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
		208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
		244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
		280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
		316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
		352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
		388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
		424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
		460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
		496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
		532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
		568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
		604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,
		640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
		676,678,680,682,684,686,688,690,692,694,696,698,0,140,2,0,39,39,149,149,
		2,0,529,529,535,535,3,0,68,68,157,157,179,179,3,0,42,42,382,382,452,452,
		4,0,42,42,417,417,527,527,609,609,2,0,512,512,1141,1141,2,0,77,77,140,
		140,2,0,15,15,332,332,3,0,44,44,84,84,182,182,2,0,432,432,556,556,3,0,
		504,504,648,648,656,656,2,0,390,390,458,458,2,0,350,350,472,472,2,0,42,
		42,1131,1132,2,0,348,348,441,441,2,0,457,457,671,671,3,0,79,79,83,83,124,
		124,3,0,42,42,400,400,429,429,3,0,42,42,396,396,787,787,2,0,635,635,670,
		670,2,0,80,80,90,90,3,0,434,434,546,546,611,611,2,0,68,68,157,157,1,0,
		354,355,1,0,1131,1132,2,0,1141,1141,1149,1149,2,0,80,80,386,386,2,0,543,
		543,1141,1141,2,0,544,544,1141,1141,3,0,428,428,467,467,519,519,7,0,42,
		42,368,368,370,370,400,400,429,429,571,571,1149,1149,2,0,512,512,528,528,
		1,0,1132,1133,2,0,5,5,51,51,4,0,42,42,382,382,452,452,456,456,2,0,26,26,
		30,30,2,0,12,12,173,173,2,0,190,190,675,675,2,0,21,21,143,143,3,0,43,43,
		74,74,105,105,2,0,105,105,372,372,2,0,363,363,425,425,2,0,100,100,599,
		599,2,0,43,43,105,105,2,0,6,6,49,49,2,0,186,186,667,667,4,0,428,428,467,
		467,518,518,560,560,2,0,428,428,518,518,2,0,13,13,45,45,3,0,65,65,77,77,
		184,184,2,0,34,34,82,82,2,0,96,96,147,147,2,0,6,6,49,50,1,0,624,625,2,
		0,170,170,737,737,2,0,437,437,607,607,2,0,224,224,475,475,5,0,106,106,
		480,481,483,483,487,495,573,573,4,0,477,478,482,482,484,485,574,574,3,
		0,107,107,476,476,486,486,2,0,460,460,626,626,2,0,620,620,622,622,2,0,
		342,342,627,627,2,0,89,89,589,589,2,0,51,51,388,388,3,0,31,31,60,60,177,
		177,3,0,130,130,170,170,435,435,3,0,12,12,19,19,185,185,2,0,42,42,120,
		120,2,0,102,102,180,180,2,0,358,358,612,612,2,0,40,40,669,669,2,0,114,
		114,472,472,2,0,420,420,566,566,4,0,204,204,206,206,212,212,636,636,2,
		0,1101,1101,1117,1117,2,0,343,343,575,575,2,0,67,67,79,79,6,0,130,130,
		170,170,175,175,413,413,435,435,669,669,2,0,511,511,632,632,2,0,410,410,
		673,673,2,0,130,130,435,435,3,0,80,80,91,91,450,450,3,0,437,437,472,472,
		607,607,2,0,632,632,668,668,2,0,374,374,565,565,6,0,224,224,407,407,409,
		409,436,436,572,572,613,613,2,0,45,46,61,61,3,0,420,420,548,548,880,880,
		2,0,464,464,650,650,10,0,357,357,365,365,376,378,385,385,505,505,513,513,
		637,637,644,644,831,831,999,999,2,0,35,35,166,166,2,0,116,116,990,990,
		11,0,357,357,365,365,376,378,385,385,505,505,513,513,590,590,637,637,644,
		644,831,831,999,999,1,0,1153,1154,4,0,373,373,782,793,1141,1141,1149,1150,
		3,0,1131,1133,1142,1142,1144,1144,2,0,62,62,176,176,2,0,115,115,1145,1145,
		5,0,25,25,220,222,229,229,231,234,516,516,2,0,25,25,221,221,2,0,25,25,
		220,220,1,0,194,205,3,0,181,181,193,193,610,610,2,0,209,214,429,429,6,
		0,215,215,226,226,228,228,230,230,237,237,346,347,4,0,216,219,224,225,
		227,227,344,344,2,0,152,152,235,235,2,0,464,464,798,806,2,0,224,224,516,
		516,5,0,198,198,204,204,215,216,218,218,464,464,2,0,181,181,610,610,2,
		0,313,314,320,320,4,0,37,37,149,149,311,314,329,329,1,0,323,324,3,0,17,
		17,94,94,174,174,2,0,220,220,224,224,2,0,215,216,218,218,3,0,13,13,45,
		45,988,988,3,0,284,284,296,297,307,307,3,0,285,287,303,306,308,310,2,0,
		293,293,295,295,2,0,291,291,294,294,2,0,289,290,300,302,2,0,132,132,599,
		599,2,0,431,431,557,557,2,0,533,533,549,549,2,0,113,113,1120,1120,3,0,
		62,62,176,176,660,660,2,0,136,136,148,148,3,0,6,6,335,335,616,616,3,0,
		113,113,1113,1114,1120,1121,1,0,1110,1116,2,0,224,224,741,781,1,0,794,
		797,5,0,704,705,720,722,728,728,734,735,737,737,1,0,687,694,3,0,215,219,
		232,232,235,235,55,0,14,14,18,18,29,29,35,35,37,37,42,42,48,48,55,55,58,
		58,72,72,78,78,93,93,116,116,120,120,123,123,129,129,166,166,237,237,281,
		288,292,292,296,297,303,310,330,383,385,401,403,403,405,430,432,448,450,
		456,458,519,521,521,525,542,545,556,558,587,589,590,592,604,606,634,636,
		670,672,673,675,680,682,686,695,695,697,703,706,707,712,713,715,719,723,
		727,729,729,731,733,736,736,738,740,787,787,831,831,870,870,994,994,999,
		999,22,0,39,39,96,96,147,147,149,149,215,217,219,219,249,280,288,291,293,
		295,298,302,322,322,457,457,671,671,687,694,731,731,798,798,801,830,832,
		869,871,993,995,998,1000,1100,1116,1116,8480,0,701,1,0,0,0,2,720,1,0,0,
		0,4,741,1,0,0,0,6,743,1,0,0,0,8,783,1,0,0,0,10,795,1,0,0,0,12,806,1,0,
		0,0,14,823,1,0,0,0,16,828,1,0,0,0,18,840,1,0,0,0,20,867,1,0,0,0,22,876,
		1,0,0,0,24,878,1,0,0,0,26,890,1,0,0,0,28,920,1,0,0,0,30,956,1,0,0,0,32,
		1007,1,0,0,0,34,1033,1,0,0,0,36,1069,1,0,0,0,38,1082,1,0,0,0,40,1179,1,
		0,0,0,42,1181,1,0,0,0,44,1199,1,0,0,0,46,1260,1,0,0,0,48,1279,1,0,0,0,
		50,1285,1,0,0,0,52,1307,1,0,0,0,54,1309,1,0,0,0,56,1311,1,0,0,0,58,1391,
		1,0,0,0,60,1398,1,0,0,0,62,1400,1,0,0,0,64,1444,1,0,0,0,66,1450,1,0,0,
		0,68,1452,1,0,0,0,70,1473,1,0,0,0,72,1480,1,0,0,0,74,1482,1,0,0,0,76,1507,
		1,0,0,0,78,1510,1,0,0,0,80,1515,1,0,0,0,82,1541,1,0,0,0,84,1557,1,0,0,
		0,86,1559,1,0,0,0,88,1575,1,0,0,0,90,1577,1,0,0,0,92,1637,1,0,0,0,94,1708,
		1,0,0,0,96,1710,1,0,0,0,98,1738,1,0,0,0,100,1746,1,0,0,0,102,1776,1,0,
		0,0,104,1963,1,0,0,0,106,1965,1,0,0,0,108,1967,1,0,0,0,110,1970,1,0,0,
		0,112,2044,1,0,0,0,114,2067,1,0,0,0,116,2215,1,0,0,0,118,2220,1,0,0,0,
		120,2222,1,0,0,0,122,2232,1,0,0,0,124,2288,1,0,0,0,126,2308,1,0,0,0,128,
		2310,1,0,0,0,130,2345,1,0,0,0,132,2354,1,0,0,0,134,2361,1,0,0,0,136,2384,
		1,0,0,0,138,2393,1,0,0,0,140,2408,1,0,0,0,142,2433,1,0,0,0,144,2453,1,
		0,0,0,146,2866,1,0,0,0,148,2868,1,0,0,0,150,2875,1,0,0,0,152,2882,1,0,
		0,0,154,2905,1,0,0,0,156,2913,1,0,0,0,158,2920,1,0,0,0,160,2927,1,0,0,
		0,162,2934,1,0,0,0,164,2946,1,0,0,0,166,2956,1,0,0,0,168,2963,1,0,0,0,
		170,2979,1,0,0,0,172,3025,1,0,0,0,174,3027,1,0,0,0,176,3037,1,0,0,0,178,
		3041,1,0,0,0,180,3047,1,0,0,0,182,3059,1,0,0,0,184,3061,1,0,0,0,186,3068,
		1,0,0,0,188,3070,1,0,0,0,190,3121,1,0,0,0,192,3195,1,0,0,0,194,3254,1,
		0,0,0,196,3349,1,0,0,0,198,3353,1,0,0,0,200,3373,1,0,0,0,202,3375,1,0,
		0,0,204,3383,1,0,0,0,206,3391,1,0,0,0,208,3393,1,0,0,0,210,3423,1,0,0,
		0,212,3478,1,0,0,0,214,3487,1,0,0,0,216,3507,1,0,0,0,218,3519,1,0,0,0,
		220,3523,1,0,0,0,222,3556,1,0,0,0,224,3577,1,0,0,0,226,3587,1,0,0,0,228,
		3591,1,0,0,0,230,3617,1,0,0,0,232,3659,1,0,0,0,234,3661,1,0,0,0,236,3676,
		1,0,0,0,238,3728,1,0,0,0,240,3738,1,0,0,0,242,3748,1,0,0,0,244,3808,1,
		0,0,0,246,3810,1,0,0,0,248,3836,1,0,0,0,250,3842,1,0,0,0,252,3850,1,0,
		0,0,254,3867,1,0,0,0,256,3883,1,0,0,0,258,3920,1,0,0,0,260,3926,1,0,0,
		0,262,3935,1,0,0,0,264,3948,1,0,0,0,266,3952,1,0,0,0,268,3990,1,0,0,0,
		270,4028,1,0,0,0,272,4042,1,0,0,0,274,4050,1,0,0,0,276,4054,1,0,0,0,278,
		4060,1,0,0,0,280,4074,1,0,0,0,282,4077,1,0,0,0,284,4095,1,0,0,0,286,4099,
		1,0,0,0,288,4115,1,0,0,0,290,4117,1,0,0,0,292,4129,1,0,0,0,294,4133,1,
		0,0,0,296,4150,1,0,0,0,298,4167,1,0,0,0,300,4170,1,0,0,0,302,4180,1,0,
		0,0,304,4184,1,0,0,0,306,4197,1,0,0,0,308,4200,1,0,0,0,310,4205,1,0,0,
		0,312,4225,1,0,0,0,314,4227,1,0,0,0,316,4244,1,0,0,0,318,4253,1,0,0,0,
		320,4262,1,0,0,0,322,4264,1,0,0,0,324,4278,1,0,0,0,326,4289,1,0,0,0,328,
		4298,1,0,0,0,330,4301,1,0,0,0,332,4309,1,0,0,0,334,4334,1,0,0,0,336,4346,
		1,0,0,0,338,4349,1,0,0,0,340,4381,1,0,0,0,342,4383,1,0,0,0,344,4385,1,
		0,0,0,346,4387,1,0,0,0,348,4389,1,0,0,0,350,4442,1,0,0,0,352,4444,1,0,
		0,0,354,4450,1,0,0,0,356,4470,1,0,0,0,358,4484,1,0,0,0,360,4495,1,0,0,
		0,362,4497,1,0,0,0,364,4503,1,0,0,0,366,4513,1,0,0,0,368,4517,1,0,0,0,
		370,4524,1,0,0,0,372,4528,1,0,0,0,374,4534,1,0,0,0,376,4541,1,0,0,0,378,
		4547,1,0,0,0,380,4553,1,0,0,0,382,4558,1,0,0,0,384,4605,1,0,0,0,386,4626,
		1,0,0,0,388,4651,1,0,0,0,390,4654,1,0,0,0,392,4660,1,0,0,0,394,4676,1,
		0,0,0,396,4691,1,0,0,0,398,4697,1,0,0,0,400,4727,1,0,0,0,402,4729,1,0,
		0,0,404,4736,1,0,0,0,406,4748,1,0,0,0,408,4754,1,0,0,0,410,4779,1,0,0,
		0,412,4783,1,0,0,0,414,4787,1,0,0,0,416,4798,1,0,0,0,418,4866,1,0,0,0,
		420,4928,1,0,0,0,422,4930,1,0,0,0,424,5036,1,0,0,0,426,5060,1,0,0,0,428,
		5062,1,0,0,0,430,5080,1,0,0,0,432,5154,1,0,0,0,434,5156,1,0,0,0,436,5169,
		1,0,0,0,438,5180,1,0,0,0,440,5204,1,0,0,0,442,5215,1,0,0,0,444,5225,1,
		0,0,0,446,5235,1,0,0,0,448,5275,1,0,0,0,450,5277,1,0,0,0,452,5280,1,0,
		0,0,454,5375,1,0,0,0,456,5393,1,0,0,0,458,5395,1,0,0,0,460,5399,1,0,0,
		0,462,5437,1,0,0,0,464,5446,1,0,0,0,466,5452,1,0,0,0,468,5459,1,0,0,0,
		470,5481,1,0,0,0,472,5483,1,0,0,0,474,5497,1,0,0,0,476,5503,1,0,0,0,478,
		5559,1,0,0,0,480,5714,1,0,0,0,482,5726,1,0,0,0,484,5741,1,0,0,0,486,5747,
		1,0,0,0,488,5766,1,0,0,0,490,5776,1,0,0,0,492,5790,1,0,0,0,494,5792,1,
		0,0,0,496,5795,1,0,0,0,498,5817,1,0,0,0,500,5829,1,0,0,0,502,5835,1,0,
		0,0,504,5847,1,0,0,0,506,5851,1,0,0,0,508,5853,1,0,0,0,510,5895,1,0,0,
		0,512,5902,1,0,0,0,514,5904,1,0,0,0,516,5927,1,0,0,0,518,5933,1,0,0,0,
		520,5941,1,0,0,0,522,5944,1,0,0,0,524,5947,1,0,0,0,526,5968,1,0,0,0,528,
		5989,1,0,0,0,530,5997,1,0,0,0,532,6035,1,0,0,0,534,6047,1,0,0,0,536,6049,
		1,0,0,0,538,6055,1,0,0,0,540,6059,1,0,0,0,542,6075,1,0,0,0,544,6088,1,
		0,0,0,546,6098,1,0,0,0,548,6100,1,0,0,0,550,6106,1,0,0,0,552,6110,1,0,
		0,0,554,6112,1,0,0,0,556,6114,1,0,0,0,558,6132,1,0,0,0,560,6148,1,0,0,
		0,562,6152,1,0,0,0,564,6157,1,0,0,0,566,6168,1,0,0,0,568,6173,1,0,0,0,
		570,6175,1,0,0,0,572,6179,1,0,0,0,574,6204,1,0,0,0,576,6206,1,0,0,0,578,
		6209,1,0,0,0,580,6214,1,0,0,0,582,6230,1,0,0,0,584,6354,1,0,0,0,586,6356,
		1,0,0,0,588,6389,1,0,0,0,590,6394,1,0,0,0,592,6398,1,0,0,0,594,6404,1,
		0,0,0,596,6412,1,0,0,0,598,6420,1,0,0,0,600,6428,1,0,0,0,602,6436,1,0,
		0,0,604,6447,1,0,0,0,606,6455,1,0,0,0,608,6463,1,0,0,0,610,6471,1,0,0,
		0,612,6479,1,0,0,0,614,6513,1,0,0,0,616,6529,1,0,0,0,618,6533,1,0,0,0,
		620,6535,1,0,0,0,622,6538,1,0,0,0,624,6542,1,0,0,0,626,6548,1,0,0,0,628,
		6568,1,0,0,0,630,6748,1,0,0,0,632,6750,1,0,0,0,634,6769,1,0,0,0,636,6771,
		1,0,0,0,638,6834,1,0,0,0,640,6874,1,0,0,0,642,6876,1,0,0,0,644,6886,1,
		0,0,0,646,6897,1,0,0,0,648,6899,1,0,0,0,650,6902,1,0,0,0,652,6906,1,0,
		0,0,654,6908,1,0,0,0,656,6920,1,0,0,0,658,6922,1,0,0,0,660,6955,1,0,0,
		0,662,6957,1,0,0,0,664,6966,1,0,0,0,666,6984,1,0,0,0,668,6997,1,0,0,0,
		670,7008,1,0,0,0,672,7127,1,0,0,0,674,7149,1,0,0,0,676,7165,1,0,0,0,678,
		7174,1,0,0,0,680,7183,1,0,0,0,682,7185,1,0,0,0,684,7192,1,0,0,0,686,7194,
		1,0,0,0,688,7196,1,0,0,0,690,7198,1,0,0,0,692,7200,1,0,0,0,694,7202,1,
		0,0,0,696,7204,1,0,0,0,698,7206,1,0,0,0,700,702,3,2,1,0,701,700,1,0,0,
		0,701,702,1,0,0,0,702,705,1,0,0,0,703,704,5,1114,0,0,704,706,5,1114,0,
		0,705,703,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,5,0,0,1,708,
		1,1,0,0,0,709,712,3,4,2,0,710,711,5,1114,0,0,711,713,5,1114,0,0,712,710,
		1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,716,5,1129,0,0,715,714,1,0,
		0,0,715,716,1,0,0,0,716,719,1,0,0,0,717,719,3,6,3,0,718,709,1,0,0,0,718,
		717,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,732,1,
		0,0,0,722,720,1,0,0,0,723,729,3,4,2,0,724,725,5,1114,0,0,725,727,5,1114,
		0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,730,5,1129,0,0,
		729,726,1,0,0,0,729,730,1,0,0,0,730,733,1,0,0,0,731,733,3,6,3,0,732,723,
		1,0,0,0,732,731,1,0,0,0,733,3,1,0,0,0,734,742,3,8,4,0,735,742,3,10,5,0,
		736,742,3,12,6,0,737,742,3,14,7,0,738,742,3,16,8,0,739,742,3,20,10,0,740,
		742,3,22,11,0,741,734,1,0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,737,
		1,0,0,0,741,738,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,5,1,0,0,0,
		743,744,5,1129,0,0,744,7,1,0,0,0,745,784,3,24,12,0,746,784,3,26,13,0,747,
		784,3,28,14,0,748,784,3,30,15,0,749,784,3,32,16,0,750,784,3,34,17,0,751,
		784,3,38,19,0,752,784,3,40,20,0,753,784,3,42,21,0,754,784,3,44,22,0,755,
		784,3,46,23,0,756,784,3,56,28,0,757,784,3,36,18,0,758,784,3,126,63,0,759,
		784,3,128,64,0,760,784,3,130,65,0,761,784,3,132,66,0,762,784,3,134,67,
		0,763,784,3,136,68,0,764,784,3,138,69,0,765,784,3,140,70,0,766,784,3,142,
		71,0,767,784,3,144,72,0,768,784,3,148,74,0,769,784,3,150,75,0,770,784,
		3,152,76,0,771,784,3,154,77,0,772,784,3,156,78,0,773,784,3,158,79,0,774,
		784,3,160,80,0,775,784,3,162,81,0,776,784,3,164,82,0,777,784,3,166,83,
		0,778,784,3,168,84,0,779,784,3,170,85,0,780,784,3,172,86,0,781,784,3,174,
		87,0,782,784,3,178,89,0,783,745,1,0,0,0,783,746,1,0,0,0,783,747,1,0,0,
		0,783,748,1,0,0,0,783,749,1,0,0,0,783,750,1,0,0,0,783,751,1,0,0,0,783,
		752,1,0,0,0,783,753,1,0,0,0,783,754,1,0,0,0,783,755,1,0,0,0,783,756,1,
		0,0,0,783,757,1,0,0,0,783,758,1,0,0,0,783,759,1,0,0,0,783,760,1,0,0,0,
		783,761,1,0,0,0,783,762,1,0,0,0,783,763,1,0,0,0,783,764,1,0,0,0,783,765,
		1,0,0,0,783,766,1,0,0,0,783,767,1,0,0,0,783,768,1,0,0,0,783,769,1,0,0,
		0,783,770,1,0,0,0,783,771,1,0,0,0,783,772,1,0,0,0,783,773,1,0,0,0,783,
		774,1,0,0,0,783,775,1,0,0,0,783,776,1,0,0,0,783,777,1,0,0,0,783,778,1,
		0,0,0,783,779,1,0,0,0,783,780,1,0,0,0,783,781,1,0,0,0,783,782,1,0,0,0,
		784,9,1,0,0,0,785,796,3,196,98,0,786,796,3,188,94,0,787,796,3,198,99,0,
		788,796,3,182,91,0,789,796,3,194,97,0,790,796,3,180,90,0,791,796,3,190,
		95,0,792,796,3,192,96,0,793,796,3,184,92,0,794,796,3,186,93,0,795,785,
		1,0,0,0,795,786,1,0,0,0,795,787,1,0,0,0,795,788,1,0,0,0,795,789,1,0,0,
		0,795,790,1,0,0,0,795,791,1,0,0,0,795,792,1,0,0,0,795,793,1,0,0,0,795,
		794,1,0,0,0,796,11,1,0,0,0,797,807,3,290,145,0,798,807,3,292,146,0,799,
		807,3,294,147,0,800,807,3,296,148,0,801,807,3,298,149,0,802,807,3,300,
		150,0,803,807,3,302,151,0,804,807,3,304,152,0,805,807,3,306,153,0,806,
		797,1,0,0,0,806,798,1,0,0,0,806,799,1,0,0,0,806,800,1,0,0,0,806,801,1,
		0,0,0,806,802,1,0,0,0,806,803,1,0,0,0,806,804,1,0,0,0,806,805,1,0,0,0,
		807,13,1,0,0,0,808,824,3,322,161,0,809,824,3,324,162,0,810,824,3,326,163,
		0,811,824,3,328,164,0,812,824,3,330,165,0,813,824,3,332,166,0,814,824,
		3,334,167,0,815,824,3,336,168,0,816,824,3,338,169,0,817,824,3,362,181,
		0,818,824,3,364,182,0,819,824,3,366,183,0,820,824,3,368,184,0,821,824,
		3,370,185,0,822,824,3,372,186,0,823,808,1,0,0,0,823,809,1,0,0,0,823,810,
		1,0,0,0,823,811,1,0,0,0,823,812,1,0,0,0,823,813,1,0,0,0,823,814,1,0,0,
		0,823,815,1,0,0,0,823,816,1,0,0,0,823,817,1,0,0,0,823,818,1,0,0,0,823,
		819,1,0,0,0,823,820,1,0,0,0,823,821,1,0,0,0,823,822,1,0,0,0,824,15,1,0,
		0,0,825,829,3,374,187,0,826,829,3,376,188,0,827,829,3,378,189,0,828,825,
		1,0,0,0,828,826,1,0,0,0,828,827,1,0,0,0,829,17,1,0,0,0,830,841,3,382,191,
		0,831,841,3,384,192,0,832,841,3,386,193,0,833,841,3,390,195,0,834,841,
		3,392,196,0,835,841,3,394,197,0,836,841,3,398,199,0,837,841,3,388,194,
		0,838,841,3,396,198,0,839,841,3,400,200,0,840,830,1,0,0,0,840,831,1,0,
		0,0,840,832,1,0,0,0,840,833,1,0,0,0,840,834,1,0,0,0,840,835,1,0,0,0,840,
		836,1,0,0,0,840,837,1,0,0,0,840,838,1,0,0,0,840,839,1,0,0,0,841,19,1,0,
		0,0,842,868,3,418,209,0,843,868,3,420,210,0,844,868,3,422,211,0,845,868,
		3,424,212,0,846,868,3,428,214,0,847,868,3,430,215,0,848,868,3,432,216,
		0,849,868,3,434,217,0,850,868,3,460,230,0,851,868,3,462,231,0,852,868,
		3,464,232,0,853,868,3,466,233,0,854,868,3,468,234,0,855,868,3,472,236,
		0,856,868,3,474,237,0,857,868,3,476,238,0,858,868,3,478,239,0,859,868,
		3,480,240,0,860,868,3,494,247,0,861,868,3,496,248,0,862,868,3,498,249,
		0,863,868,3,500,250,0,864,868,3,502,251,0,865,868,3,504,252,0,866,868,
		3,506,253,0,867,842,1,0,0,0,867,843,1,0,0,0,867,844,1,0,0,0,867,845,1,
		0,0,0,867,846,1,0,0,0,867,847,1,0,0,0,867,848,1,0,0,0,867,849,1,0,0,0,
		867,850,1,0,0,0,867,851,1,0,0,0,867,852,1,0,0,0,867,853,1,0,0,0,867,854,
		1,0,0,0,867,855,1,0,0,0,867,856,1,0,0,0,867,857,1,0,0,0,867,858,1,0,0,
		0,867,859,1,0,0,0,867,860,1,0,0,0,867,861,1,0,0,0,867,862,1,0,0,0,867,
		863,1,0,0,0,867,864,1,0,0,0,867,865,1,0,0,0,867,866,1,0,0,0,868,21,1,0,
		0,0,869,877,3,516,258,0,870,877,3,518,259,0,871,877,3,520,260,0,872,877,
		3,522,261,0,873,877,3,524,262,0,874,877,3,526,263,0,875,877,3,530,265,
		0,876,869,1,0,0,0,876,870,1,0,0,0,876,871,1,0,0,0,876,872,1,0,0,0,876,
		873,1,0,0,0,876,874,1,0,0,0,876,875,1,0,0,0,877,23,1,0,0,0,878,879,5,33,
		0,0,879,881,7,0,0,0,880,882,3,622,311,0,881,880,1,0,0,0,881,882,1,0,0,
		0,882,883,1,0,0,0,883,887,3,564,282,0,884,886,3,58,29,0,885,884,1,0,0,
		0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,25,1,0,0,0,889,887,
		1,0,0,0,890,892,5,33,0,0,891,893,3,62,31,0,892,891,1,0,0,0,892,893,1,0,
		0,0,893,894,1,0,0,0,894,896,5,413,0,0,895,897,3,622,311,0,896,895,1,0,
		0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,3,536,268,0,899,900,5,117,
		0,0,900,901,5,603,0,0,901,908,3,64,32,0,902,903,5,117,0,0,903,905,5,369,
		0,0,904,906,5,113,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,
		907,909,5,559,0,0,908,902,1,0,0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,
		912,3,72,36,0,911,910,1,0,0,0,911,912,1,0,0,0,912,915,1,0,0,0,913,914,
		5,366,0,0,914,916,5,1141,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,917,1,
		0,0,0,917,918,5,397,0,0,918,919,3,380,190,0,919,27,1,0,0,0,920,922,5,33,
		0,0,921,923,7,1,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,
		926,7,2,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,5,
		80,0,0,928,930,3,564,282,0,929,931,3,74,37,0,930,929,1,0,0,0,930,931,1,
		0,0,0,931,932,1,0,0,0,932,933,5,117,0,0,933,934,3,538,269,0,934,938,3,
		602,301,0,935,937,3,76,38,0,936,935,1,0,0,0,937,940,1,0,0,0,938,936,1,
		0,0,0,938,939,1,0,0,0,939,953,1,0,0,0,940,938,1,0,0,0,941,943,5,334,0,
		0,942,944,5,1117,0,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,
		952,7,3,0,0,946,948,5,102,0,0,947,949,5,1117,0,0,948,947,1,0,0,0,948,949,
		1,0,0,0,949,950,1,0,0,0,950,952,7,4,0,0,951,941,1,0,0,0,951,946,1,0,0,
		0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,29,1,0,0,0,955,953,
		1,0,0,0,956,957,5,33,0,0,957,958,5,473,0,0,958,959,5,72,0,0,959,960,3,
		564,282,0,960,961,5,5,0,0,961,962,5,657,0,0,962,968,5,1141,0,0,963,965,
		5,451,0,0,964,966,5,1117,0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,
		0,0,0,967,969,3,572,286,0,968,963,1,0,0,0,968,969,1,0,0,0,969,975,1,0,
		0,0,970,972,5,658,0,0,971,973,5,1117,0,0,972,971,1,0,0,0,972,973,1,0,0,
		0,973,974,1,0,0,0,974,976,3,572,286,0,975,970,1,0,0,0,975,976,1,0,0,0,
		976,982,1,0,0,0,977,979,5,570,0,0,978,980,5,1117,0,0,979,978,1,0,0,0,979,
		980,1,0,0,0,980,981,1,0,0,0,981,983,3,572,286,0,982,977,1,0,0,0,982,983,
		1,0,0,0,983,989,1,0,0,0,984,986,5,526,0,0,985,987,5,1117,0,0,986,985,1,
		0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,990,3,564,282,0,989,984,1,0,
		0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,993,5,672,0,0,992,991,1,0,0,0,
		992,993,1,0,0,0,993,999,1,0,0,0,994,996,5,366,0,0,995,997,5,1117,0,0,996,
		995,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1000,5,1141,0,0,999,994,
		1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1003,5,407,0,0,1002,1004,
		5,1117,0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,
		1006,3,554,277,0,1006,31,1,0,0,0,1007,1009,5,33,0,0,1008,1010,3,62,31,
		0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1012,5,130,
		0,0,1012,1013,3,536,268,0,1013,1015,5,1126,0,0,1014,1016,3,78,39,0,1015,
		1014,1,0,0,0,1015,1016,1,0,0,0,1016,1021,1,0,0,0,1017,1018,5,1128,0,0,
		1018,1020,3,78,39,0,1019,1017,1,0,0,0,1020,1023,1,0,0,0,1021,1019,1,0,
		0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1021,1,0,0,0,1024,1028,5,
		1127,0,0,1025,1027,3,82,41,0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,
		1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,0,0,1031,
		1032,3,380,190,0,1032,33,1,0,0,0,1033,1035,5,33,0,0,1034,1036,3,62,31,
		0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1039,5,333,
		0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,5,
		435,0,0,1041,1043,3,622,311,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,
		1044,1,0,0,0,1044,1045,3,536,268,0,1045,1047,5,1126,0,0,1046,1048,3,80,
		40,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1053,1,0,0,0,1049,1050,5,
		1128,0,0,1050,1052,3,80,40,0,1051,1049,1,0,0,0,1052,1055,1,0,0,0,1053,
		1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,
		1057,5,1127,0,0,1057,1058,5,592,0,0,1058,1062,3,584,292,0,1059,1061,3,
		82,41,0,1060,1059,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,
		1,0,0,0,1063,1067,1,0,0,0,1064,1062,1,0,0,0,1065,1068,3,380,190,0,1066,
		1068,3,396,198,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,35,1,0,0,0,1069,
		1070,5,33,0,0,1070,1072,5,594,0,0,1071,1073,3,622,311,0,1072,1071,1,0,
		0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1079,3,540,270,0,1075,1076,
		5,1128,0,0,1076,1078,3,540,270,0,1077,1075,1,0,0,0,1078,1081,1,0,0,0,1079,
		1077,1,0,0,0,1079,1080,1,0,0,0,1080,37,1,0,0,0,1081,1079,1,0,0,0,1082,
		1083,5,33,0,0,1083,1084,5,606,0,0,1084,1085,3,564,282,0,1085,1086,5,66,
		0,0,1086,1087,5,386,0,0,1087,1088,5,677,0,0,1088,1089,7,5,0,0,1089,1090,
		5,539,0,0,1090,1091,5,1126,0,0,1091,1096,3,84,42,0,1092,1093,5,1128,0,
		0,1093,1095,3,84,42,0,1094,1092,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,
		0,0,0,1096,1097,1,0,0,0,1097,1099,1,0,0,0,1098,1096,1,0,0,0,1099,1100,
		5,1127,0,0,1100,39,1,0,0,0,1101,1103,5,33,0,0,1102,1104,5,647,0,0,1103,
		1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1107,5,170,0,0,1106,
		1108,3,622,311,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,
		1109,1117,3,538,269,0,1110,1111,5,97,0,0,1111,1118,3,538,269,0,1112,1113,
		5,1126,0,0,1113,1114,5,97,0,0,1114,1115,3,538,269,0,1115,1116,5,1127,0,
		0,1116,1118,1,0,0,0,1117,1110,1,0,0,0,1117,1112,1,0,0,0,1118,1180,1,0,
		0,0,1119,1121,5,33,0,0,1120,1122,5,647,0,0,1121,1120,1,0,0,0,1121,1122,
		1,0,0,0,1122,1123,1,0,0,0,1123,1125,5,170,0,0,1124,1126,3,622,311,0,1125,
		1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,3,538,269,0,
		1128,1130,3,86,43,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1141,1,0,
		0,0,1131,1138,3,104,52,0,1132,1134,5,1128,0,0,1133,1132,1,0,0,0,1133,1134,
		1,0,0,0,1134,1135,1,0,0,0,1135,1137,3,104,52,0,1136,1133,1,0,0,0,1137,
		1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1142,1,0,0,0,1140,
		1138,1,0,0,0,1141,1131,1,0,0,0,1141,1142,1,0,0,0,1142,1144,1,0,0,0,1143,
		1145,3,110,55,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,
		1146,1148,7,6,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1150,1,0,0,
		0,1149,1151,5,12,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,
		0,0,1152,1153,3,196,98,0,1153,1180,1,0,0,0,1154,1156,5,33,0,0,1155,1157,
		5,647,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1160,
		5,170,0,0,1159,1161,3,622,311,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,
		1162,1,0,0,0,1162,1163,3,538,269,0,1163,1174,3,86,43,0,1164,1171,3,104,
		52,0,1165,1167,5,1128,0,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1168,
		1,0,0,0,1168,1170,3,104,52,0,1169,1166,1,0,0,0,1170,1173,1,0,0,0,1171,
		1169,1,0,0,0,1171,1172,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1174,
		1164,1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,1176,1178,3,110,55,0,
		1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1101,1,0,0,
		0,1179,1119,1,0,0,0,1179,1154,1,0,0,0,1180,41,1,0,0,0,1181,1182,5,33,0,
		0,1182,1183,5,645,0,0,1183,1184,3,564,282,0,1184,1185,5,5,0,0,1185,1186,
		5,387,0,0,1186,1190,5,1141,0,0,1187,1188,5,426,0,0,1188,1189,5,1117,0,
		0,1189,1191,3,572,286,0,1190,1187,1,0,0,0,1190,1191,1,0,0,0,1191,1197,
		1,0,0,0,1192,1194,5,407,0,0,1193,1195,5,1117,0,0,1194,1193,1,0,0,0,1194,
		1195,1,0,0,0,1195,1196,1,0,0,0,1196,1198,3,554,277,0,1197,1192,1,0,0,0,
		1197,1198,1,0,0,0,1198,43,1,0,0,0,1199,1200,5,33,0,0,1200,1201,5,645,0,
		0,1201,1202,3,564,282,0,1202,1203,5,5,0,0,1203,1204,5,387,0,0,1204,1205,
		5,1141,0,0,1205,1206,5,184,0,0,1206,1207,5,473,0,0,1207,1208,5,72,0,0,
		1208,1214,3,564,282,0,1209,1211,5,421,0,0,1210,1212,5,1117,0,0,1211,1210,
		1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,3,572,286,0,1214,
		1209,1,0,0,0,1214,1215,1,0,0,0,1215,1221,1,0,0,0,1216,1218,5,451,0,0,1217,
		1219,5,1117,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,
		1220,1222,3,572,286,0,1221,1216,1,0,0,0,1221,1222,1,0,0,0,1222,1228,1,
		0,0,0,1223,1225,5,339,0,0,1224,1226,5,1117,0,0,1225,1224,1,0,0,0,1225,
		1226,1,0,0,0,1226,1227,1,0,0,0,1227,1229,3,572,286,0,1228,1223,1,0,0,0,
		1228,1229,1,0,0,0,1229,1235,1,0,0,0,1230,1232,5,499,0,0,1231,1233,5,1117,
		0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1236,3,
		572,286,0,1235,1230,1,0,0,0,1235,1236,1,0,0,0,1236,1242,1,0,0,0,1237,1239,
		5,526,0,0,1238,1240,5,1117,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,
		1241,1,0,0,0,1241,1243,3,564,282,0,1242,1237,1,0,0,0,1242,1243,1,0,0,0,
		1243,1245,1,0,0,0,1244,1246,5,672,0,0,1245,1244,1,0,0,0,1245,1246,1,0,
		0,0,1246,1252,1,0,0,0,1247,1249,5,366,0,0,1248,1250,5,1117,0,0,1249,1248,
		1,0,0,0,1249,1250,1,0,0,0,1250,1251,1,0,0,0,1251,1253,5,1141,0,0,1252,
		1247,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1256,5,407,0,0,1255,
		1257,5,1117,0,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,
		1258,1259,3,554,277,0,1259,45,1,0,0,0,1260,1262,5,33,0,0,1261,1263,3,62,
		31,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,5,
		175,0,0,1265,1266,3,536,268,0,1266,1267,7,7,0,0,1267,1268,7,8,0,0,1268,
		1269,5,117,0,0,1269,1270,3,538,269,0,1270,1271,5,64,0,0,1271,1272,5,52,
		0,0,1272,1275,5,598,0,0,1273,1274,7,9,0,0,1274,1276,3,536,268,0,1275,1273,
		1,0,0,0,1275,1276,1,0,0,0,1276,1277,1,0,0,0,1277,1278,3,380,190,0,1278,
		47,1,0,0,0,1279,1281,5,190,0,0,1280,1282,5,569,0,0,1281,1280,1,0,0,0,1281,
		1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,3,50,25,0,1284,49,1,0,0,0,1285,
		1297,3,52,26,0,1286,1287,5,1126,0,0,1287,1292,3,54,27,0,1288,1289,5,1128,
		0,0,1289,1291,3,54,27,0,1290,1288,1,0,0,0,1291,1294,1,0,0,0,1292,1290,
		1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,0,0,0,1294,1292,1,0,0,0,1295,1296,
		5,1127,0,0,1296,1298,1,0,0,0,1297,1286,1,0,0,0,1297,1298,1,0,0,0,1298,
		1299,1,0,0,0,1299,1300,5,12,0,0,1300,1301,5,1126,0,0,1301,1302,3,10,5,
		0,1302,1305,5,1127,0,0,1303,1304,5,1128,0,0,1304,1306,3,50,25,0,1305,1303,
		1,0,0,0,1305,1306,1,0,0,0,1306,51,1,0,0,0,1307,1308,3,564,282,0,1308,53,
		1,0,0,0,1309,1310,3,564,282,0,1310,55,1,0,0,0,1311,1313,5,33,0,0,1312,
		1314,3,624,312,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1318,1,0,0,0,
		1315,1316,5,334,0,0,1316,1317,5,1117,0,0,1317,1319,7,10,0,0,1318,1315,
		1,0,0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1322,3,62,31,0,1321,1320,
		1,0,0,0,1321,1322,1,0,0,0,1322,1326,1,0,0,0,1323,1324,5,158,0,0,1324,1325,
		5,604,0,0,1325,1327,7,11,0,0,1326,1323,1,0,0,0,1326,1327,1,0,0,0,1327,
		1328,1,0,0,0,1328,1329,5,669,0,0,1329,1334,3,536,268,0,1330,1331,5,1126,
		0,0,1331,1332,3,596,298,0,1332,1333,5,1127,0,0,1333,1335,1,0,0,0,1334,
		1330,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1356,5,12,0,0,1337,
		1339,5,1126,0,0,1338,1340,3,48,24,0,1339,1338,1,0,0,0,1339,1340,1,0,0,
		0,1340,1341,1,0,0,0,1341,1342,3,196,98,0,1342,1343,5,1127,0,0,1343,1357,
		1,0,0,0,1344,1346,3,48,24,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,1347,
		1,0,0,0,1347,1354,3,196,98,0,1348,1350,5,190,0,0,1349,1351,7,12,0,0,1350,
		1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,5,26,0,0,1353,
		1355,5,119,0,0,1354,1348,1,0,0,0,1354,1355,1,0,0,0,1355,1357,1,0,0,0,1356,
		1337,1,0,0,0,1356,1345,1,0,0,0,1357,57,1,0,0,0,1358,1360,5,42,0,0,1359,
		1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1363,3,60,30,0,1362,
		1364,5,1117,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1367,1,0,0,0,
		1365,1368,3,550,275,0,1366,1368,5,42,0,0,1367,1365,1,0,0,0,1367,1366,1,
		0,0,0,1368,1392,1,0,0,0,1369,1371,5,42,0,0,1370,1369,1,0,0,0,1370,1371,
		1,0,0,0,1371,1372,1,0,0,0,1372,1374,5,27,0,0,1373,1375,5,1117,0,0,1374,
		1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1392,3,552,276,0,
		1377,1379,5,42,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,
		0,1380,1382,5,403,0,0,1381,1383,5,1117,0,0,1382,1381,1,0,0,0,1382,1383,
		1,0,0,0,1383,1384,1,0,0,0,1384,1392,5,1141,0,0,1385,1386,5,133,0,0,1386,
		1388,5,536,0,0,1387,1389,5,1117,0,0,1388,1387,1,0,0,0,1388,1389,1,0,0,
		0,1389,1390,1,0,0,0,1390,1392,7,13,0,0,1391,1359,1,0,0,0,1391,1370,1,0,
		0,0,1391,1378,1,0,0,0,1391,1385,1,0,0,0,1392,59,1,0,0,0,1393,1394,5,25,
		0,0,1394,1399,5,152,0,0,1395,1399,5,836,0,0,1396,1397,5,220,0,0,1397,1399,
		5,152,0,0,1398,1393,1,0,0,0,1398,1395,1,0,0,0,1398,1396,1,0,0,0,1399,61,
		1,0,0,0,1400,1401,5,390,0,0,1401,1408,5,1117,0,0,1402,1409,3,546,273,0,
		1403,1406,5,37,0,0,1404,1405,5,1126,0,0,1405,1407,5,1127,0,0,1406,1404,
		1,0,0,0,1406,1407,1,0,0,0,1407,1409,1,0,0,0,1408,1402,1,0,0,0,1408,1403,
		1,0,0,0,1409,63,1,0,0,0,1410,1411,5,336,0,0,1411,1415,3,66,33,0,1412,1414,
		3,68,34,0,1413,1412,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,1416,
		1,0,0,0,1416,1445,1,0,0,0,1417,1415,1,0,0,0,1418,1421,5,415,0,0,1419,1422,
		3,570,285,0,1420,1422,3,668,334,0,1421,1419,1,0,0,0,1421,1420,1,0,0,0,
		1422,1423,1,0,0,0,1423,1432,3,70,35,0,1424,1425,5,628,0,0,1425,1429,3,
		66,33,0,1426,1428,3,68,34,0,1427,1426,1,0,0,0,1428,1431,1,0,0,0,1429,1427,
		1,0,0,0,1429,1430,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1432,1424,
		1,0,0,0,1432,1433,1,0,0,0,1433,1442,1,0,0,0,1434,1435,5,406,0,0,1435,1439,
		3,66,33,0,1436,1438,3,68,34,0,1437,1436,1,0,0,0,1438,1441,1,0,0,0,1439,
		1437,1,0,0,0,1439,1440,1,0,0,0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1442,
		1434,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1410,1,0,0,0,1444,
		1418,1,0,0,0,1445,65,1,0,0,0,1446,1451,5,313,0,0,1447,1451,3,574,287,0,
		1448,1451,3,570,285,0,1449,1451,3,668,334,0,1450,1446,1,0,0,0,1450,1447,
		1,0,0,0,1450,1448,1,0,0,0,1450,1449,1,0,0,0,1451,67,1,0,0,0,1452,1453,
		5,1113,0,0,1453,1456,5,85,0,0,1454,1457,3,570,285,0,1455,1457,3,668,334,
		0,1456,1454,1,0,0,0,1456,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1459,3,70,
		35,0,1459,69,1,0,0,0,1460,1474,3,692,346,0,1461,1474,5,219,0,0,1462,1474,
		5,238,0,0,1463,1474,5,239,0,0,1464,1474,5,240,0,0,1465,1474,5,241,0,0,
		1466,1474,5,242,0,0,1467,1474,5,243,0,0,1468,1474,5,244,0,0,1469,1474,
		5,245,0,0,1470,1474,5,246,0,0,1471,1474,5,247,0,0,1472,1474,5,248,0,0,
		1473,1460,1,0,0,0,1473,1461,1,0,0,0,1473,1462,1,0,0,0,1473,1463,1,0,0,
		0,1473,1464,1,0,0,0,1473,1465,1,0,0,0,1473,1466,1,0,0,0,1473,1467,1,0,
		0,0,1473,1468,1,0,0,0,1473,1469,1,0,0,0,1473,1470,1,0,0,0,1473,1471,1,
		0,0,0,1473,1472,1,0,0,0,1474,71,1,0,0,0,1475,1481,5,401,0,0,1476,1481,
		5,394,0,0,1477,1478,5,394,0,0,1478,1479,5,117,0,0,1479,1481,5,612,0,0,
		1480,1475,1,0,0,0,1480,1476,1,0,0,0,1480,1477,1,0,0,0,1481,73,1,0,0,0,
		1482,1483,5,185,0,0,1483,1484,7,14,0,0,1484,75,1,0,0,0,1485,1487,5,465,
		0,0,1486,1488,5,1117,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,
		1,0,0,0,1489,1508,3,572,286,0,1490,1508,3,74,37,0,1491,1492,5,190,0,0,
		1492,1493,5,545,0,0,1493,1508,3,564,282,0,1494,1495,5,366,0,0,1495,1508,
		5,1141,0,0,1496,1508,7,15,0,0,1497,1499,5,870,0,0,1498,1500,5,1117,0,0,
		1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1508,5,1141,
		0,0,1502,1504,5,994,0,0,1503,1505,5,1117,0,0,1504,1503,1,0,0,0,1504,1505,
		1,0,0,0,1505,1506,1,0,0,0,1506,1508,5,1141,0,0,1507,1485,1,0,0,0,1507,
		1490,1,0,0,0,1507,1491,1,0,0,0,1507,1494,1,0,0,0,1507,1496,1,0,0,0,1507,
		1497,1,0,0,0,1507,1502,1,0,0,0,1508,77,1,0,0,0,1509,1511,7,16,0,0,1510,
		1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,1513,3,564,282,0,
		1513,1514,3,584,292,0,1514,79,1,0,0,0,1515,1516,3,564,282,0,1516,1517,
		3,584,292,0,1517,81,1,0,0,0,1518,1519,5,366,0,0,1519,1542,5,1141,0,0,1520,
		1521,5,466,0,0,1521,1542,5,158,0,0,1522,1524,5,113,0,0,1523,1522,1,0,0,
		0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,1525,1542,5,47,0,0,1526,1527,5,379,
		0,0,1527,1537,5,158,0,0,1528,1529,5,519,0,0,1529,1537,5,158,0,0,1530,1531,
		5,134,0,0,1531,1532,5,158,0,0,1532,1537,5,386,0,0,1533,1534,5,111,0,0,
		1534,1535,5,158,0,0,1535,1537,5,386,0,0,1536,1526,1,0,0,0,1536,1528,1,
		0,0,0,1536,1530,1,0,0,0,1536,1533,1,0,0,0,1537,1542,1,0,0,0,1538,1539,
		5,158,0,0,1539,1540,5,604,0,0,1540,1542,7,11,0,0,1541,1518,1,0,0,0,1541,
		1520,1,0,0,0,1541,1523,1,0,0,0,1541,1536,1,0,0,0,1541,1538,1,0,0,0,1542,
		83,1,0,0,0,1543,1544,5,444,0,0,1544,1558,5,1141,0,0,1545,1546,5,39,0,0,
		1546,1558,5,1141,0,0,1547,1548,5,663,0,0,1548,1558,5,1141,0,0,1549,1550,
		5,549,0,0,1550,1558,5,1141,0,0,1551,1552,5,615,0,0,1552,1558,5,1141,0,
		0,1553,1554,5,540,0,0,1554,1558,5,1141,0,0,1555,1556,5,555,0,0,1556,1558,
		3,570,285,0,1557,1543,1,0,0,0,1557,1545,1,0,0,0,1557,1547,1,0,0,0,1557,
		1549,1,0,0,0,1557,1551,1,0,0,0,1557,1553,1,0,0,0,1557,1555,1,0,0,0,1558,
		85,1,0,0,0,1559,1560,5,1126,0,0,1560,1565,3,88,44,0,1561,1562,5,1128,0,
		0,1562,1564,3,88,44,0,1563,1561,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,
		0,0,0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,1565,1,0,0,0,1568,1569,
		5,1127,0,0,1569,87,1,0,0,0,1570,1571,3,542,271,0,1571,1572,3,90,45,0,1572,
		1576,1,0,0,0,1573,1576,3,94,47,0,1574,1576,3,102,51,0,1575,1570,1,0,0,
		0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,89,1,0,0,0,1577,1581,3,584,
		292,0,1578,1580,3,92,46,0,1579,1578,1,0,0,0,1580,1583,1,0,0,0,1581,1579,
		1,0,0,0,1581,1582,1,0,0,0,1582,91,1,0,0,0,1583,1581,1,0,0,0,1584,1638,
		3,580,290,0,1585,1586,5,42,0,0,1586,1638,3,614,307,0,1587,1638,5,671,0,
		0,1588,1638,5,457,0,0,1589,1594,5,340,0,0,1590,1591,5,117,0,0,1591,1592,
		5,182,0,0,1592,1594,3,616,308,0,1593,1589,1,0,0,0,1593,1590,1,0,0,0,1594,
		1638,1,0,0,0,1595,1597,5,129,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
		1598,1,0,0,0,1598,1638,5,90,0,0,1599,1601,5,179,0,0,1600,1602,5,90,0,0,
		1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,1638,1,0,0,0,1603,1604,5,366,
		0,0,1604,1638,5,1141,0,0,1605,1606,5,364,0,0,1606,1638,7,17,0,0,1607,1608,
		5,634,0,0,1608,1638,7,18,0,0,1609,1638,3,96,48,0,1610,1611,5,27,0,0,1611,
		1638,3,552,276,0,1612,1613,5,69,0,0,1613,1615,5,8,0,0,1614,1612,1,0,0,
		0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1617,5,12,0,0,1617,1618,5,1126,
		0,0,1618,1619,3,668,334,0,1619,1621,5,1127,0,0,1620,1622,7,19,0,0,1621,
		1620,1,0,0,0,1621,1622,1,0,0,0,1622,1638,1,0,0,0,1623,1624,5,237,0,0,1624,
		1625,5,42,0,0,1625,1638,5,667,0,0,1626,1628,5,30,0,0,1627,1629,3,564,282,
		0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1631,1,0,0,0,1630,1626,1,0,
		0,0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,5,26,0,0,1633,1634,5,
		1126,0,0,1634,1635,3,668,334,0,1635,1636,5,1127,0,0,1636,1638,1,0,0,0,
		1637,1584,1,0,0,0,1637,1585,1,0,0,0,1637,1587,1,0,0,0,1637,1588,1,0,0,
		0,1637,1593,1,0,0,0,1637,1596,1,0,0,0,1637,1599,1,0,0,0,1637,1603,1,0,
		0,0,1637,1605,1,0,0,0,1637,1607,1,0,0,0,1637,1609,1,0,0,0,1637,1610,1,
		0,0,0,1637,1614,1,0,0,0,1637,1623,1,0,0,0,1637,1630,1,0,0,0,1638,93,1,
		0,0,0,1639,1641,5,30,0,0,1640,1642,3,564,282,0,1641,1640,1,0,0,0,1641,
		1642,1,0,0,0,1642,1644,1,0,0,0,1643,1639,1,0,0,0,1643,1644,1,0,0,0,1644,
		1645,1,0,0,0,1645,1646,5,129,0,0,1646,1648,5,90,0,0,1647,1649,3,564,282,
		0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,1652,3,74,
		37,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,0,1653,1657,3,
		602,301,0,1654,1656,3,76,38,0,1655,1654,1,0,0,0,1656,1659,1,0,0,0,1657,
		1655,1,0,0,0,1657,1658,1,0,0,0,1658,1709,1,0,0,0,1659,1657,1,0,0,0,1660,
		1662,5,30,0,0,1661,1663,3,564,282,0,1662,1661,1,0,0,0,1662,1663,1,0,0,
		0,1663,1665,1,0,0,0,1664,1660,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,
		0,0,1666,1668,5,179,0,0,1667,1669,7,20,0,0,1668,1667,1,0,0,0,1668,1669,
		1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,564,282,0,1671,1670,1,0,0,0,1671,
		1672,1,0,0,0,1672,1674,1,0,0,0,1673,1675,3,74,37,0,1674,1673,1,0,0,0,1674,
		1675,1,0,0,0,1675,1676,1,0,0,0,1676,1680,3,602,301,0,1677,1679,3,76,38,
		0,1678,1677,1,0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,
		0,0,1681,1709,1,0,0,0,1682,1680,1,0,0,0,1683,1685,5,30,0,0,1684,1686,3,
		564,282,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1683,
		1,0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1690,5,66,0,0,1690,1692,
		5,90,0,0,1691,1693,3,564,282,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,
		1694,1,0,0,0,1694,1695,3,602,301,0,1695,1696,3,96,48,0,1696,1709,1,0,0,
		0,1697,1699,5,30,0,0,1698,1700,3,564,282,0,1699,1698,1,0,0,0,1699,1700,
		1,0,0,0,1700,1702,1,0,0,0,1701,1697,1,0,0,0,1701,1702,1,0,0,0,1702,1703,
		1,0,0,0,1703,1704,5,26,0,0,1704,1705,5,1126,0,0,1705,1706,3,668,334,0,
		1706,1707,5,1127,0,0,1707,1709,1,0,0,0,1708,1643,1,0,0,0,1708,1664,1,0,
		0,0,1708,1687,1,0,0,0,1708,1701,1,0,0,0,1709,95,1,0,0,0,1710,1711,5,135,
		0,0,1711,1713,3,538,269,0,1712,1714,3,602,301,0,1713,1712,1,0,0,0,1713,
		1714,1,0,0,0,1714,1717,1,0,0,0,1715,1716,5,108,0,0,1716,1718,7,21,0,0,
		1717,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1720,1,0,0,0,1719,1721,3,98,49,
		0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,97,1,0,0,0,1722,1723,5,117,
		0,0,1723,1724,5,44,0,0,1724,1728,3,100,50,0,1725,1726,5,117,0,0,1726,1727,
		5,182,0,0,1727,1729,3,100,50,0,1728,1725,1,0,0,0,1728,1729,1,0,0,0,1729,
		1739,1,0,0,0,1730,1731,5,117,0,0,1731,1732,5,182,0,0,1732,1736,3,100,50,
		0,1733,1734,5,117,0,0,1734,1735,5,44,0,0,1735,1737,3,100,50,0,1736,1733,
		1,0,0,0,1736,1737,1,0,0,0,1737,1739,1,0,0,0,1738,1722,1,0,0,0,1738,1730,
		1,0,0,0,1739,99,1,0,0,0,1740,1747,5,143,0,0,1741,1747,5,21,0,0,1742,1743,
		5,152,0,0,1743,1747,5,115,0,0,1744,1745,5,519,0,0,1745,1747,5,331,0,0,
		1746,1740,1,0,0,0,1746,1741,1,0,0,0,1746,1742,1,0,0,0,1746,1744,1,0,0,
		0,1747,101,1,0,0,0,1748,1750,7,20,0,0,1749,1751,3,564,282,0,1750,1749,
		1,0,0,0,1750,1751,1,0,0,0,1751,1753,1,0,0,0,1752,1754,3,74,37,0,1753,1752,
		1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1759,3,602,301,0,1756,
		1758,3,76,38,0,1757,1756,1,0,0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,1759,
		1760,1,0,0,0,1760,1777,1,0,0,0,1761,1759,1,0,0,0,1762,1764,7,22,0,0,1763,
		1765,7,20,0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1767,1,0,0,0,1766,
		1768,3,564,282,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,
		1769,1773,3,602,301,0,1770,1772,3,76,38,0,1771,1770,1,0,0,0,1772,1775,
		1,0,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,1777,1,0,0,0,1775,1773,
		1,0,0,0,1776,1748,1,0,0,0,1776,1762,1,0,0,0,1777,103,1,0,0,0,1778,1780,
		5,407,0,0,1779,1781,5,1117,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,
		1783,1,0,0,0,1782,1784,3,554,277,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,
		1784,1964,1,0,0,0,1785,1787,5,870,0,0,1786,1788,5,1117,0,0,1787,1786,1,
		0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1964,5,1141,0,0,1790,1792,
		5,339,0,0,1791,1793,5,1117,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,
		1794,1,0,0,0,1794,1964,3,570,285,0,1795,1797,5,340,0,0,1796,1798,5,1117,
		0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1964,3,
		570,285,0,1800,1802,5,341,0,0,1801,1803,5,1117,0,0,1802,1801,1,0,0,0,1802,
		1803,1,0,0,0,1803,1804,1,0,0,0,1804,1964,3,570,285,0,1805,1807,5,42,0,
		0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1810,3,60,
		30,0,1809,1811,5,1117,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1814,
		1,0,0,0,1812,1815,3,550,275,0,1813,1815,5,42,0,0,1814,1812,1,0,0,0,1814,
		1813,1,0,0,0,1815,1964,1,0,0,0,1816,1818,7,23,0,0,1817,1819,5,1117,0,0,
		1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1964,7,24,0,
		0,1821,1823,5,42,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,
		0,0,1824,1826,5,27,0,0,1825,1827,5,1117,0,0,1826,1825,1,0,0,0,1826,1827,
		1,0,0,0,1827,1828,1,0,0,0,1828,1964,3,552,276,0,1829,1831,5,366,0,0,1830,
		1832,5,1117,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,
		1833,1964,5,1141,0,0,1834,1836,5,371,0,0,1835,1837,5,1117,0,0,1836,1835,
		1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1964,7,25,0,0,1839,1841,
		5,374,0,0,1840,1842,5,1117,0,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,
		1843,1,0,0,0,1843,1964,5,1141,0,0,1844,1845,7,26,0,0,1845,1847,5,393,0,
		0,1846,1848,5,1117,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,
		0,0,0,1849,1964,5,1141,0,0,1850,1852,5,391,0,0,1851,1853,5,1117,0,0,1852,
		1851,1,0,0,0,1852,1853,1,0,0,0,1853,1854,1,0,0,0,1854,1964,7,24,0,0,1855,
		1857,5,403,0,0,1856,1858,5,1117,0,0,1857,1856,1,0,0,0,1857,1858,1,0,0,
		0,1858,1859,1,0,0,0,1859,1964,5,1141,0,0,1860,1862,7,27,0,0,1861,1863,
		5,1117,0,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,
		1964,7,24,0,0,1865,1867,7,28,0,0,1866,1868,5,1117,0,0,1867,1866,1,0,0,
		0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,1964,3,570,285,0,1870,1872,
		5,404,0,0,1871,1873,5,1117,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,
		1874,1,0,0,0,1874,1964,3,570,285,0,1875,1876,5,80,0,0,1876,1878,5,393,
		0,0,1877,1879,5,1117,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,
		1,0,0,0,1880,1964,5,1141,0,0,1881,1883,5,453,0,0,1882,1884,5,1117,0,0,
		1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1964,7,29,0,
		0,1886,1888,5,465,0,0,1887,1889,5,1117,0,0,1888,1887,1,0,0,0,1888,1889,
		1,0,0,0,1889,1890,1,0,0,0,1890,1964,3,572,286,0,1891,1893,5,498,0,0,1892,
		1894,5,1117,0,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,
		1895,1964,3,570,285,0,1896,1898,5,508,0,0,1897,1899,5,1117,0,0,1898,1897,
		1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1964,3,570,285,0,1901,
		1903,5,541,0,0,1902,1904,5,1117,0,0,1903,1902,1,0,0,0,1903,1904,1,0,0,
		0,1904,1905,1,0,0,0,1905,1964,7,13,0,0,1906,1908,5,549,0,0,1907,1909,5,
		1117,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1964,
		5,1141,0,0,1911,1913,5,600,0,0,1912,1914,5,1117,0,0,1913,1912,1,0,0,0,
		1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1964,7,30,0,0,1916,1917,5,627,
		0,0,1917,1964,5,651,0,0,1918,1920,5,994,0,0,1919,1921,5,1117,0,0,1920,
		1919,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1964,5,1141,0,0,
		1923,1925,5,629,0,0,1924,1926,5,1117,0,0,1925,1924,1,0,0,0,1925,1926,1,
		0,0,0,1926,1927,1,0,0,0,1927,1964,7,13,0,0,1928,1930,5,630,0,0,1929,1931,
		5,1117,0,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,1,0,0,0,1932,
		1964,7,13,0,0,1933,1935,5,631,0,0,1934,1936,5,1117,0,0,1935,1934,1,0,0,
		0,1935,1936,1,0,0,0,1936,1939,1,0,0,0,1937,1940,5,42,0,0,1938,1940,3,570,
		285,0,1939,1937,1,0,0,0,1939,1938,1,0,0,0,1940,1964,1,0,0,0,1941,1942,
		5,645,0,0,1942,1944,3,564,282,0,1943,1945,3,108,54,0,1944,1943,1,0,0,0,
		1944,1945,1,0,0,0,1945,1964,1,0,0,0,1946,1947,5,646,0,0,1947,1948,5,1117,
		0,0,1948,1964,3,106,53,0,1949,1964,3,108,54,0,1950,1952,5,652,0,0,1951,
		1953,5,1117,0,0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,
		1954,1964,7,24,0,0,1955,1957,5,178,0,0,1956,1958,5,1117,0,0,1957,1956,
		1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1960,5,1126,0,0,1960,
		1961,3,600,300,0,1961,1962,5,1127,0,0,1962,1964,1,0,0,0,1963,1778,1,0,
		0,0,1963,1785,1,0,0,0,1963,1790,1,0,0,0,1963,1795,1,0,0,0,1963,1800,1,
		0,0,0,1963,1806,1,0,0,0,1963,1816,1,0,0,0,1963,1822,1,0,0,0,1963,1829,
		1,0,0,0,1963,1834,1,0,0,0,1963,1839,1,0,0,0,1963,1844,1,0,0,0,1963,1850,
		1,0,0,0,1963,1855,1,0,0,0,1963,1860,1,0,0,0,1963,1865,1,0,0,0,1963,1870,
		1,0,0,0,1963,1875,1,0,0,0,1963,1881,1,0,0,0,1963,1886,1,0,0,0,1963,1891,
		1,0,0,0,1963,1896,1,0,0,0,1963,1901,1,0,0,0,1963,1906,1,0,0,0,1963,1911,
		1,0,0,0,1963,1916,1,0,0,0,1963,1918,1,0,0,0,1963,1923,1,0,0,0,1963,1928,
		1,0,0,0,1963,1933,1,0,0,0,1963,1941,1,0,0,0,1963,1946,1,0,0,0,1963,1949,
		1,0,0,0,1963,1950,1,0,0,0,1963,1955,1,0,0,0,1964,105,1,0,0,0,1965,1966,
		7,31,0,0,1966,107,1,0,0,0,1967,1968,5,634,0,0,1968,1969,7,18,0,0,1969,
		109,1,0,0,0,1970,1971,5,128,0,0,1971,1972,5,19,0,0,1972,1975,3,112,56,
		0,1973,1974,5,548,0,0,1974,1976,3,570,285,0,1975,1973,1,0,0,0,1975,1976,
		1,0,0,0,1976,1984,1,0,0,0,1977,1978,5,639,0,0,1978,1979,5,19,0,0,1979,
		1982,3,114,57,0,1980,1981,5,640,0,0,1981,1983,3,570,285,0,1982,1980,1,
		0,0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,0,1984,1977,1,0,0,0,1984,1985,
		1,0,0,0,1985,1997,1,0,0,0,1986,1987,5,1126,0,0,1987,1992,3,116,58,0,1988,
		1989,5,1128,0,0,1989,1991,3,116,58,0,1990,1988,1,0,0,0,1991,1994,1,0,0,
		0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,1995,1,0,0,0,1994,1992,1,0,
		0,0,1995,1996,5,1127,0,0,1996,1998,1,0,0,0,1997,1986,1,0,0,0,1997,1998,
		1,0,0,0,1998,111,1,0,0,0,1999,2001,5,99,0,0,2000,1999,1,0,0,0,2000,2001,
		1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,441,0,0,2003,2004,5,1126,0,0,2004,
		2005,3,668,334,0,2005,2006,5,1127,0,0,2006,2045,1,0,0,0,2007,2009,5,99,
		0,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,2014,5,
		90,0,0,2011,2012,5,334,0,0,2012,2013,5,1117,0,0,2013,2015,7,32,0,0,2014,
		2011,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,5,1126,0,0,
		2017,2018,3,596,298,0,2018,2019,5,1127,0,0,2019,2045,1,0,0,0,2020,2030,
		5,132,0,0,2021,2022,5,1126,0,0,2022,2023,3,668,334,0,2023,2024,5,1127,
		0,0,2024,2031,1,0,0,0,2025,2026,5,363,0,0,2026,2027,5,1126,0,0,2027,2028,
		3,596,298,0,2028,2029,5,1127,0,0,2029,2031,1,0,0,0,2030,2021,1,0,0,0,2030,
		2025,1,0,0,0,2031,2045,1,0,0,0,2032,2042,5,471,0,0,2033,2034,5,1126,0,
		0,2034,2035,3,668,334,0,2035,2036,5,1127,0,0,2036,2043,1,0,0,0,2037,2038,
		5,363,0,0,2038,2039,5,1126,0,0,2039,2040,3,596,298,0,2040,2041,5,1127,
		0,0,2041,2043,1,0,0,0,2042,2033,1,0,0,0,2042,2037,1,0,0,0,2043,2045,1,
		0,0,0,2044,2000,1,0,0,0,2044,2008,1,0,0,0,2044,2020,1,0,0,0,2044,2032,
		1,0,0,0,2045,113,1,0,0,0,2046,2048,5,99,0,0,2047,2046,1,0,0,0,2047,2048,
		1,0,0,0,2048,2049,1,0,0,0,2049,2050,5,441,0,0,2050,2051,5,1126,0,0,2051,
		2052,3,668,334,0,2052,2053,5,1127,0,0,2053,2068,1,0,0,0,2054,2056,5,99,
		0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,0,2057,2061,5,
		90,0,0,2058,2059,5,334,0,0,2059,2060,5,1117,0,0,2060,2062,7,32,0,0,2061,
		2058,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2064,5,1126,0,0,
		2064,2065,3,596,298,0,2065,2066,5,1127,0,0,2066,2068,1,0,0,0,2067,2047,
		1,0,0,0,2067,2055,1,0,0,0,2068,115,1,0,0,0,2069,2070,5,128,0,0,2070,2071,
		3,564,282,0,2071,2072,5,186,0,0,2072,2073,5,469,0,0,2073,2074,5,649,0,
		0,2074,2075,5,1126,0,0,2075,2080,3,118,59,0,2076,2077,5,1128,0,0,2077,
		2079,3,118,59,0,2078,2076,1,0,0,0,2079,2082,1,0,0,0,2080,2078,1,0,0,0,
		2080,2081,1,0,0,0,2081,2083,1,0,0,0,2082,2080,1,0,0,0,2083,2087,5,1127,
		0,0,2084,2086,3,124,62,0,2085,2084,1,0,0,0,2086,2089,1,0,0,0,2087,2085,
		1,0,0,0,2087,2088,1,0,0,0,2088,2101,1,0,0,0,2089,2087,1,0,0,0,2090,2091,
		5,1126,0,0,2091,2096,3,122,61,0,2092,2093,5,1128,0,0,2093,2095,3,122,61,
		0,2094,2092,1,0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,1,0,
		0,0,2097,2099,1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,1127,0,0,2100,2102,
		1,0,0,0,2101,2090,1,0,0,0,2101,2102,1,0,0,0,2102,2216,1,0,0,0,2103,2104,
		5,128,0,0,2104,2105,3,564,282,0,2105,2106,5,186,0,0,2106,2107,5,469,0,
		0,2107,2108,5,649,0,0,2108,2112,3,118,59,0,2109,2111,3,124,62,0,2110,2109,
		1,0,0,0,2111,2114,1,0,0,0,2112,2110,1,0,0,0,2112,2113,1,0,0,0,2113,2126,
		1,0,0,0,2114,2112,1,0,0,0,2115,2116,5,1126,0,0,2116,2121,3,122,61,0,2117,
		2118,5,1128,0,0,2118,2120,3,122,61,0,2119,2117,1,0,0,0,2120,2123,1,0,0,
		0,2121,2119,1,0,0,0,2121,2122,1,0,0,0,2122,2124,1,0,0,0,2123,2121,1,0,
		0,0,2124,2125,5,1127,0,0,2125,2127,1,0,0,0,2126,2115,1,0,0,0,2126,2127,
		1,0,0,0,2127,2216,1,0,0,0,2128,2129,5,128,0,0,2129,2130,3,564,282,0,2130,
		2131,5,186,0,0,2131,2132,5,79,0,0,2132,2133,5,1126,0,0,2133,2138,3,118,
		59,0,2134,2135,5,1128,0,0,2135,2137,3,118,59,0,2136,2134,1,0,0,0,2137,
		2140,1,0,0,0,2138,2136,1,0,0,0,2138,2139,1,0,0,0,2139,2141,1,0,0,0,2140,
		2138,1,0,0,0,2141,2145,5,1127,0,0,2142,2144,3,124,62,0,2143,2142,1,0,0,
		0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,2159,1,0,
		0,0,2147,2145,1,0,0,0,2148,2149,5,1126,0,0,2149,2154,3,122,61,0,2150,2151,
		5,1128,0,0,2151,2153,3,122,61,0,2152,2150,1,0,0,0,2153,2156,1,0,0,0,2154,
		2152,1,0,0,0,2154,2155,1,0,0,0,2155,2157,1,0,0,0,2156,2154,1,0,0,0,2157,
		2158,5,1127,0,0,2158,2160,1,0,0,0,2159,2148,1,0,0,0,2159,2160,1,0,0,0,
		2160,2216,1,0,0,0,2161,2162,5,128,0,0,2162,2163,3,564,282,0,2163,2164,
		5,186,0,0,2164,2165,5,79,0,0,2165,2166,5,1126,0,0,2166,2171,3,120,60,0,
		2167,2168,5,1128,0,0,2168,2170,3,120,60,0,2169,2167,1,0,0,0,2170,2173,
		1,0,0,0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2174,1,0,0,0,2173,2171,
		1,0,0,0,2174,2178,5,1127,0,0,2175,2177,3,124,62,0,2176,2175,1,0,0,0,2177,
		2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2192,1,0,0,0,2180,
		2178,1,0,0,0,2181,2182,5,1126,0,0,2182,2187,3,122,61,0,2183,2184,5,1128,
		0,0,2184,2186,3,122,61,0,2185,2183,1,0,0,0,2186,2189,1,0,0,0,2187,2185,
		1,0,0,0,2187,2188,1,0,0,0,2188,2190,1,0,0,0,2189,2187,1,0,0,0,2190,2191,
		5,1127,0,0,2191,2193,1,0,0,0,2192,2181,1,0,0,0,2192,2193,1,0,0,0,2193,
		2216,1,0,0,0,2194,2195,5,128,0,0,2195,2199,3,564,282,0,2196,2198,3,124,
		62,0,2197,2196,1,0,0,0,2198,2201,1,0,0,0,2199,2197,1,0,0,0,2199,2200,1,
		0,0,0,2200,2213,1,0,0,0,2201,2199,1,0,0,0,2202,2203,5,1126,0,0,2203,2208,
		3,122,61,0,2204,2205,5,1128,0,0,2205,2207,3,122,61,0,2206,2204,1,0,0,0,
		2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,2211,1,0,0,
		0,2210,2208,1,0,0,0,2211,2212,5,1127,0,0,2212,2214,1,0,0,0,2213,2202,1,
		0,0,0,2213,2214,1,0,0,0,2214,2216,1,0,0,0,2215,2069,1,0,0,0,2215,2103,
		1,0,0,0,2215,2128,1,0,0,0,2215,2161,1,0,0,0,2215,2194,1,0,0,0,2216,117,
		1,0,0,0,2217,2221,3,582,291,0,2218,2221,3,668,334,0,2219,2221,5,109,0,
		0,2220,2217,1,0,0,0,2220,2218,1,0,0,0,2220,2219,1,0,0,0,2221,119,1,0,0,
		0,2222,2223,5,1126,0,0,2223,2226,3,118,59,0,2224,2225,5,1128,0,0,2225,
		2227,3,118,59,0,2226,2224,1,0,0,0,2227,2228,1,0,0,0,2228,2226,1,0,0,0,
		2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2231,5,1127,0,0,2231,121,1,0,
		0,0,2232,2233,5,639,0,0,2233,2237,3,564,282,0,2234,2236,3,124,62,0,2235,
		2234,1,0,0,0,2236,2239,1,0,0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,
		123,1,0,0,0,2239,2237,1,0,0,0,2240,2242,5,42,0,0,2241,2240,1,0,0,0,2241,
		2242,1,0,0,0,2242,2244,1,0,0,0,2243,2245,5,634,0,0,2244,2243,1,0,0,0,2244,
		2245,1,0,0,0,2245,2246,1,0,0,0,2246,2248,5,407,0,0,2247,2249,5,1117,0,
		0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,0,0,0,2250,2289,3,554,
		277,0,2251,2253,5,366,0,0,2252,2254,5,1117,0,0,2253,2252,1,0,0,0,2253,
		2254,1,0,0,0,2254,2255,1,0,0,0,2255,2289,5,1141,0,0,2256,2257,5,386,0,
		0,2257,2259,5,393,0,0,2258,2260,5,1117,0,0,2259,2258,1,0,0,0,2259,2260,
		1,0,0,0,2260,2261,1,0,0,0,2261,2289,5,1141,0,0,2262,2263,5,80,0,0,2263,
		2265,5,393,0,0,2264,2266,5,1117,0,0,2265,2264,1,0,0,0,2265,2266,1,0,0,
		0,2266,2267,1,0,0,0,2267,2289,5,1141,0,0,2268,2270,5,498,0,0,2269,2271,
		5,1117,0,0,2270,2269,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,
		2289,3,570,285,0,2273,2275,5,508,0,0,2274,2276,5,1117,0,0,2275,2274,1,
		0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2289,3,570,285,0,2278,2280,
		5,645,0,0,2279,2281,5,1117,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,
		2282,1,0,0,0,2282,2289,3,564,282,0,2283,2285,5,526,0,0,2284,2286,5,1117,
		0,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,2286,2287,1,0,0,0,2287,2289,3,
		564,282,0,2288,2241,1,0,0,0,2288,2251,1,0,0,0,2288,2256,1,0,0,0,2288,2262,
		1,0,0,0,2288,2268,1,0,0,0,2288,2273,1,0,0,0,2288,2278,1,0,0,0,2288,2283,
		1,0,0,0,2289,125,1,0,0,0,2290,2291,5,7,0,0,2291,2293,7,0,0,0,2292,2294,
		3,564,282,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2296,1,0,0,0,2295,
		2297,3,58,29,0,2296,2295,1,0,0,0,2297,2298,1,0,0,0,2298,2296,1,0,0,0,2298,
		2299,1,0,0,0,2299,2309,1,0,0,0,2300,2301,5,7,0,0,2301,2302,7,0,0,0,2302,
		2303,3,564,282,0,2303,2304,5,662,0,0,2304,2305,5,386,0,0,2305,2306,5,393,
		0,0,2306,2307,5,514,0,0,2307,2309,1,0,0,0,2308,2290,1,0,0,0,2308,2300,
		1,0,0,0,2309,127,1,0,0,0,2310,2312,5,7,0,0,2311,2313,3,62,31,0,2312,2311,
		1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,2315,5,413,0,0,2315,2319,
		3,536,268,0,2316,2317,5,117,0,0,2317,2318,5,603,0,0,2318,2320,3,64,32,
		0,2319,2316,1,0,0,0,2319,2320,1,0,0,0,2320,2327,1,0,0,0,2321,2322,5,117,
		0,0,2322,2324,5,369,0,0,2323,2325,5,113,0,0,2324,2323,1,0,0,0,2324,2325,
		1,0,0,0,2325,2326,1,0,0,0,2326,2328,5,559,0,0,2327,2321,1,0,0,0,2327,2328,
		1,0,0,0,2328,2332,1,0,0,0,2329,2330,5,138,0,0,2330,2331,5,173,0,0,2331,
		2333,3,536,268,0,2332,2329,1,0,0,0,2332,2333,1,0,0,0,2333,2335,1,0,0,0,
		2334,2336,3,72,36,0,2335,2334,1,0,0,0,2335,2336,1,0,0,0,2336,2339,1,0,
		0,0,2337,2338,5,366,0,0,2338,2340,5,1141,0,0,2339,2337,1,0,0,0,2339,2340,
		1,0,0,0,2340,2343,1,0,0,0,2341,2342,5,397,0,0,2342,2344,3,380,190,0,2343,
		2341,1,0,0,0,2343,2344,1,0,0,0,2344,129,1,0,0,0,2345,2346,5,7,0,0,2346,
		2347,5,435,0,0,2347,2351,3,536,268,0,2348,2350,3,82,41,0,2349,2348,1,0,
		0,0,2350,2353,1,0,0,0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,131,1,0,
		0,0,2353,2351,1,0,0,0,2354,2355,5,7,0,0,2355,2356,5,455,0,0,2356,2357,
		5,597,0,0,2357,2358,5,786,0,0,2358,2359,5,475,0,0,2359,2360,5,90,0,0,2360,
		133,1,0,0,0,2361,2362,5,7,0,0,2362,2363,5,473,0,0,2363,2364,5,72,0,0,2364,
		2365,3,564,282,0,2365,2366,5,5,0,0,2366,2367,5,657,0,0,2367,2373,5,1141,
		0,0,2368,2370,5,451,0,0,2369,2371,5,1117,0,0,2370,2369,1,0,0,0,2370,2371,
		1,0,0,0,2371,2372,1,0,0,0,2372,2374,3,572,286,0,2373,2368,1,0,0,0,2373,
		2374,1,0,0,0,2374,2376,1,0,0,0,2375,2377,5,672,0,0,2376,2375,1,0,0,0,2376,
		2377,1,0,0,0,2377,2378,1,0,0,0,2378,2380,5,407,0,0,2379,2381,5,1117,0,
		0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,2382,1,0,0,0,2382,2383,3,554,
		277,0,2383,135,1,0,0,0,2384,2385,5,7,0,0,2385,2386,5,130,0,0,2386,2390,
		3,536,268,0,2387,2389,3,82,41,0,2388,2387,1,0,0,0,2389,2392,1,0,0,0,2390,
		2388,1,0,0,0,2390,2391,1,0,0,0,2391,137,1,0,0,0,2392,2390,1,0,0,0,2393,
		2394,5,7,0,0,2394,2395,5,606,0,0,2395,2396,3,564,282,0,2396,2397,5,539,
		0,0,2397,2398,5,1126,0,0,2398,2403,3,84,42,0,2399,2400,5,1128,0,0,2400,
		2402,3,84,42,0,2401,2399,1,0,0,0,2402,2405,1,0,0,0,2403,2401,1,0,0,0,2403,
		2404,1,0,0,0,2404,2406,1,0,0,0,2405,2403,1,0,0,0,2406,2407,5,1127,0,0,
		2407,139,1,0,0,0,2408,2410,5,7,0,0,2409,2411,7,1,0,0,2410,2409,1,0,0,0,
		2410,2411,1,0,0,0,2411,2413,1,0,0,0,2412,2414,5,77,0,0,2413,2412,1,0,0,
		0,2413,2414,1,0,0,0,2414,2415,1,0,0,0,2415,2416,5,170,0,0,2416,2418,3,
		538,269,0,2417,2419,3,626,313,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,
		2428,1,0,0,0,2420,2425,3,146,73,0,2421,2422,5,1128,0,0,2422,2424,3,146,
		73,0,2423,2421,1,0,0,0,2424,2427,1,0,0,0,2425,2423,1,0,0,0,2425,2426,1,
		0,0,0,2426,2429,1,0,0,0,2427,2425,1,0,0,0,2428,2420,1,0,0,0,2428,2429,
		1,0,0,0,2429,2431,1,0,0,0,2430,2432,3,110,55,0,2431,2430,1,0,0,0,2431,
		2432,1,0,0,0,2432,141,1,0,0,0,2433,2434,5,7,0,0,2434,2435,5,645,0,0,2435,
		2436,3,564,282,0,2436,2437,7,33,0,0,2437,2438,5,387,0,0,2438,2442,5,1141,
		0,0,2439,2440,5,451,0,0,2440,2441,5,1117,0,0,2441,2443,3,572,286,0,2442,
		2439,1,0,0,0,2442,2443,1,0,0,0,2443,2445,1,0,0,0,2444,2446,5,672,0,0,2445,
		2444,1,0,0,0,2445,2446,1,0,0,0,2446,2447,1,0,0,0,2447,2449,5,407,0,0,2448,
		2450,5,1117,0,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,2451,1,0,0,0,
		2451,2452,3,554,277,0,2452,143,1,0,0,0,2453,2457,5,7,0,0,2454,2455,5,334,
		0,0,2455,2456,5,1117,0,0,2456,2458,7,10,0,0,2457,2454,1,0,0,0,2457,2458,
		1,0,0,0,2458,2460,1,0,0,0,2459,2461,3,62,31,0,2460,2459,1,0,0,0,2460,2461,
		1,0,0,0,2461,2465,1,0,0,0,2462,2463,5,158,0,0,2463,2464,5,604,0,0,2464,
		2466,7,11,0,0,2465,2462,1,0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,
		2468,5,669,0,0,2468,2473,3,536,268,0,2469,2470,5,1126,0,0,2470,2471,3,
		596,298,0,2471,2472,5,1127,0,0,2472,2474,1,0,0,0,2473,2469,1,0,0,0,2473,
		2474,1,0,0,0,2474,2475,1,0,0,0,2475,2476,5,12,0,0,2476,2483,3,196,98,0,
		2477,2479,5,190,0,0,2478,2480,7,12,0,0,2479,2478,1,0,0,0,2479,2480,1,0,
		0,0,2480,2481,1,0,0,0,2481,2482,5,26,0,0,2482,2484,5,119,0,0,2483,2477,
		1,0,0,0,2483,2484,1,0,0,0,2484,145,1,0,0,0,2485,2492,3,104,52,0,2486,2488,
		5,1128,0,0,2487,2486,1,0,0,0,2487,2488,1,0,0,0,2488,2489,1,0,0,0,2489,
		2491,3,104,52,0,2490,2487,1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,
		2492,2493,1,0,0,0,2493,2867,1,0,0,0,2494,2492,1,0,0,0,2495,2497,5,5,0,
		0,2496,2498,5,28,0,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,
		0,0,2499,2500,3,564,282,0,2500,2504,3,90,45,0,2501,2505,5,428,0,0,2502,
		2503,5,332,0,0,2503,2505,3,564,282,0,2504,2501,1,0,0,0,2504,2502,1,0,0,
		0,2504,2505,1,0,0,0,2505,2867,1,0,0,0,2506,2508,5,5,0,0,2507,2509,5,28,
		0,0,2508,2507,1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,0,2510,2511,5,
		1126,0,0,2511,2512,3,564,282,0,2512,2519,3,90,45,0,2513,2514,5,1128,0,
		0,2514,2515,3,564,282,0,2515,2516,3,90,45,0,2516,2518,1,0,0,0,2517,2513,
		1,0,0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,2520,1,0,0,0,2520,2522,
		1,0,0,0,2521,2519,1,0,0,0,2522,2523,5,1127,0,0,2523,2867,1,0,0,0,2524,
		2525,5,5,0,0,2525,2527,7,20,0,0,2526,2528,3,564,282,0,2527,2526,1,0,0,
		0,2527,2528,1,0,0,0,2528,2530,1,0,0,0,2529,2531,3,74,37,0,2530,2529,1,
		0,0,0,2530,2531,1,0,0,0,2531,2532,1,0,0,0,2532,2536,3,602,301,0,2533,2535,
		3,76,38,0,2534,2533,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,
		1,0,0,0,2537,2867,1,0,0,0,2538,2536,1,0,0,0,2539,2544,5,5,0,0,2540,2542,
		5,30,0,0,2541,2543,3,564,282,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,
		2545,1,0,0,0,2544,2540,1,0,0,0,2544,2545,1,0,0,0,2545,2546,1,0,0,0,2546,
		2547,5,129,0,0,2547,2549,5,90,0,0,2548,2550,3,564,282,0,2549,2548,1,0,
		0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,0,2551,2553,3,74,37,0,2552,2551,
		1,0,0,0,2552,2553,1,0,0,0,2553,2554,1,0,0,0,2554,2558,3,602,301,0,2555,
		2557,3,76,38,0,2556,2555,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,0,2558,
		2559,1,0,0,0,2559,2867,1,0,0,0,2560,2558,1,0,0,0,2561,2566,5,5,0,0,2562,
		2564,5,30,0,0,2563,2565,3,564,282,0,2564,2563,1,0,0,0,2564,2565,1,0,0,
		0,2565,2567,1,0,0,0,2566,2562,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,
		0,0,2568,2570,5,179,0,0,2569,2571,7,20,0,0,2570,2569,1,0,0,0,2570,2571,
		1,0,0,0,2571,2573,1,0,0,0,2572,2574,3,564,282,0,2573,2572,1,0,0,0,2573,
		2574,1,0,0,0,2574,2576,1,0,0,0,2575,2577,3,74,37,0,2576,2575,1,0,0,0,2576,
		2577,1,0,0,0,2577,2578,1,0,0,0,2578,2582,3,602,301,0,2579,2581,3,76,38,
		0,2580,2579,1,0,0,0,2581,2584,1,0,0,0,2582,2580,1,0,0,0,2582,2583,1,0,
		0,0,2583,2867,1,0,0,0,2584,2582,1,0,0,0,2585,2586,5,5,0,0,2586,2588,7,
		22,0,0,2587,2589,7,20,0,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,2591,
		1,0,0,0,2590,2592,3,564,282,0,2591,2590,1,0,0,0,2591,2592,1,0,0,0,2592,
		2593,1,0,0,0,2593,2597,3,602,301,0,2594,2596,3,76,38,0,2595,2594,1,0,0,
		0,2596,2599,1,0,0,0,2597,2595,1,0,0,0,2597,2598,1,0,0,0,2598,2867,1,0,
		0,0,2599,2597,1,0,0,0,2600,2605,5,5,0,0,2601,2603,5,30,0,0,2602,2604,3,
		564,282,0,2603,2602,1,0,0,0,2603,2604,1,0,0,0,2604,2606,1,0,0,0,2605,2601,
		1,0,0,0,2605,2606,1,0,0,0,2606,2607,1,0,0,0,2607,2608,5,66,0,0,2608,2610,
		5,90,0,0,2609,2611,3,564,282,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,
		2612,1,0,0,0,2612,2613,3,602,301,0,2613,2614,3,96,48,0,2614,2867,1,0,0,
		0,2615,2620,5,5,0,0,2616,2618,5,30,0,0,2617,2619,3,564,282,0,2618,2617,
		1,0,0,0,2618,2619,1,0,0,0,2619,2621,1,0,0,0,2620,2616,1,0,0,0,2620,2621,
		1,0,0,0,2621,2622,1,0,0,0,2622,2623,5,26,0,0,2623,2624,5,1126,0,0,2624,
		2625,3,668,334,0,2625,2626,5,1127,0,0,2626,2867,1,0,0,0,2627,2629,5,334,
		0,0,2628,2630,5,1117,0,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2631,
		1,0,0,0,2631,2867,7,34,0,0,2632,2634,5,7,0,0,2633,2635,5,28,0,0,2634,2633,
		1,0,0,0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2642,3,564,282,0,2637,
		2638,5,152,0,0,2638,2639,5,42,0,0,2639,2643,3,614,307,0,2640,2641,5,51,
		0,0,2641,2643,5,42,0,0,2642,2637,1,0,0,0,2642,2640,1,0,0,0,2643,2867,1,
		0,0,0,2644,2646,5,24,0,0,2645,2647,5,28,0,0,2646,2645,1,0,0,0,2646,2647,
		1,0,0,0,2647,2648,1,0,0,0,2648,2649,3,564,282,0,2649,2650,3,564,282,0,
		2650,2654,3,90,45,0,2651,2655,5,428,0,0,2652,2653,5,332,0,0,2653,2655,
		3,564,282,0,2654,2651,1,0,0,0,2654,2652,1,0,0,0,2654,2655,1,0,0,0,2655,
		2867,1,0,0,0,2656,2657,5,138,0,0,2657,2658,5,28,0,0,2658,2659,3,564,282,
		0,2659,2660,5,173,0,0,2660,2661,3,564,282,0,2661,2867,1,0,0,0,2662,2664,
		5,102,0,0,2663,2665,5,1117,0,0,2664,2663,1,0,0,0,2664,2665,1,0,0,0,2665,
		2666,1,0,0,0,2666,2867,7,4,0,0,2667,2669,5,510,0,0,2668,2670,5,28,0,0,
		2669,2668,1,0,0,0,2669,2670,1,0,0,0,2670,2671,1,0,0,0,2671,2672,3,564,
		282,0,2672,2676,3,90,45,0,2673,2677,5,428,0,0,2674,2675,5,332,0,0,2675,
		2677,3,564,282,0,2676,2673,1,0,0,0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,
		2677,2867,1,0,0,0,2678,2680,5,51,0,0,2679,2681,5,28,0,0,2680,2679,1,0,
		0,0,2680,2681,1,0,0,0,2681,2682,1,0,0,0,2682,2684,3,564,282,0,2683,2685,
		5,143,0,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,2867,1,0,0,0,2686,2687,
		5,51,0,0,2687,2688,7,35,0,0,2688,2867,3,564,282,0,2689,2690,5,51,0,0,2690,
		2691,5,129,0,0,2691,2867,5,90,0,0,2692,2693,5,51,0,0,2693,2694,7,20,0,
		0,2694,2867,3,564,282,0,2695,2696,5,138,0,0,2696,2697,7,20,0,0,2697,2698,
		3,564,282,0,2698,2699,5,173,0,0,2699,2700,3,564,282,0,2700,2867,1,0,0,
		0,2701,2702,5,7,0,0,2702,2703,5,80,0,0,2703,2704,3,564,282,0,2704,2705,
		7,15,0,0,2705,2867,1,0,0,0,2706,2707,5,51,0,0,2707,2708,5,66,0,0,2708,
		2709,5,90,0,0,2709,2867,3,564,282,0,2710,2711,5,394,0,0,2711,2867,5,91,
		0,0,2712,2713,5,401,0,0,2713,2867,5,91,0,0,2714,2716,5,138,0,0,2715,2717,
		7,36,0,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2720,1,0,0,0,2718,2721,
		3,564,282,0,2719,2721,3,536,268,0,2720,2718,1,0,0,0,2720,2719,1,0,0,0,
		2721,2867,1,0,0,0,2722,2723,5,123,0,0,2723,2724,5,19,0,0,2724,2867,3,596,
		298,0,2725,2726,5,32,0,0,2726,2727,5,173,0,0,2727,2728,5,25,0,0,2728,2729,
		5,152,0,0,2729,2732,3,550,275,0,2730,2731,5,27,0,0,2731,2733,3,552,276,
		0,2732,2730,1,0,0,0,2732,2733,1,0,0,0,2733,2867,1,0,0,0,2734,2736,5,42,
		0,0,2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2737,1,0,0,0,2737,2738,5,
		25,0,0,2738,2739,5,152,0,0,2739,2740,5,1117,0,0,2740,2744,3,550,275,0,
		2741,2742,5,27,0,0,2742,2743,5,1117,0,0,2743,2745,3,552,276,0,2744,2741,
		1,0,0,0,2744,2745,1,0,0,0,2745,2867,1,0,0,0,2746,2747,5,395,0,0,2747,2867,
		5,645,0,0,2748,2749,5,448,0,0,2749,2867,5,645,0,0,2750,2867,5,65,0,0,2751,
		2752,7,37,0,0,2752,2867,5,666,0,0,2753,2754,5,5,0,0,2754,2755,5,128,0,
		0,2755,2756,5,1126,0,0,2756,2761,3,116,58,0,2757,2758,5,1128,0,0,2758,
		2760,3,116,58,0,2759,2757,1,0,0,0,2760,2763,1,0,0,0,2761,2759,1,0,0,0,
		2761,2762,1,0,0,0,2762,2764,1,0,0,0,2763,2761,1,0,0,0,2764,2765,5,1127,
		0,0,2765,2867,1,0,0,0,2766,2767,5,51,0,0,2767,2768,5,128,0,0,2768,2867,
		3,596,298,0,2769,2770,5,395,0,0,2770,2773,5,128,0,0,2771,2774,3,596,298,
		0,2772,2774,5,6,0,0,2773,2771,1,0,0,0,2773,2772,1,0,0,0,2774,2775,1,0,
		0,0,2775,2867,5,645,0,0,2776,2777,5,448,0,0,2777,2780,5,128,0,0,2778,2781,
		3,596,298,0,2779,2781,5,6,0,0,2780,2778,1,0,0,0,2780,2779,1,0,0,0,2781,
		2782,1,0,0,0,2782,2867,5,645,0,0,2783,2784,5,654,0,0,2784,2787,5,128,0,
		0,2785,2788,3,596,298,0,2786,2788,5,6,0,0,2787,2785,1,0,0,0,2787,2786,
		1,0,0,0,2788,2867,1,0,0,0,2789,2790,5,361,0,0,2790,2791,5,128,0,0,2791,
		2867,3,570,285,0,2792,2793,5,577,0,0,2793,2794,5,128,0,0,2794,2795,3,596,
		298,0,2795,2796,5,86,0,0,2796,2797,5,1126,0,0,2797,2802,3,116,58,0,2798,
		2799,5,1128,0,0,2799,2801,3,116,58,0,2800,2798,1,0,0,0,2801,2804,1,0,0,
		0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,0,2804,2802,1,0,
		0,0,2805,2806,5,1127,0,0,2806,2867,1,0,0,0,2807,2808,5,416,0,0,2808,2809,
		5,128,0,0,2809,2810,3,564,282,0,2810,2811,5,190,0,0,2811,2812,5,170,0,
		0,2812,2815,3,538,269,0,2813,2814,7,37,0,0,2814,2816,5,666,0,0,2815,2813,
		1,0,0,0,2815,2816,1,0,0,0,2816,2867,1,0,0,0,2817,2818,5,9,0,0,2818,2821,
		5,128,0,0,2819,2822,3,596,298,0,2820,2822,5,6,0,0,2821,2819,1,0,0,0,2821,
		2820,1,0,0,0,2822,2867,1,0,0,0,2823,2824,5,26,0,0,2824,2827,5,128,0,0,
		2825,2828,3,596,298,0,2826,2828,5,6,0,0,2827,2825,1,0,0,0,2827,2826,1,
		0,0,0,2828,2867,1,0,0,0,2829,2830,5,118,0,0,2830,2833,5,128,0,0,2831,2834,
		3,596,298,0,2832,2834,5,6,0,0,2833,2831,1,0,0,0,2833,2832,1,0,0,0,2834,
		2867,1,0,0,0,2835,2836,5,567,0,0,2836,2839,5,128,0,0,2837,2840,3,596,298,
		0,2838,2840,5,6,0,0,2839,2837,1,0,0,0,2839,2838,1,0,0,0,2840,2867,1,0,
		0,0,2841,2842,5,578,0,0,2842,2845,5,128,0,0,2843,2846,3,596,298,0,2844,
		2846,5,6,0,0,2845,2843,1,0,0,0,2845,2844,1,0,0,0,2846,2867,1,0,0,0,2847,
		2848,5,576,0,0,2848,2867,5,547,0,0,2849,2850,5,662,0,0,2850,2867,5,547,
		0,0,2851,2853,5,5,0,0,2852,2854,5,28,0,0,2853,2852,1,0,0,0,2853,2854,1,
		0,0,0,2854,2855,1,0,0,0,2855,2856,5,1126,0,0,2856,2861,3,88,44,0,2857,
		2858,5,1128,0,0,2858,2860,3,88,44,0,2859,2857,1,0,0,0,2860,2863,1,0,0,
		0,2861,2859,1,0,0,0,2861,2862,1,0,0,0,2862,2864,1,0,0,0,2863,2861,1,0,
		0,0,2864,2865,5,1127,0,0,2865,2867,1,0,0,0,2866,2485,1,0,0,0,2866,2495,
		1,0,0,0,2866,2506,1,0,0,0,2866,2524,1,0,0,0,2866,2539,1,0,0,0,2866,2561,
		1,0,0,0,2866,2585,1,0,0,0,2866,2600,1,0,0,0,2866,2615,1,0,0,0,2866,2627,
		1,0,0,0,2866,2632,1,0,0,0,2866,2644,1,0,0,0,2866,2656,1,0,0,0,2866,2662,
		1,0,0,0,2866,2667,1,0,0,0,2866,2678,1,0,0,0,2866,2686,1,0,0,0,2866,2689,
		1,0,0,0,2866,2692,1,0,0,0,2866,2695,1,0,0,0,2866,2701,1,0,0,0,2866,2706,
		1,0,0,0,2866,2710,1,0,0,0,2866,2712,1,0,0,0,2866,2714,1,0,0,0,2866,2722,
		1,0,0,0,2866,2725,1,0,0,0,2866,2735,1,0,0,0,2866,2746,1,0,0,0,2866,2748,
		1,0,0,0,2866,2750,1,0,0,0,2866,2751,1,0,0,0,2866,2753,1,0,0,0,2866,2766,
		1,0,0,0,2866,2769,1,0,0,0,2866,2776,1,0,0,0,2866,2783,1,0,0,0,2866,2789,
		1,0,0,0,2866,2792,1,0,0,0,2866,2807,1,0,0,0,2866,2817,1,0,0,0,2866,2823,
		1,0,0,0,2866,2829,1,0,0,0,2866,2835,1,0,0,0,2866,2841,1,0,0,0,2866,2847,
		1,0,0,0,2866,2849,1,0,0,0,2866,2851,1,0,0,0,2867,147,1,0,0,0,2868,2869,
		5,51,0,0,2869,2871,7,0,0,0,2870,2872,3,620,310,0,2871,2870,1,0,0,0,2871,
		2872,1,0,0,0,2872,2873,1,0,0,0,2873,2874,3,564,282,0,2874,149,1,0,0,0,
		2875,2876,5,51,0,0,2876,2878,5,413,0,0,2877,2879,3,620,310,0,2878,2877,
		1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,0,2880,2881,3,536,268,0,2881,
		151,1,0,0,0,2882,2883,5,51,0,0,2883,2885,5,80,0,0,2884,2886,7,1,0,0,2885,
		2884,1,0,0,0,2885,2886,1,0,0,0,2886,2887,1,0,0,0,2887,2888,3,564,282,0,
		2888,2889,5,117,0,0,2889,2902,3,538,269,0,2890,2892,5,334,0,0,2891,2893,
		5,1117,0,0,2892,2891,1,0,0,0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,2894,
		2901,7,3,0,0,2895,2897,5,102,0,0,2896,2898,5,1117,0,0,2897,2896,1,0,0,
		0,2897,2898,1,0,0,0,2898,2899,1,0,0,0,2899,2901,7,4,0,0,2900,2890,1,0,
		0,0,2900,2895,1,0,0,0,2901,2904,1,0,0,0,2902,2900,1,0,0,0,2902,2903,1,
		0,0,0,2903,153,1,0,0,0,2904,2902,1,0,0,0,2905,2906,5,51,0,0,2906,2907,
		5,473,0,0,2907,2908,5,72,0,0,2908,2909,3,564,282,0,2909,2910,5,407,0,0,
		2910,2911,5,1117,0,0,2911,2912,3,554,277,0,2912,155,1,0,0,0,2913,2914,
		5,51,0,0,2914,2916,5,130,0,0,2915,2917,3,620,310,0,2916,2915,1,0,0,0,2916,
		2917,1,0,0,0,2917,2918,1,0,0,0,2918,2919,3,536,268,0,2919,157,1,0,0,0,
		2920,2921,5,51,0,0,2921,2923,5,435,0,0,2922,2924,3,620,310,0,2923,2922,
		1,0,0,0,2923,2924,1,0,0,0,2924,2925,1,0,0,0,2925,2926,3,536,268,0,2926,
		159,1,0,0,0,2927,2928,5,51,0,0,2928,2930,5,606,0,0,2929,2931,3,620,310,
		0,2930,2929,1,0,0,0,2930,2931,1,0,0,0,2931,2932,1,0,0,0,2932,2933,3,564,
		282,0,2933,161,1,0,0,0,2934,2936,5,51,0,0,2935,2937,5,647,0,0,2936,2935,
		1,0,0,0,2936,2937,1,0,0,0,2937,2938,1,0,0,0,2938,2940,5,170,0,0,2939,2941,
		3,620,310,0,2940,2939,1,0,0,0,2940,2941,1,0,0,0,2941,2942,1,0,0,0,2942,
		2944,3,600,300,0,2943,2945,7,38,0,0,2944,2943,1,0,0,0,2944,2945,1,0,0,
		0,2945,163,1,0,0,0,2946,2947,5,51,0,0,2947,2948,5,645,0,0,2948,2954,3,
		564,282,0,2949,2951,5,407,0,0,2950,2952,5,1117,0,0,2951,2950,1,0,0,0,2951,
		2952,1,0,0,0,2952,2953,1,0,0,0,2953,2955,3,554,277,0,2954,2949,1,0,0,0,
		2954,2955,1,0,0,0,2955,165,1,0,0,0,2956,2957,5,51,0,0,2957,2959,5,175,
		0,0,2958,2960,3,620,310,0,2959,2958,1,0,0,0,2959,2960,1,0,0,0,2960,2961,
		1,0,0,0,2961,2962,3,536,268,0,2962,167,1,0,0,0,2963,2964,5,51,0,0,2964,
		2966,5,669,0,0,2965,2967,3,620,310,0,2966,2965,1,0,0,0,2966,2967,1,0,0,
		0,2967,2968,1,0,0,0,2968,2973,3,536,268,0,2969,2970,5,1128,0,0,2970,2972,
		3,536,268,0,2971,2969,1,0,0,0,2972,2975,1,0,0,0,2973,2971,1,0,0,0,2973,
		2974,1,0,0,0,2974,2977,1,0,0,0,2975,2973,1,0,0,0,2976,2978,7,38,0,0,2977,
		2976,1,0,0,0,2977,2978,1,0,0,0,2978,169,1,0,0,0,2979,2980,5,51,0,0,2980,
		2982,5,594,0,0,2981,2983,3,620,310,0,2982,2981,1,0,0,0,2982,2983,1,0,0,
		0,2983,2984,1,0,0,0,2984,2989,3,540,270,0,2985,2986,5,1128,0,0,2986,2988,
		3,540,270,0,2987,2985,1,0,0,0,2988,2991,1,0,0,0,2989,2987,1,0,0,0,2989,
		2990,1,0,0,0,2990,171,1,0,0,0,2991,2989,1,0,0,0,2992,2993,5,152,0,0,2993,
		2994,5,42,0,0,2994,3005,5,594,0,0,2995,3006,5,527,0,0,2996,3006,5,6,0,
		0,2997,3002,3,540,270,0,2998,2999,5,1128,0,0,2999,3001,3,540,270,0,3000,
		2998,1,0,0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,1,0,0,0,3003,
		3006,1,0,0,0,3004,3002,1,0,0,0,3005,2995,1,0,0,0,3005,2996,1,0,0,0,3005,
		2997,1,0,0,0,3006,3007,1,0,0,0,3007,3010,5,173,0,0,3008,3011,3,546,273,
		0,3009,3011,3,564,282,0,3010,3008,1,0,0,0,3010,3009,1,0,0,0,3011,3019,
		1,0,0,0,3012,3015,5,1128,0,0,3013,3016,3,546,273,0,3014,3016,3,564,282,
		0,3015,3013,1,0,0,0,3015,3014,1,0,0,0,3016,3018,1,0,0,0,3017,3012,1,0,
		0,0,3018,3021,1,0,0,0,3019,3017,1,0,0,0,3019,3020,1,0,0,0,3020,3026,1,
		0,0,0,3021,3019,1,0,0,0,3022,3023,5,152,0,0,3023,3024,5,594,0,0,3024,3026,
		3,426,213,0,3025,2992,1,0,0,0,3025,3022,1,0,0,0,3026,173,1,0,0,0,3027,
		3028,5,138,0,0,3028,3029,5,170,0,0,3029,3034,3,176,88,0,3030,3031,5,1128,
		0,0,3031,3033,3,176,88,0,3032,3030,1,0,0,0,3033,3036,1,0,0,0,3034,3032,
		1,0,0,0,3034,3035,1,0,0,0,3035,175,1,0,0,0,3036,3034,1,0,0,0,3037,3038,
		3,538,269,0,3038,3039,5,173,0,0,3039,3040,3,538,269,0,3040,177,1,0,0,0,
		3041,3043,5,654,0,0,3042,3044,5,170,0,0,3043,3042,1,0,0,0,3043,3044,1,
		0,0,0,3044,3045,1,0,0,0,3045,3046,3,538,269,0,3046,179,1,0,0,0,3047,3048,
		5,20,0,0,3048,3055,3,536,268,0,3049,3052,5,1126,0,0,3050,3053,3,608,304,
		0,3051,3053,3,604,302,0,3052,3050,1,0,0,0,3052,3051,1,0,0,0,3052,3053,
		1,0,0,0,3053,3054,1,0,0,0,3054,3056,5,1127,0,0,3055,3049,1,0,0,0,3055,
		3056,1,0,0,0,3056,181,1,0,0,0,3057,3060,3,208,104,0,3058,3060,3,210,105,
		0,3059,3057,1,0,0,0,3059,3058,1,0,0,0,3060,183,1,0,0,0,3061,3062,5,397,
		0,0,3062,3063,3,604,302,0,3063,185,1,0,0,0,3064,3069,3,212,106,0,3065,
		3069,3,214,107,0,3066,3069,3,216,108,0,3067,3069,3,218,109,0,3068,3064,
		1,0,0,0,3068,3065,1,0,0,0,3068,3066,1,0,0,0,3068,3067,1,0,0,0,3069,187,
		1,0,0,0,3070,3072,5,84,0,0,3071,3073,7,39,0,0,3072,3071,1,0,0,0,3072,3073,
		1,0,0,0,3073,3075,1,0,0,0,3074,3076,5,77,0,0,3075,3074,1,0,0,0,3075,3076,
		1,0,0,0,3076,3078,1,0,0,0,3077,3079,5,86,0,0,3078,3077,1,0,0,0,3078,3079,
		1,0,0,0,3079,3080,1,0,0,0,3080,3087,3,538,269,0,3081,3082,5,128,0,0,3082,
		3084,5,1126,0,0,3083,3085,3,596,298,0,3084,3083,1,0,0,0,3084,3085,1,0,
		0,0,3085,3086,1,0,0,0,3086,3088,5,1127,0,0,3087,3081,1,0,0,0,3087,3088,
		1,0,0,0,3088,3105,1,0,0,0,3089,3090,5,1126,0,0,3090,3091,3,598,299,0,3091,
		3092,5,1127,0,0,3092,3094,1,0,0,0,3093,3089,1,0,0,0,3093,3094,1,0,0,0,
		3094,3095,1,0,0,0,3095,3106,3,200,100,0,3096,3097,5,152,0,0,3097,3102,
		3,202,101,0,3098,3099,5,1128,0,0,3099,3101,3,202,101,0,3100,3098,1,0,0,
		0,3101,3104,1,0,0,0,3102,3100,1,0,0,0,3102,3103,1,0,0,0,3103,3106,1,0,
		0,0,3104,3102,1,0,0,0,3105,3093,1,0,0,0,3105,3096,1,0,0,0,3106,3119,1,
		0,0,0,3107,3108,5,117,0,0,3108,3109,5,399,0,0,3109,3110,5,90,0,0,3110,
		3111,5,182,0,0,3111,3116,3,202,101,0,3112,3113,5,1128,0,0,3113,3115,3,
		202,101,0,3114,3112,1,0,0,0,3115,3118,1,0,0,0,3116,3114,1,0,0,0,3116,3117,
		1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,0,3119,3107,1,0,0,0,3119,3120,
		1,0,0,0,3120,189,1,0,0,0,3121,3122,5,101,0,0,3122,3124,5,386,0,0,3123,
		3125,7,40,0,0,3124,3123,1,0,0,0,3124,3125,1,0,0,0,3125,3127,1,0,0,0,3126,
		3128,5,472,0,0,3127,3126,1,0,0,0,3127,3128,1,0,0,0,3128,3129,1,0,0,0,3129,
		3130,5,81,0,0,3130,3132,5,1141,0,0,3131,3133,7,6,0,0,3132,3131,1,0,0,0,
		3132,3133,1,0,0,0,3133,3134,1,0,0,0,3134,3135,5,86,0,0,3135,3136,5,170,
		0,0,3136,3142,3,538,269,0,3137,3138,5,128,0,0,3138,3139,5,1126,0,0,3139,
		3140,3,596,298,0,3140,3141,5,1127,0,0,3141,3143,1,0,0,0,3142,3137,1,0,
		0,0,3142,3143,1,0,0,0,3143,3147,1,0,0,0,3144,3145,5,25,0,0,3145,3146,5,
		152,0,0,3146,3148,3,550,275,0,3147,3144,1,0,0,0,3147,3148,1,0,0,0,3148,
		3155,1,0,0,0,3149,3151,7,41,0,0,3150,3152,3,272,136,0,3151,3150,1,0,0,
		0,3152,3153,1,0,0,0,3153,3151,1,0,0,0,3153,3154,1,0,0,0,3154,3156,1,0,
		0,0,3155,3149,1,0,0,0,3155,3156,1,0,0,0,3156,3163,1,0,0,0,3157,3159,5,
		100,0,0,3158,3160,3,274,137,0,3159,3158,1,0,0,0,3160,3161,1,0,0,0,3161,
		3159,1,0,0,0,3161,3162,1,0,0,0,3162,3164,1,0,0,0,3163,3157,1,0,0,0,3163,
		3164,1,0,0,0,3164,3169,1,0,0,0,3165,3166,5,77,0,0,3166,3167,3,570,285,
		0,3167,3168,7,42,0,0,3168,3170,1,0,0,0,3169,3165,1,0,0,0,3169,3170,1,0,
		0,0,3170,3182,1,0,0,0,3171,3172,5,1126,0,0,3172,3177,3,204,102,0,3173,
		3174,5,1128,0,0,3174,3176,3,204,102,0,3175,3173,1,0,0,0,3176,3179,1,0,
		0,0,3177,3175,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,0,0,3179,3177,1,
		0,0,0,3180,3181,5,1127,0,0,3181,3183,1,0,0,0,3182,3171,1,0,0,0,3182,3183,
		1,0,0,0,3183,3193,1,0,0,0,3184,3185,5,152,0,0,3185,3190,3,202,101,0,3186,
		3187,5,1128,0,0,3187,3189,3,202,101,0,3188,3186,1,0,0,0,3189,3192,1,0,
		0,0,3190,3188,1,0,0,0,3190,3191,1,0,0,0,3191,3194,1,0,0,0,3192,3190,1,
		0,0,0,3193,3184,1,0,0,0,3193,3194,1,0,0,0,3194,191,1,0,0,0,3195,3196,5,
		101,0,0,3196,3198,5,680,0,0,3197,3199,7,40,0,0,3198,3197,1,0,0,0,3198,
		3199,1,0,0,0,3199,3201,1,0,0,0,3200,3202,5,472,0,0,3201,3200,1,0,0,0,3201,
		3202,1,0,0,0,3202,3203,1,0,0,0,3203,3204,5,81,0,0,3204,3206,5,1141,0,0,
		3205,3207,7,6,0,0,3206,3205,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,
		0,3208,3209,5,86,0,0,3209,3210,5,170,0,0,3210,3214,3,538,269,0,3211,3212,
		5,25,0,0,3212,3213,5,152,0,0,3213,3215,3,550,275,0,3214,3211,1,0,0,0,3214,
		3215,1,0,0,0,3215,3222,1,0,0,0,3216,3217,5,599,0,0,3217,3218,5,446,0,0,
		3218,3219,5,19,0,0,3219,3220,5,1119,0,0,3220,3221,5,1141,0,0,3221,3223,
		5,1118,0,0,3222,3216,1,0,0,0,3222,3223,1,0,0,0,3223,3228,1,0,0,0,3224,
		3225,5,77,0,0,3225,3226,3,570,285,0,3226,3227,7,42,0,0,3227,3229,1,0,0,
		0,3228,3224,1,0,0,0,3228,3229,1,0,0,0,3229,3241,1,0,0,0,3230,3231,5,1126,
		0,0,3231,3236,3,204,102,0,3232,3233,5,1128,0,0,3233,3235,3,204,102,0,3234,
		3232,1,0,0,0,3235,3238,1,0,0,0,3236,3234,1,0,0,0,3236,3237,1,0,0,0,3237,
		3239,1,0,0,0,3238,3236,1,0,0,0,3239,3240,5,1127,0,0,3240,3242,1,0,0,0,
		3241,3230,1,0,0,0,3241,3242,1,0,0,0,3242,3252,1,0,0,0,3243,3244,5,152,
		0,0,3244,3249,3,202,101,0,3245,3246,5,1128,0,0,3246,3248,3,202,101,0,3247,
		3245,1,0,0,0,3248,3251,1,0,0,0,3249,3247,1,0,0,0,3249,3250,1,0,0,0,3250,
		3253,1,0,0,0,3251,3249,1,0,0,0,3252,3243,1,0,0,0,3252,3253,1,0,0,0,3253,
		193,1,0,0,0,3254,3256,5,140,0,0,3255,3257,7,43,0,0,3256,3255,1,0,0,0,3256,
		3257,1,0,0,0,3257,3259,1,0,0,0,3258,3260,5,86,0,0,3259,3258,1,0,0,0,3259,
		3260,1,0,0,0,3260,3261,1,0,0,0,3261,3267,3,538,269,0,3262,3263,5,128,0,
		0,3263,3264,5,1126,0,0,3264,3265,3,596,298,0,3265,3266,5,1127,0,0,3266,
		3268,1,0,0,0,3267,3262,1,0,0,0,3267,3268,1,0,0,0,3268,3285,1,0,0,0,3269,
		3270,5,1126,0,0,3270,3271,3,596,298,0,3271,3272,5,1127,0,0,3272,3274,1,
		0,0,0,3273,3269,1,0,0,0,3273,3274,1,0,0,0,3274,3275,1,0,0,0,3275,3286,
		3,200,100,0,3276,3277,5,152,0,0,3277,3282,3,202,101,0,3278,3279,5,1128,
		0,0,3279,3281,3,202,101,0,3280,3278,1,0,0,0,3281,3284,1,0,0,0,3282,3280,
		1,0,0,0,3282,3283,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3285,3273,
		1,0,0,0,3285,3276,1,0,0,0,3286,195,1,0,0,0,3287,3289,3,244,122,0,3288,
		3290,3,206,103,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,3290,3350,1,0,0,0,
		3291,3293,3,240,120,0,3292,3294,3,206,103,0,3293,3292,1,0,0,0,3293,3294,
		1,0,0,0,3294,3350,1,0,0,0,3295,3297,3,246,123,0,3296,3298,3,250,125,0,
		3297,3296,1,0,0,0,3298,3299,1,0,0,0,3299,3297,1,0,0,0,3299,3300,1,0,0,
		0,3300,3309,1,0,0,0,3301,3303,5,178,0,0,3302,3304,7,44,0,0,3303,3302,1,
		0,0,0,3303,3304,1,0,0,0,3304,3307,1,0,0,0,3305,3308,3,244,122,0,3306,3308,
		3,240,120,0,3307,3305,1,0,0,0,3307,3306,1,0,0,0,3308,3310,1,0,0,0,3309,
		3301,1,0,0,0,3309,3310,1,0,0,0,3310,3312,1,0,0,0,3311,3313,3,224,112,0,
		3312,3311,1,0,0,0,3312,3313,1,0,0,0,3313,3315,1,0,0,0,3314,3316,3,286,
		143,0,3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3319,
		3,206,103,0,3318,3317,1,0,0,0,3318,3319,1,0,0,0,3319,3350,1,0,0,0,3320,
		3322,3,242,121,0,3321,3323,3,248,124,0,3322,3321,1,0,0,0,3323,3324,1,0,
		0,0,3324,3322,1,0,0,0,3324,3325,1,0,0,0,3325,3331,1,0,0,0,3326,3328,5,
		178,0,0,3327,3329,7,44,0,0,3328,3327,1,0,0,0,3328,3329,1,0,0,0,3329,3330,
		1,0,0,0,3330,3332,3,240,120,0,3331,3326,1,0,0,0,3331,3332,1,0,0,0,3332,
		3334,1,0,0,0,3333,3335,3,224,112,0,3334,3333,1,0,0,0,3334,3335,1,0,0,0,
		3335,3337,1,0,0,0,3336,3338,3,286,143,0,3337,3336,1,0,0,0,3337,3338,1,
		0,0,0,3338,3340,1,0,0,0,3339,3341,3,206,103,0,3340,3339,1,0,0,0,3340,3341,
		1,0,0,0,3341,3350,1,0,0,0,3342,3345,3,246,123,0,3343,3344,5,1128,0,0,3344,
		3346,3,252,126,0,3345,3343,1,0,0,0,3346,3347,1,0,0,0,3347,3345,1,0,0,0,
		3347,3348,1,0,0,0,3348,3350,1,0,0,0,3349,3287,1,0,0,0,3349,3291,1,0,0,
		0,3349,3295,1,0,0,0,3349,3320,1,0,0,0,3349,3342,1,0,0,0,3350,197,1,0,0,
		0,3351,3354,3,220,110,0,3352,3354,3,222,111,0,3353,3351,1,0,0,0,3353,3352,
		1,0,0,0,3354,199,1,0,0,0,3355,3374,3,196,98,0,3356,3357,7,45,0,0,3357,
		3359,5,1126,0,0,3358,3360,3,606,303,0,3359,3358,1,0,0,0,3359,3360,1,0,
		0,0,3360,3361,1,0,0,0,3361,3370,5,1127,0,0,3362,3363,5,1128,0,0,3363,3365,
		5,1126,0,0,3364,3366,3,606,303,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,
		3367,1,0,0,0,3367,3369,5,1127,0,0,3368,3362,1,0,0,0,3369,3372,1,0,0,0,
		3370,3368,1,0,0,0,3370,3371,1,0,0,0,3371,3374,1,0,0,0,3372,3370,1,0,0,
		0,3373,3355,1,0,0,0,3373,3356,1,0,0,0,3374,201,1,0,0,0,3375,3376,3,542,
		271,0,3376,3379,5,1117,0,0,3377,3380,3,668,334,0,3378,3380,5,42,0,0,3379,
		3377,1,0,0,0,3379,3378,1,0,0,0,3380,203,1,0,0,0,3381,3384,3,564,282,0,
		3382,3384,5,1153,0,0,3383,3381,1,0,0,0,3383,3382,1,0,0,0,3384,205,1,0,
		0,0,3385,3386,5,64,0,0,3386,3392,5,182,0,0,3387,3388,5,102,0,0,3388,3389,
		5,79,0,0,3389,3390,5,608,0,0,3390,3392,5,509,0,0,3391,3385,1,0,0,0,3391,
		3387,1,0,0,0,3392,207,1,0,0,0,3393,3395,5,44,0,0,3394,3396,5,105,0,0,3395,
		3394,1,0,0,0,3395,3396,1,0,0,0,3396,3398,1,0,0,0,3397,3399,5,566,0,0,3398,
		3397,1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,5,77,0,0,3401,
		3400,1,0,0,0,3401,3402,1,0,0,0,3402,3403,1,0,0,0,3403,3404,5,67,0,0,3404,
		3410,3,538,269,0,3405,3406,5,128,0,0,3406,3407,5,1126,0,0,3407,3408,3,
		596,298,0,3408,3409,5,1127,0,0,3409,3411,1,0,0,0,3410,3405,1,0,0,0,3410,
		3411,1,0,0,0,3411,3414,1,0,0,0,3412,3413,5,188,0,0,3413,3415,3,668,334,
		0,3414,3412,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,0,0,0,3416,3418,3,224,
		112,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3421,1,0,0,0,3419,3420,
		5,98,0,0,3420,3422,3,288,144,0,3421,3419,1,0,0,0,3421,3422,1,0,0,0,3422,
		209,1,0,0,0,3423,3425,5,44,0,0,3424,3426,5,105,0,0,3425,3424,1,0,0,0,3425,
		3426,1,0,0,0,3426,3428,1,0,0,0,3427,3429,5,566,0,0,3428,3427,1,0,0,0,3428,
		3429,1,0,0,0,3429,3431,1,0,0,0,3430,3432,5,77,0,0,3431,3430,1,0,0,0,3431,
		3432,1,0,0,0,3432,3472,1,0,0,0,3433,3436,3,538,269,0,3434,3435,5,1125,
		0,0,3435,3437,5,1110,0,0,3436,3434,1,0,0,0,3436,3437,1,0,0,0,3437,3446,
		1,0,0,0,3438,3439,5,1128,0,0,3439,3442,3,538,269,0,3440,3441,5,1125,0,
		0,3441,3443,5,1110,0,0,3442,3440,1,0,0,0,3442,3443,1,0,0,0,3443,3445,1,
		0,0,0,3444,3438,1,0,0,0,3445,3448,1,0,0,0,3446,3444,1,0,0,0,3446,3447,
		1,0,0,0,3447,3449,1,0,0,0,3448,3446,1,0,0,0,3449,3450,5,67,0,0,3450,3451,
		3,228,114,0,3451,3473,1,0,0,0,3452,3453,5,67,0,0,3453,3456,3,538,269,0,
		3454,3455,5,1125,0,0,3455,3457,5,1110,0,0,3456,3454,1,0,0,0,3456,3457,
		1,0,0,0,3457,3466,1,0,0,0,3458,3459,5,1128,0,0,3459,3462,3,538,269,0,3460,
		3461,5,1125,0,0,3461,3463,5,1110,0,0,3462,3460,1,0,0,0,3462,3463,1,0,0,
		0,3463,3465,1,0,0,0,3464,3458,1,0,0,0,3465,3468,1,0,0,0,3466,3464,1,0,
		0,0,3466,3467,1,0,0,0,3467,3469,1,0,0,0,3468,3466,1,0,0,0,3469,3470,5,
		185,0,0,3470,3471,3,228,114,0,3471,3473,1,0,0,0,3472,3433,1,0,0,0,3472,
		3452,1,0,0,0,3473,3476,1,0,0,0,3474,3475,5,188,0,0,3475,3477,3,668,334,
		0,3476,3474,1,0,0,0,3476,3477,1,0,0,0,3477,211,1,0,0,0,3478,3479,5,440,
		0,0,3479,3480,3,538,269,0,3480,3485,5,537,0,0,3481,3483,5,12,0,0,3482,
		3481,1,0,0,0,3482,3483,1,0,0,0,3483,3484,1,0,0,0,3484,3486,3,564,282,0,
		3485,3482,1,0,0,0,3485,3486,1,0,0,0,3486,213,1,0,0,0,3487,3488,5,440,0,
		0,3488,3489,3,538,269,0,3489,3490,5,133,0,0,3490,3497,3,564,282,0,3491,
		3492,3,676,338,0,3492,3493,5,1126,0,0,3493,3494,3,608,304,0,3494,3495,
		5,1127,0,0,3495,3498,1,0,0,0,3496,3498,7,46,0,0,3497,3491,1,0,0,0,3497,
		3496,1,0,0,0,3498,3501,1,0,0,0,3499,3500,5,188,0,0,3500,3502,3,668,334,
		0,3501,3499,1,0,0,0,3501,3502,1,0,0,0,3502,3505,1,0,0,0,3503,3504,5,98,
		0,0,3504,3506,3,288,144,0,3505,3503,1,0,0,0,3505,3506,1,0,0,0,3506,215,
		1,0,0,0,3507,3508,5,440,0,0,3508,3509,3,538,269,0,3509,3510,5,133,0,0,
		3510,3513,7,47,0,0,3511,3512,5,188,0,0,3512,3514,3,668,334,0,3513,3511,
		1,0,0,0,3513,3514,1,0,0,0,3514,3517,1,0,0,0,3515,3516,5,98,0,0,3516,3518,
		3,288,144,0,3517,3515,1,0,0,0,3517,3518,1,0,0,0,3518,217,1,0,0,0,3519,
		3520,5,440,0,0,3520,3521,3,538,269,0,3521,3522,5,359,0,0,3522,219,1,0,
		0,0,3523,3525,5,182,0,0,3524,3526,5,105,0,0,3525,3524,1,0,0,0,3525,3526,
		1,0,0,0,3526,3528,1,0,0,0,3527,3529,5,77,0,0,3528,3527,1,0,0,0,3528,3529,
		1,0,0,0,3529,3530,1,0,0,0,3530,3535,3,538,269,0,3531,3533,5,12,0,0,3532,
		3531,1,0,0,0,3532,3533,1,0,0,0,3533,3534,1,0,0,0,3534,3536,3,564,282,0,
		3535,3532,1,0,0,0,3535,3536,1,0,0,0,3536,3537,1,0,0,0,3537,3538,5,152,
		0,0,3538,3543,3,202,101,0,3539,3540,5,1128,0,0,3540,3542,3,202,101,0,3541,
		3539,1,0,0,0,3542,3545,1,0,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,
		3548,1,0,0,0,3545,3543,1,0,0,0,3546,3547,5,188,0,0,3547,3549,3,668,334,
		0,3548,3546,1,0,0,0,3548,3549,1,0,0,0,3549,3551,1,0,0,0,3550,3552,3,224,
		112,0,3551,3550,1,0,0,0,3551,3552,1,0,0,0,3552,3554,1,0,0,0,3553,3555,
		3,286,143,0,3554,3553,1,0,0,0,3554,3555,1,0,0,0,3555,221,1,0,0,0,3556,
		3558,5,182,0,0,3557,3559,5,105,0,0,3558,3557,1,0,0,0,3558,3559,1,0,0,0,
		3559,3561,1,0,0,0,3560,3562,5,77,0,0,3561,3560,1,0,0,0,3561,3562,1,0,0,
		0,3562,3563,1,0,0,0,3563,3564,3,228,114,0,3564,3565,5,152,0,0,3565,3570,
		3,202,101,0,3566,3567,5,1128,0,0,3567,3569,3,202,101,0,3568,3566,1,0,0,
		0,3569,3572,1,0,0,0,3570,3568,1,0,0,0,3570,3571,1,0,0,0,3571,3575,1,0,
		0,0,3572,3570,1,0,0,0,3573,3574,5,188,0,0,3574,3576,3,668,334,0,3575,3573,
		1,0,0,0,3575,3576,1,0,0,0,3576,223,1,0,0,0,3577,3578,5,123,0,0,3578,3579,
		5,19,0,0,3579,3584,3,226,113,0,3580,3581,5,1128,0,0,3581,3583,3,226,113,
		0,3582,3580,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,
		0,0,3585,225,1,0,0,0,3586,3584,1,0,0,0,3587,3589,3,668,334,0,3588,3590,
		7,48,0,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,227,1,0,0,0,3591,3596,
		3,230,115,0,3592,3593,5,1128,0,0,3593,3595,3,230,115,0,3594,3592,1,0,0,
		0,3595,3598,1,0,0,0,3596,3594,1,0,0,0,3596,3597,1,0,0,0,3597,229,1,0,0,
		0,3598,3596,1,0,0,0,3599,3603,3,232,116,0,3600,3602,3,238,119,0,3601,3600,
		1,0,0,0,3602,3605,1,0,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,3618,
		1,0,0,0,3605,3603,1,0,0,0,3606,3607,5,1126,0,0,3607,3611,3,232,116,0,3608,
		3610,3,238,119,0,3609,3608,1,0,0,0,3610,3613,1,0,0,0,3611,3609,1,0,0,0,
		3611,3612,1,0,0,0,3612,3614,1,0,0,0,3613,3611,1,0,0,0,3614,3615,5,1127,
		0,0,3615,3618,1,0,0,0,3616,3618,3,254,127,0,3617,3599,1,0,0,0,3617,3606,
		1,0,0,0,3617,3616,1,0,0,0,3618,231,1,0,0,0,3619,3625,3,538,269,0,3620,
		3621,5,128,0,0,3621,3622,5,1126,0,0,3622,3623,3,596,298,0,3623,3624,5,
		1127,0,0,3624,3626,1,0,0,0,3625,3620,1,0,0,0,3625,3626,1,0,0,0,3626,3631,
		1,0,0,0,3627,3629,5,12,0,0,3628,3627,1,0,0,0,3628,3629,1,0,0,0,3629,3630,
		1,0,0,0,3630,3632,3,564,282,0,3631,3628,1,0,0,0,3631,3632,1,0,0,0,3632,
		3641,1,0,0,0,3633,3638,3,234,117,0,3634,3635,5,1128,0,0,3635,3637,3,234,
		117,0,3636,3634,1,0,0,0,3637,3640,1,0,0,0,3638,3636,1,0,0,0,3638,3639,
		1,0,0,0,3639,3642,1,0,0,0,3640,3638,1,0,0,0,3641,3633,1,0,0,0,3641,3642,
		1,0,0,0,3642,3660,1,0,0,0,3643,3649,3,196,98,0,3644,3645,5,1126,0,0,3645,
		3646,3,196,98,0,3646,3647,5,1127,0,0,3647,3649,1,0,0,0,3648,3643,1,0,0,
		0,3648,3644,1,0,0,0,3649,3651,1,0,0,0,3650,3652,5,12,0,0,3651,3650,1,0,
		0,0,3651,3652,1,0,0,0,3652,3653,1,0,0,0,3653,3654,3,564,282,0,3654,3660,
		1,0,0,0,3655,3656,5,1126,0,0,3656,3657,3,228,114,0,3657,3658,5,1127,0,
		0,3658,3660,1,0,0,0,3659,3619,1,0,0,0,3659,3648,1,0,0,0,3659,3655,1,0,
		0,0,3660,233,1,0,0,0,3661,3662,7,49,0,0,3662,3665,7,20,0,0,3663,3664,5,
		64,0,0,3664,3666,3,236,118,0,3665,3663,1,0,0,0,3665,3666,1,0,0,0,3666,
		3667,1,0,0,0,3667,3668,5,1126,0,0,3668,3669,3,596,298,0,3669,3670,5,1127,
		0,0,3670,235,1,0,0,0,3671,3677,5,89,0,0,3672,3673,5,123,0,0,3673,3677,
		5,19,0,0,3674,3675,5,72,0,0,3675,3677,5,19,0,0,3676,3671,1,0,0,0,3676,
		3672,1,0,0,0,3676,3674,1,0,0,0,3677,237,1,0,0,0,3678,3680,7,50,0,0,3679,
		3678,1,0,0,0,3679,3680,1,0,0,0,3680,3681,1,0,0,0,3681,3683,5,89,0,0,3682,
		3684,5,93,0,0,3683,3682,1,0,0,0,3683,3684,1,0,0,0,3684,3685,1,0,0,0,3685,
		3693,3,232,116,0,3686,3687,5,117,0,0,3687,3694,3,668,334,0,3688,3689,5,
		185,0,0,3689,3690,5,1126,0,0,3690,3691,3,596,298,0,3691,3692,5,1127,0,
		0,3692,3694,1,0,0,0,3693,3686,1,0,0,0,3693,3688,1,0,0,0,3693,3694,1,0,
		0,0,3694,3729,1,0,0,0,3695,3696,5,169,0,0,3696,3699,3,232,116,0,3697,3698,
		5,117,0,0,3698,3700,3,668,334,0,3699,3697,1,0,0,0,3699,3700,1,0,0,0,3700,
		3729,1,0,0,0,3701,3703,7,51,0,0,3702,3704,5,125,0,0,3703,3702,1,0,0,0,
		3703,3704,1,0,0,0,3704,3705,1,0,0,0,3705,3707,5,89,0,0,3706,3708,5,93,
		0,0,3707,3706,1,0,0,0,3707,3708,1,0,0,0,3708,3709,1,0,0,0,3709,3717,3,
		232,116,0,3710,3711,5,117,0,0,3711,3718,3,668,334,0,3712,3713,5,185,0,
		0,3713,3714,5,1126,0,0,3714,3715,3,596,298,0,3715,3716,5,1127,0,0,3716,
		3718,1,0,0,0,3717,3710,1,0,0,0,3717,3712,1,0,0,0,3718,3729,1,0,0,0,3719,
		3724,5,112,0,0,3720,3722,7,51,0,0,3721,3723,5,125,0,0,3722,3721,1,0,0,
		0,3722,3723,1,0,0,0,3723,3725,1,0,0,0,3724,3720,1,0,0,0,3724,3725,1,0,
		0,0,3725,3726,1,0,0,0,3726,3727,5,89,0,0,3727,3729,3,232,116,0,3728,3679,
		1,0,0,0,3728,3695,1,0,0,0,3728,3701,1,0,0,0,3728,3719,1,0,0,0,3729,239,
		1,0,0,0,3730,3731,5,1126,0,0,3731,3732,3,244,122,0,3732,3733,5,1127,0,
		0,3733,3739,1,0,0,0,3734,3735,5,1126,0,0,3735,3736,3,240,120,0,3736,3737,
		5,1127,0,0,3737,3739,1,0,0,0,3738,3730,1,0,0,0,3738,3734,1,0,0,0,3739,
		241,1,0,0,0,3740,3741,5,1126,0,0,3741,3742,3,246,123,0,3742,3743,5,1127,
		0,0,3743,3749,1,0,0,0,3744,3745,5,1126,0,0,3745,3746,3,242,121,0,3746,
		3747,5,1127,0,0,3747,3749,1,0,0,0,3748,3740,1,0,0,0,3748,3744,1,0,0,0,
		3749,243,1,0,0,0,3750,3754,5,151,0,0,3751,3753,3,264,132,0,3752,3751,1,
		0,0,0,3753,3756,1,0,0,0,3754,3752,1,0,0,0,3754,3755,1,0,0,0,3755,3757,
		1,0,0,0,3756,3754,1,0,0,0,3757,3759,3,266,133,0,3758,3760,3,270,135,0,
		3759,3758,1,0,0,0,3759,3760,1,0,0,0,3760,3762,1,0,0,0,3761,3763,3,276,
		138,0,3762,3761,1,0,0,0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,3766,
		3,278,139,0,3765,3764,1,0,0,0,3765,3766,1,0,0,0,3766,3768,1,0,0,0,3767,
		3769,3,280,140,0,3768,3767,1,0,0,0,3768,3769,1,0,0,0,3769,3771,1,0,0,0,
		3770,3772,3,282,141,0,3771,3770,1,0,0,0,3771,3772,1,0,0,0,3772,3774,1,
		0,0,0,3773,3775,3,224,112,0,3774,3773,1,0,0,0,3774,3775,1,0,0,0,3775,3777,
		1,0,0,0,3776,3778,3,286,143,0,3777,3776,1,0,0,0,3777,3778,1,0,0,0,3778,
		3809,1,0,0,0,3779,3783,5,151,0,0,3780,3782,3,264,132,0,3781,3780,1,0,0,
		0,3782,3785,1,0,0,0,3783,3781,1,0,0,0,3783,3784,1,0,0,0,3784,3786,1,0,
		0,0,3785,3783,1,0,0,0,3786,3788,3,266,133,0,3787,3789,3,276,138,0,3788,
		3787,1,0,0,0,3788,3789,1,0,0,0,3789,3791,1,0,0,0,3790,3792,3,278,139,0,
		3791,3790,1,0,0,0,3791,3792,1,0,0,0,3792,3794,1,0,0,0,3793,3795,3,280,
		140,0,3794,3793,1,0,0,0,3794,3795,1,0,0,0,3795,3797,1,0,0,0,3796,3798,
		3,282,141,0,3797,3796,1,0,0,0,3797,3798,1,0,0,0,3798,3800,1,0,0,0,3799,
		3801,3,224,112,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,3803,1,0,0,0,
		3802,3804,3,286,143,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,3806,1,
		0,0,0,3805,3807,3,270,135,0,3806,3805,1,0,0,0,3806,3807,1,0,0,0,3807,3809,
		1,0,0,0,3808,3750,1,0,0,0,3808,3779,1,0,0,0,3809,245,1,0,0,0,3810,3814,
		5,151,0,0,3811,3813,3,264,132,0,3812,3811,1,0,0,0,3813,3816,1,0,0,0,3814,
		3812,1,0,0,0,3814,3815,1,0,0,0,3815,3817,1,0,0,0,3816,3814,1,0,0,0,3817,
		3819,3,266,133,0,3818,3820,3,276,138,0,3819,3818,1,0,0,0,3819,3820,1,0,
		0,0,3820,3822,1,0,0,0,3821,3823,3,278,139,0,3822,3821,1,0,0,0,3822,3823,
		1,0,0,0,3823,3825,1,0,0,0,3824,3826,3,280,140,0,3825,3824,1,0,0,0,3825,
		3826,1,0,0,0,3826,3828,1,0,0,0,3827,3829,3,282,141,0,3828,3827,1,0,0,0,
		3828,3829,1,0,0,0,3829,3831,1,0,0,0,3830,3832,3,224,112,0,3831,3830,1,
		0,0,0,3831,3832,1,0,0,0,3832,3834,1,0,0,0,3833,3835,3,286,143,0,3834,3833,
		1,0,0,0,3834,3835,1,0,0,0,3835,247,1,0,0,0,3836,3838,5,178,0,0,3837,3839,
		7,44,0,0,3838,3837,1,0,0,0,3838,3839,1,0,0,0,3839,3840,1,0,0,0,3840,3841,
		3,242,121,0,3841,249,1,0,0,0,3842,3844,5,178,0,0,3843,3845,7,44,0,0,3844,
		3843,1,0,0,0,3844,3845,1,0,0,0,3845,3848,1,0,0,0,3846,3849,3,246,123,0,
		3847,3849,3,242,121,0,3848,3846,1,0,0,0,3848,3847,1,0,0,0,3849,251,1,0,
		0,0,3850,3865,5,93,0,0,3851,3866,3,246,123,0,3852,3866,3,242,121,0,3853,
		3856,5,1126,0,0,3854,3857,3,246,123,0,3855,3857,3,242,121,0,3856,3854,
		1,0,0,0,3856,3855,1,0,0,0,3857,3858,1,0,0,0,3858,3863,5,1127,0,0,3859,
		3861,5,12,0,0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,3861,3862,1,0,0,0,3862,
		3864,3,564,282,0,3863,3860,1,0,0,0,3863,3864,1,0,0,0,3864,3866,1,0,0,0,
		3865,3851,1,0,0,0,3865,3852,1,0,0,0,3865,3853,1,0,0,0,3866,253,1,0,0,0,
		3867,3868,5,276,0,0,3868,3869,5,1126,0,0,3869,3870,5,1141,0,0,3870,3871,
		5,1128,0,0,3871,3872,5,1141,0,0,3872,3873,5,363,0,0,3873,3874,5,1126,0,
		0,3874,3875,3,256,128,0,3875,3876,5,1127,0,0,3876,3881,5,1127,0,0,3877,
		3879,5,12,0,0,3878,3877,1,0,0,0,3878,3879,1,0,0,0,3879,3880,1,0,0,0,3880,
		3882,3,564,282,0,3881,3878,1,0,0,0,3881,3882,1,0,0,0,3882,255,1,0,0,0,
		3883,3888,3,258,129,0,3884,3885,5,1128,0,0,3885,3887,3,258,129,0,3886,
		3884,1,0,0,0,3887,3890,1,0,0,0,3888,3886,1,0,0,0,3888,3889,1,0,0,0,3889,
		257,1,0,0,0,3890,3888,1,0,0,0,3891,3908,3,542,271,0,3892,3893,5,64,0,0,
		3893,3909,5,282,0,0,3894,3906,3,584,292,0,3895,3896,5,283,0,0,3896,3898,
		5,1141,0,0,3897,3899,3,260,130,0,3898,3897,1,0,0,0,3898,3899,1,0,0,0,3899,
		3901,1,0,0,0,3900,3902,3,262,131,0,3901,3900,1,0,0,0,3901,3902,1,0,0,0,
		3902,3907,1,0,0,0,3903,3904,5,59,0,0,3904,3905,5,283,0,0,3905,3907,5,1141,
		0,0,3906,3895,1,0,0,0,3906,3903,1,0,0,0,3907,3909,1,0,0,0,3908,3892,1,
		0,0,0,3908,3894,1,0,0,0,3909,3921,1,0,0,0,3910,3912,5,281,0,0,3911,3913,
		5,283,0,0,3912,3911,1,0,0,0,3912,3913,1,0,0,0,3913,3914,1,0,0,0,3914,3915,
		5,1141,0,0,3915,3916,5,363,0,0,3916,3917,5,1126,0,0,3917,3918,3,256,128,
		0,3918,3919,5,1127,0,0,3919,3921,1,0,0,0,3920,3891,1,0,0,0,3920,3910,1,
		0,0,0,3921,259,1,0,0,0,3922,3927,5,115,0,0,3923,3927,5,409,0,0,3924,3925,
		5,42,0,0,3925,3927,3,614,307,0,3926,3922,1,0,0,0,3926,3923,1,0,0,0,3926,
		3924,1,0,0,0,3927,3928,1,0,0,0,3928,3929,5,117,0,0,3929,3930,5,55,0,0,
		3930,261,1,0,0,0,3931,3936,5,115,0,0,3932,3936,5,409,0,0,3933,3934,5,42,
		0,0,3934,3936,3,614,307,0,3935,3931,1,0,0,0,3935,3932,1,0,0,0,3935,3933,
		1,0,0,0,3936,3937,1,0,0,0,3937,3938,5,117,0,0,3938,3939,5,409,0,0,3939,
		263,1,0,0,0,3940,3949,7,52,0,0,3941,3949,5,74,0,0,3942,3949,5,169,0,0,
		3943,3949,5,164,0,0,3944,3949,5,162,0,0,3945,3949,5,623,0,0,3946,3949,
		7,53,0,0,3947,3949,5,163,0,0,3948,3940,1,0,0,0,3948,3941,1,0,0,0,3948,
		3942,1,0,0,0,3948,3943,1,0,0,0,3948,3944,1,0,0,0,3948,3945,1,0,0,0,3948,
		3946,1,0,0,0,3948,3947,1,0,0,0,3949,265,1,0,0,0,3950,3953,5,1110,0,0,3951,
		3953,3,268,134,0,3952,3950,1,0,0,0,3952,3951,1,0,0,0,3953,3958,1,0,0,0,
		3954,3955,5,1128,0,0,3955,3957,3,268,134,0,3956,3954,1,0,0,0,3957,3960,
		1,0,0,0,3958,3956,1,0,0,0,3958,3959,1,0,0,0,3959,267,1,0,0,0,3960,3958,
		1,0,0,0,3961,3962,3,536,268,0,3962,3963,5,1125,0,0,3963,3964,5,1110,0,
		0,3964,3991,1,0,0,0,3965,3970,3,542,271,0,3966,3968,5,12,0,0,3967,3966,
		1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,0,0,3969,3971,3,564,282,0,3970,
		3967,1,0,0,0,3970,3971,1,0,0,0,3971,3991,1,0,0,0,3972,3977,3,628,314,0,
		3973,3975,5,12,0,0,3974,3973,1,0,0,0,3974,3975,1,0,0,0,3975,3976,1,0,0,
		0,3976,3978,3,564,282,0,3977,3974,1,0,0,0,3977,3978,1,0,0,0,3978,3991,
		1,0,0,0,3979,3980,5,1153,0,0,3980,3982,5,1101,0,0,3981,3979,1,0,0,0,3981,
		3982,1,0,0,0,3982,3983,1,0,0,0,3983,3988,3,668,334,0,3984,3986,5,12,0,
		0,3985,3984,1,0,0,0,3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3989,3,564,
		282,0,3988,3985,1,0,0,0,3988,3989,1,0,0,0,3989,3991,1,0,0,0,3990,3961,
		1,0,0,0,3990,3965,1,0,0,0,3990,3972,1,0,0,0,3990,3981,1,0,0,0,3991,269,
		1,0,0,0,3992,3993,5,86,0,0,3993,3998,3,204,102,0,3994,3995,5,1128,0,0,
		3995,3997,3,204,102,0,3996,3994,1,0,0,0,3997,4000,1,0,0,0,3998,3996,1,
		0,0,0,3998,3999,1,0,0,0,3999,4029,1,0,0,0,4000,3998,1,0,0,0,4001,4002,
		5,86,0,0,4002,4003,5,398,0,0,4003,4029,5,1141,0,0,4004,4005,5,86,0,0,4005,
		4006,5,126,0,0,4006,4010,5,1141,0,0,4007,4008,5,25,0,0,4008,4009,5,152,
		0,0,4009,4011,3,550,275,0,4010,4007,1,0,0,0,4010,4011,1,0,0,0,4011,4018,
		1,0,0,0,4012,4014,7,41,0,0,4013,4015,3,272,136,0,4014,4013,1,0,0,0,4015,
		4016,1,0,0,0,4016,4014,1,0,0,0,4016,4017,1,0,0,0,4017,4019,1,0,0,0,4018,
		4012,1,0,0,0,4018,4019,1,0,0,0,4019,4026,1,0,0,0,4020,4022,5,100,0,0,4021,
		4023,3,274,137,0,4022,4021,1,0,0,0,4023,4024,1,0,0,0,4024,4022,1,0,0,0,
		4024,4025,1,0,0,0,4025,4027,1,0,0,0,4026,4020,1,0,0,0,4026,4027,1,0,0,
		0,4027,4029,1,0,0,0,4028,3992,1,0,0,0,4028,4001,1,0,0,0,4028,4004,1,0,
		0,0,4029,271,1,0,0,0,4030,4031,5,171,0,0,4031,4032,5,19,0,0,4032,4043,
		5,1141,0,0,4033,4035,5,121,0,0,4034,4033,1,0,0,0,4034,4035,1,0,0,0,4035,
		4036,1,0,0,0,4036,4037,5,56,0,0,4037,4038,5,19,0,0,4038,4043,5,1141,0,
		0,4039,4040,5,57,0,0,4040,4041,5,19,0,0,4041,4043,5,1141,0,0,4042,4030,
		1,0,0,0,4042,4034,1,0,0,0,4042,4039,1,0,0,0,4043,273,1,0,0,0,4044,4045,
		5,167,0,0,4045,4046,5,19,0,0,4046,4051,5,1141,0,0,4047,4048,5,171,0,0,
		4048,4049,5,19,0,0,4049,4051,5,1141,0,0,4050,4044,1,0,0,0,4050,4047,1,
		0,0,0,4051,275,1,0,0,0,4052,4053,5,67,0,0,4053,4055,3,228,114,0,4054,4052,
		1,0,0,0,4054,4055,1,0,0,0,4055,4058,1,0,0,0,4056,4057,5,188,0,0,4057,4059,
		3,668,334,0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,277,1,0,0,0,4060,
		4061,5,72,0,0,4061,4062,5,19,0,0,4062,4067,3,284,142,0,4063,4064,5,1128,
		0,0,4064,4066,3,284,142,0,4065,4063,1,0,0,0,4066,4069,1,0,0,0,4067,4065,
		1,0,0,0,4067,4068,1,0,0,0,4068,4072,1,0,0,0,4069,4067,1,0,0,0,4070,4071,
		5,190,0,0,4071,4073,5,596,0,0,4072,4070,1,0,0,0,4072,4073,1,0,0,0,4073,
		279,1,0,0,0,4074,4075,5,73,0,0,4075,4076,3,668,334,0,4076,281,1,0,0,0,
		4077,4078,5,674,0,0,4078,4079,3,646,323,0,4079,4080,5,12,0,0,4080,4081,
		5,1126,0,0,4081,4082,3,644,322,0,4082,4092,5,1127,0,0,4083,4084,5,1128,
		0,0,4084,4085,3,646,323,0,4085,4086,5,12,0,0,4086,4087,5,1126,0,0,4087,
		4088,3,644,322,0,4088,4089,5,1127,0,0,4089,4091,1,0,0,0,4090,4083,1,0,
		0,0,4091,4094,1,0,0,0,4092,4090,1,0,0,0,4092,4093,1,0,0,0,4093,283,1,0,
		0,0,4094,4092,1,0,0,0,4095,4097,3,668,334,0,4096,4098,7,48,0,0,4097,4096,
		1,0,0,0,4097,4098,1,0,0,0,4098,285,1,0,0,0,4099,4110,5,98,0,0,4100,4101,
		3,288,144,0,4101,4102,5,1128,0,0,4102,4104,1,0,0,0,4103,4100,1,0,0,0,4103,
		4104,1,0,0,0,4104,4105,1,0,0,0,4105,4111,3,288,144,0,4106,4107,3,288,144,
		0,4107,4108,5,530,0,0,4108,4109,3,288,144,0,4109,4111,1,0,0,0,4110,4103,
		1,0,0,0,4110,4106,1,0,0,0,4111,287,1,0,0,0,4112,4116,3,570,285,0,4113,
		4116,3,548,274,0,4114,4116,3,566,283,0,4115,4112,1,0,0,0,4115,4113,1,0,
		0,0,4115,4114,1,0,0,0,4116,289,1,0,0,0,4117,4118,5,627,0,0,4118,4127,5,
		651,0,0,4119,4124,3,312,156,0,4120,4121,5,1128,0,0,4121,4123,3,312,156,
		0,4122,4120,1,0,0,0,4123,4126,1,0,0,0,4124,4122,1,0,0,0,4124,4125,1,0,
		0,0,4125,4128,1,0,0,0,4126,4124,1,0,0,0,4127,4119,1,0,0,0,4127,4128,1,
		0,0,0,4128,291,1,0,0,0,4129,4131,5,342,0,0,4130,4132,5,676,0,0,4131,4130,
		1,0,0,0,4131,4132,1,0,0,0,4132,293,1,0,0,0,4133,4135,5,367,0,0,4134,4136,
		5,676,0,0,4135,4134,1,0,0,0,4135,4136,1,0,0,0,4136,4142,1,0,0,0,4137,4139,
		5,10,0,0,4138,4140,5,519,0,0,4139,4138,1,0,0,0,4139,4140,1,0,0,0,4140,
		4141,1,0,0,0,4141,4143,5,351,0,0,4142,4137,1,0,0,0,4142,4143,1,0,0,0,4143,
		4148,1,0,0,0,4144,4146,5,519,0,0,4145,4144,1,0,0,0,4145,4146,1,0,0,0,4146,
		4147,1,0,0,0,4147,4149,5,137,0,0,4148,4145,1,0,0,0,4148,4149,1,0,0,0,4149,
		295,1,0,0,0,4150,4152,5,595,0,0,4151,4153,5,676,0,0,4152,4151,1,0,0,0,
		4152,4153,1,0,0,0,4153,4159,1,0,0,0,4154,4156,5,10,0,0,4155,4157,5,519,
		0,0,4156,4155,1,0,0,0,4156,4157,1,0,0,0,4157,4158,1,0,0,0,4158,4160,5,
		351,0,0,4159,4154,1,0,0,0,4159,4160,1,0,0,0,4160,4165,1,0,0,0,4161,4163,
		5,519,0,0,4162,4161,1,0,0,0,4162,4163,1,0,0,0,4163,4164,1,0,0,0,4164,4166,
		5,137,0,0,4165,4162,1,0,0,0,4165,4166,1,0,0,0,4166,297,1,0,0,0,4167,4168,
		5,602,0,0,4168,4169,3,564,282,0,4169,299,1,0,0,0,4170,4172,5,595,0,0,4171,
		4173,5,676,0,0,4172,4171,1,0,0,0,4172,4173,1,0,0,0,4173,4174,1,0,0,0,4174,
		4176,5,173,0,0,4175,4177,5,602,0,0,4176,4175,1,0,0,0,4176,4177,1,0,0,0,
		4177,4178,1,0,0,0,4178,4179,3,564,282,0,4179,301,1,0,0,0,4180,4181,5,137,
		0,0,4181,4182,5,602,0,0,4182,4183,3,564,282,0,4183,303,1,0,0,0,4184,4185,
		5,102,0,0,4185,4186,7,54,0,0,4186,4191,3,314,157,0,4187,4188,5,1128,0,
		0,4188,4190,3,314,157,0,4189,4187,1,0,0,0,4190,4193,1,0,0,0,4191,4189,
		1,0,0,0,4191,4192,1,0,0,0,4192,4195,1,0,0,0,4193,4191,1,0,0,0,4194,4196,
		3,626,313,0,4195,4194,1,0,0,0,4195,4196,1,0,0,0,4196,305,1,0,0,0,4197,
		4198,5,180,0,0,4198,4199,5,737,0,0,4199,307,1,0,0,0,4200,4201,5,152,0,
		0,4201,4202,5,338,0,0,4202,4203,5,1117,0,0,4203,4204,7,24,0,0,4204,309,
		1,0,0,0,4205,4207,5,152,0,0,4206,4208,7,55,0,0,4207,4206,1,0,0,0,4207,
		4208,1,0,0,0,4208,4209,1,0,0,0,4209,4210,5,651,0,0,4210,4215,3,318,159,
		0,4211,4212,5,1128,0,0,4212,4214,3,318,159,0,4213,4211,1,0,0,0,4214,4217,
		1,0,0,0,4215,4213,1,0,0,0,4215,4216,1,0,0,0,4216,311,1,0,0,0,4217,4215,
		1,0,0,0,4218,4219,5,190,0,0,4219,4220,5,375,0,0,4220,4226,5,614,0,0,4221,
		4222,5,133,0,0,4222,4226,5,191,0,0,4223,4224,5,133,0,0,4224,4226,5,536,
		0,0,4225,4218,1,0,0,0,4225,4221,1,0,0,0,4225,4223,1,0,0,0,4226,313,1,0,
		0,0,4227,4232,3,538,269,0,4228,4230,5,12,0,0,4229,4228,1,0,0,0,4229,4230,
		1,0,0,0,4230,4231,1,0,0,0,4231,4233,3,564,282,0,4232,4229,1,0,0,0,4232,
		4233,1,0,0,0,4233,4234,1,0,0,0,4234,4235,3,316,158,0,4235,315,1,0,0,0,
		4236,4238,5,133,0,0,4237,4239,5,472,0,0,4238,4237,1,0,0,0,4238,4239,1,
		0,0,0,4239,4245,1,0,0,0,4240,4242,5,105,0,0,4241,4240,1,0,0,0,4241,4242,
		1,0,0,0,4242,4243,1,0,0,0,4243,4245,5,191,0,0,4244,4236,1,0,0,0,4244,4241,
		1,0,0,0,4245,317,1,0,0,0,4246,4247,5,462,0,0,4247,4248,5,470,0,0,4248,
		4254,3,320,160,0,4249,4250,5,133,0,0,4250,4254,5,191,0,0,4251,4252,5,133,
		0,0,4252,4254,5,536,0,0,4253,4246,1,0,0,0,4253,4249,1,0,0,0,4253,4251,
		1,0,0,0,4254,319,1,0,0,0,4255,4256,5,794,0,0,4256,4263,5,133,0,0,4257,
		4258,5,133,0,0,4258,4263,5,795,0,0,4259,4260,5,133,0,0,4260,4263,5,796,
		0,0,4261,4263,5,797,0,0,4262,4255,1,0,0,0,4262,4257,1,0,0,0,4262,4259,
		1,0,0,0,4262,4261,1,0,0,0,4263,321,1,0,0,0,4264,4265,5,24,0,0,4265,4266,
		5,475,0,0,4266,4267,5,173,0,0,4267,4272,3,340,170,0,4268,4269,5,1128,0,
		0,4269,4271,3,340,170,0,4270,4268,1,0,0,0,4271,4274,1,0,0,0,4272,4270,
		1,0,0,0,4272,4273,1,0,0,0,4273,4276,1,0,0,0,4274,4272,1,0,0,0,4275,4277,
		3,348,174,0,4276,4275,1,0,0,0,4276,4277,1,0,0,0,4277,323,1,0,0,0,4278,
		4279,5,24,0,0,4279,4280,5,586,0,0,4280,4281,5,427,0,0,4281,4286,3,350,
		175,0,4282,4283,5,1128,0,0,4283,4285,3,350,175,0,4284,4282,1,0,0,0,4285,
		4288,1,0,0,0,4286,4284,1,0,0,0,4286,4287,1,0,0,0,4287,325,1,0,0,0,4288,
		4286,1,0,0,0,4289,4290,5,131,0,0,4290,4291,7,56,0,0,4291,4296,5,474,0,
		0,4292,4293,5,173,0,0,4293,4297,5,1141,0,0,4294,4295,5,15,0,0,4295,4297,
		5,1141,0,0,4296,4292,1,0,0,0,4296,4294,1,0,0,0,4297,327,1,0,0,0,4298,4299,
		5,587,0,0,4299,4300,5,475,0,0,4300,329,1,0,0,0,4301,4302,5,587,0,0,4302,
		4304,5,612,0,0,4303,4305,5,6,0,0,4304,4303,1,0,0,0,4304,4305,1,0,0,0,4305,
		4307,1,0,0,0,4306,4308,3,348,174,0,4307,4306,1,0,0,0,4307,4308,1,0,0,0,
		4308,331,1,0,0,0,4309,4310,5,627,0,0,4310,4319,5,612,0,0,4311,4316,3,354,
		177,0,4312,4313,5,1128,0,0,4313,4315,3,354,177,0,4314,4312,1,0,0,0,4315,
		4318,1,0,0,0,4316,4314,1,0,0,0,4316,4317,1,0,0,0,4317,4320,1,0,0,0,4318,
		4316,1,0,0,0,4319,4311,1,0,0,0,4319,4320,1,0,0,0,4320,4323,1,0,0,0,4321,
		4322,5,661,0,0,4322,4324,3,356,178,0,4323,4321,1,0,0,0,4323,4324,1,0,0,
		0,4324,4328,1,0,0,0,4325,4327,3,358,179,0,4326,4325,1,0,0,0,4327,4330,
		1,0,0,0,4328,4326,1,0,0,0,4328,4329,1,0,0,0,4329,4332,1,0,0,0,4330,4328,
		1,0,0,0,4331,4333,3,348,174,0,4332,4331,1,0,0,0,4332,4333,1,0,0,0,4333,
		333,1,0,0,0,4334,4335,5,633,0,0,4335,4344,5,612,0,0,4336,4341,3,354,177,
		0,4337,4338,5,1128,0,0,4338,4340,3,354,177,0,4339,4337,1,0,0,0,4340,4343,
		1,0,0,0,4341,4339,1,0,0,0,4341,4342,1,0,0,0,4342,4345,1,0,0,0,4343,4341,
		1,0,0,0,4344,4336,1,0,0,0,4344,4345,1,0,0,0,4345,335,1,0,0,0,4346,4347,
		5,627,0,0,4347,4348,5,439,0,0,4348,337,1,0,0,0,4349,4350,5,633,0,0,4350,
		4351,5,439,0,0,4351,339,1,0,0,0,4352,4353,3,342,171,0,4353,4354,5,1117,
		0,0,4354,4355,5,1141,0,0,4355,4382,1,0,0,0,4356,4357,3,344,172,0,4357,
		4358,5,1117,0,0,4358,4359,3,570,285,0,4359,4382,1,0,0,0,4360,4361,3,346,
		173,0,4361,4362,5,1117,0,0,4362,4363,7,24,0,0,4363,4382,1,0,0,0,4364,4365,
		5,479,0,0,4365,4366,5,1117,0,0,4366,4382,5,1144,0,0,4367,4368,5,447,0,
		0,4368,4369,5,1117,0,0,4369,4378,5,1126,0,0,4370,4375,3,564,282,0,4371,
		4372,5,1128,0,0,4372,4374,3,564,282,0,4373,4371,1,0,0,0,4374,4377,1,0,
		0,0,4375,4373,1,0,0,0,4375,4376,1,0,0,0,4376,4379,1,0,0,0,4377,4375,1,
		0,0,0,4378,4370,1,0,0,0,4378,4379,1,0,0,0,4379,4380,1,0,0,0,4380,4382,
		5,1127,0,0,4381,4352,1,0,0,0,4381,4356,1,0,0,0,4381,4360,1,0,0,0,4381,
		4364,1,0,0,0,4381,4367,1,0,0,0,4382,341,1,0,0,0,4383,4384,7,57,0,0,4384,
		343,1,0,0,0,4385,4386,7,58,0,0,4386,345,1,0,0,0,4387,4388,7,59,0,0,4388,
		347,1,0,0,0,4389,4390,5,64,0,0,4390,4391,5,353,0,0,4391,4392,5,1141,0,
		0,4392,349,1,0,0,0,4393,4394,5,579,0,0,4394,4395,5,1117,0,0,4395,4396,
		5,1126,0,0,4396,4397,3,596,298,0,4397,4398,5,1127,0,0,4398,4443,1,0,0,
		0,4399,4400,5,581,0,0,4400,4401,5,1117,0,0,4401,4402,5,1126,0,0,4402,4403,
		3,596,298,0,4403,4404,5,1127,0,0,4404,4443,1,0,0,0,4405,4406,5,580,0,0,
		4406,4407,5,1117,0,0,4407,4408,5,1126,0,0,4408,4409,3,600,300,0,4409,4410,
		5,1127,0,0,4410,4443,1,0,0,0,4411,4412,5,582,0,0,4412,4413,5,1117,0,0,
		4413,4414,5,1126,0,0,4414,4415,3,600,300,0,4415,4416,5,1127,0,0,4416,4443,
		1,0,0,0,4417,4418,5,584,0,0,4418,4419,5,1117,0,0,4419,4420,5,1126,0,0,
		4420,4421,3,610,305,0,4421,4422,5,1127,0,0,4422,4443,1,0,0,0,4423,4424,
		5,585,0,0,4424,4425,5,1117,0,0,4425,4426,5,1126,0,0,4426,4427,3,610,305,
		0,4427,4428,5,1127,0,0,4428,4443,1,0,0,0,4429,4430,5,583,0,0,4430,4431,
		5,1117,0,0,4431,4432,5,1126,0,0,4432,4437,3,352,176,0,4433,4434,5,1128,
		0,0,4434,4436,3,352,176,0,4435,4433,1,0,0,0,4436,4439,1,0,0,0,4437,4435,
		1,0,0,0,4437,4438,1,0,0,0,4438,4440,1,0,0,0,4439,4437,1,0,0,0,4440,4441,
		5,1127,0,0,4441,4443,1,0,0,0,4442,4393,1,0,0,0,4442,4399,1,0,0,0,4442,
		4405,1,0,0,0,4442,4411,1,0,0,0,4442,4417,1,0,0,0,4442,4423,1,0,0,0,4442,
		4429,1,0,0,0,4443,351,1,0,0,0,4444,4445,5,1126,0,0,4445,4446,3,538,269,
		0,4446,4447,5,1128,0,0,4447,4448,3,538,269,0,4448,4449,5,1127,0,0,4449,
		353,1,0,0,0,4450,4451,7,60,0,0,4451,355,1,0,0,0,4452,4453,7,61,0,0,4453,
		4454,5,1117,0,0,4454,4471,3,360,180,0,4455,4456,5,481,0,0,4456,4457,5,
		1117,0,0,4457,4458,5,1141,0,0,4458,4459,5,1128,0,0,4459,4460,5,482,0,0,
		4460,4461,5,1117,0,0,4461,4471,3,570,285,0,4462,4463,5,573,0,0,4463,4464,
		5,1117,0,0,4464,4465,5,1141,0,0,4465,4466,5,1128,0,0,4466,4467,5,574,0,
		0,4467,4468,5,1117,0,0,4468,4471,3,570,285,0,4469,4471,5,621,0,0,4470,
		4452,1,0,0,0,4470,4455,1,0,0,0,4470,4462,1,0,0,0,4470,4469,1,0,0,0,4471,
		357,1,0,0,0,4472,4473,5,663,0,0,4473,4474,5,1117,0,0,4474,4485,5,1141,
		0,0,4475,4476,5,549,0,0,4476,4477,5,1117,0,0,4477,4485,5,1141,0,0,4478,
		4479,5,389,0,0,4479,4480,5,1117,0,0,4480,4485,5,1141,0,0,4481,4482,5,553,
		0,0,4482,4483,5,1117,0,0,4483,4485,5,1141,0,0,4484,4472,1,0,0,0,4484,4475,
		1,0,0,0,4484,4478,1,0,0,0,4484,4481,1,0,0,0,4485,359,1,0,0,0,4486,4491,
		3,556,278,0,4487,4488,5,1128,0,0,4488,4490,3,556,278,0,4489,4487,1,0,0,
		0,4490,4493,1,0,0,0,4491,4489,1,0,0,0,4491,4492,1,0,0,0,4492,4496,1,0,
		0,0,4493,4491,1,0,0,0,4494,4496,5,1141,0,0,4495,4486,1,0,0,0,4495,4494,
		1,0,0,0,4496,361,1,0,0,0,4497,4498,5,679,0,0,4498,4499,7,62,0,0,4499,4501,
		3,558,279,0,4500,4502,7,63,0,0,4501,4500,1,0,0,0,4501,4502,1,0,0,0,4502,
		363,1,0,0,0,4503,4504,5,679,0,0,4504,4505,5,405,0,0,4505,4511,3,558,279,
		0,4506,4509,5,641,0,0,4507,4508,5,64,0,0,4508,4510,5,507,0,0,4509,4507,
		1,0,0,0,4509,4510,1,0,0,0,4510,4512,1,0,0,0,4511,4506,1,0,0,0,4511,4512,
		1,0,0,0,4512,365,1,0,0,0,4513,4514,5,679,0,0,4514,4515,5,558,0,0,4515,
		4516,3,558,279,0,4516,367,1,0,0,0,4517,4518,5,679,0,0,4518,4519,5,367,
		0,0,4519,4522,3,558,279,0,4520,4521,5,534,0,0,4521,4523,5,551,0,0,4522,
		4520,1,0,0,0,4522,4523,1,0,0,0,4523,369,1,0,0,0,4524,4525,5,679,0,0,4525,
		4526,5,595,0,0,4526,4527,3,558,279,0,4527,371,1,0,0,0,4528,4529,5,679,
		0,0,4529,4532,5,568,0,0,4530,4531,5,32,0,0,4531,4533,3,558,279,0,4532,
		4530,1,0,0,0,4532,4533,1,0,0,0,4533,373,1,0,0,0,4534,4535,5,558,0,0,4535,
		4536,3,564,282,0,4536,4539,5,67,0,0,4537,4540,5,1141,0,0,4538,4540,5,1153,
		0,0,4539,4537,1,0,0,0,4539,4538,1,0,0,0,4540,375,1,0,0,0,4541,4542,5,704,
		0,0,4542,4545,3,564,282,0,4543,4544,5,185,0,0,4544,4546,3,612,306,0,4545,
		4543,1,0,0,0,4545,4546,1,0,0,0,4546,377,1,0,0,0,4547,4548,7,64,0,0,4548,
		4549,5,558,0,0,4549,4550,3,564,282,0,4550,379,1,0,0,0,4551,4554,3,382,
		191,0,4552,4554,3,4,2,0,4553,4551,1,0,0,0,4553,4552,1,0,0,0,4554,381,1,
		0,0,0,4555,4556,3,564,282,0,4556,4557,5,1137,0,0,4557,4559,1,0,0,0,4558,
		4555,1,0,0,0,4558,4559,1,0,0,0,4559,4560,1,0,0,0,4560,4599,5,342,0,0,4561,
		4562,3,402,201,0,4562,4563,5,1129,0,0,4563,4565,1,0,0,0,4564,4561,1,0,
		0,0,4565,4568,1,0,0,0,4566,4564,1,0,0,0,4566,4567,1,0,0,0,4567,4574,1,
		0,0,0,4568,4566,1,0,0,0,4569,4570,3,404,202,0,4570,4571,5,1129,0,0,4571,
		4573,1,0,0,0,4572,4569,1,0,0,0,4573,4576,1,0,0,0,4574,4572,1,0,0,0,4574,
		4575,1,0,0,0,4575,4582,1,0,0,0,4576,4574,1,0,0,0,4577,4578,3,406,203,0,
		4578,4579,5,1129,0,0,4579,4581,1,0,0,0,4580,4577,1,0,0,0,4581,4584,1,0,
		0,0,4582,4580,1,0,0,0,4582,4583,1,0,0,0,4583,4590,1,0,0,0,4584,4582,1,
		0,0,0,4585,4586,3,408,204,0,4586,4587,5,1129,0,0,4587,4589,1,0,0,0,4588,
		4585,1,0,0,0,4589,4592,1,0,0,0,4590,4588,1,0,0,0,4590,4591,1,0,0,0,4591,
		4596,1,0,0,0,4592,4590,1,0,0,0,4593,4595,3,412,206,0,4594,4593,1,0,0,0,
		4595,4598,1,0,0,0,4596,4594,1,0,0,0,4596,4597,1,0,0,0,4597,4600,1,0,0,
		0,4598,4596,1,0,0,0,4599,4566,1,0,0,0,4599,4600,1,0,0,0,4600,4601,1,0,
		0,0,4601,4603,5,405,0,0,4602,4604,3,564,282,0,4603,4602,1,0,0,0,4603,4604,
		1,0,0,0,4604,383,1,0,0,0,4605,4608,5,22,0,0,4606,4609,3,564,282,0,4607,
		4609,3,668,334,0,4608,4606,1,0,0,0,4608,4607,1,0,0,0,4608,4609,1,0,0,0,
		4609,4611,1,0,0,0,4610,4612,3,414,207,0,4611,4610,1,0,0,0,4612,4613,1,
		0,0,0,4613,4611,1,0,0,0,4613,4614,1,0,0,0,4614,4621,1,0,0,0,4615,4617,
		5,53,0,0,4616,4618,3,412,206,0,4617,4616,1,0,0,0,4618,4619,1,0,0,0,4619,
		4617,1,0,0,0,4619,4620,1,0,0,0,4620,4622,1,0,0,0,4621,4615,1,0,0,0,4621,
		4622,1,0,0,0,4622,4623,1,0,0,0,4623,4624,5,405,0,0,4624,4625,5,22,0,0,
		4625,385,1,0,0,0,4626,4627,5,76,0,0,4627,4628,3,668,334,0,4628,4630,5,
		172,0,0,4629,4631,3,412,206,0,4630,4629,1,0,0,0,4631,4632,1,0,0,0,4632,
		4630,1,0,0,0,4632,4633,1,0,0,0,4633,4637,1,0,0,0,4634,4636,3,416,208,0,
		4635,4634,1,0,0,0,4636,4639,1,0,0,0,4637,4635,1,0,0,0,4637,4638,1,0,0,
		0,4638,4646,1,0,0,0,4639,4637,1,0,0,0,4640,4642,5,53,0,0,4641,4643,3,412,
		206,0,4642,4641,1,0,0,0,4643,4644,1,0,0,0,4644,4642,1,0,0,0,4644,4645,
		1,0,0,0,4645,4647,1,0,0,0,4646,4640,1,0,0,0,4646,4647,1,0,0,0,4647,4648,
		1,0,0,0,4648,4649,5,405,0,0,4649,4650,5,76,0,0,4650,387,1,0,0,0,4651,4652,
		5,88,0,0,4652,4653,3,564,282,0,4653,389,1,0,0,0,4654,4655,5,95,0,0,4655,
		4656,3,564,282,0,4656,391,1,0,0,0,4657,4658,3,564,282,0,4658,4659,5,1137,
		0,0,4659,4661,1,0,0,0,4660,4657,1,0,0,0,4660,4661,1,0,0,0,4661,4662,1,
		0,0,0,4662,4664,5,104,0,0,4663,4665,3,412,206,0,4664,4663,1,0,0,0,4665,
		4666,1,0,0,0,4666,4664,1,0,0,0,4666,4667,1,0,0,0,4667,4668,1,0,0,0,4668,
		4669,5,405,0,0,4669,4671,5,104,0,0,4670,4672,3,564,282,0,4671,4670,1,0,
		0,0,4671,4672,1,0,0,0,4672,393,1,0,0,0,4673,4674,3,564,282,0,4674,4675,
		5,1137,0,0,4675,4677,1,0,0,0,4676,4673,1,0,0,0,4676,4677,1,0,0,0,4677,
		4678,1,0,0,0,4678,4680,5,139,0,0,4679,4681,3,412,206,0,4680,4679,1,0,0,
		0,4681,4682,1,0,0,0,4682,4680,1,0,0,0,4682,4683,1,0,0,0,4683,4684,1,0,
		0,0,4684,4685,5,661,0,0,4685,4686,3,668,334,0,4686,4687,5,405,0,0,4687,
		4689,5,139,0,0,4688,4690,3,564,282,0,4689,4688,1,0,0,0,4689,4690,1,0,0,
		0,4690,395,1,0,0,0,4691,4692,5,145,0,0,4692,4693,3,668,334,0,4693,397,
		1,0,0,0,4694,4695,3,564,282,0,4695,4696,5,1137,0,0,4696,4698,1,0,0,0,4697,
		4694,1,0,0,0,4697,4698,1,0,0,0,4698,4699,1,0,0,0,4699,4700,5,189,0,0,4700,
		4701,3,668,334,0,4701,4703,5,397,0,0,4702,4704,3,412,206,0,4703,4702,1,
		0,0,0,4704,4705,1,0,0,0,4705,4703,1,0,0,0,4705,4706,1,0,0,0,4706,4707,
		1,0,0,0,4707,4708,5,405,0,0,4708,4710,5,189,0,0,4709,4711,3,564,282,0,
		4710,4709,1,0,0,0,4710,4711,1,0,0,0,4711,399,1,0,0,0,4712,4713,5,359,0,
		0,4713,4728,3,564,282,0,4714,4719,5,63,0,0,4715,4717,5,518,0,0,4716,4715,
		1,0,0,0,4716,4717,1,0,0,0,4717,4718,1,0,0,0,4718,4720,5,67,0,0,4719,4716,
		1,0,0,0,4719,4720,1,0,0,0,4720,4721,1,0,0,0,4721,4722,3,564,282,0,4722,
		4723,5,86,0,0,4723,4724,3,596,298,0,4724,4728,1,0,0,0,4725,4726,5,537,
		0,0,4726,4728,3,564,282,0,4727,4712,1,0,0,0,4727,4714,1,0,0,0,4727,4725,
		1,0,0,0,4728,401,1,0,0,0,4729,4730,5,41,0,0,4730,4731,3,596,298,0,4731,
		4734,3,584,292,0,4732,4733,5,42,0,0,4733,4735,3,668,334,0,4734,4732,1,
		0,0,0,4734,4735,1,0,0,0,4735,403,1,0,0,0,4736,4737,5,41,0,0,4737,4738,
		3,564,282,0,4738,4739,5,29,0,0,4739,4746,5,64,0,0,4740,4747,3,570,285,
		0,4741,4743,5,160,0,0,4742,4744,5,667,0,0,4743,4742,1,0,0,0,4743,4744,
		1,0,0,0,4744,4745,1,0,0,0,4745,4747,5,1141,0,0,4746,4740,1,0,0,0,4746,
		4741,1,0,0,0,4747,405,1,0,0,0,4748,4749,5,41,0,0,4749,4750,3,564,282,0,
		4750,4751,5,38,0,0,4751,4752,5,64,0,0,4752,4753,3,196,98,0,4753,407,1,
		0,0,0,4754,4755,5,41,0,0,4755,4756,7,65,0,0,4756,4757,5,440,0,0,4757,4758,
		5,64,0,0,4758,4763,3,410,205,0,4759,4760,5,1128,0,0,4760,4762,3,410,205,
		0,4761,4759,1,0,0,0,4762,4765,1,0,0,0,4763,4761,1,0,0,0,4763,4764,1,0,
		0,0,4764,4766,1,0,0,0,4765,4763,1,0,0,0,4766,4767,3,380,190,0,4767,409,
		1,0,0,0,4768,4780,3,570,285,0,4769,4771,5,160,0,0,4770,4772,5,667,0,0,
		4771,4770,1,0,0,0,4771,4772,1,0,0,0,4772,4773,1,0,0,0,4773,4780,5,1141,
		0,0,4774,4780,3,564,282,0,4775,4780,5,161,0,0,4776,4777,5,113,0,0,4777,
		4780,5,433,0,0,4778,4780,5,159,0,0,4779,4768,1,0,0,0,4779,4769,1,0,0,0,
		4779,4774,1,0,0,0,4779,4775,1,0,0,0,4779,4776,1,0,0,0,4779,4778,1,0,0,
		0,4780,411,1,0,0,0,4781,4784,3,18,9,0,4782,4784,3,4,2,0,4783,4781,1,0,
		0,0,4783,4782,1,0,0,0,4784,4785,1,0,0,0,4785,4786,5,1129,0,0,4786,413,
		1,0,0,0,4787,4790,5,187,0,0,4788,4791,3,582,291,0,4789,4791,3,668,334,
		0,4790,4788,1,0,0,0,4790,4789,1,0,0,0,4791,4792,1,0,0,0,4792,4794,5,172,
		0,0,4793,4795,3,412,206,0,4794,4793,1,0,0,0,4795,4796,1,0,0,0,4796,4794,
		1,0,0,0,4796,4797,1,0,0,0,4797,415,1,0,0,0,4798,4799,5,54,0,0,4799,4800,
		3,668,334,0,4800,4802,5,172,0,0,4801,4803,3,412,206,0,4802,4801,1,0,0,
		0,4803,4804,1,0,0,0,4804,4802,1,0,0,0,4804,4805,1,0,0,0,4805,417,1,0,0,
		0,4806,4807,5,7,0,0,4807,4808,5,663,0,0,4808,4813,3,438,219,0,4809,4810,
		5,1128,0,0,4810,4812,3,438,219,0,4811,4809,1,0,0,0,4812,4815,1,0,0,0,4813,
		4811,1,0,0,0,4813,4814,1,0,0,0,4814,4867,1,0,0,0,4815,4813,1,0,0,0,4816,
		4817,5,7,0,0,4817,4819,5,663,0,0,4818,4820,3,620,310,0,4819,4818,1,0,0,
		0,4819,4820,1,0,0,0,4820,4821,1,0,0,0,4821,4826,3,440,220,0,4822,4823,
		5,1128,0,0,4823,4825,3,440,220,0,4824,4822,1,0,0,0,4825,4828,1,0,0,0,4826,
		4824,1,0,0,0,4826,4827,1,0,0,0,4827,4843,1,0,0,0,4828,4826,1,0,0,0,4829,
		4841,5,141,0,0,4830,4842,5,527,0,0,4831,4838,3,444,222,0,4832,4834,5,10,
		0,0,4833,4832,1,0,0,0,4833,4834,1,0,0,0,4834,4835,1,0,0,0,4835,4837,3,
		444,222,0,4836,4833,1,0,0,0,4837,4840,1,0,0,0,4838,4836,1,0,0,0,4838,4839,
		1,0,0,0,4839,4842,1,0,0,0,4840,4838,1,0,0,0,4841,4830,1,0,0,0,4841,4831,
		1,0,0,0,4842,4844,1,0,0,0,4843,4829,1,0,0,0,4843,4844,1,0,0,0,4844,4851,
		1,0,0,0,4845,4847,5,190,0,0,4846,4848,3,446,223,0,4847,4846,1,0,0,0,4848,
		4849,1,0,0,0,4849,4847,1,0,0,0,4849,4850,1,0,0,0,4850,4852,1,0,0,0,4851,
		4845,1,0,0,0,4851,4852,1,0,0,0,4852,4857,1,0,0,0,4853,4856,3,448,224,0,
		4854,4856,3,450,225,0,4855,4853,1,0,0,0,4855,4854,1,0,0,0,4856,4859,1,
		0,0,0,4857,4855,1,0,0,0,4857,4858,1,0,0,0,4858,4864,1,0,0,0,4859,4857,
		1,0,0,0,4860,4861,5,366,0,0,4861,4865,5,1141,0,0,4862,4863,5,14,0,0,4863,
		4865,5,1141,0,0,4864,4860,1,0,0,0,4864,4862,1,0,0,0,4864,4865,1,0,0,0,
		4865,4867,1,0,0,0,4866,4806,1,0,0,0,4866,4816,1,0,0,0,4867,419,1,0,0,0,
		4868,4869,5,33,0,0,4869,4870,5,663,0,0,4870,4875,3,440,220,0,4871,4872,
		5,1128,0,0,4872,4874,3,440,220,0,4873,4871,1,0,0,0,4874,4877,1,0,0,0,4875,
		4873,1,0,0,0,4875,4876,1,0,0,0,4876,4929,1,0,0,0,4877,4875,1,0,0,0,4878,
		4879,5,33,0,0,4879,4881,5,663,0,0,4880,4882,3,622,311,0,4881,4880,1,0,
		0,0,4881,4882,1,0,0,0,4882,4883,1,0,0,0,4883,4888,3,440,220,0,4884,4885,
		5,1128,0,0,4885,4887,3,440,220,0,4886,4884,1,0,0,0,4887,4890,1,0,0,0,4888,
		4886,1,0,0,0,4888,4889,1,0,0,0,4889,4905,1,0,0,0,4890,4888,1,0,0,0,4891,
		4903,5,141,0,0,4892,4904,5,527,0,0,4893,4900,3,444,222,0,4894,4896,5,10,
		0,0,4895,4894,1,0,0,0,4895,4896,1,0,0,0,4896,4897,1,0,0,0,4897,4899,3,
		444,222,0,4898,4895,1,0,0,0,4899,4902,1,0,0,0,4900,4898,1,0,0,0,4900,4901,
		1,0,0,0,4901,4904,1,0,0,0,4902,4900,1,0,0,0,4903,4892,1,0,0,0,4903,4893,
		1,0,0,0,4904,4906,1,0,0,0,4905,4891,1,0,0,0,4905,4906,1,0,0,0,4906,4913,
		1,0,0,0,4907,4909,5,190,0,0,4908,4910,3,446,223,0,4909,4908,1,0,0,0,4910,
		4911,1,0,0,0,4911,4909,1,0,0,0,4911,4912,1,0,0,0,4912,4914,1,0,0,0,4913,
		4907,1,0,0,0,4913,4914,1,0,0,0,4914,4919,1,0,0,0,4915,4918,3,448,224,0,
		4916,4918,3,450,225,0,4917,4915,1,0,0,0,4917,4916,1,0,0,0,4918,4921,1,
		0,0,0,4919,4917,1,0,0,0,4919,4920,1,0,0,0,4920,4926,1,0,0,0,4921,4919,
		1,0,0,0,4922,4923,5,366,0,0,4923,4927,5,1141,0,0,4924,4925,5,14,0,0,4925,
		4927,5,1141,0,0,4926,4922,1,0,0,0,4926,4924,1,0,0,0,4926,4927,1,0,0,0,
		4927,4929,1,0,0,0,4928,4868,1,0,0,0,4928,4878,1,0,0,0,4929,421,1,0,0,0,
		4930,4931,5,51,0,0,4931,4933,5,663,0,0,4932,4934,3,620,310,0,4933,4932,
		1,0,0,0,4933,4934,1,0,0,0,4934,4935,1,0,0,0,4935,4940,3,546,273,0,4936,
		4937,5,1128,0,0,4937,4939,3,546,273,0,4938,4936,1,0,0,0,4939,4942,1,0,
		0,0,4940,4938,1,0,0,0,4940,4941,1,0,0,0,4941,423,1,0,0,0,4942,4940,1,0,
		0,0,4943,4944,5,71,0,0,4944,4949,3,452,226,0,4945,4946,5,1128,0,0,4946,
		4948,3,452,226,0,4947,4945,1,0,0,0,4948,4951,1,0,0,0,4949,4947,1,0,0,0,
		4949,4950,1,0,0,0,4950,4952,1,0,0,0,4951,4949,1,0,0,0,4952,4954,5,117,
		0,0,4953,4955,7,66,0,0,4954,4953,1,0,0,0,4954,4955,1,0,0,0,4955,4956,1,
		0,0,0,4956,4957,3,456,228,0,4957,4958,5,173,0,0,4958,4963,3,440,220,0,
		4959,4960,5,1128,0,0,4960,4962,3,440,220,0,4961,4959,1,0,0,0,4962,4965,
		1,0,0,0,4963,4961,1,0,0,0,4963,4964,1,0,0,0,4964,4980,1,0,0,0,4965,4963,
		1,0,0,0,4966,4978,5,141,0,0,4967,4979,5,527,0,0,4968,4975,3,444,222,0,
		4969,4971,5,10,0,0,4970,4969,1,0,0,0,4970,4971,1,0,0,0,4971,4972,1,0,0,
		0,4972,4974,3,444,222,0,4973,4970,1,0,0,0,4974,4977,1,0,0,0,4975,4973,
		1,0,0,0,4975,4976,1,0,0,0,4976,4979,1,0,0,0,4977,4975,1,0,0,0,4978,4967,
		1,0,0,0,4978,4968,1,0,0,0,4979,4981,1,0,0,0,4980,4966,1,0,0,0,4980,4981,
		1,0,0,0,4981,4991,1,0,0,0,4982,4988,5,190,0,0,4983,4984,5,71,0,0,4984,
		4987,5,119,0,0,4985,4987,3,446,223,0,4986,4983,1,0,0,0,4986,4985,1,0,0,
		0,4987,4990,1,0,0,0,4988,4986,1,0,0,0,4988,4989,1,0,0,0,4989,4992,1,0,
		0,0,4990,4988,1,0,0,0,4991,4982,1,0,0,0,4991,4992,1,0,0,0,4992,4999,1,
		0,0,0,4993,4994,5,12,0,0,4994,4995,3,546,273,0,4995,4996,5,190,0,0,4996,
		4997,5,594,0,0,4997,4998,3,426,213,0,4998,5000,1,0,0,0,4999,4993,1,0,0,
		0,4999,5000,1,0,0,0,5000,5037,1,0,0,0,5001,5004,5,71,0,0,5002,5005,3,546,
		273,0,5003,5005,3,564,282,0,5004,5002,1,0,0,0,5004,5003,1,0,0,0,5005,5013,
		1,0,0,0,5006,5009,5,1128,0,0,5007,5010,3,546,273,0,5008,5010,3,564,282,
		0,5009,5007,1,0,0,0,5009,5008,1,0,0,0,5010,5012,1,0,0,0,5011,5006,1,0,
		0,0,5012,5015,1,0,0,0,5013,5011,1,0,0,0,5013,5014,1,0,0,0,5014,5016,1,
		0,0,0,5015,5013,1,0,0,0,5016,5019,5,173,0,0,5017,5020,3,546,273,0,5018,
		5020,3,564,282,0,5019,5017,1,0,0,0,5019,5018,1,0,0,0,5020,5028,1,0,0,0,
		5021,5024,5,1128,0,0,5022,5025,3,546,273,0,5023,5025,3,564,282,0,5024,
		5022,1,0,0,0,5024,5023,1,0,0,0,5025,5027,1,0,0,0,5026,5021,1,0,0,0,5027,
		5030,1,0,0,0,5028,5026,1,0,0,0,5028,5029,1,0,0,0,5029,5034,1,0,0,0,5030,
		5028,1,0,0,0,5031,5032,5,190,0,0,5032,5033,5,695,0,0,5033,5035,5,119,0,
		0,5034,5031,1,0,0,0,5034,5035,1,0,0,0,5035,5037,1,0,0,0,5036,4943,1,0,
		0,0,5036,5001,1,0,0,0,5037,425,1,0,0,0,5038,5061,5,42,0,0,5039,5061,5,
		527,0,0,5040,5050,5,6,0,0,5041,5042,5,58,0,0,5042,5047,3,546,273,0,5043,
		5044,5,1128,0,0,5044,5046,3,546,273,0,5045,5043,1,0,0,0,5046,5049,1,0,
		0,0,5047,5045,1,0,0,0,5047,5048,1,0,0,0,5048,5051,1,0,0,0,5049,5047,1,
		0,0,0,5050,5041,1,0,0,0,5050,5051,1,0,0,0,5051,5061,1,0,0,0,5052,5057,
		3,546,273,0,5053,5054,5,1128,0,0,5054,5056,3,546,273,0,5055,5053,1,0,0,
		0,5056,5059,1,0,0,0,5057,5055,1,0,0,0,5057,5058,1,0,0,0,5058,5061,1,0,
		0,0,5059,5057,1,0,0,0,5060,5038,1,0,0,0,5060,5039,1,0,0,0,5060,5040,1,
		0,0,0,5060,5052,1,0,0,0,5061,427,1,0,0,0,5062,5063,5,71,0,0,5063,5064,
		5,564,0,0,5064,5065,5,117,0,0,5065,5066,3,546,273,0,5066,5067,5,173,0,
		0,5067,5072,3,546,273,0,5068,5069,5,1128,0,0,5069,5071,3,546,273,0,5070,
		5068,1,0,0,0,5071,5074,1,0,0,0,5072,5070,1,0,0,0,5072,5073,1,0,0,0,5073,
		5078,1,0,0,0,5074,5072,1,0,0,0,5075,5076,5,190,0,0,5076,5077,5,71,0,0,
		5077,5079,5,119,0,0,5078,5075,1,0,0,0,5078,5079,1,0,0,0,5079,429,1,0,0,
		0,5080,5081,5,138,0,0,5081,5082,5,663,0,0,5082,5087,3,458,229,0,5083,5084,
		5,1128,0,0,5084,5086,3,458,229,0,5085,5083,1,0,0,0,5086,5089,1,0,0,0,5087,
		5085,1,0,0,0,5087,5088,1,0,0,0,5088,431,1,0,0,0,5089,5087,1,0,0,0,5090,
		5091,5,146,0,0,5091,5096,3,452,226,0,5092,5093,5,1128,0,0,5093,5095,3,
		452,226,0,5094,5092,1,0,0,0,5095,5098,1,0,0,0,5096,5094,1,0,0,0,5096,5097,
		1,0,0,0,5097,5099,1,0,0,0,5098,5096,1,0,0,0,5099,5101,5,117,0,0,5100,5102,
		7,66,0,0,5101,5100,1,0,0,0,5101,5102,1,0,0,0,5102,5103,1,0,0,0,5103,5104,
		3,456,228,0,5104,5105,5,67,0,0,5105,5110,3,546,273,0,5106,5107,5,1128,
		0,0,5107,5109,3,546,273,0,5108,5106,1,0,0,0,5109,5112,1,0,0,0,5110,5108,
		1,0,0,0,5110,5111,1,0,0,0,5111,5155,1,0,0,0,5112,5110,1,0,0,0,5113,5114,
		5,146,0,0,5114,5116,5,6,0,0,5115,5117,5,720,0,0,5116,5115,1,0,0,0,5116,
		5117,1,0,0,0,5117,5118,1,0,0,0,5118,5119,5,1128,0,0,5119,5120,5,71,0,0,
		5120,5121,5,119,0,0,5121,5122,5,67,0,0,5122,5127,3,546,273,0,5123,5124,
		5,1128,0,0,5124,5126,3,546,273,0,5125,5123,1,0,0,0,5126,5129,1,0,0,0,5127,
		5125,1,0,0,0,5127,5128,1,0,0,0,5128,5155,1,0,0,0,5129,5127,1,0,0,0,5130,
		5131,5,146,0,0,5131,5136,3,564,282,0,5132,5133,5,1128,0,0,5133,5135,3,
		564,282,0,5134,5132,1,0,0,0,5135,5138,1,0,0,0,5136,5134,1,0,0,0,5136,5137,
		1,0,0,0,5137,5139,1,0,0,0,5138,5136,1,0,0,0,5139,5142,5,67,0,0,5140,5143,
		3,546,273,0,5141,5143,3,564,282,0,5142,5140,1,0,0,0,5142,5141,1,0,0,0,
		5143,5151,1,0,0,0,5144,5147,5,1128,0,0,5145,5148,3,546,273,0,5146,5148,
		3,564,282,0,5147,5145,1,0,0,0,5147,5146,1,0,0,0,5148,5150,1,0,0,0,5149,
		5144,1,0,0,0,5150,5153,1,0,0,0,5151,5149,1,0,0,0,5151,5152,1,0,0,0,5152,
		5155,1,0,0,0,5153,5151,1,0,0,0,5154,5090,1,0,0,0,5154,5113,1,0,0,0,5154,
		5130,1,0,0,0,5155,433,1,0,0,0,5156,5157,5,146,0,0,5157,5158,5,564,0,0,
		5158,5159,5,117,0,0,5159,5160,3,546,273,0,5160,5161,5,67,0,0,5161,5166,
		3,546,273,0,5162,5163,5,1128,0,0,5163,5165,3,546,273,0,5164,5162,1,0,0,
		0,5165,5168,1,0,0,0,5166,5164,1,0,0,0,5166,5167,1,0,0,0,5167,435,1,0,0,
		0,5168,5166,1,0,0,0,5169,5170,5,152,0,0,5170,5173,5,549,0,0,5171,5172,
		5,64,0,0,5172,5174,3,546,273,0,5173,5171,1,0,0,0,5173,5174,1,0,0,0,5174,
		5175,1,0,0,0,5175,5178,5,1117,0,0,5176,5179,3,662,331,0,5177,5179,5,1141,
		0,0,5178,5176,1,0,0,0,5178,5177,1,0,0,0,5179,437,1,0,0,0,5180,5181,3,546,
		273,0,5181,5182,3,448,224,0,5182,439,1,0,0,0,5183,5184,3,546,273,0,5184,
		5185,5,446,0,0,5185,5186,5,19,0,0,5186,5187,5,549,0,0,5187,5188,5,1141,
		0,0,5188,5205,1,0,0,0,5189,5190,3,546,273,0,5190,5191,5,446,0,0,5191,5192,
		5,19,0,0,5192,5196,5,1141,0,0,5193,5194,5,144,0,0,5194,5195,5,35,0,0,5195,
		5197,5,549,0,0,5196,5193,1,0,0,0,5196,5197,1,0,0,0,5197,5205,1,0,0,0,5198,
		5199,3,546,273,0,5199,5200,5,446,0,0,5200,5201,5,190,0,0,5201,5202,3,442,
		221,0,5202,5205,1,0,0,0,5203,5205,3,546,273,0,5204,5183,1,0,0,0,5204,5189,
		1,0,0,0,5204,5198,1,0,0,0,5204,5203,1,0,0,0,5205,441,1,0,0,0,5206,5209,
		3,562,281,0,5207,5208,7,67,0,0,5208,5210,5,1141,0,0,5209,5207,1,0,0,0,
		5209,5210,1,0,0,0,5210,5216,1,0,0,0,5211,5212,3,562,281,0,5212,5213,5,
		185,0,0,5213,5214,3,662,331,0,5214,5216,1,0,0,0,5215,5206,1,0,0,0,5215,
		5211,1,0,0,0,5216,443,1,0,0,0,5217,5226,5,165,0,0,5218,5226,5,678,0,0,
		5219,5220,5,356,0,0,5220,5226,5,1141,0,0,5221,5222,5,463,0,0,5222,5226,
		5,1141,0,0,5223,5224,5,638,0,0,5224,5226,5,1141,0,0,5225,5217,1,0,0,0,
		5225,5218,1,0,0,0,5225,5219,1,0,0,0,5225,5221,1,0,0,0,5225,5223,1,0,0,
		0,5226,445,1,0,0,0,5227,5228,5,497,0,0,5228,5236,3,570,285,0,5229,5230,
		5,500,0,0,5230,5236,3,570,285,0,5231,5232,5,496,0,0,5232,5236,3,570,285,
		0,5233,5234,5,501,0,0,5234,5236,3,570,285,0,5235,5227,1,0,0,0,5235,5229,
		1,0,0,0,5235,5231,1,0,0,0,5235,5233,1,0,0,0,5236,447,1,0,0,0,5237,5238,
		5,549,0,0,5238,5245,5,418,0,0,5239,5246,5,42,0,0,5240,5246,5,517,0,0,5241,
		5242,5,85,0,0,5242,5243,3,570,285,0,5243,5244,5,689,0,0,5244,5246,1,0,
		0,0,5245,5239,1,0,0,0,5245,5240,1,0,0,0,5245,5241,1,0,0,0,5245,5246,1,
		0,0,0,5246,5276,1,0,0,0,5247,5248,5,549,0,0,5248,5251,5,443,0,0,5249,5252,
		5,42,0,0,5250,5252,3,570,285,0,5251,5249,1,0,0,0,5251,5250,1,0,0,0,5252,
		5276,1,0,0,0,5253,5254,5,549,0,0,5254,5255,5,593,0,0,5255,5260,5,85,0,
		0,5256,5261,5,42,0,0,5257,5258,3,570,285,0,5258,5259,5,689,0,0,5259,5261,
		1,0,0,0,5260,5256,1,0,0,0,5260,5257,1,0,0,0,5261,5276,1,0,0,0,5262,5263,
		5,549,0,0,5263,5264,5,141,0,0,5264,5266,5,35,0,0,5265,5267,7,68,0,0,5266,
		5265,1,0,0,0,5266,5267,1,0,0,0,5267,5276,1,0,0,0,5268,5269,5,422,0,0,5269,
		5276,3,570,285,0,5270,5273,5,550,0,0,5271,5274,3,570,285,0,5272,5274,5,
		655,0,0,5273,5271,1,0,0,0,5273,5272,1,0,0,0,5274,5276,1,0,0,0,5275,5237,
		1,0,0,0,5275,5247,1,0,0,0,5275,5253,1,0,0,0,5275,5262,1,0,0,0,5275,5268,
		1,0,0,0,5275,5270,1,0,0,0,5276,449,1,0,0,0,5277,5278,5,330,0,0,5278,5279,
		7,69,0,0,5279,451,1,0,0,0,5280,5285,3,454,227,0,5281,5282,5,1126,0,0,5282,
		5283,3,596,298,0,5283,5284,5,1127,0,0,5284,5286,1,0,0,0,5285,5281,1,0,
		0,0,5285,5286,1,0,0,0,5286,453,1,0,0,0,5287,5289,5,6,0,0,5288,5290,5,720,
		0,0,5289,5288,1,0,0,0,5289,5290,1,0,0,0,5290,5376,1,0,0,0,5291,5293,5,
		7,0,0,5292,5294,5,728,0,0,5293,5292,1,0,0,0,5293,5294,1,0,0,0,5294,5376,
		1,0,0,0,5295,5303,5,33,0,0,5296,5297,5,647,0,0,5297,5304,5,737,0,0,5298,
		5304,5,728,0,0,5299,5304,5,669,0,0,5300,5304,5,663,0,0,5301,5304,5,645,
		0,0,5302,5304,5,594,0,0,5303,5296,1,0,0,0,5303,5298,1,0,0,0,5303,5299,
		1,0,0,0,5303,5300,1,0,0,0,5303,5301,1,0,0,0,5303,5302,1,0,0,0,5303,5304,
		1,0,0,0,5304,5376,1,0,0,0,5305,5376,5,44,0,0,5306,5308,5,51,0,0,5307,5309,
		5,594,0,0,5308,5307,1,0,0,0,5308,5309,1,0,0,0,5309,5376,1,0,0,0,5310,5376,
		5,413,0,0,5311,5376,5,704,0,0,5312,5376,5,705,0,0,5313,5314,5,71,0,0,5314,
		5376,5,119,0,0,5315,5376,5,80,0,0,5316,5376,5,84,0,0,5317,5318,5,102,0,
		0,5318,5376,5,737,0,0,5319,5376,5,721,0,0,5320,5376,5,564,0,0,5321,5376,
		5,135,0,0,5322,5376,5,722,0,0,5323,5324,5,586,0,0,5324,5376,7,70,0,0,5325,
		5376,5,151,0,0,5326,5327,5,154,0,0,5327,5376,7,71,0,0,5328,5376,5,734,
		0,0,5329,5376,5,735,0,0,5330,5376,5,175,0,0,5331,5376,5,182,0,0,5332,5376,
		5,183,0,0,5333,5376,5,696,0,0,5334,5376,5,697,0,0,5335,5376,5,698,0,0,
		5336,5376,5,699,0,0,5337,5376,5,700,0,0,5338,5376,5,701,0,0,5339,5376,
		5,702,0,0,5340,5376,5,703,0,0,5341,5376,5,706,0,0,5342,5376,5,707,0,0,
		5343,5376,5,708,0,0,5344,5376,5,709,0,0,5345,5376,5,710,0,0,5346,5376,
		5,711,0,0,5347,5376,5,712,0,0,5348,5376,5,713,0,0,5349,5376,5,714,0,0,
		5350,5376,5,717,0,0,5351,5376,5,718,0,0,5352,5376,5,719,0,0,5353,5376,
		5,723,0,0,5354,5376,5,724,0,0,5355,5376,5,725,0,0,5356,5376,5,726,0,0,
		5357,5376,5,727,0,0,5358,5376,5,730,0,0,5359,5376,5,731,0,0,5360,5376,
		5,732,0,0,5361,5376,5,733,0,0,5362,5376,5,1071,0,0,5363,5376,5,736,0,0,
		5364,5376,5,738,0,0,5365,5376,5,739,0,0,5366,5376,5,740,0,0,5367,5368,
		5,101,0,0,5368,5369,5,67,0,0,5369,5376,5,729,0,0,5370,5371,5,151,0,0,5371,
		5372,5,86,0,0,5372,5376,5,729,0,0,5373,5374,5,715,0,0,5374,5376,5,716,
		0,0,5375,5287,1,0,0,0,5375,5291,1,0,0,0,5375,5295,1,0,0,0,5375,5305,1,
		0,0,0,5375,5306,1,0,0,0,5375,5310,1,0,0,0,5375,5311,1,0,0,0,5375,5312,
		1,0,0,0,5375,5313,1,0,0,0,5375,5315,1,0,0,0,5375,5316,1,0,0,0,5375,5317,
		1,0,0,0,5375,5319,1,0,0,0,5375,5320,1,0,0,0,5375,5321,1,0,0,0,5375,5322,
		1,0,0,0,5375,5323,1,0,0,0,5375,5325,1,0,0,0,5375,5326,1,0,0,0,5375,5328,
		1,0,0,0,5375,5329,1,0,0,0,5375,5330,1,0,0,0,5375,5331,1,0,0,0,5375,5332,
		1,0,0,0,5375,5333,1,0,0,0,5375,5334,1,0,0,0,5375,5335,1,0,0,0,5375,5336,
		1,0,0,0,5375,5337,1,0,0,0,5375,5338,1,0,0,0,5375,5339,1,0,0,0,5375,5340,
		1,0,0,0,5375,5341,1,0,0,0,5375,5342,1,0,0,0,5375,5343,1,0,0,0,5375,5344,
		1,0,0,0,5375,5345,1,0,0,0,5375,5346,1,0,0,0,5375,5347,1,0,0,0,5375,5348,
		1,0,0,0,5375,5349,1,0,0,0,5375,5350,1,0,0,0,5375,5351,1,0,0,0,5375,5352,
		1,0,0,0,5375,5353,1,0,0,0,5375,5354,1,0,0,0,5375,5355,1,0,0,0,5375,5356,
		1,0,0,0,5375,5357,1,0,0,0,5375,5358,1,0,0,0,5375,5359,1,0,0,0,5375,5360,
		1,0,0,0,5375,5361,1,0,0,0,5375,5362,1,0,0,0,5375,5363,1,0,0,0,5375,5364,
		1,0,0,0,5375,5365,1,0,0,0,5375,5366,1,0,0,0,5375,5367,1,0,0,0,5375,5370,
		1,0,0,0,5375,5373,1,0,0,0,5376,455,1,0,0,0,5377,5394,5,1110,0,0,5378,5379,
		5,1110,0,0,5379,5380,5,1125,0,0,5380,5394,5,1110,0,0,5381,5382,3,564,282,
		0,5382,5383,5,1125,0,0,5383,5384,5,1110,0,0,5384,5394,1,0,0,0,5385,5386,
		3,564,282,0,5386,5387,5,1125,0,0,5387,5388,3,564,282,0,5388,5394,1,0,0,
		0,5389,5390,3,564,282,0,5390,5391,3,568,284,0,5391,5394,1,0,0,0,5392,5394,
		3,564,282,0,5393,5377,1,0,0,0,5393,5378,1,0,0,0,5393,5381,1,0,0,0,5393,
		5385,1,0,0,0,5393,5389,1,0,0,0,5393,5392,1,0,0,0,5394,457,1,0,0,0,5395,
		5396,3,546,273,0,5396,5397,5,173,0,0,5397,5398,3,546,273,0,5398,459,1,
		0,0,0,5399,5401,5,9,0,0,5400,5402,7,72,0,0,5401,5400,1,0,0,0,5401,5402,
		1,0,0,0,5402,5403,1,0,0,0,5403,5404,7,54,0,0,5404,5422,3,600,300,0,5405,
		5406,5,182,0,0,5406,5407,5,75,0,0,5407,5408,5,117,0,0,5408,5413,3,542,
		271,0,5409,5410,5,1128,0,0,5410,5412,3,542,271,0,5411,5409,1,0,0,0,5412,
		5415,1,0,0,0,5413,5411,1,0,0,0,5413,5414,1,0,0,0,5414,5420,1,0,0,0,5415,
		5413,1,0,0,0,5416,5417,5,190,0,0,5417,5418,3,570,285,0,5418,5419,5,18,
		0,0,5419,5421,1,0,0,0,5420,5416,1,0,0,0,5420,5421,1,0,0,0,5421,5423,1,
		0,0,0,5422,5405,1,0,0,0,5422,5423,1,0,0,0,5423,5435,1,0,0,0,5424,5425,
		5,51,0,0,5425,5426,5,75,0,0,5426,5427,5,117,0,0,5427,5432,3,542,271,0,
		5428,5429,5,1128,0,0,5429,5431,3,542,271,0,5430,5428,1,0,0,0,5431,5434,
		1,0,0,0,5432,5430,1,0,0,0,5432,5433,1,0,0,0,5433,5436,1,0,0,0,5434,5432,
		1,0,0,0,5435,5424,1,0,0,0,5435,5436,1,0,0,0,5436,461,1,0,0,0,5437,5438,
		5,26,0,0,5438,5439,5,170,0,0,5439,5443,3,600,300,0,5440,5442,3,470,235,
		0,5441,5440,1,0,0,0,5442,5445,1,0,0,0,5443,5441,1,0,0,0,5443,5444,1,0,
		0,0,5444,463,1,0,0,0,5445,5443,1,0,0,0,5446,5447,5,354,0,0,5447,5448,5,
		170,0,0,5448,5450,3,600,300,0,5449,5451,7,73,0,0,5450,5449,1,0,0,0,5450,
		5451,1,0,0,0,5451,465,1,0,0,0,5452,5454,5,118,0,0,5453,5455,7,72,0,0,5454,
		5453,1,0,0,0,5454,5455,1,0,0,0,5455,5456,1,0,0,0,5456,5457,7,54,0,0,5457,
		5458,3,600,300,0,5458,467,1,0,0,0,5459,5461,5,578,0,0,5460,5462,7,72,0,
		0,5461,5460,1,0,0,0,5461,5462,1,0,0,0,5462,5463,1,0,0,0,5463,5464,5,170,
		0,0,5464,5466,3,600,300,0,5465,5467,5,566,0,0,5466,5465,1,0,0,0,5466,5467,
		1,0,0,0,5467,5469,1,0,0,0,5468,5470,5,420,0,0,5469,5468,1,0,0,0,5469,5470,
		1,0,0,0,5470,5472,1,0,0,0,5471,5473,5,664,0,0,5472,5471,1,0,0,0,5472,5473,
		1,0,0,0,5473,469,1,0,0,0,5474,5475,5,64,0,0,5475,5482,5,662,0,0,5476,5482,
		5,566,0,0,5477,5482,5,423,0,0,5478,5482,5,502,0,0,5479,5482,5,420,0,0,
		5480,5482,5,352,0,0,5481,5474,1,0,0,0,5481,5476,1,0,0,0,5481,5477,1,0,
		0,0,5481,5478,1,0,0,0,5481,5479,1,0,0,0,5481,5480,1,0,0,0,5482,471,1,0,
		0,0,5483,5485,5,33,0,0,5484,5486,5,333,0,0,5485,5484,1,0,0,0,5485,5486,
		1,0,0,0,5486,5487,1,0,0,0,5487,5489,5,435,0,0,5488,5490,3,622,311,0,5489,
		5488,1,0,0,0,5489,5490,1,0,0,0,5490,5491,1,0,0,0,5491,5492,3,564,282,0,
		5492,5493,5,592,0,0,5493,5494,7,74,0,0,5494,5495,5,617,0,0,5495,5496,5,
		1141,0,0,5496,473,1,0,0,0,5497,5498,5,454,0,0,5498,5499,5,552,0,0,5499,
		5500,3,564,282,0,5500,5501,5,617,0,0,5501,5502,5,1141,0,0,5502,475,1,0,
		0,0,5503,5504,5,659,0,0,5504,5505,5,552,0,0,5505,5506,3,564,282,0,5506,
		477,1,0,0,0,5507,5508,5,152,0,0,5508,5509,3,482,241,0,5509,5512,7,75,0,
		0,5510,5513,3,668,334,0,5511,5513,5,117,0,0,5512,5510,1,0,0,0,5512,5511,
		1,0,0,0,5513,5523,1,0,0,0,5514,5515,5,1128,0,0,5515,5516,3,482,241,0,5516,
		5519,7,75,0,0,5517,5520,3,668,334,0,5518,5520,5,117,0,0,5519,5517,1,0,
		0,0,5519,5518,1,0,0,0,5520,5522,1,0,0,0,5521,5514,1,0,0,0,5522,5525,1,
		0,0,0,5523,5521,1,0,0,0,5523,5524,1,0,0,0,5524,5560,1,0,0,0,5525,5523,
		1,0,0,0,5526,5527,5,152,0,0,5527,5530,3,60,30,0,5528,5531,3,550,275,0,
		5529,5531,5,42,0,0,5530,5528,1,0,0,0,5530,5529,1,0,0,0,5531,5560,1,0,0,
		0,5532,5533,5,152,0,0,5533,5540,5,515,0,0,5534,5537,3,550,275,0,5535,5536,
		5,27,0,0,5536,5538,3,552,276,0,5537,5535,1,0,0,0,5537,5538,1,0,0,0,5538,
		5541,1,0,0,0,5539,5541,5,42,0,0,5540,5534,1,0,0,0,5540,5539,1,0,0,0,5541,
		5560,1,0,0,0,5542,5560,3,436,218,0,5543,5560,3,310,155,0,5544,5560,3,308,
		154,0,5545,5546,5,152,0,0,5546,5547,3,536,268,0,5547,5548,7,75,0,0,5548,
		5556,3,668,334,0,5549,5550,5,1128,0,0,5550,5551,3,536,268,0,5551,5552,
		7,75,0,0,5552,5553,3,668,334,0,5553,5555,1,0,0,0,5554,5549,1,0,0,0,5555,
		5558,1,0,0,0,5556,5554,1,0,0,0,5556,5557,1,0,0,0,5557,5560,1,0,0,0,5558,
		5556,1,0,0,0,5559,5507,1,0,0,0,5559,5526,1,0,0,0,5559,5532,1,0,0,0,5559,
		5542,1,0,0,0,5559,5543,1,0,0,0,5559,5544,1,0,0,0,5559,5545,1,0,0,0,5560,
		479,1,0,0,0,5561,5562,5,154,0,0,5562,5563,7,56,0,0,5563,5715,5,474,0,0,
		5564,5565,5,154,0,0,5565,5566,7,76,0,0,5566,5569,5,414,0,0,5567,5568,5,
		79,0,0,5568,5570,5,1141,0,0,5569,5567,1,0,0,0,5569,5570,1,0,0,0,5570,5573,
		1,0,0,0,5571,5572,5,67,0,0,5572,5574,3,570,285,0,5573,5571,1,0,0,0,5573,
		5574,1,0,0,0,5574,5582,1,0,0,0,5575,5579,5,98,0,0,5576,5577,3,570,285,
		0,5577,5578,5,1128,0,0,5578,5580,1,0,0,0,5579,5576,1,0,0,0,5579,5580,1,
		0,0,0,5580,5581,1,0,0,0,5581,5583,3,570,285,0,5582,5575,1,0,0,0,5582,5583,
		1,0,0,0,5583,5715,1,0,0,0,5584,5585,5,154,0,0,5585,5587,3,484,242,0,5586,
		5588,3,486,243,0,5587,5586,1,0,0,0,5587,5588,1,0,0,0,5588,5715,1,0,0,0,
		5589,5591,5,154,0,0,5590,5592,5,434,0,0,5591,5590,1,0,0,0,5591,5592,1,
		0,0,0,5592,5593,1,0,0,0,5593,5594,7,41,0,0,5594,5595,7,77,0,0,5595,5598,
		3,538,269,0,5596,5597,7,77,0,0,5597,5599,3,564,282,0,5598,5596,1,0,0,0,
		5598,5599,1,0,0,0,5599,5601,1,0,0,0,5600,5602,3,486,243,0,5601,5600,1,
		0,0,0,5601,5602,1,0,0,0,5602,5715,1,0,0,0,5603,5604,5,154,0,0,5604,5605,
		5,33,0,0,5605,5607,7,0,0,0,5606,5608,3,622,311,0,5607,5606,1,0,0,0,5607,
		5608,1,0,0,0,5608,5609,1,0,0,0,5609,5715,3,564,282,0,5610,5611,5,154,0,
		0,5611,5612,5,33,0,0,5612,5613,7,78,0,0,5613,5715,3,536,268,0,5614,5615,
		5,154,0,0,5615,5616,5,33,0,0,5616,5617,5,663,0,0,5617,5715,3,546,273,0,
		5618,5619,5,154,0,0,5619,5620,5,407,0,0,5620,5621,3,554,277,0,5621,5622,
		7,79,0,0,5622,5715,1,0,0,0,5623,5624,5,154,0,0,5624,5715,3,488,244,0,5625,
		5626,5,154,0,0,5626,5634,7,80,0,0,5627,5631,5,98,0,0,5628,5629,3,570,285,
		0,5629,5630,5,1128,0,0,5630,5632,1,0,0,0,5631,5628,1,0,0,0,5631,5632,1,
		0,0,0,5632,5633,1,0,0,0,5633,5635,3,570,285,0,5634,5627,1,0,0,0,5634,5635,
		1,0,0,0,5635,5715,1,0,0,0,5636,5637,5,154,0,0,5637,5638,5,288,0,0,5638,
		5639,5,1126,0,0,5639,5640,5,1110,0,0,5640,5641,5,1127,0,0,5641,5715,7,
		80,0,0,5642,5643,5,154,0,0,5643,5646,3,490,245,0,5644,5645,7,77,0,0,5645,
		5647,3,564,282,0,5646,5644,1,0,0,0,5646,5647,1,0,0,0,5647,5649,1,0,0,0,
		5648,5650,3,486,243,0,5649,5648,1,0,0,0,5649,5650,1,0,0,0,5650,5715,1,
		0,0,0,5651,5652,5,154,0,0,5652,5653,7,81,0,0,5653,5654,5,362,0,0,5654,
		5715,3,536,268,0,5655,5656,5,154,0,0,5656,5659,5,438,0,0,5657,5658,5,64,
		0,0,5658,5660,3,546,273,0,5659,5657,1,0,0,0,5659,5660,1,0,0,0,5660,5715,
		1,0,0,0,5661,5662,5,154,0,0,5662,5663,7,82,0,0,5663,5664,7,77,0,0,5664,
		5667,3,538,269,0,5665,5666,7,77,0,0,5666,5668,3,564,282,0,5667,5665,1,
		0,0,0,5667,5668,1,0,0,0,5668,5671,1,0,0,0,5669,5670,5,188,0,0,5670,5672,
		3,668,334,0,5671,5669,1,0,0,0,5671,5672,1,0,0,0,5672,5715,1,0,0,0,5673,
		5674,5,154,0,0,5674,5675,5,537,0,0,5675,5678,5,737,0,0,5676,5677,7,77,
		0,0,5677,5679,3,564,282,0,5678,5676,1,0,0,0,5678,5679,1,0,0,0,5679,5681,
		1,0,0,0,5680,5682,3,486,243,0,5681,5680,1,0,0,0,5681,5682,1,0,0,0,5682,
		5715,1,0,0,0,5683,5684,5,154,0,0,5684,5685,5,562,0,0,5685,5690,3,492,246,
		0,5686,5687,5,1128,0,0,5687,5689,3,492,246,0,5688,5686,1,0,0,0,5689,5692,
		1,0,0,0,5690,5688,1,0,0,0,5690,5691,1,0,0,0,5691,5696,1,0,0,0,5692,5690,
		1,0,0,0,5693,5694,5,64,0,0,5694,5695,5,565,0,0,5695,5697,3,570,285,0,5696,
		5693,1,0,0,0,5696,5697,1,0,0,0,5697,5698,1,0,0,0,5698,5702,5,98,0,0,5699,
		5700,3,570,285,0,5700,5701,5,1128,0,0,5701,5703,1,0,0,0,5702,5699,1,0,
		0,0,5702,5703,1,0,0,0,5703,5704,1,0,0,0,5704,5705,3,570,285,0,5705,5715,
		1,0,0,0,5706,5707,5,154,0,0,5707,5708,5,612,0,0,5708,5712,5,632,0,0,5709,
		5710,5,64,0,0,5710,5711,5,353,0,0,5711,5713,5,1141,0,0,5712,5709,1,0,0,
		0,5712,5713,1,0,0,0,5713,5715,1,0,0,0,5714,5561,1,0,0,0,5714,5564,1,0,
		0,0,5714,5584,1,0,0,0,5714,5589,1,0,0,0,5714,5603,1,0,0,0,5714,5610,1,
		0,0,0,5714,5614,1,0,0,0,5714,5618,1,0,0,0,5714,5623,1,0,0,0,5714,5625,
		1,0,0,0,5714,5636,1,0,0,0,5714,5642,1,0,0,0,5714,5651,1,0,0,0,5714,5655,
		1,0,0,0,5714,5661,1,0,0,0,5714,5673,1,0,0,0,5714,5683,1,0,0,0,5714,5706,
		1,0,0,0,5715,481,1,0,0,0,5716,5727,5,1153,0,0,5717,5727,5,1154,0,0,5718,
		5719,5,1130,0,0,5719,5721,5,1130,0,0,5720,5718,1,0,0,0,5720,5721,1,0,0,
		0,5721,5722,1,0,0,0,5722,5724,7,83,0,0,5723,5720,1,0,0,0,5723,5724,1,0,
		0,0,5724,5725,1,0,0,0,5725,5727,3,564,282,0,5726,5716,1,0,0,0,5726,5717,
		1,0,0,0,5726,5723,1,0,0,0,5727,483,1,0,0,0,5728,5729,5,25,0,0,5729,5742,
		5,152,0,0,5730,5742,5,839,0,0,5731,5742,5,40,0,0,5732,5742,5,150,0,0,5733,
		5734,5,435,0,0,5734,5742,5,632,0,0,5735,5736,5,130,0,0,5736,5742,5,632,
		0,0,5737,5739,7,55,0,0,5738,5737,1,0,0,0,5738,5739,1,0,0,0,5739,5740,1,
		0,0,0,5740,5742,7,84,0,0,5741,5728,1,0,0,0,5741,5730,1,0,0,0,5741,5731,
		1,0,0,0,5741,5732,1,0,0,0,5741,5733,1,0,0,0,5741,5735,1,0,0,0,5741,5738,
		1,0,0,0,5742,485,1,0,0,0,5743,5744,5,97,0,0,5744,5748,5,1141,0,0,5745,
		5746,5,188,0,0,5746,5748,3,668,334,0,5747,5743,1,0,0,0,5747,5745,1,0,0,
		0,5748,487,1,0,0,0,5749,5751,5,634,0,0,5750,5749,1,0,0,0,5750,5751,1,0,
		0,0,5751,5752,1,0,0,0,5752,5767,5,408,0,0,5753,5754,5,475,0,0,5754,5767,
		5,632,0,0,5755,5767,5,554,0,0,5756,5767,5,720,0,0,5757,5759,5,434,0,0,
		5758,5757,1,0,0,0,5758,5759,1,0,0,0,5759,5760,1,0,0,0,5760,5767,5,561,
		0,0,5761,5767,5,563,0,0,5762,5763,5,612,0,0,5763,5767,5,445,0,0,5764,5767,
		5,337,0,0,5765,5767,5,381,0,0,5766,5750,1,0,0,0,5766,5753,1,0,0,0,5766,
		5755,1,0,0,0,5766,5756,1,0,0,0,5766,5758,1,0,0,0,5766,5761,1,0,0,0,5766,
		5762,1,0,0,0,5766,5764,1,0,0,0,5766,5765,1,0,0,0,5767,489,1,0,0,0,5768,
		5777,5,414,0,0,5769,5770,5,170,0,0,5770,5777,5,632,0,0,5771,5773,5,434,
		0,0,5772,5771,1,0,0,0,5772,5773,1,0,0,0,5773,5774,1,0,0,0,5774,5777,5,
		737,0,0,5775,5777,5,653,0,0,5776,5768,1,0,0,0,5776,5769,1,0,0,0,5776,5772,
		1,0,0,0,5776,5775,1,0,0,0,5777,491,1,0,0,0,5778,5791,5,6,0,0,5779,5780,
		5,345,0,0,5780,5791,5,459,0,0,5781,5782,5,380,0,0,5782,5791,5,643,0,0,
		5783,5791,5,383,0,0,5784,5791,5,461,0,0,5785,5791,5,787,0,0,5786,5787,
		5,542,0,0,5787,5791,5,424,0,0,5788,5791,5,619,0,0,5789,5791,5,642,0,0,
		5790,5778,1,0,0,0,5790,5779,1,0,0,0,5790,5781,1,0,0,0,5790,5783,1,0,0,
		0,5790,5784,1,0,0,0,5790,5785,1,0,0,0,5790,5786,1,0,0,0,5790,5788,1,0,
		0,0,5790,5789,1,0,0,0,5791,493,1,0,0,0,5792,5793,5,343,0,0,5793,5794,5,
		1141,0,0,5794,495,1,0,0,0,5795,5796,5,349,0,0,5796,5797,5,80,0,0,5797,
		5802,3,508,254,0,5798,5799,5,1128,0,0,5799,5801,3,508,254,0,5800,5798,
		1,0,0,0,5801,5804,1,0,0,0,5802,5800,1,0,0,0,5802,5803,1,0,0,0,5803,5812,
		1,0,0,0,5804,5802,1,0,0,0,5805,5806,5,128,0,0,5806,5809,5,1126,0,0,5807,
		5810,3,596,298,0,5808,5810,5,6,0,0,5809,5807,1,0,0,0,5809,5808,1,0,0,0,
		5810,5811,1,0,0,0,5811,5813,5,1127,0,0,5812,5805,1,0,0,0,5812,5813,1,0,
		0,0,5813,5814,1,0,0,0,5814,5815,5,79,0,0,5815,5816,3,564,282,0,5816,497,
		1,0,0,0,5817,5819,5,430,0,0,5818,5820,7,72,0,0,5819,5818,1,0,0,0,5819,
		5820,1,0,0,0,5820,5821,1,0,0,0,5821,5826,3,510,255,0,5822,5823,5,1128,
		0,0,5823,5825,3,510,255,0,5824,5822,1,0,0,0,5825,5828,1,0,0,0,5826,5824,
		1,0,0,0,5826,5827,1,0,0,0,5827,499,1,0,0,0,5828,5826,1,0,0,0,5829,5831,
		5,92,0,0,5830,5832,7,85,0,0,5831,5830,1,0,0,0,5831,5832,1,0,0,0,5832,5833,
		1,0,0,0,5833,5834,3,668,334,0,5834,501,1,0,0,0,5835,5836,5,101,0,0,5836,
		5837,5,80,0,0,5837,5838,5,86,0,0,5838,5839,5,349,0,0,5839,5844,3,514,257,
		0,5840,5841,5,1128,0,0,5841,5843,3,514,257,0,5842,5840,1,0,0,0,5843,5846,
		1,0,0,0,5844,5842,1,0,0,0,5844,5845,1,0,0,0,5845,503,1,0,0,0,5846,5844,
		1,0,0,0,5847,5848,5,587,0,0,5848,5849,5,565,0,0,5849,5850,5,349,0,0,5850,
		505,1,0,0,0,5851,5852,5,734,0,0,5852,507,1,0,0,0,5853,5861,3,538,269,0,
		5854,5856,7,20,0,0,5855,5854,1,0,0,0,5855,5856,1,0,0,0,5856,5857,1,0,0,
		0,5857,5858,5,1126,0,0,5858,5859,3,596,298,0,5859,5860,5,1127,0,0,5860,
		5862,1,0,0,0,5861,5855,1,0,0,0,5861,5862,1,0,0,0,5862,509,1,0,0,0,5863,
		5882,5,392,0,0,5864,5882,5,445,0,0,5865,5867,7,86,0,0,5866,5865,1,0,0,
		0,5866,5867,1,0,0,0,5867,5868,1,0,0,0,5868,5882,5,474,0,0,5869,5882,5,
		538,0,0,5870,5882,5,720,0,0,5871,5872,5,565,0,0,5872,5882,5,349,0,0,5873,
		5882,5,632,0,0,5874,5882,5,665,0,0,5875,5879,5,737,0,0,5876,5877,5,190,
		0,0,5877,5878,5,133,0,0,5878,5880,5,102,0,0,5879,5876,1,0,0,0,5879,5880,
		1,0,0,0,5880,5882,1,0,0,0,5881,5863,1,0,0,0,5881,5864,1,0,0,0,5881,5866,
		1,0,0,0,5881,5869,1,0,0,0,5881,5870,1,0,0,0,5881,5871,1,0,0,0,5881,5873,
		1,0,0,0,5881,5874,1,0,0,0,5881,5875,1,0,0,0,5882,5896,1,0,0,0,5883,5884,
		5,572,0,0,5884,5886,5,474,0,0,5885,5887,3,348,174,0,5886,5885,1,0,0,0,
		5886,5887,1,0,0,0,5887,5896,1,0,0,0,5888,5890,7,54,0,0,5889,5891,3,600,
		300,0,5890,5889,1,0,0,0,5890,5891,1,0,0,0,5891,5893,1,0,0,0,5892,5894,
		3,512,256,0,5893,5892,1,0,0,0,5893,5894,1,0,0,0,5894,5896,1,0,0,0,5895,
		5881,1,0,0,0,5895,5883,1,0,0,0,5895,5888,1,0,0,0,5896,511,1,0,0,0,5897,
		5898,5,190,0,0,5898,5899,5,133,0,0,5899,5903,5,102,0,0,5900,5901,5,64,
		0,0,5901,5903,5,419,0,0,5902,5897,1,0,0,0,5902,5900,1,0,0,0,5903,513,1,
		0,0,0,5904,5912,3,538,269,0,5905,5906,5,128,0,0,5906,5909,5,1126,0,0,5907,
		5910,3,596,298,0,5908,5910,5,6,0,0,5909,5907,1,0,0,0,5909,5908,1,0,0,0,
		5910,5911,1,0,0,0,5911,5913,5,1127,0,0,5912,5905,1,0,0,0,5912,5913,1,0,
		0,0,5913,5921,1,0,0,0,5914,5916,7,20,0,0,5915,5914,1,0,0,0,5915,5916,1,
		0,0,0,5916,5917,1,0,0,0,5917,5918,5,1126,0,0,5918,5919,3,596,298,0,5919,
		5920,5,1127,0,0,5920,5922,1,0,0,0,5921,5915,1,0,0,0,5921,5922,1,0,0,0,
		5922,5925,1,0,0,0,5923,5924,5,77,0,0,5924,5926,5,468,0,0,5925,5923,1,0,
		0,0,5925,5926,1,0,0,0,5926,515,1,0,0,0,5927,5928,7,87,0,0,5928,5931,3,
		538,269,0,5929,5932,3,564,282,0,5930,5932,5,1141,0,0,5931,5929,1,0,0,0,
		5931,5930,1,0,0,0,5931,5932,1,0,0,0,5932,517,1,0,0,0,5933,5937,7,87,0,
		0,5934,5935,7,88,0,0,5935,5936,5,1117,0,0,5936,5938,7,89,0,0,5937,5934,
		1,0,0,0,5937,5938,1,0,0,0,5938,5939,1,0,0,0,5939,5940,3,534,267,0,5940,
		519,1,0,0,0,5941,5942,5,442,0,0,5942,5943,5,1141,0,0,5943,521,1,0,0,0,
		5944,5945,5,184,0,0,5945,5946,3,564,282,0,5946,523,1,0,0,0,5947,5955,5,
		155,0,0,5948,5950,5,160,0,0,5949,5951,5,667,0,0,5950,5949,1,0,0,0,5950,
		5951,1,0,0,0,5951,5952,1,0,0,0,5952,5956,3,574,287,0,5953,5956,5,1149,
		0,0,5954,5956,5,1150,0,0,5955,5948,1,0,0,0,5955,5953,1,0,0,0,5955,5954,
		1,0,0,0,5956,5966,1,0,0,0,5957,5958,5,152,0,0,5958,5963,3,528,264,0,5959,
		5960,5,1128,0,0,5960,5962,3,528,264,0,5961,5959,1,0,0,0,5962,5965,1,0,
		0,0,5963,5961,1,0,0,0,5963,5964,1,0,0,0,5964,5967,1,0,0,0,5965,5963,1,
		0,0,0,5966,5957,1,0,0,0,5966,5967,1,0,0,0,5967,525,1,0,0,0,5968,5976,5,
		142,0,0,5969,5971,5,160,0,0,5970,5972,5,667,0,0,5971,5970,1,0,0,0,5971,
		5972,1,0,0,0,5972,5973,1,0,0,0,5973,5977,3,574,287,0,5974,5977,5,1149,
		0,0,5975,5977,5,1150,0,0,5976,5969,1,0,0,0,5976,5974,1,0,0,0,5976,5975,
		1,0,0,0,5976,5977,1,0,0,0,5977,5987,1,0,0,0,5978,5979,5,152,0,0,5979,5984,
		3,528,264,0,5980,5981,5,1128,0,0,5981,5983,3,528,264,0,5982,5980,1,0,0,
		0,5983,5986,1,0,0,0,5984,5982,1,0,0,0,5984,5985,1,0,0,0,5985,5988,1,0,
		0,0,5986,5984,1,0,0,0,5987,5978,1,0,0,0,5987,5988,1,0,0,0,5988,527,1,0,
		0,0,5989,5990,7,90,0,0,5990,5995,5,1117,0,0,5991,5996,3,574,287,0,5992,
		5996,5,1142,0,0,5993,5996,3,548,274,0,5994,5996,3,566,283,0,5995,5991,
		1,0,0,0,5995,5992,1,0,0,0,5995,5993,1,0,0,0,5995,5994,1,0,0,0,5996,529,
		1,0,0,0,5997,5999,5,70,0,0,5998,6000,7,91,0,0,5999,5998,1,0,0,0,5999,6000,
		1,0,0,0,6000,6001,1,0,0,0,6001,6033,5,48,0,0,6002,6003,3,482,241,0,6003,
		6004,5,1117,0,0,6004,6012,7,92,0,0,6005,6006,5,1128,0,0,6006,6007,3,482,
		241,0,6007,6008,5,1117,0,0,6008,6009,7,92,0,0,6009,6011,1,0,0,0,6010,6005,
		1,0,0,0,6011,6014,1,0,0,0,6012,6010,1,0,0,0,6012,6013,1,0,0,0,6013,6034,
		1,0,0,0,6014,6012,1,0,0,0,6015,6018,5,29,0,0,6016,6019,3,570,285,0,6017,
		6019,3,482,241,0,6018,6016,1,0,0,0,6018,6017,1,0,0,0,6019,6020,1,0,0,0,
		6020,6021,3,482,241,0,6021,6022,5,1117,0,0,6022,6030,3,532,266,0,6023,
		6024,5,1128,0,0,6024,6025,3,482,241,0,6025,6026,5,1117,0,0,6026,6027,3,
		532,266,0,6027,6029,1,0,0,0,6028,6023,1,0,0,0,6029,6032,1,0,0,0,6030,6028,
		1,0,0,0,6030,6031,1,0,0,0,6031,6034,1,0,0,0,6032,6030,1,0,0,0,6033,6002,
		1,0,0,0,6033,6015,1,0,0,0,6034,531,1,0,0,0,6035,6036,7,93,0,0,6036,533,
		1,0,0,0,6037,6043,3,196,98,0,6038,6043,3,182,91,0,6039,6043,3,188,94,0,
		6040,6043,3,194,97,0,6041,6043,3,198,99,0,6042,6037,1,0,0,0,6042,6038,
		1,0,0,0,6042,6039,1,0,0,0,6042,6040,1,0,0,0,6042,6041,1,0,0,0,6043,6048,
		1,0,0,0,6044,6045,5,64,0,0,6045,6046,5,374,0,0,6046,6048,3,564,282,0,6047,
		6042,1,0,0,0,6047,6044,1,0,0,0,6048,535,1,0,0,0,6049,6053,3,564,282,0,
		6050,6054,5,1148,0,0,6051,6052,5,1125,0,0,6052,6054,3,564,282,0,6053,6050,
		1,0,0,0,6053,6051,1,0,0,0,6053,6054,1,0,0,0,6054,537,1,0,0,0,6055,6056,
		3,536,268,0,6056,539,1,0,0,0,6057,6060,3,546,273,0,6058,6060,3,564,282,
		0,6059,6057,1,0,0,0,6059,6058,1,0,0,0,6060,541,1,0,0,0,6061,6066,3,564,
		282,0,6062,6064,3,568,284,0,6063,6065,3,568,284,0,6064,6063,1,0,0,0,6064,
		6065,1,0,0,0,6065,6067,1,0,0,0,6066,6062,1,0,0,0,6066,6067,1,0,0,0,6067,
		6076,1,0,0,0,6068,6070,9,0,0,0,6069,6068,1,0,0,0,6069,6070,1,0,0,0,6070,
		6071,1,0,0,0,6071,6073,3,568,284,0,6072,6074,3,568,284,0,6073,6072,1,0,
		0,0,6073,6074,1,0,0,0,6074,6076,1,0,0,0,6075,6061,1,0,0,0,6075,6069,1,
		0,0,0,6076,543,1,0,0,0,6077,6080,3,564,282,0,6078,6080,5,1141,0,0,6079,
		6077,1,0,0,0,6079,6078,1,0,0,0,6080,6085,1,0,0,0,6081,6082,5,1126,0,0,
		6082,6083,3,570,285,0,6083,6084,5,1127,0,0,6084,6086,1,0,0,0,6085,6081,
		1,0,0,0,6085,6086,1,0,0,0,6086,6089,1,0,0,0,6087,6089,3,668,334,0,6088,
		6079,1,0,0,0,6088,6087,1,0,0,0,6089,6091,1,0,0,0,6090,6092,7,48,0,0,6091,
		6090,1,0,0,0,6091,6092,1,0,0,0,6092,545,1,0,0,0,6093,6099,5,1151,0,0,6094,
		6099,5,1149,0,0,6095,6099,5,1141,0,0,6096,6099,5,695,0,0,6097,6099,3,696,
		348,0,6098,6093,1,0,0,0,6098,6094,1,0,0,0,6098,6095,1,0,0,0,6098,6096,
		1,0,0,0,6098,6097,1,0,0,0,6099,547,1,0,0,0,6100,6101,7,94,0,0,6101,549,
		1,0,0,0,6102,6107,5,224,0,0,6103,6107,3,686,343,0,6104,6107,5,1141,0,0,
		6105,6107,5,1138,0,0,6106,6102,1,0,0,0,6106,6103,1,0,0,0,6106,6104,1,0,
		0,0,6106,6105,1,0,0,0,6107,551,1,0,0,0,6108,6111,3,564,282,0,6109,6111,
		5,1141,0,0,6110,6108,1,0,0,0,6110,6109,1,0,0,0,6111,553,1,0,0,0,6112,6113,
		7,95,0,0,6113,555,1,0,0,0,6114,6115,3,570,285,0,6115,6116,5,1114,0,0,6116,
		6117,3,570,285,0,6117,6118,5,1114,0,0,6118,6119,3,570,285,0,6119,6120,
		5,1114,0,0,6120,6121,3,570,285,0,6121,6122,5,1114,0,0,6122,6128,3,570,
		285,0,6123,6124,5,1137,0,0,6124,6125,3,570,285,0,6125,6126,5,1114,0,0,
		6126,6127,3,570,285,0,6127,6129,1,0,0,0,6128,6123,1,0,0,0,6129,6130,1,
		0,0,0,6130,6128,1,0,0,0,6130,6131,1,0,0,0,6131,557,1,0,0,0,6132,6139,3,
		560,280,0,6133,6134,5,1128,0,0,6134,6137,3,560,280,0,6135,6136,5,1128,
		0,0,6136,6138,3,570,285,0,6137,6135,1,0,0,0,6137,6138,1,0,0,0,6138,6140,
		1,0,0,0,6139,6133,1,0,0,0,6139,6140,1,0,0,0,6140,559,1,0,0,0,6141,6149,
		5,1141,0,0,6142,6149,5,1146,0,0,6143,6145,5,1143,0,0,6144,6143,1,0,0,0,
		6145,6146,1,0,0,0,6146,6144,1,0,0,0,6146,6147,1,0,0,0,6147,6149,1,0,0,
		0,6148,6141,1,0,0,0,6148,6142,1,0,0,0,6148,6144,1,0,0,0,6149,561,1,0,0,
		0,6150,6153,3,564,282,0,6151,6153,5,1141,0,0,6152,6150,1,0,0,0,6152,6151,
		1,0,0,0,6153,563,1,0,0,0,6154,6158,3,566,283,0,6155,6158,5,1150,0,0,6156,
		6158,5,1138,0,0,6157,6154,1,0,0,0,6157,6155,1,0,0,0,6157,6156,1,0,0,0,
		6158,565,1,0,0,0,6159,6169,5,1149,0,0,6160,6169,3,686,343,0,6161,6169,
		3,688,344,0,6162,6169,3,554,277,0,6163,6169,3,690,345,0,6164,6169,3,692,
		346,0,6165,6169,3,694,347,0,6166,6169,3,696,348,0,6167,6169,3,660,330,
		0,6168,6159,1,0,0,0,6168,6160,1,0,0,0,6168,6161,1,0,0,0,6168,6162,1,0,
		0,0,6168,6163,1,0,0,0,6168,6164,1,0,0,0,6168,6165,1,0,0,0,6168,6166,1,
		0,0,0,6168,6167,1,0,0,0,6169,567,1,0,0,0,6170,6174,5,1148,0,0,6171,6172,
		5,1125,0,0,6172,6174,3,564,282,0,6173,6170,1,0,0,0,6173,6171,1,0,0,0,6174,
		569,1,0,0,0,6175,6176,7,96,0,0,6176,571,1,0,0,0,6177,6180,5,1139,0,0,6178,
		6180,3,570,285,0,6179,6177,1,0,0,0,6179,6178,1,0,0,0,6180,573,1,0,0,0,
		6181,6183,5,1147,0,0,6182,6181,1,0,0,0,6182,6183,1,0,0,0,6183,6184,1,0,
		0,0,6184,6187,5,1141,0,0,6185,6187,5,1140,0,0,6186,6182,1,0,0,0,6186,6185,
		1,0,0,0,6187,6189,1,0,0,0,6188,6190,5,1141,0,0,6189,6188,1,0,0,0,6190,
		6191,1,0,0,0,6191,6189,1,0,0,0,6191,6192,1,0,0,0,6192,6205,1,0,0,0,6193,
		6195,5,1147,0,0,6194,6193,1,0,0,0,6194,6195,1,0,0,0,6195,6196,1,0,0,0,
		6196,6199,5,1141,0,0,6197,6199,5,1140,0,0,6198,6194,1,0,0,0,6198,6197,
		1,0,0,0,6199,6202,1,0,0,0,6200,6201,5,27,0,0,6201,6203,3,552,276,0,6202,
		6200,1,0,0,0,6202,6203,1,0,0,0,6203,6205,1,0,0,0,6204,6186,1,0,0,0,6204,
		6198,1,0,0,0,6205,575,1,0,0,0,6206,6207,7,97,0,0,6207,577,1,0,0,0,6208,
		6210,5,1147,0,0,6209,6208,1,0,0,0,6209,6210,1,0,0,0,6210,6211,1,0,0,0,
		6211,6212,5,1143,0,0,6212,579,1,0,0,0,6213,6215,5,113,0,0,6214,6213,1,
		0,0,0,6214,6215,1,0,0,0,6215,6216,1,0,0,0,6216,6217,7,98,0,0,6217,581,
		1,0,0,0,6218,6231,3,574,287,0,6219,6231,3,570,285,0,6220,6221,5,1114,0,
		0,6221,6231,3,570,285,0,6222,6231,3,578,289,0,6223,6231,3,576,288,0,6224,
		6231,5,1144,0,0,6225,6231,5,1146,0,0,6226,6228,5,113,0,0,6227,6226,1,0,
		0,0,6227,6228,1,0,0,0,6228,6229,1,0,0,0,6229,6231,7,98,0,0,6230,6218,1,
		0,0,0,6230,6219,1,0,0,0,6230,6220,1,0,0,0,6230,6222,1,0,0,0,6230,6223,
		1,0,0,0,6230,6224,1,0,0,0,6230,6225,1,0,0,0,6230,6227,1,0,0,0,6231,583,
		1,0,0,0,6232,6234,7,99,0,0,6233,6235,5,236,0,0,6234,6233,1,0,0,0,6234,
		6235,1,0,0,0,6235,6237,1,0,0,0,6236,6238,3,590,295,0,6237,6236,1,0,0,0,
		6237,6238,1,0,0,0,6238,6240,1,0,0,0,6239,6241,5,224,0,0,6240,6239,1,0,
		0,0,6240,6241,1,0,0,0,6241,6245,1,0,0,0,6242,6243,3,60,30,0,6243,6244,
		3,550,275,0,6244,6246,1,0,0,0,6245,6242,1,0,0,0,6245,6246,1,0,0,0,6246,
		6250,1,0,0,0,6247,6248,5,27,0,0,6248,6251,3,552,276,0,6249,6251,5,224,
		0,0,6250,6247,1,0,0,0,6250,6249,1,0,0,0,6250,6251,1,0,0,0,6251,6355,1,
		0,0,0,6252,6253,5,223,0,0,6253,6255,7,100,0,0,6254,6256,3,590,295,0,6255,
		6254,1,0,0,0,6255,6256,1,0,0,0,6256,6258,1,0,0,0,6257,6259,5,224,0,0,6258,
		6257,1,0,0,0,6258,6259,1,0,0,0,6259,6355,1,0,0,0,6260,6261,5,516,0,0,6261,
		6263,5,221,0,0,6262,6264,3,590,295,0,6263,6262,1,0,0,0,6263,6264,1,0,0,
		0,6264,6266,1,0,0,0,6265,6267,5,224,0,0,6266,6265,1,0,0,0,6266,6267,1,
		0,0,0,6267,6355,1,0,0,0,6268,6269,5,223,0,0,6269,6270,7,101,0,0,6270,6272,
		5,236,0,0,6271,6273,3,590,295,0,6272,6271,1,0,0,0,6272,6273,1,0,0,0,6273,
		6275,1,0,0,0,6274,6276,5,224,0,0,6275,6274,1,0,0,0,6275,6276,1,0,0,0,6276,
		6355,1,0,0,0,6277,6279,7,102,0,0,6278,6280,3,590,295,0,6279,6278,1,0,0,
		0,6279,6280,1,0,0,0,6280,6284,1,0,0,0,6281,6283,7,103,0,0,6282,6281,1,
		0,0,0,6283,6286,1,0,0,0,6284,6282,1,0,0,0,6284,6285,1,0,0,0,6285,6355,
		1,0,0,0,6286,6284,1,0,0,0,6287,6289,5,206,0,0,6288,6290,3,592,296,0,6289,
		6288,1,0,0,0,6289,6290,1,0,0,0,6290,6294,1,0,0,0,6291,6293,7,103,0,0,6292,
		6291,1,0,0,0,6293,6296,1,0,0,0,6294,6292,1,0,0,0,6294,6295,1,0,0,0,6295,
		6355,1,0,0,0,6296,6294,1,0,0,0,6297,6299,5,207,0,0,6298,6300,5,208,0,0,
		6299,6298,1,0,0,0,6299,6300,1,0,0,0,6300,6302,1,0,0,0,6301,6303,3,592,
		296,0,6302,6301,1,0,0,0,6302,6303,1,0,0,0,6303,6307,1,0,0,0,6304,6306,
		7,103,0,0,6305,6304,1,0,0,0,6306,6309,1,0,0,0,6307,6305,1,0,0,0,6307,6308,
		1,0,0,0,6308,6355,1,0,0,0,6309,6307,1,0,0,0,6310,6312,7,104,0,0,6311,6313,
		3,594,297,0,6312,6311,1,0,0,0,6312,6313,1,0,0,0,6313,6317,1,0,0,0,6314,
		6316,7,103,0,0,6315,6314,1,0,0,0,6316,6319,1,0,0,0,6317,6315,1,0,0,0,6317,
		6318,1,0,0,0,6318,6355,1,0,0,0,6319,6317,1,0,0,0,6320,6355,7,105,0,0,6321,
		6323,7,106,0,0,6322,6324,3,590,295,0,6323,6322,1,0,0,0,6323,6324,1,0,0,
		0,6324,6355,1,0,0,0,6325,6326,7,107,0,0,6326,6328,3,586,293,0,6327,6329,
		5,224,0,0,6328,6327,1,0,0,0,6328,6329,1,0,0,0,6329,6333,1,0,0,0,6330,6331,
		3,60,30,0,6331,6332,3,550,275,0,6332,6334,1,0,0,0,6333,6330,1,0,0,0,6333,
		6334,1,0,0,0,6334,6355,1,0,0,0,6335,6355,7,108,0,0,6336,6338,5,229,0,0,
		6337,6339,5,221,0,0,6338,6337,1,0,0,0,6338,6339,1,0,0,0,6339,6341,1,0,
		0,0,6340,6342,5,224,0,0,6341,6340,1,0,0,0,6341,6342,1,0,0,0,6342,6346,
		1,0,0,0,6343,6344,3,60,30,0,6344,6345,3,550,275,0,6345,6347,1,0,0,0,6346,
		6343,1,0,0,0,6346,6347,1,0,0,0,6347,6350,1,0,0,0,6348,6349,5,27,0,0,6349,
		6351,3,552,276,0,6350,6348,1,0,0,0,6350,6351,1,0,0,0,6351,6355,1,0,0,0,
		6352,6353,5,229,0,0,6353,6355,5,225,0,0,6354,6232,1,0,0,0,6354,6252,1,
		0,0,0,6354,6260,1,0,0,0,6354,6268,1,0,0,0,6354,6277,1,0,0,0,6354,6287,
		1,0,0,0,6354,6297,1,0,0,0,6354,6310,1,0,0,0,6354,6320,1,0,0,0,6354,6321,
		1,0,0,0,6354,6325,1,0,0,0,6354,6335,1,0,0,0,6354,6336,1,0,0,0,6354,6352,
		1,0,0,0,6355,585,1,0,0,0,6356,6357,5,1126,0,0,6357,6362,5,1141,0,0,6358,
		6359,5,1128,0,0,6359,6361,5,1141,0,0,6360,6358,1,0,0,0,6361,6364,1,0,0,
		0,6362,6360,1,0,0,0,6362,6363,1,0,0,0,6363,6365,1,0,0,0,6364,6362,1,0,
		0,0,6365,6366,5,1127,0,0,6366,587,1,0,0,0,6367,6369,7,109,0,0,6368,6370,
		3,590,295,0,6369,6368,1,0,0,0,6369,6370,1,0,0,0,6370,6390,1,0,0,0,6371,
		6373,5,220,0,0,6372,6374,3,590,295,0,6373,6372,1,0,0,0,6373,6374,1,0,0,
		0,6374,6378,1,0,0,0,6375,6376,3,60,30,0,6376,6377,3,550,275,0,6377,6379,
		1,0,0,0,6378,6375,1,0,0,0,6378,6379,1,0,0,0,6379,6390,1,0,0,0,6380,6390,
		7,110,0,0,6381,6383,5,212,0,0,6382,6384,3,594,297,0,6383,6382,1,0,0,0,
		6383,6384,1,0,0,0,6384,6390,1,0,0,0,6385,6387,7,111,0,0,6386,6388,5,204,
		0,0,6387,6386,1,0,0,0,6387,6388,1,0,0,0,6388,6390,1,0,0,0,6389,6367,1,
		0,0,0,6389,6371,1,0,0,0,6389,6380,1,0,0,0,6389,6381,1,0,0,0,6389,6385,
		1,0,0,0,6390,6392,1,0,0,0,6391,6393,5,11,0,0,6392,6391,1,0,0,0,6392,6393,
		1,0,0,0,6393,589,1,0,0,0,6394,6395,5,1126,0,0,6395,6396,3,570,285,0,6396,
		6397,5,1127,0,0,6397,591,1,0,0,0,6398,6399,5,1126,0,0,6399,6400,3,570,
		285,0,6400,6401,5,1128,0,0,6401,6402,3,570,285,0,6402,6403,5,1127,0,0,
		6403,593,1,0,0,0,6404,6405,5,1126,0,0,6405,6408,3,570,285,0,6406,6407,
		5,1128,0,0,6407,6409,3,570,285,0,6408,6406,1,0,0,0,6408,6409,1,0,0,0,6409,
		6410,1,0,0,0,6410,6411,5,1127,0,0,6411,595,1,0,0,0,6412,6417,3,564,282,
		0,6413,6414,5,1128,0,0,6414,6416,3,564,282,0,6415,6413,1,0,0,0,6416,6419,
		1,0,0,0,6417,6415,1,0,0,0,6417,6418,1,0,0,0,6418,597,1,0,0,0,6419,6417,
		1,0,0,0,6420,6425,3,542,271,0,6421,6422,5,1128,0,0,6422,6424,3,542,271,
		0,6423,6421,1,0,0,0,6424,6427,1,0,0,0,6425,6423,1,0,0,0,6425,6426,1,0,
		0,0,6426,599,1,0,0,0,6427,6425,1,0,0,0,6428,6433,3,538,269,0,6429,6430,
		5,1128,0,0,6430,6432,3,538,269,0,6431,6429,1,0,0,0,6432,6435,1,0,0,0,6433,
		6431,1,0,0,0,6433,6434,1,0,0,0,6434,601,1,0,0,0,6435,6433,1,0,0,0,6436,
		6437,5,1126,0,0,6437,6442,3,544,272,0,6438,6439,5,1128,0,0,6439,6441,3,
		544,272,0,6440,6438,1,0,0,0,6441,6444,1,0,0,0,6442,6440,1,0,0,0,6442,6443,
		1,0,0,0,6443,6445,1,0,0,0,6444,6442,1,0,0,0,6445,6446,5,1127,0,0,6446,
		603,1,0,0,0,6447,6452,3,668,334,0,6448,6449,5,1128,0,0,6449,6451,3,668,
		334,0,6450,6448,1,0,0,0,6451,6454,1,0,0,0,6452,6450,1,0,0,0,6452,6453,
		1,0,0,0,6453,605,1,0,0,0,6454,6452,1,0,0,0,6455,6460,3,618,309,0,6456,
		6457,5,1128,0,0,6457,6459,3,618,309,0,6458,6456,1,0,0,0,6459,6462,1,0,
		0,0,6460,6458,1,0,0,0,6460,6461,1,0,0,0,6461,607,1,0,0,0,6462,6460,1,0,
		0,0,6463,6468,3,582,291,0,6464,6465,5,1128,0,0,6465,6467,3,582,291,0,6466,
		6464,1,0,0,0,6467,6470,1,0,0,0,6468,6466,1,0,0,0,6468,6469,1,0,0,0,6469,
		609,1,0,0,0,6470,6468,1,0,0,0,6471,6476,5,1141,0,0,6472,6473,5,1128,0,
		0,6473,6475,5,1141,0,0,6474,6472,1,0,0,0,6475,6478,1,0,0,0,6476,6474,1,
		0,0,0,6476,6477,1,0,0,0,6477,611,1,0,0,0,6478,6476,1,0,0,0,6479,6484,5,
		1153,0,0,6480,6481,5,1128,0,0,6481,6483,5,1153,0,0,6482,6480,1,0,0,0,6483,
		6486,1,0,0,0,6484,6482,1,0,0,0,6484,6485,1,0,0,0,6485,613,1,0,0,0,6486,
		6484,1,0,0,0,6487,6514,5,115,0,0,6488,6489,5,23,0,0,6489,6490,5,1126,0,
		0,6490,6491,3,668,334,0,6491,6492,5,12,0,0,6492,6493,3,588,294,0,6493,
		6494,5,1127,0,0,6494,6514,1,0,0,0,6495,6497,3,674,337,0,6496,6495,1,0,
		0,0,6496,6497,1,0,0,0,6497,6498,1,0,0,0,6498,6514,3,582,291,0,6499,6503,
		3,616,308,0,6500,6501,5,117,0,0,6501,6502,5,182,0,0,6502,6504,3,616,308,
		0,6503,6500,1,0,0,0,6503,6504,1,0,0,0,6504,6514,1,0,0,0,6505,6506,5,1126,
		0,0,6506,6507,3,668,334,0,6507,6508,5,1127,0,0,6508,6514,1,0,0,0,6509,
		6510,5,1126,0,0,6510,6511,3,536,268,0,6511,6512,5,1127,0,0,6512,6514,1,
		0,0,0,6513,6487,1,0,0,0,6513,6488,1,0,0,0,6513,6496,1,0,0,0,6513,6499,
		1,0,0,0,6513,6505,1,0,0,0,6513,6509,1,0,0,0,6514,615,1,0,0,0,6515,6521,
		7,112,0,0,6516,6518,5,1126,0,0,6517,6519,3,570,285,0,6518,6517,1,0,0,0,
		6518,6519,1,0,0,0,6519,6520,1,0,0,0,6520,6522,5,1127,0,0,6521,6516,1,0,
		0,0,6521,6522,1,0,0,0,6522,6530,1,0,0,0,6523,6524,5,321,0,0,6524,6526,
		5,1126,0,0,6525,6527,3,570,285,0,6526,6525,1,0,0,0,6526,6527,1,0,0,0,6527,
		6528,1,0,0,0,6528,6530,5,1127,0,0,6529,6515,1,0,0,0,6529,6523,1,0,0,0,
		6530,617,1,0,0,0,6531,6534,3,668,334,0,6532,6534,5,42,0,0,6533,6531,1,
		0,0,0,6533,6532,1,0,0,0,6534,619,1,0,0,0,6535,6536,5,76,0,0,6536,6537,
		5,59,0,0,6537,621,1,0,0,0,6538,6539,5,76,0,0,6539,6540,5,113,0,0,6540,
		6541,5,59,0,0,6541,623,1,0,0,0,6542,6543,5,122,0,0,6543,6544,5,140,0,0,
		6544,625,1,0,0,0,6545,6546,5,672,0,0,6546,6549,3,570,285,0,6547,6549,5,
		525,0,0,6548,6545,1,0,0,0,6548,6547,1,0,0,0,6549,627,1,0,0,0,6550,6569,
		3,630,315,0,6551,6569,3,638,319,0,6552,6569,3,640,320,0,6553,6554,3,660,
		330,0,6554,6556,5,1126,0,0,6555,6557,3,664,332,0,6556,6555,1,0,0,0,6556,
		6557,1,0,0,0,6557,6558,1,0,0,0,6558,6559,5,1127,0,0,6559,6569,1,0,0,0,
		6560,6561,3,536,268,0,6561,6563,5,1126,0,0,6562,6564,3,664,332,0,6563,
		6562,1,0,0,0,6563,6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,1127,0,0,
		6566,6569,1,0,0,0,6567,6569,3,662,331,0,6568,6550,1,0,0,0,6568,6551,1,
		0,0,0,6568,6552,1,0,0,0,6568,6553,1,0,0,0,6568,6560,1,0,0,0,6568,6567,
		1,0,0,0,6569,629,1,0,0,0,6570,6573,7,113,0,0,6571,6572,5,1126,0,0,6572,
		6574,5,1127,0,0,6573,6571,1,0,0,0,6573,6574,1,0,0,0,6574,6749,1,0,0,0,
		6575,6576,5,32,0,0,6576,6577,5,1126,0,0,6577,6578,3,668,334,0,6578,6579,
		5,1128,0,0,6579,6580,3,588,294,0,6580,6581,5,1127,0,0,6581,6749,1,0,0,
		0,6582,6583,5,32,0,0,6583,6584,5,1126,0,0,6584,6585,3,668,334,0,6585,6586,
		5,185,0,0,6586,6587,3,550,275,0,6587,6588,5,1127,0,0,6588,6749,1,0,0,0,
		6589,6590,5,23,0,0,6590,6591,5,1126,0,0,6591,6592,3,668,334,0,6592,6593,
		5,12,0,0,6593,6594,3,588,294,0,6594,6595,5,1127,0,0,6595,6749,1,0,0,0,
		6596,6597,5,186,0,0,6597,6598,5,1126,0,0,6598,6599,3,542,271,0,6599,6600,
		5,1127,0,0,6600,6749,1,0,0,0,6601,6602,5,22,0,0,6602,6604,3,668,334,0,
		6603,6605,3,632,316,0,6604,6603,1,0,0,0,6605,6606,1,0,0,0,6606,6604,1,
		0,0,0,6606,6607,1,0,0,0,6607,6610,1,0,0,0,6608,6609,5,53,0,0,6609,6611,
		3,666,333,0,6610,6608,1,0,0,0,6610,6611,1,0,0,0,6611,6612,1,0,0,0,6612,
		6613,5,405,0,0,6613,6749,1,0,0,0,6614,6616,5,22,0,0,6615,6617,3,632,316,
		0,6616,6615,1,0,0,0,6617,6618,1,0,0,0,6618,6616,1,0,0,0,6618,6619,1,0,
		0,0,6619,6622,1,0,0,0,6620,6621,5,53,0,0,6621,6623,3,666,333,0,6622,6620,
		1,0,0,0,6622,6623,1,0,0,0,6623,6624,1,0,0,0,6624,6625,5,405,0,0,6625,6749,
		1,0,0,0,6626,6627,5,220,0,0,6627,6628,5,1126,0,0,6628,6631,3,664,332,0,
		6629,6630,5,185,0,0,6630,6632,3,550,275,0,6631,6629,1,0,0,0,6631,6632,
		1,0,0,0,6632,6633,1,0,0,0,6633,6634,5,1127,0,0,6634,6749,1,0,0,0,6635,
		6636,5,322,0,0,6636,6639,5,1126,0,0,6637,6640,3,574,287,0,6638,6640,3,
		668,334,0,6639,6637,1,0,0,0,6639,6638,1,0,0,0,6640,6641,1,0,0,0,6641,6644,
		5,79,0,0,6642,6645,3,574,287,0,6643,6645,3,668,334,0,6644,6642,1,0,0,0,
		6644,6643,1,0,0,0,6645,6646,1,0,0,0,6646,6647,5,1127,0,0,6647,6749,1,0,
		0,0,6648,6649,7,114,0,0,6649,6652,5,1126,0,0,6650,6653,3,574,287,0,6651,
		6653,3,668,334,0,6652,6650,1,0,0,0,6652,6651,1,0,0,0,6653,6654,1,0,0,0,
		6654,6657,5,67,0,0,6655,6658,3,570,285,0,6656,6658,3,668,334,0,6657,6655,
		1,0,0,0,6657,6656,1,0,0,0,6658,6664,1,0,0,0,6659,6662,5,64,0,0,6660,6663,
		3,570,285,0,6661,6663,3,668,334,0,6662,6660,1,0,0,0,6662,6661,1,0,0,0,
		6663,6665,1,0,0,0,6664,6659,1,0,0,0,6664,6665,1,0,0,0,6665,6666,1,0,0,
		0,6666,6667,5,1127,0,0,6667,6749,1,0,0,0,6668,6669,5,326,0,0,6669,6670,
		5,1126,0,0,6670,6673,7,115,0,0,6671,6674,3,574,287,0,6672,6674,3,668,334,
		0,6673,6671,1,0,0,0,6673,6672,1,0,0,0,6673,6674,1,0,0,0,6674,6675,1,0,
		0,0,6675,6678,5,67,0,0,6676,6679,3,574,287,0,6677,6679,3,668,334,0,6678,
		6676,1,0,0,0,6678,6677,1,0,0,0,6679,6680,1,0,0,0,6680,6681,5,1127,0,0,
		6681,6749,1,0,0,0,6682,6683,5,326,0,0,6683,6686,5,1126,0,0,6684,6687,3,
		574,287,0,6685,6687,3,668,334,0,6686,6684,1,0,0,0,6686,6685,1,0,0,0,6687,
		6688,1,0,0,0,6688,6691,5,67,0,0,6689,6692,3,574,287,0,6690,6692,3,668,
		334,0,6691,6689,1,0,0,0,6691,6690,1,0,0,0,6692,6693,1,0,0,0,6693,6694,
		5,1127,0,0,6694,6749,1,0,0,0,6695,6696,5,1096,0,0,6696,6699,5,1126,0,0,
		6697,6700,3,574,287,0,6698,6700,3,668,334,0,6699,6697,1,0,0,0,6699,6698,
		1,0,0,0,6700,6707,1,0,0,0,6701,6702,5,12,0,0,6702,6703,7,116,0,0,6703,
		6704,5,1126,0,0,6704,6705,3,570,285,0,6705,6706,5,1127,0,0,6706,6708,1,
		0,0,0,6707,6701,1,0,0,0,6707,6708,1,0,0,0,6708,6710,1,0,0,0,6709,6711,
		3,634,317,0,6710,6709,1,0,0,0,6710,6711,1,0,0,0,6711,6712,1,0,0,0,6712,
		6713,5,1127,0,0,6713,6749,1,0,0,0,6714,6715,5,319,0,0,6715,6716,5,1126,
		0,0,6716,6717,3,70,35,0,6717,6720,5,67,0,0,6718,6721,3,574,287,0,6719,
		6721,3,668,334,0,6720,6718,1,0,0,0,6720,6719,1,0,0,0,6721,6722,1,0,0,0,
		6722,6723,5,1127,0,0,6723,6749,1,0,0,0,6724,6725,5,895,0,0,6725,6726,5,
		1126,0,0,6726,6727,7,117,0,0,6727,6728,5,1128,0,0,6728,6729,3,574,287,
		0,6729,6730,5,1127,0,0,6730,6749,1,0,0,0,6731,6732,5,280,0,0,6732,6733,
		5,1126,0,0,6733,6734,3,668,334,0,6734,6735,5,1128,0,0,6735,6738,3,668,
		334,0,6736,6737,5,591,0,0,6737,6739,3,588,294,0,6738,6736,1,0,0,0,6738,
		6739,1,0,0,0,6739,6741,1,0,0,0,6740,6742,3,260,130,0,6741,6740,1,0,0,0,
		6741,6742,1,0,0,0,6742,6744,1,0,0,0,6743,6745,3,262,131,0,6744,6743,1,
		0,0,0,6744,6745,1,0,0,0,6745,6746,1,0,0,0,6746,6747,5,1127,0,0,6747,6749,
		1,0,0,0,6748,6570,1,0,0,0,6748,6575,1,0,0,0,6748,6582,1,0,0,0,6748,6589,
		1,0,0,0,6748,6596,1,0,0,0,6748,6601,1,0,0,0,6748,6614,1,0,0,0,6748,6626,
		1,0,0,0,6748,6635,1,0,0,0,6748,6648,1,0,0,0,6748,6668,1,0,0,0,6748,6682,
		1,0,0,0,6748,6695,1,0,0,0,6748,6714,1,0,0,0,6748,6724,1,0,0,0,6748,6731,
		1,0,0,0,6749,631,1,0,0,0,6750,6751,5,187,0,0,6751,6752,3,666,333,0,6752,
		6753,5,172,0,0,6753,6754,3,666,333,0,6754,633,1,0,0,0,6755,6756,5,470,
		0,0,6756,6761,3,636,318,0,6757,6758,5,1128,0,0,6758,6760,3,636,318,0,6759,
		6757,1,0,0,0,6760,6763,1,0,0,0,6761,6759,1,0,0,0,6761,6762,1,0,0,0,6762,
		6770,1,0,0,0,6763,6761,1,0,0,0,6764,6765,5,470,0,0,6765,6766,3,570,285,
		0,6766,6767,5,1114,0,0,6767,6768,3,570,285,0,6768,6770,1,0,0,0,6769,6755,
		1,0,0,0,6769,6764,1,0,0,0,6770,635,1,0,0,0,6771,6773,3,570,285,0,6772,
		6774,7,118,0,0,6773,6772,1,0,0,0,6773,6774,1,0,0,0,6774,637,1,0,0,0,6775,
		6776,7,119,0,0,6776,6778,5,1126,0,0,6777,6779,7,44,0,0,6778,6777,1,0,0,
		0,6778,6779,1,0,0,0,6779,6780,1,0,0,0,6780,6781,3,666,333,0,6781,6783,
		5,1127,0,0,6782,6784,3,642,321,0,6783,6782,1,0,0,0,6783,6784,1,0,0,0,6784,
		6835,1,0,0,0,6785,6786,5,288,0,0,6786,6794,5,1126,0,0,6787,6795,5,1110,
		0,0,6788,6790,5,6,0,0,6789,6788,1,0,0,0,6789,6790,1,0,0,0,6790,6791,1,
		0,0,0,6791,6795,3,666,333,0,6792,6793,5,49,0,0,6793,6795,3,664,332,0,6794,
		6787,1,0,0,0,6794,6789,1,0,0,0,6794,6792,1,0,0,0,6795,6796,1,0,0,0,6796,
		6798,5,1127,0,0,6797,6799,3,642,321,0,6798,6797,1,0,0,0,6798,6799,1,0,
		0,0,6799,6835,1,0,0,0,6800,6801,7,120,0,0,6801,6803,5,1126,0,0,6802,6804,
		5,6,0,0,6803,6802,1,0,0,0,6803,6804,1,0,0,0,6804,6805,1,0,0,0,6805,6806,
		3,666,333,0,6806,6808,5,1127,0,0,6807,6809,3,642,321,0,6808,6807,1,0,0,
		0,6808,6809,1,0,0,0,6809,6835,1,0,0,0,6810,6811,5,292,0,0,6811,6813,5,
		1126,0,0,6812,6814,5,49,0,0,6813,6812,1,0,0,0,6813,6814,1,0,0,0,6814,6815,
		1,0,0,0,6815,6826,3,664,332,0,6816,6817,5,123,0,0,6817,6818,5,19,0,0,6818,
		6823,3,226,113,0,6819,6820,5,1128,0,0,6820,6822,3,226,113,0,6821,6819,
		1,0,0,0,6822,6825,1,0,0,0,6823,6821,1,0,0,0,6823,6824,1,0,0,0,6824,6827,
		1,0,0,0,6825,6823,1,0,0,0,6826,6816,1,0,0,0,6826,6827,1,0,0,0,6827,6830,
		1,0,0,0,6828,6829,5,153,0,0,6829,6831,5,1141,0,0,6830,6828,1,0,0,0,6830,
		6831,1,0,0,0,6831,6832,1,0,0,0,6832,6833,5,1127,0,0,6833,6835,1,0,0,0,
		6834,6775,1,0,0,0,6834,6785,1,0,0,0,6834,6800,1,0,0,0,6834,6810,1,0,0,
		0,6835,639,1,0,0,0,6836,6837,7,121,0,0,6837,6838,5,1126,0,0,6838,6841,
		3,668,334,0,6839,6840,5,1128,0,0,6840,6842,3,570,285,0,6841,6839,1,0,0,
		0,6841,6842,1,0,0,0,6842,6845,1,0,0,0,6843,6844,5,1128,0,0,6844,6846,3,
		570,285,0,6845,6843,1,0,0,0,6845,6846,1,0,0,0,6846,6847,1,0,0,0,6847,6848,
		5,1127,0,0,6848,6849,3,642,321,0,6849,6875,1,0,0,0,6850,6851,7,122,0,0,
		6851,6852,5,1126,0,0,6852,6853,3,668,334,0,6853,6854,5,1127,0,0,6854,6855,
		3,642,321,0,6855,6875,1,0,0,0,6856,6857,7,123,0,0,6857,6858,5,1126,0,0,
		6858,6859,5,1127,0,0,6859,6875,3,642,321,0,6860,6861,5,299,0,0,6861,6862,
		5,1126,0,0,6862,6863,3,668,334,0,6863,6864,5,1128,0,0,6864,6865,3,570,
		285,0,6865,6866,5,1127,0,0,6866,6867,3,642,321,0,6867,6875,1,0,0,0,6868,
		6869,5,298,0,0,6869,6870,5,1126,0,0,6870,6871,3,570,285,0,6871,6872,5,
		1127,0,0,6872,6873,3,642,321,0,6873,6875,1,0,0,0,6874,6836,1,0,0,0,6874,
		6850,1,0,0,0,6874,6856,1,0,0,0,6874,6860,1,0,0,0,6874,6868,1,0,0,0,6875,
		641,1,0,0,0,6876,6883,5,127,0,0,6877,6879,5,1126,0,0,6878,6880,3,644,322,
		0,6879,6878,1,0,0,0,6879,6880,1,0,0,0,6880,6881,1,0,0,0,6881,6884,5,1127,
		0,0,6882,6884,3,646,323,0,6883,6877,1,0,0,0,6883,6882,1,0,0,0,6884,643,
		1,0,0,0,6885,6887,3,646,323,0,6886,6885,1,0,0,0,6886,6887,1,0,0,0,6887,
		6889,1,0,0,0,6888,6890,3,658,329,0,6889,6888,1,0,0,0,6889,6890,1,0,0,0,
		6890,6892,1,0,0,0,6891,6893,3,224,112,0,6892,6891,1,0,0,0,6892,6893,1,
		0,0,0,6893,6895,1,0,0,0,6894,6896,3,648,324,0,6895,6894,1,0,0,0,6895,6896,
		1,0,0,0,6896,645,1,0,0,0,6897,6898,3,564,282,0,6898,647,1,0,0,0,6899,6900,
		3,650,325,0,6900,6901,3,652,326,0,6901,649,1,0,0,0,6902,6903,7,124,0,0,
		6903,651,1,0,0,0,6904,6907,3,656,328,0,6905,6907,3,654,327,0,6906,6904,
		1,0,0,0,6906,6905,1,0,0,0,6907,653,1,0,0,0,6908,6909,5,16,0,0,6909,6910,
		3,656,328,0,6910,6911,5,10,0,0,6911,6912,3,656,328,0,6912,655,1,0,0,0,
		6913,6914,5,35,0,0,6914,6921,5,598,0,0,6915,6916,5,655,0,0,6916,6921,7,
		125,0,0,6917,6918,3,668,334,0,6918,6919,7,125,0,0,6919,6921,1,0,0,0,6920,
		6913,1,0,0,0,6920,6915,1,0,0,0,6920,6917,1,0,0,0,6921,657,1,0,0,0,6922,
		6923,5,128,0,0,6923,6924,5,19,0,0,6924,6929,3,668,334,0,6925,6926,5,1128,
		0,0,6926,6928,3,668,334,0,6927,6925,1,0,0,0,6928,6931,1,0,0,0,6929,6927,
		1,0,0,0,6929,6930,1,0,0,0,6930,659,1,0,0,0,6931,6929,1,0,0,0,6932,6956,
		3,698,349,0,6933,6956,5,742,0,0,6934,6956,5,315,0,0,6935,6956,5,311,0,
		0,6936,6956,5,312,0,0,6937,6956,5,313,0,0,6938,6956,5,316,0,0,6939,6956,
		5,317,0,0,6940,6956,5,318,0,0,6941,6956,5,76,0,0,6942,6956,5,84,0,0,6943,
		6956,5,314,0,0,6944,6956,5,320,0,0,6945,6956,5,506,0,0,6946,6956,5,321,
		0,0,6947,6956,5,140,0,0,6948,6956,5,323,0,0,6949,6956,5,324,0,0,6950,6956,
		5,325,0,0,6951,6956,5,326,0,0,6952,6956,5,327,0,0,6953,6956,5,328,0,0,
		6954,6956,5,329,0,0,6955,6932,1,0,0,0,6955,6933,1,0,0,0,6955,6934,1,0,
		0,0,6955,6935,1,0,0,0,6955,6936,1,0,0,0,6955,6937,1,0,0,0,6955,6938,1,
		0,0,0,6955,6939,1,0,0,0,6955,6940,1,0,0,0,6955,6941,1,0,0,0,6955,6942,
		1,0,0,0,6955,6943,1,0,0,0,6955,6944,1,0,0,0,6955,6945,1,0,0,0,6955,6946,
		1,0,0,0,6955,6947,1,0,0,0,6955,6948,1,0,0,0,6955,6949,1,0,0,0,6955,6950,
		1,0,0,0,6955,6951,1,0,0,0,6955,6952,1,0,0,0,6955,6953,1,0,0,0,6955,6954,
		1,0,0,0,6956,661,1,0,0,0,6957,6958,7,126,0,0,6958,6959,5,1126,0,0,6959,
		6960,3,666,333,0,6960,6961,5,1127,0,0,6961,663,1,0,0,0,6962,6967,3,582,
		291,0,6963,6967,3,542,271,0,6964,6967,3,628,314,0,6965,6967,3,668,334,
		0,6966,6962,1,0,0,0,6966,6963,1,0,0,0,6966,6964,1,0,0,0,6966,6965,1,0,
		0,0,6967,6977,1,0,0,0,6968,6973,5,1128,0,0,6969,6974,3,582,291,0,6970,
		6974,3,542,271,0,6971,6974,3,628,314,0,6972,6974,3,668,334,0,6973,6969,
		1,0,0,0,6973,6970,1,0,0,0,6973,6971,1,0,0,0,6973,6972,1,0,0,0,6974,6976,
		1,0,0,0,6975,6968,1,0,0,0,6976,6979,1,0,0,0,6977,6975,1,0,0,0,6977,6978,
		1,0,0,0,6978,665,1,0,0,0,6979,6977,1,0,0,0,6980,6985,3,582,291,0,6981,
		6985,3,542,271,0,6982,6985,3,628,314,0,6983,6985,3,668,334,0,6984,6980,
		1,0,0,0,6984,6981,1,0,0,0,6984,6982,1,0,0,0,6984,6983,1,0,0,0,6985,667,
		1,0,0,0,6986,6987,6,334,-1,0,6987,6988,7,127,0,0,6988,6998,3,668,334,4,
		6989,6990,3,670,335,0,6990,6992,5,87,0,0,6991,6993,5,113,0,0,6992,6991,
		1,0,0,0,6992,6993,1,0,0,0,6993,6994,1,0,0,0,6994,6995,7,128,0,0,6995,6998,
		1,0,0,0,6996,6998,3,670,335,0,6997,6986,1,0,0,0,6997,6989,1,0,0,0,6997,
		6996,1,0,0,0,6998,7005,1,0,0,0,6999,7000,10,3,0,0,7000,7001,3,678,339,
		0,7001,7002,3,668,334,4,7002,7004,1,0,0,0,7003,6999,1,0,0,0,7004,7007,
		1,0,0,0,7005,7003,1,0,0,0,7005,7006,1,0,0,0,7006,669,1,0,0,0,7007,7005,
		1,0,0,0,7008,7011,6,335,-1,0,7009,7010,5,1153,0,0,7010,7012,5,1101,0,0,
		7011,7009,1,0,0,0,7011,7012,1,0,0,0,7012,7013,1,0,0,0,7013,7014,3,672,
		336,0,7014,7079,1,0,0,0,7015,7016,10,8,0,0,7016,7017,3,676,338,0,7017,
		7018,3,670,335,9,7018,7078,1,0,0,0,7019,7021,10,6,0,0,7020,7022,5,113,
		0,0,7021,7020,1,0,0,0,7021,7022,1,0,0,0,7022,7023,1,0,0,0,7023,7024,5,
		16,0,0,7024,7025,3,670,335,0,7025,7026,5,10,0,0,7026,7027,3,670,335,7,
		7027,7078,1,0,0,0,7028,7029,10,5,0,0,7029,7030,5,618,0,0,7030,7031,5,97,
		0,0,7031,7078,3,670,335,6,7032,7034,10,3,0,0,7033,7035,5,113,0,0,7034,
		7033,1,0,0,0,7034,7035,1,0,0,0,7035,7036,1,0,0,0,7036,7037,7,129,0,0,7037,
		7078,3,670,335,4,7038,7040,10,10,0,0,7039,7041,5,113,0,0,7040,7039,1,0,
		0,0,7040,7041,1,0,0,0,7041,7042,1,0,0,0,7042,7043,5,79,0,0,7043,7046,5,
		1126,0,0,7044,7047,3,196,98,0,7045,7047,3,604,302,0,7046,7044,1,0,0,0,
		7046,7045,1,0,0,0,7047,7048,1,0,0,0,7048,7049,5,1127,0,0,7049,7078,1,0,
		0,0,7050,7051,10,9,0,0,7051,7052,5,87,0,0,7052,7078,3,580,290,0,7053,7054,
		10,7,0,0,7054,7055,3,676,338,0,7055,7056,7,130,0,0,7056,7057,5,1126,0,
		0,7057,7058,3,196,98,0,7058,7059,5,1127,0,0,7059,7078,1,0,0,0,7060,7062,
		10,4,0,0,7061,7063,5,113,0,0,7062,7061,1,0,0,0,7062,7063,1,0,0,0,7063,
		7064,1,0,0,0,7064,7065,5,97,0,0,7065,7068,3,670,335,0,7066,7067,5,411,
		0,0,7067,7069,5,1141,0,0,7068,7066,1,0,0,0,7068,7069,1,0,0,0,7069,7078,
		1,0,0,0,7070,7071,10,1,0,0,7071,7072,5,503,0,0,7072,7073,5,531,0,0,7073,
		7074,5,1126,0,0,7074,7075,3,670,335,0,7075,7076,5,1127,0,0,7076,7078,1,
		0,0,0,7077,7015,1,0,0,0,7077,7019,1,0,0,0,7077,7028,1,0,0,0,7077,7032,
		1,0,0,0,7077,7038,1,0,0,0,7077,7050,1,0,0,0,7077,7053,1,0,0,0,7077,7060,
		1,0,0,0,7077,7070,1,0,0,0,7078,7081,1,0,0,0,7079,7077,1,0,0,0,7079,7080,
		1,0,0,0,7080,671,1,0,0,0,7081,7079,1,0,0,0,7082,7083,6,336,-1,0,7083,7128,
		3,582,291,0,7084,7128,3,542,271,0,7085,7128,3,628,314,0,7086,7128,3,548,
		274,0,7087,7088,3,674,337,0,7088,7089,3,672,336,10,7089,7128,1,0,0,0,7090,
		7091,5,224,0,0,7091,7128,3,672,336,9,7092,7093,5,1126,0,0,7093,7098,3,
		668,334,0,7094,7095,5,1128,0,0,7095,7097,3,668,334,0,7096,7094,1,0,0,0,
		7097,7100,1,0,0,0,7098,7096,1,0,0,0,7098,7099,1,0,0,0,7099,7101,1,0,0,
		0,7100,7098,1,0,0,0,7101,7102,5,1127,0,0,7102,7128,1,0,0,0,7103,7104,5,
		598,0,0,7104,7105,5,1126,0,0,7105,7108,3,668,334,0,7106,7107,5,1128,0,
		0,7107,7109,3,668,334,0,7108,7106,1,0,0,0,7109,7110,1,0,0,0,7110,7108,
		1,0,0,0,7110,7111,1,0,0,0,7111,7112,1,0,0,0,7112,7113,5,1127,0,0,7113,
		7128,1,0,0,0,7114,7115,5,59,0,0,7115,7116,5,1126,0,0,7116,7117,3,196,98,
		0,7117,7118,5,1127,0,0,7118,7128,1,0,0,0,7119,7120,5,1126,0,0,7120,7121,
		3,196,98,0,7121,7122,5,1127,0,0,7122,7128,1,0,0,0,7123,7124,5,85,0,0,7124,
		7125,3,668,334,0,7125,7126,3,70,35,0,7126,7128,1,0,0,0,7127,7082,1,0,0,
		0,7127,7084,1,0,0,0,7127,7085,1,0,0,0,7127,7086,1,0,0,0,7127,7087,1,0,
		0,0,7127,7090,1,0,0,0,7127,7092,1,0,0,0,7127,7103,1,0,0,0,7127,7114,1,
		0,0,0,7127,7119,1,0,0,0,7127,7123,1,0,0,0,7128,7146,1,0,0,0,7129,7130,
		10,3,0,0,7130,7131,3,680,340,0,7131,7132,3,672,336,4,7132,7145,1,0,0,0,
		7133,7134,10,2,0,0,7134,7135,3,682,341,0,7135,7136,3,672,336,3,7136,7145,
		1,0,0,0,7137,7138,10,1,0,0,7138,7139,3,684,342,0,7139,7140,3,672,336,2,
		7140,7145,1,0,0,0,7141,7142,10,12,0,0,7142,7143,5,27,0,0,7143,7145,3,552,
		276,0,7144,7129,1,0,0,0,7144,7133,1,0,0,0,7144,7137,1,0,0,0,7144,7141,
		1,0,0,0,7145,7148,1,0,0,0,7146,7144,1,0,0,0,7146,7147,1,0,0,0,7147,673,
		1,0,0,0,7148,7146,1,0,0,0,7149,7150,7,131,0,0,7150,675,1,0,0,0,7151,7166,
		5,1117,0,0,7152,7166,5,1118,0,0,7153,7166,5,1119,0,0,7154,7155,5,1119,
		0,0,7155,7166,5,1117,0,0,7156,7157,5,1118,0,0,7157,7166,5,1117,0,0,7158,
		7159,5,1119,0,0,7159,7166,5,1118,0,0,7160,7161,5,1120,0,0,7161,7166,5,
		1117,0,0,7162,7163,5,1119,0,0,7163,7164,5,1117,0,0,7164,7166,5,1118,0,
		0,7165,7151,1,0,0,0,7165,7152,1,0,0,0,7165,7153,1,0,0,0,7165,7154,1,0,
		0,0,7165,7156,1,0,0,0,7165,7158,1,0,0,0,7165,7160,1,0,0,0,7165,7162,1,
		0,0,0,7166,677,1,0,0,0,7167,7175,5,10,0,0,7168,7169,5,1123,0,0,7169,7175,
		5,1123,0,0,7170,7175,5,192,0,0,7171,7175,5,122,0,0,7172,7173,5,1122,0,
		0,7173,7175,5,1122,0,0,7174,7167,1,0,0,0,7174,7168,1,0,0,0,7174,7170,1,
		0,0,0,7174,7171,1,0,0,0,7174,7172,1,0,0,0,7175,679,1,0,0,0,7176,7177,5,
		1119,0,0,7177,7184,5,1119,0,0,7178,7179,5,1118,0,0,7179,7184,5,1118,0,
		0,7180,7184,5,1123,0,0,7181,7184,5,1124,0,0,7182,7184,5,1122,0,0,7183,
		7176,1,0,0,0,7183,7178,1,0,0,0,7183,7180,1,0,0,0,7183,7181,1,0,0,0,7183,
		7182,1,0,0,0,7184,681,1,0,0,0,7185,7186,7,132,0,0,7186,683,1,0,0,0,7187,
		7188,5,1114,0,0,7188,7193,5,1118,0,0,7189,7190,5,1114,0,0,7190,7191,5,
		1118,0,0,7191,7193,5,1118,0,0,7192,7187,1,0,0,0,7192,7189,1,0,0,0,7193,
		685,1,0,0,0,7194,7195,7,133,0,0,7195,687,1,0,0,0,7196,7197,7,134,0,0,7197,
		689,1,0,0,0,7198,7199,7,135,0,0,7199,691,1,0,0,0,7200,7201,7,136,0,0,7201,
		693,1,0,0,0,7202,7203,7,137,0,0,7203,695,1,0,0,0,7204,7205,7,138,0,0,7205,
		697,1,0,0,0,7206,7207,7,139,0,0,7207,699,1,0,0,0,1047,701,705,712,715,
		718,720,726,729,732,741,783,795,806,823,828,840,867,876,881,887,892,896,
		905,908,911,915,922,925,930,938,943,948,951,953,965,968,972,975,979,982,
		986,989,992,996,999,1003,1009,1015,1021,1028,1035,1038,1042,1047,1053,
		1062,1067,1072,1079,1096,1103,1107,1117,1121,1125,1129,1133,1138,1141,
		1144,1147,1150,1156,1160,1166,1171,1174,1177,1179,1190,1194,1197,1211,
		1214,1218,1221,1225,1228,1232,1235,1239,1242,1245,1249,1252,1256,1262,
		1275,1281,1292,1297,1305,1313,1318,1321,1326,1334,1339,1345,1350,1354,
		1356,1359,1363,1367,1370,1374,1378,1382,1388,1391,1398,1406,1408,1415,
		1421,1429,1432,1439,1442,1444,1450,1456,1473,1480,1487,1499,1504,1507,
		1510,1523,1536,1541,1557,1565,1575,1581,1593,1596,1601,1614,1621,1628,
		1630,1637,1641,1643,1648,1651,1657,1662,1664,1668,1671,1674,1680,1685,
		1687,1692,1699,1701,1708,1713,1717,1720,1728,1736,1738,1746,1750,1753,
		1759,1764,1767,1773,1776,1780,1783,1787,1792,1797,1802,1806,1810,1814,
		1818,1822,1826,1831,1836,1841,1847,1852,1857,1862,1867,1872,1878,1883,
		1888,1893,1898,1903,1908,1913,1920,1925,1930,1935,1939,1944,1952,1957,
		1963,1975,1982,1984,1992,1997,2000,2008,2014,2030,2042,2044,2047,2055,
		2061,2067,2080,2087,2096,2101,2112,2121,2126,2138,2145,2154,2159,2171,
		2178,2187,2192,2199,2208,2213,2215,2220,2228,2237,2241,2244,2248,2253,
		2259,2265,2270,2275,2280,2285,2288,2293,2298,2308,2312,2319,2324,2327,
		2332,2335,2339,2343,2351,2370,2373,2376,2380,2390,2403,2410,2413,2418,
		2425,2428,2431,2442,2445,2449,2457,2460,2465,2473,2479,2483,2487,2492,
		2497,2504,2508,2519,2527,2530,2536,2542,2544,2549,2552,2558,2564,2566,
		2570,2573,2576,2582,2588,2591,2597,2603,2605,2610,2618,2620,2629,2634,
		2642,2646,2654,2664,2669,2676,2680,2684,2716,2720,2732,2735,2744,2761,
		2773,2780,2787,2802,2815,2821,2827,2833,2839,2845,2853,2861,2866,2871,
		2878,2885,2892,2897,2900,2902,2916,2923,2930,2936,2940,2944,2951,2954,
		2959,2966,2973,2977,2982,2989,3002,3005,3010,3015,3019,3025,3034,3043,
		3052,3055,3059,3068,3072,3075,3078,3084,3087,3093,3102,3105,3116,3119,
		3124,3127,3132,3142,3147,3153,3155,3161,3163,3169,3177,3182,3190,3193,
		3198,3201,3206,3214,3222,3228,3236,3241,3249,3252,3256,3259,3267,3273,
		3282,3285,3289,3293,3299,3303,3307,3309,3312,3315,3318,3324,3328,3331,
		3334,3337,3340,3347,3349,3353,3359,3365,3370,3373,3379,3383,3391,3395,
		3398,3401,3410,3414,3417,3421,3425,3428,3431,3436,3442,3446,3456,3462,
		3466,3472,3476,3482,3485,3497,3501,3505,3513,3517,3525,3528,3532,3535,
		3543,3548,3551,3554,3558,3561,3570,3575,3584,3589,3596,3603,3611,3617,
		3625,3628,3631,3638,3641,3648,3651,3659,3665,3676,3679,3683,3693,3699,
		3703,3707,3717,3722,3724,3728,3738,3748,3754,3759,3762,3765,3768,3771,
		3774,3777,3783,3788,3791,3794,3797,3800,3803,3806,3808,3814,3819,3822,
		3825,3828,3831,3834,3838,3844,3848,3856,3860,3863,3865,3878,3881,3888,
		3898,3901,3906,3908,3912,3920,3926,3935,3948,3952,3958,3967,3970,3974,
		3977,3981,3985,3988,3990,3998,4010,4016,4018,4024,4026,4028,4034,4042,
		4050,4054,4058,4067,4072,4092,4097,4103,4110,4115,4124,4127,4131,4135,
		4139,4142,4145,4148,4152,4156,4159,4162,4165,4172,4176,4191,4195,4207,
		4215,4225,4229,4232,4238,4241,4244,4253,4262,4272,4276,4286,4296,4304,
		4307,4316,4319,4323,4328,4332,4341,4344,4375,4378,4381,4437,4442,4470,
		4484,4491,4495,4501,4509,4511,4522,4532,4539,4545,4553,4558,4566,4574,
		4582,4590,4596,4599,4603,4608,4613,4619,4621,4632,4637,4644,4646,4660,
		4666,4671,4676,4682,4689,4697,4705,4710,4716,4719,4727,4734,4743,4746,
		4763,4771,4779,4783,4790,4796,4804,4813,4819,4826,4833,4838,4841,4843,
		4849,4851,4855,4857,4864,4866,4875,4881,4888,4895,4900,4903,4905,4911,
		4913,4917,4919,4926,4928,4933,4940,4949,4954,4963,4970,4975,4978,4980,
		4986,4988,4991,4999,5004,5009,5013,5019,5024,5028,5034,5036,5047,5050,
		5057,5060,5072,5078,5087,5096,5101,5110,5116,5127,5136,5142,5147,5151,
		5154,5166,5173,5178,5196,5204,5209,5215,5225,5235,5245,5251,5260,5266,
		5273,5275,5285,5289,5293,5303,5308,5375,5393,5401,5413,5420,5422,5432,
		5435,5443,5450,5454,5461,5466,5469,5472,5481,5485,5489,5512,5519,5523,
		5530,5537,5540,5556,5559,5569,5573,5579,5582,5587,5591,5598,5601,5607,
		5631,5634,5646,5649,5659,5667,5671,5678,5681,5690,5696,5702,5712,5714,
		5720,5723,5726,5738,5741,5747,5750,5758,5766,5772,5776,5790,5802,5809,
		5812,5819,5826,5831,5844,5855,5861,5866,5879,5881,5886,5890,5893,5895,
		5902,5909,5912,5915,5921,5925,5931,5937,5950,5955,5963,5966,5971,5976,
		5984,5987,5995,5999,6012,6018,6030,6033,6042,6047,6053,6059,6064,6066,
		6069,6073,6075,6079,6085,6088,6091,6098,6106,6110,6130,6137,6139,6146,
		6148,6152,6157,6168,6173,6179,6182,6186,6191,6194,6198,6202,6204,6209,
		6214,6227,6230,6234,6237,6240,6245,6250,6255,6258,6263,6266,6272,6275,
		6279,6284,6289,6294,6299,6302,6307,6312,6317,6323,6328,6333,6338,6341,
		6346,6350,6354,6362,6369,6373,6378,6383,6387,6389,6392,6408,6417,6425,
		6433,6442,6452,6460,6468,6476,6484,6496,6503,6513,6518,6521,6526,6529,
		6533,6548,6556,6563,6568,6573,6606,6610,6618,6622,6631,6639,6644,6652,
		6657,6662,6664,6673,6678,6686,6691,6699,6707,6710,6720,6738,6741,6744,
		6748,6761,6769,6773,6778,6783,6789,6794,6798,6803,6808,6813,6823,6826,
		6830,6834,6841,6845,6874,6879,6883,6886,6889,6892,6895,6906,6920,6929,
		6955,6966,6973,6977,6984,6992,6997,7005,7011,7021,7034,7040,7046,7062,
		7068,7077,7079,7098,7110,7127,7144,7146,7165,7174,7183,7192
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TestAntlr.MySql
